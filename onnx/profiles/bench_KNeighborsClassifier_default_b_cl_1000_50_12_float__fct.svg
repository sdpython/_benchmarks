<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1926" onload="init(evt)" viewBox="0 0 1200 1926" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1926" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1909.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1909.00"> </text><g id="frames"><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.27%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(220,211,34)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.27%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(247,121,13)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.27%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(205,210,25)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.27%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(237,85,4)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.27%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(227,134,36)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.27%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(217,60,12)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (4 samples, 0.21%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(210,62,48)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(247,36,35)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(231,97,42)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(218,171,42)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.21%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(227,95,5)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(239,58,11)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (4 samples, 0.21%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(240,48,34)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(249,68,24)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(205,210,9)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(254,51,24)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.21%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(228,187,2)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(236,154,40)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (4 samples, 0.21%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(245,98,6)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(217,62,14)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(254,174,44)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(211,5,17)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.21%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(239,107,41)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(206,100,44)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (4 samples, 0.21%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(248,48,48)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(206,42,13)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(210,93,28)"/><text x="13.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="11" y="628" width="2" height="15" fill="rgb(231,180,48)"/><text x="14.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.16%)</title><rect x="11" y="644" width="2" height="15" fill="rgb(210,210,41)"/><text x="14.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="11" y="660" width="2" height="15" fill="rgb(224,66,4)"/><text x="14.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (3 samples, 0.16%)</title><rect x="11" y="676" width="2" height="15" fill="rgb(234,29,0)"/><text x="14.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="11" y="692" width="2" height="15" fill="rgb(212,58,38)"/><text x="14.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="11" y="708" width="2" height="15" fill="rgb(224,226,5)"/><text x="14.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="11" y="724" width="2" height="15" fill="rgb(246,131,0)"/><text x="14.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.16%)</title><rect x="11" y="740" width="2" height="15" fill="rgb(216,135,33)"/><text x="14.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="11" y="756" width="2" height="15" fill="rgb(227,60,25)"/><text x="14.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (2 samples, 0.11%)</title><rect x="11" y="772" width="2" height="15" fill="rgb(233,96,11)"/><text x="14.00" y="782.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/__init__.py) (2 samples, 0.11%)</title><rect x="13" y="724" width="2" height="15" fill="rgb(251,227,42)"/><text x="16.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="13" y="740" width="2" height="15" fill="rgb(251,89,25)"/><text x="16.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="13" y="756" width="2" height="15" fill="rgb(236,106,53)"/><text x="16.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="13" y="772" width="2" height="15" fill="rgb(208,162,13)"/><text x="16.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="13" y="788" width="2" height="15" fill="rgb(254,211,34)"/><text x="16.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="13" y="804" width="2" height="15" fill="rgb(211,30,23)"/><text x="16.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/tslibs/__init__.py) (2 samples, 0.11%)</title><rect x="13" y="820" width="2" height="15" fill="rgb(219,65,8)"/><text x="16.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="13" y="836" width="2" height="15" fill="rgb(213,71,3)"/><text x="16.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="13" y="852" width="2" height="15" fill="rgb(254,129,14)"/><text x="16.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="13" y="868" width="2" height="15" fill="rgb(227,84,47)"/><text x="16.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="13" y="884" width="2" height="15" fill="rgb(232,85,40)"/><text x="16.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="13" y="900" width="2" height="15" fill="rgb(213,181,43)"/><text x="16.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="15" y="772" width="1" height="15" fill="rgb(219,130,38)"/><text x="18.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="15" y="788" width="1" height="15" fill="rgb(224,215,27)"/><text x="18.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="15" y="804" width="1" height="15" fill="rgb(247,121,9)"/><text x="18.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="15" y="820" width="1" height="15" fill="rgb(254,142,33)"/><text x="18.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="15" y="836" width="1" height="15" fill="rgb(242,60,15)"/><text x="18.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="15" y="852" width="1" height="15" fill="rgb(225,11,41)"/><text x="18.00" y="862.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/__init__.py) (2 samples, 0.11%)</title><rect x="15" y="868" width="1" height="15" fill="rgb(241,103,40)"/><text x="18.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="15" y="884" width="1" height="15" fill="rgb(235,205,3)"/><text x="18.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="15" y="900" width="1" height="15" fill="rgb(206,186,18)"/><text x="18.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="15" y="916" width="1" height="15" fill="rgb(219,221,5)"/><text x="18.00" y="926.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (7 samples, 0.38%)</title><rect x="13" y="244" width="4" height="15" fill="rgb(213,112,17)"/><text x="16.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="260" width="4" height="15" fill="rgb(215,147,26)"/><text x="16.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="276" width="4" height="15" fill="rgb(212,27,41)"/><text x="16.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="292" width="4" height="15" fill="rgb(205,17,51)"/><text x="16.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.38%)</title><rect x="13" y="308" width="4" height="15" fill="rgb(237,196,50)"/><text x="16.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="324" width="4" height="15" fill="rgb(251,73,23)"/><text x="16.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (7 samples, 0.38%)</title><rect x="13" y="340" width="4" height="15" fill="rgb(246,115,0)"/><text x="16.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="356" width="4" height="15" fill="rgb(207,40,34)"/><text x="16.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="372" width="4" height="15" fill="rgb(243,211,5)"/><text x="16.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="388" width="4" height="15" fill="rgb(210,100,39)"/><text x="16.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.38%)</title><rect x="13" y="404" width="4" height="15" fill="rgb(234,223,9)"/><text x="16.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="420" width="4" height="15" fill="rgb(234,176,12)"/><text x="16.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (7 samples, 0.38%)</title><rect x="13" y="436" width="4" height="15" fill="rgb(249,124,19)"/><text x="16.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="452" width="4" height="15" fill="rgb(232,117,18)"/><text x="16.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.38%)</title><rect x="13" y="468" width="4" height="15" fill="rgb(249,53,49)"/><text x="16.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="484" width="4" height="15" fill="rgb(247,165,11)"/><text x="16.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.32%)</title><rect x="13" y="500" width="4" height="15" fill="rgb(247,71,47)"/><text x="16.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="516" width="4" height="15" fill="rgb(212,167,1)"/><text x="16.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (6 samples, 0.32%)</title><rect x="13" y="532" width="4" height="15" fill="rgb(211,46,45)"/><text x="16.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="548" width="4" height="15" fill="rgb(231,104,4)"/><text x="16.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="564" width="4" height="15" fill="rgb(211,32,29)"/><text x="16.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="580" width="4" height="15" fill="rgb(244,126,18)"/><text x="16.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.32%)</title><rect x="13" y="596" width="4" height="15" fill="rgb(208,11,53)"/><text x="16.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="612" width="4" height="15" fill="rgb(219,197,13)"/><text x="16.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (6 samples, 0.32%)</title><rect x="13" y="628" width="4" height="15" fill="rgb(239,193,38)"/><text x="16.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="644" width="4" height="15" fill="rgb(239,46,21)"/><text x="16.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="660" width="4" height="15" fill="rgb(213,20,46)"/><text x="16.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="676" width="4" height="15" fill="rgb(223,79,28)"/><text x="16.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.32%)</title><rect x="13" y="692" width="4" height="15" fill="rgb(217,225,14)"/><text x="16.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.32%)</title><rect x="13" y="708" width="4" height="15" fill="rgb(243,96,41)"/><text x="16.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (4 samples, 0.21%)</title><rect x="15" y="724" width="2" height="15" fill="rgb(217,97,6)"/><text x="18.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="15" y="740" width="2" height="15" fill="rgb(213,72,0)"/><text x="18.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="15" y="756" width="2" height="15" fill="rgb(228,118,33)"/><text x="18.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="772" width="1" height="15" fill="rgb(213,12,11)"/><text x="19.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="788" width="1" height="15" fill="rgb(212,43,10)"/><text x="19.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="804" width="1" height="15" fill="rgb(249,139,33)"/><text x="19.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (2 samples, 0.11%)</title><rect x="16" y="820" width="1" height="15" fill="rgb(225,202,33)"/><text x="19.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="836" width="1" height="15" fill="rgb(212,84,26)"/><text x="19.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="852" width="1" height="15" fill="rgb(205,97,54)"/><text x="19.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="868" width="1" height="15" fill="rgb(213,50,53)"/><text x="19.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="884" width="1" height="15" fill="rgb(211,111,43)"/><text x="19.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="900" width="1" height="15" fill="rgb(232,44,0)"/><text x="19.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (2 samples, 0.11%)</title><rect x="16" y="916" width="1" height="15" fill="rgb(220,210,23)"/><text x="19.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="932" width="1" height="15" fill="rgb(206,116,44)"/><text x="19.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="948" width="1" height="15" fill="rgb(209,53,43)"/><text x="19.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="964" width="1" height="15" fill="rgb(212,52,36)"/><text x="19.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="980" width="1" height="15" fill="rgb(213,24,15)"/><text x="19.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="996" width="1" height="15" fill="rgb(206,25,14)"/><text x="19.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (2 samples, 0.11%)</title><rect x="16" y="1012" width="1" height="15" fill="rgb(230,112,0)"/><text x="19.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1028" width="1" height="15" fill="rgb(206,71,47)"/><text x="19.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1044" width="1" height="15" fill="rgb(206,192,22)"/><text x="19.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1060" width="1" height="15" fill="rgb(243,133,6)"/><text x="19.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1076" width="1" height="15" fill="rgb(212,163,11)"/><text x="19.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1092" width="1" height="15" fill="rgb(237,108,19)"/><text x="19.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (2 samples, 0.11%)</title><rect x="16" y="1108" width="1" height="15" fill="rgb(246,202,45)"/><text x="19.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1124" width="1" height="15" fill="rgb(244,78,43)"/><text x="19.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1140" width="1" height="15" fill="rgb(248,74,11)"/><text x="19.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1156" width="1" height="15" fill="rgb(219,209,30)"/><text x="19.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1172" width="1" height="15" fill="rgb(242,174,0)"/><text x="19.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1188" width="1" height="15" fill="rgb(219,107,46)"/><text x="19.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (2 samples, 0.11%)</title><rect x="16" y="1204" width="1" height="15" fill="rgb(246,5,0)"/><text x="19.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1220" width="1" height="15" fill="rgb(252,128,21)"/><text x="19.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1236" width="1" height="15" fill="rgb(221,118,4)"/><text x="19.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1252" width="1" height="15" fill="rgb(217,212,13)"/><text x="19.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1268" width="1" height="15" fill="rgb(251,69,34)"/><text x="19.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1284" width="1" height="15" fill="rgb(215,223,52)"/><text x="19.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (2 samples, 0.11%)</title><rect x="16" y="1300" width="1" height="15" fill="rgb(225,137,32)"/><text x="19.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1316" width="1" height="15" fill="rgb(232,58,5)"/><text x="19.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1332" width="1" height="15" fill="rgb(252,30,23)"/><text x="19.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1348" width="1" height="15" fill="rgb(208,24,4)"/><text x="19.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1364" width="1" height="15" fill="rgb(239,39,12)"/><text x="19.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1380" width="1" height="15" fill="rgb(238,37,35)"/><text x="19.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (2 samples, 0.11%)</title><rect x="16" y="1396" width="1" height="15" fill="rgb(247,19,20)"/><text x="19.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1412" width="1" height="15" fill="rgb(209,89,10)"/><text x="19.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1428" width="1" height="15" fill="rgb(247,39,43)"/><text x="19.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1444" width="1" height="15" fill="rgb(205,38,49)"/><text x="19.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1460" width="1" height="15" fill="rgb(207,157,30)"/><text x="19.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1476" width="1" height="15" fill="rgb(206,145,9)"/><text x="19.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (2 samples, 0.11%)</title><rect x="16" y="1492" width="1" height="15" fill="rgb(224,19,32)"/><text x="19.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1508" width="1" height="15" fill="rgb(249,87,35)"/><text x="19.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1524" width="1" height="15" fill="rgb(213,39,20)"/><text x="19.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1540" width="1" height="15" fill="rgb(221,191,51)"/><text x="19.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1556" width="1" height="15" fill="rgb(218,162,31)"/><text x="19.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1572" width="1" height="15" fill="rgb(248,62,27)"/><text x="19.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (2 samples, 0.11%)</title><rect x="16" y="1588" width="1" height="15" fill="rgb(243,19,49)"/><text x="19.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1604" width="1" height="15" fill="rgb(233,123,12)"/><text x="19.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1620" width="1" height="15" fill="rgb(208,88,28)"/><text x="19.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1636" width="1" height="15" fill="rgb(223,148,54)"/><text x="19.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1652" width="1" height="15" fill="rgb(217,22,5)"/><text x="19.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1668" width="1" height="15" fill="rgb(221,61,32)"/><text x="19.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py) (2 samples, 0.11%)</title><rect x="16" y="1684" width="1" height="15" fill="rgb(241,114,19)"/><text x="19.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1700" width="1" height="15" fill="rgb(242,112,32)"/><text x="19.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1716" width="1" height="15" fill="rgb(234,208,5)"/><text x="19.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1732" width="1" height="15" fill="rgb(242,121,8)"/><text x="19.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1748" width="1" height="15" fill="rgb(246,141,34)"/><text x="19.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1764" width="1" height="15" fill="rgb(206,2,33)"/><text x="19.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py) (2 samples, 0.11%)</title><rect x="16" y="1780" width="1" height="15" fill="rgb(231,173,41)"/><text x="19.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1796" width="1" height="15" fill="rgb(240,33,9)"/><text x="19.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1812" width="1" height="15" fill="rgb(245,85,18)"/><text x="19.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1828" width="1" height="15" fill="rgb(248,66,36)"/><text x="19.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="16" y="1844" width="1" height="15" fill="rgb(225,191,2)"/><text x="19.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="16" y="1860" width="1" height="15" fill="rgb(205,82,44)"/><text x="19.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/text.py) (2 samples, 0.11%)</title><rect x="16" y="1876" width="1" height="15" fill="rgb(243,26,32)"/><text x="19.00" y="1886.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.70%)</title><rect x="10" y="68" width="8" height="15" fill="rgb(230,73,10)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.70%)</title><rect x="10" y="84" width="8" height="15" fill="rgb(235,197,2)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.70%)</title><rect x="10" y="100" width="8" height="15" fill="rgb(219,55,33)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 0.70%)</title><rect x="10" y="116" width="8" height="15" fill="rgb(236,21,53)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.70%)</title><rect x="10" y="132" width="8" height="15" fill="rgb(252,196,1)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py) (13 samples, 0.70%)</title><rect x="10" y="148" width="8" height="15" fill="rgb(219,147,49)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.70%)</title><rect x="10" y="164" width="8" height="15" fill="rgb(206,117,30)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.70%)</title><rect x="10" y="180" width="8" height="15" fill="rgb(228,214,5)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.43%)</title><rect x="13" y="196" width="5" height="15" fill="rgb(254,59,49)"/><text x="16.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.43%)</title><rect x="13" y="212" width="5" height="15" fill="rgb(208,185,34)"/><text x="16.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.43%)</title><rect x="13" y="228" width="5" height="15" fill="rgb(218,151,1)"/><text x="16.00" y="238.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="20" y="340" width="2" height="15" fill="rgb(208,40,50)"/><text x="23.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="20" y="356" width="2" height="15" fill="rgb(210,227,54)"/><text x="23.00" y="366.50"></text></g><g><title>0x7fb2e0f21dc9 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="20" y="372" width="2" height="15" fill="rgb(249,3,44)"/><text x="23.00" y="382.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="24" y="452" width="1" height="15" fill="rgb(234,181,1)"/><text x="27.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.27%)</title><rect x="23" y="436" width="4" height="15" fill="rgb(243,128,38)"/><text x="26.00" y="446.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="25" y="452" width="2" height="15" fill="rgb(224,134,38)"/><text x="28.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 2.31%)</title><rect x="28" y="436" width="27" height="15" fill="rgb(223,116,47)"/><text x="31.00" y="446.50">o..</text></g><g><title>0x7fb2e0f21d94 (libc-2.29.so) (43 samples, 2.31%)</title><rect x="28" y="452" width="27" height="15" fill="rgb(213,135,2)"/><text x="31.00" y="462.50">0..</text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (669 samples, 35.91%)</title><rect x="56" y="436" width="423" height="15" fill="rgb(222,174,17)"/><text x="59.00" y="446.50">onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (644 samples, 34.57%)</title><rect x="72" y="452" width="407" height="15" fill="rgb(218,209,52)"/><text x="75.00" y="462.50">onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 2.25%)</title><rect x="453" y="468" width="26" height="15" fill="rgb(249,67,48)"/><text x="456.00" y="478.50">s..</text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.21%)</title><rect x="477" y="484" width="2" height="15" fill="rgb(215,117,11)"/><text x="480.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.21%)</title><rect x="477" y="500" width="2" height="15" fill="rgb(211,146,43)"/><text x="480.00" y="510.50"></text></g><g><title>0x7fb2e0f03028 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="478" y="516" width="1" height="15" fill="rgb(232,11,35)"/><text x="481.00" y="526.50"></text></g><g><title>0x7fb2e0f00b9b (libc-2.29.so) (2 samples, 0.11%)</title><rect x="478" y="532" width="1" height="15" fill="rgb(230,33,0)"/><text x="481.00" y="542.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (104 samples, 5.58%)</title><rect x="480" y="468" width="66" height="15" fill="rgb(248,185,3)"/><text x="483.00" y="478.50">onnxrun..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 1.07%)</title><rect x="533" y="484" width="13" height="15" fill="rgb(236,137,52)"/><text x="536.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (831 samples, 44.61%)</title><rect x="22" y="340" width="526" height="15" fill="rgb(247,215,52)"/><text x="25.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_sta..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (831 samples, 44.61%)</title><rect x="22" y="356" width="526" height="15" fill="rgb(249,163,6)"/><text x="25.00" y="366.50">onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_st..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (831 samples, 44.61%)</title><rect x="22" y="372" width="526" height="15" fill="rgb(221,193,0)"/><text x="25.00" y="382.50">onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (831 samples, 44.61%)</title><rect x="22" y="388" width="526" height="15" fill="rgb(229,116,10)"/><text x="25.00" y="398.50">onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (831 samples, 44.61%)</title><rect x="22" y="404" width="526" height="15" fill="rgb(231,101,24)"/><text x="25.00" y="414.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybin..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (830 samples, 44.55%)</title><rect x="22" y="420" width="526" height="15" fill="rgb(208,229,48)"/><text x="25.00" y="430.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 5.80%)</title><rect x="479" y="436" width="69" height="15" fill="rgb(234,164,10)"/><text x="482.00" y="446.50">onnxrun..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (107 samples, 5.74%)</title><rect x="480" y="452" width="68" height="15" fill="rgb(211,75,25)"/><text x="483.00" y="462.50">onnxrun..</text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="547" y="468" width="1" height="15" fill="rgb(226,128,38)"/><text x="550.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="547" y="484" width="1" height="15" fill="rgb(219,125,14)"/><text x="550.00" y="494.50"></text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="548" y="340" width="2" height="15" fill="rgb(225,76,24)"/><text x="551.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.11%)</title><rect x="575" y="372" width="1" height="15" fill="rgb(238,33,29)"/><text x="578.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="575" y="388" width="1" height="15" fill="rgb(224,176,3)"/><text x="578.00" y="398.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 2.36%)</title><rect x="550" y="340" width="28" height="15" fill="rgb(247,48,12)"/><text x="553.00" y="350.50">o..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 2.36%)</title><rect x="550" y="356" width="28" height="15" fill="rgb(210,165,36)"/><text x="553.00" y="366.50">o..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="577" y="372" width="1" height="15" fill="rgb(238,196,34)"/><text x="580.00" y="382.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 1.02%)</title><rect x="578" y="340" width="12" height="15" fill="rgb(248,195,39)"/><text x="581.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 1.02%)</title><rect x="578" y="356" width="12" height="15" fill="rgb(228,118,33)"/><text x="581.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.11%)</title><rect x="590" y="356" width="2" height="15" fill="rgb(221,205,6)"/><text x="593.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="590" y="372" width="2" height="15" fill="rgb(245,24,18)"/><text x="593.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (904 samples, 48.52%)</title><rect x="20" y="260" width="572" height="15" fill="rgb(227,138,51)"/><text x="23.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_stat..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (904 samples, 48.52%)</title><rect x="20" y="276" width="572" height="15" fill="rgb(246,78,49)"/><text x="23.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_stat..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (904 samples, 48.52%)</title><rect x="20" y="292" width="572" height="15" fill="rgb(239,209,9)"/><text x="23.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state...</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (904 samples, 48.52%)</title><rect x="20" y="308" width="572" height="15" fill="rgb(228,10,46)"/><text x="23.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_st..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (904 samples, 48.52%)</title><rect x="20" y="324" width="572" height="15" fill="rgb(246,133,27)"/><text x="23.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind1..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.16%)</title><rect x="590" y="340" width="2" height="15" fill="rgb(232,38,23)"/><text x="593.00" y="350.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.43%)</title><rect x="593" y="260" width="5" height="15" fill="rgb(209,40,21)"/><text x="596.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="595" y="276" width="3" height="15" fill="rgb(239,229,35)"/><text x="598.00" y="286.50"></text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (917 samples, 49.22%)</title><rect x="18" y="68" width="581" height="15" fill="rgb(227,141,28)"/><text x="21.00" y="78.50">profile_ort (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (917 samples, 49.22%)</title><rect x="18" y="84" width="581" height="15" fill="rgb(230,42,43)"/><text x="21.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py)</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (917 samples, 49.22%)</title><rect x="18" y="100" width="581" height="15" fill="rgb(221,96,26)"/><text x="21.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (916 samples, 49.17%)</title><rect x="18" y="116" width="581" height="15" fill="rgb(219,183,20)"/><text x="21.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (916 samples, 49.17%)</title><rect x="18" y="132" width="581" height="15" fill="rgb(245,30,9)"/><text x="21.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (916 samples, 49.17%)</title><rect x="18" y="148" width="581" height="15" fill="rgb(232,61,47)"/><text x="21.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (916 samples, 49.17%)</title><rect x="18" y="164" width="581" height="15" fill="rgb(238,78,43)"/><text x="21.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (915 samples, 49.11%)</title><rect x="19" y="180" width="580" height="15" fill="rgb(234,200,38)"/><text x="22.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (915 samples, 49.11%)</title><rect x="19" y="196" width="580" height="15" fill="rgb(248,146,6)"/><text x="22.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (914 samples, 49.06%)</title><rect x="20" y="212" width="579" height="15" fill="rgb(246,25,4)"/><text x="23.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (914 samples, 49.06%)</title><rect x="20" y="228" width="579" height="15" fill="rgb(247,32,12)"/><text x="23.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(p..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (914 samples, 49.06%)</title><rect x="20" y="244" width="579" height="15" fill="rgb(221,159,32)"/><text x="23.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::..</text></g><g><title>PyArray_AssignFromSequence (ctors.c) (3 samples, 0.16%)</title><rect x="604" y="276" width="2" height="15" fill="rgb(241,76,4)"/><text x="607.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (3 samples, 0.16%)</title><rect x="604" y="292" width="2" height="15" fill="rgb(211,146,6)"/><text x="607.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (2 samples, 0.11%)</title><rect x="605" y="308" width="1" height="15" fill="rgb(212,177,53)"/><text x="608.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (2 samples, 0.11%)</title><rect x="605" y="324" width="1" height="15" fill="rgb(236,198,13)"/><text x="608.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (2 samples, 0.11%)</title><rect x="605" y="340" width="1" height="15" fill="rgb(234,26,4)"/><text x="608.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (6 samples, 0.32%)</title><rect x="606" y="292" width="4" height="15" fill="rgb(243,166,45)"/><text x="609.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (6 samples, 0.32%)</title><rect x="606" y="308" width="4" height="15" fill="rgb(226,140,1)"/><text x="609.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (6 samples, 0.32%)</title><rect x="606" y="324" width="4" height="15" fill="rgb(236,1,53)"/><text x="609.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (3 samples, 0.16%)</title><rect x="608" y="340" width="2" height="15" fill="rgb(232,55,44)"/><text x="611.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (19 samples, 1.02%)</title><rect x="602" y="212" width="12" height="15" fill="rgb(234,92,26)"/><text x="605.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (17 samples, 0.91%)</title><rect x="604" y="228" width="10" height="15" fill="rgb(224,26,0)"/><text x="607.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (16 samples, 0.86%)</title><rect x="604" y="244" width="10" height="15" fill="rgb(235,166,29)"/><text x="607.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c) (16 samples, 0.86%)</title><rect x="604" y="260" width="10" height="15" fill="rgb(209,139,47)"/><text x="607.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (13 samples, 0.70%)</title><rect x="606" y="276" width="8" height="15" fill="rgb(247,71,36)"/><text x="609.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c) (7 samples, 0.38%)</title><rect x="610" y="292" width="4" height="15" fill="rgb(210,152,1)"/><text x="613.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c) (4 samples, 0.21%)</title><rect x="612" y="308" width="2" height="15" fill="rgb(207,19,38)"/><text x="615.00" y="318.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.16%)</title><rect x="625" y="228" width="1" height="15" fill="rgb(220,181,9)"/><text x="628.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.11%)</title><rect x="627" y="228" width="1" height="15" fill="rgb(252,164,3)"/><text x="630.00" y="238.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (3 samples, 0.16%)</title><rect x="635" y="292" width="2" height="15" fill="rgb(221,115,38)"/><text x="638.00" y="302.50"></text></g><g><title>array_reshape (methods.c) (6 samples, 0.32%)</title><rect x="635" y="276" width="3" height="15" fill="rgb(230,179,35)"/><text x="638.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (2 samples, 0.11%)</title><rect x="637" y="292" width="1" height="15" fill="rgb(246,70,14)"/><text x="640.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (2 samples, 0.11%)</title><rect x="637" y="308" width="1" height="15" fill="rgb(215,164,1)"/><text x="640.00" y="318.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (12 samples, 0.64%)</title><rect x="633" y="260" width="7" height="15" fill="rgb(246,41,35)"/><text x="636.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (3 samples, 0.16%)</title><rect x="638" y="276" width="2" height="15" fill="rgb(245,197,32)"/><text x="641.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (3 samples, 0.16%)</title><rect x="638" y="292" width="2" height="15" fill="rgb(215,110,48)"/><text x="641.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (20 samples, 1.07%)</title><rect x="628" y="228" width="13" height="15" fill="rgb(251,223,53)"/><text x="631.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (17 samples, 0.91%)</title><rect x="630" y="244" width="11" height="15" fill="rgb(218,136,21)"/><text x="633.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.16%)</title><rect x="653" y="260" width="2" height="15" fill="rgb(226,93,43)"/><text x="656.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (3 samples, 0.16%)</title><rect x="687" y="276" width="1" height="15" fill="rgb(254,103,13)"/><text x="690.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (2 samples, 0.11%)</title><rect x="696" y="292" width="1" height="15" fill="rgb(250,139,49)"/><text x="699.00" y="302.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (41 samples, 2.20%)</title><rect x="709" y="436" width="26" height="15" fill="rgb(227,211,19)"/><text x="712.00" y="446.50">_..</text></g><g><title>FLOAT_subtract (loops.c.src) (66 samples, 3.54%)</title><rect x="707" y="388" width="42" height="15" fill="rgb(253,184,22)"/><text x="710.00" y="398.50">FLO..</text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (65 samples, 3.49%)</title><rect x="708" y="404" width="41" height="15" fill="rgb(251,125,42)"/><text x="711.00" y="414.50">run..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (65 samples, 3.49%)</title><rect x="708" y="420" width="41" height="15" fill="rgb(234,49,14)"/><text x="711.00" y="430.50">sse..</text></g><g><title>_mm_sub_ps (xmmintrin.h) (22 samples, 1.18%)</title><rect x="735" y="436" width="14" height="15" fill="rgb(248,102,18)"/><text x="738.00" y="446.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (3 samples, 0.16%)</title><rect x="751" y="404" width="1" height="15" fill="rgb(244,18,16)"/><text x="754.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (3 samples, 0.16%)</title><rect x="751" y="420" width="1" height="15" fill="rgb(212,30,37)"/><text x="754.00" y="430.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (8 samples, 0.43%)</title><rect x="749" y="388" width="5" height="15" fill="rgb(217,147,7)"/><text x="752.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (2 samples, 0.11%)</title><rect x="753" y="404" width="1" height="15" fill="rgb(224,151,50)"/><text x="756.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (2 samples, 0.11%)</title><rect x="753" y="420" width="1" height="15" fill="rgb(229,15,24)"/><text x="756.00" y="430.50"></text></g><g><title>0x7fb2e0f21f42 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="756" y="436" width="2" height="15" fill="rgb(234,164,28)"/><text x="759.00" y="446.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (6 samples, 0.32%)</title><rect x="755" y="388" width="4" height="15" fill="rgb(237,121,31)"/><text x="758.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (6 samples, 0.32%)</title><rect x="755" y="404" width="4" height="15" fill="rgb(217,28,21)"/><text x="758.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (6 samples, 0.32%)</title><rect x="755" y="420" width="4" height="15" fill="rgb(210,99,32)"/><text x="758.00" y="430.50"></text></g><g><title>0x7fb2e0f21f36 (libc-2.29.so) (3 samples, 0.16%)</title><rect x="771" y="436" width="2" height="15" fill="rgb(219,218,0)"/><text x="774.00" y="446.50"></text></g><g><title>0x7fb2e0f21f46 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="774" y="436" width="1" height="15" fill="rgb(218,145,15)"/><text x="777.00" y="446.50"></text></g><g><title>0x7fb2e0f21f58 (libc-2.29.so) (4 samples, 0.21%)</title><rect x="777" y="436" width="2" height="15" fill="rgb(214,139,7)"/><text x="780.00" y="446.50"></text></g><g><title>0x7fb2e0f21f5d (libc-2.29.so) (4 samples, 0.21%)</title><rect x="779" y="436" width="3" height="15" fill="rgb(231,69,22)"/><text x="782.00" y="446.50"></text></g><g><title>0x7fb2e0f21f6e (libc-2.29.so) (4 samples, 0.21%)</title><rect x="782" y="436" width="3" height="15" fill="rgb(205,160,20)"/><text x="785.00" y="446.50"></text></g><g><title>0x7fb2e0f21f76 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="785" y="436" width="1" height="15" fill="rgb(210,182,43)"/><text x="788.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (40 samples, 2.15%)</title><rect x="761" y="404" width="26" height="15" fill="rgb(229,208,5)"/><text x="764.00" y="414.50">n..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (36 samples, 1.93%)</title><rect x="764" y="420" width="23" height="15" fill="rgb(247,160,47)"/><text x="767.00" y="430.50">P..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (136 samples, 7.30%)</title><rect x="702" y="308" width="87" height="15" fill="rgb(241,99,35)"/><text x="705.00" y="318.50">_run (mlpr..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (133 samples, 7.14%)</title><rect x="704" y="324" width="85" height="15" fill="rgb(213,36,21)"/><text x="707.00" y="334.50">ufunc_gene..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (132 samples, 7.09%)</title><rect x="705" y="340" width="84" height="15" fill="rgb(243,198,45)"/><text x="708.00" y="350.50">PyUFunc_G..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (128 samples, 6.87%)</title><rect x="707" y="356" width="82" height="15" fill="rgb(214,28,42)"/><text x="710.00" y="366.50">execute_l..</text></g><g><title>iterator_loop (ufunc_object.c) (128 samples, 6.87%)</title><rect x="707" y="372" width="82" height="15" fill="rgb(245,66,10)"/><text x="710.00" y="382.50">iterator_..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (46 samples, 2.47%)</title><rect x="759" y="388" width="30" height="15" fill="rgb(211,137,15)"/><text x="762.00" y="398.50">np..</text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (3 samples, 0.16%)</title><rect x="787" y="404" width="2" height="15" fill="rgb(209,214,54)"/><text x="790.00" y="414.50"></text></g><g><title>0x7fb2e0f21d94 (libc-2.29.so) (38 samples, 2.04%)</title><rect x="794" y="388" width="24" height="15" fill="rgb(245,207,41)"/><text x="797.00" y="398.50">0..</text></g><g><title>PyArray_AssignArray (array_assign_array.c) (42 samples, 2.25%)</title><rect x="794" y="356" width="26" height="15" fill="rgb(210,172,2)"/><text x="797.00" y="366.50">P..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (41 samples, 2.20%)</title><rect x="794" y="372" width="26" height="15" fill="rgb(239,199,39)"/><text x="797.00" y="382.50">r..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (51 samples, 2.74%)</title><rect x="789" y="308" width="32" height="15" fill="rgb(233,90,19)"/><text x="792.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c) (44 samples, 2.36%)</title><rect x="793" y="324" width="28" height="15" fill="rgb(228,182,45)"/><text x="796.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c) (43 samples, 2.31%)</title><rect x="794" y="340" width="27" height="15" fill="rgb(241,13,38)"/><text x="797.00" y="350.50">P..</text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (5 samples, 0.27%)</title><rect x="842" y="388" width="4" height="15" fill="rgb(217,171,29)"/><text x="845.00" y="398.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (3 samples, 0.16%)</title><rect x="851" y="420" width="2" height="15" fill="rgb(226,177,30)"/><text x="854.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (3 samples, 0.16%)</title><rect x="851" y="436" width="2" height="15" fill="rgb(233,170,14)"/><text x="854.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (3 samples, 0.16%)</title><rect x="851" y="452" width="2" height="15" fill="rgb(239,202,44)"/><text x="854.00" y="462.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (3 samples, 0.16%)</title><rect x="855" y="468" width="2" height="15" fill="rgb(217,146,20)"/><text x="858.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="856" y="484" width="1" height="15" fill="rgb(224,126,18)"/><text x="859.00" y="494.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (7 samples, 0.38%)</title><rect x="854" y="452" width="4" height="15" fill="rgb(250,48,21)"/><text x="857.00" y="462.50"></text></g><g><title>0x7fb2e0f032b6 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="860" y="580" width="1" height="15" fill="rgb(254,16,15)"/><text x="863.00" y="590.50"></text></g><g><title>npy_alloc_cache (alloc.c) (6 samples, 0.32%)</title><rect x="859" y="516" width="4" height="15" fill="rgb(233,123,24)"/><text x="862.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (6 samples, 0.32%)</title><rect x="859" y="532" width="4" height="15" fill="rgb(225,35,3)"/><text x="862.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (5 samples, 0.27%)</title><rect x="860" y="548" width="3" height="15" fill="rgb(225,208,16)"/><text x="863.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.27%)</title><rect x="860" y="564" width="3" height="15" fill="rgb(239,43,34)"/><text x="863.00" y="574.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (8 samples, 0.43%)</title><rect x="858" y="452" width="5" height="15" fill="rgb(217,19,14)"/><text x="861.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (8 samples, 0.43%)</title><rect x="858" y="468" width="5" height="15" fill="rgb(212,22,13)"/><text x="861.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (7 samples, 0.38%)</title><rect x="859" y="484" width="4" height="15" fill="rgb(227,3,32)"/><text x="862.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.38%)</title><rect x="859" y="500" width="4" height="15" fill="rgb(237,48,18)"/><text x="862.00" y="510.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (6 samples, 0.32%)</title><rect x="863" y="452" width="4" height="15" fill="rgb(212,75,8)"/><text x="866.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (5 samples, 0.27%)</title><rect x="864" y="468" width="3" height="15" fill="rgb(238,59,10)"/><text x="867.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (3 samples, 0.16%)</title><rect x="865" y="484" width="2" height="15" fill="rgb(250,154,13)"/><text x="868.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src) (82 samples, 4.40%)</title><rect x="873" y="468" width="52" height="15" fill="rgb(207,59,50)"/><text x="876.00" y="478.50">FLOAT..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (75 samples, 4.03%)</title><rect x="877" y="484" width="48" height="15" fill="rgb(218,46,23)"/><text x="880.00" y="494.50">pair..</text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (3 samples, 0.16%)</title><rect x="929" y="484" width="2" height="15" fill="rgb(254,115,3)"/><text x="932.00" y="494.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.11%)</title><rect x="931" y="484" width="1" height="15" fill="rgb(211,223,20)"/><text x="934.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (127 samples, 6.82%)</title><rect x="853" y="436" width="81" height="15" fill="rgb(225,13,2)"/><text x="856.00" y="446.50">PyUFunc_R..</text></g><g><title>reduce_loop (ufunc_object.c) (104 samples, 5.58%)</title><rect x="868" y="452" width="66" height="15" fill="rgb(212,74,13)"/><text x="871.00" y="462.50">reduce_..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (14 samples, 0.75%)</title><rect x="925" y="468" width="9" height="15" fill="rgb(241,62,52)"/><text x="928.00" y="478.50"></text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (2 samples, 0.11%)</title><rect x="932" y="484" width="2" height="15" fill="rgb(233,65,2)"/><text x="935.00" y="494.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (129 samples, 6.92%)</title><rect x="853" y="420" width="82" height="15" fill="rgb(209,106,19)"/><text x="856.00" y="430.50">PyUFunc_R..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (2 samples, 0.11%)</title><rect x="934" y="436" width="1" height="15" fill="rgb(226,207,49)"/><text x="937.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.11%)</title><rect x="934" y="452" width="1" height="15" fill="rgb(214,95,33)"/><text x="937.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (2 samples, 0.11%)</title><rect x="934" y="468" width="1" height="15" fill="rgb(250,180,18)"/><text x="937.00" y="478.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (175 samples, 9.39%)</title><rect x="825" y="324" width="111" height="15" fill="rgb(214,114,23)"/><text x="828.00" y="334.50">sum (&lt;__array..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (169 samples, 9.07%)</title><rect x="829" y="340" width="107" height="15" fill="rgb(210,52,31)"/><text x="832.00" y="350.50">array_impleme..</text></g><g><title>sum (numpy/core/fromnumeric.py) (166 samples, 8.91%)</title><rect x="831" y="356" width="105" height="15" fill="rgb(235,164,29)"/><text x="834.00" y="366.50">sum (numpy/c..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (158 samples, 8.48%)</title><rect x="836" y="372" width="100" height="15" fill="rgb(244,124,37)"/><text x="839.00" y="382.50">_wrapreducti..</text></g><g><title>ufunc_reduce (ufunc_object.c) (143 samples, 7.68%)</title><rect x="846" y="388" width="90" height="15" fill="rgb(220,159,4)"/><text x="849.00" y="398.50">ufunc_redu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (142 samples, 7.62%)</title><rect x="846" y="404" width="90" height="15" fill="rgb(211,189,5)"/><text x="849.00" y="414.50">PyUFunc_Ge..</text></g><g><title>unicode_dealloc (python3.7) (2 samples, 0.11%)</title><rect x="935" y="420" width="1" height="15" fill="rgb(249,85,44)"/><text x="938.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (4 samples, 0.21%)</title><rect x="937" y="372" width="3" height="15" fill="rgb(236,221,17)"/><text x="940.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.21%)</title><rect x="937" y="388" width="3" height="15" fill="rgb(230,159,19)"/><text x="940.00" y="398.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (2 samples, 0.11%)</title><rect x="940" y="372" width="1" height="15" fill="rgb(250,147,7)"/><text x="943.00" y="382.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h) (27 samples, 1.45%)</title><rect x="945" y="404" width="17" height="15" fill="rgb(221,149,44)"/><text x="948.00" y="414.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (21 samples, 1.13%)</title><rect x="962" y="404" width="13" height="15" fill="rgb(239,14,9)"/><text x="965.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (62 samples, 3.33%)</title><rect x="937" y="356" width="39" height="15" fill="rgb(234,28,35)"/><text x="940.00" y="366.50">exe..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (55 samples, 2.95%)</title><rect x="941" y="372" width="35" height="15" fill="rgb(226,186,33)"/><text x="944.00" y="382.50">tr..</text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (50 samples, 2.68%)</title><rect x="944" y="388" width="32" height="15" fill="rgb(206,75,13)"/><text x="947.00" y="398.50">ss..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (5 samples, 0.27%)</title><rect x="977" y="356" width="3" height="15" fill="rgb(229,38,9)"/><text x="980.00" y="366.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (533 samples, 28.61%)</title><rect x="644" y="244" width="337" height="15" fill="rgb(231,169,44)"/><text x="647.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (515 samples, 27.64%)</title><rect x="655" y="260" width="326" height="15" fill="rgb(237,133,0)"/><text x="658.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (462 samples, 24.80%)</title><rect x="688" y="276" width="293" height="15" fill="rgb(209,41,30)"/><text x="691.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (448 samples, 24.05%)</title><rect x="697" y="292" width="284" height="15" fill="rgb(207,16,36)"/><text x="700.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (253 samples, 13.58%)</title><rect x="821" y="308" width="160" height="15" fill="rgb(229,228,15)"/><text x="824.00" y="318.50">_run (mlprodict/onnx..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (71 samples, 3.81%)</title><rect x="936" y="324" width="45" height="15" fill="rgb(249,67,44)"/><text x="939.00" y="334.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (70 samples, 3.76%)</title><rect x="937" y="340" width="44" height="15" fill="rgb(226,59,49)"/><text x="940.00" y="350.50">PyUF..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (2 samples, 0.11%)</title><rect x="980" y="356" width="1" height="15" fill="rgb(240,192,17)"/><text x="983.00" y="366.50"></text></g><g><title>0x7fb2e0123820 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="980" y="372" width="1" height="15" fill="rgb(215,171,33)"/><text x="983.00" y="382.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (539 samples, 28.93%)</title><rect x="641" y="228" width="341" height="15" fill="rgb(253,58,52)"/><text x="644.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.11%)</title><rect x="981" y="244" width="1" height="15" fill="rgb(214,55,23)"/><text x="984.00" y="254.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (3 samples, 0.16%)</title><rect x="982" y="276" width="2" height="15" fill="rgb(229,14,27)"/><text x="985.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.16%)</title><rect x="982" y="292" width="2" height="15" fill="rgb(235,71,51)"/><text x="985.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (3 samples, 0.16%)</title><rect x="982" y="308" width="2" height="15" fill="rgb(233,120,44)"/><text x="985.00" y="318.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.11%)</title><rect x="985" y="356" width="1" height="15" fill="rgb(249,171,6)"/><text x="988.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.11%)</title><rect x="985" y="372" width="1" height="15" fill="rgb(215,70,52)"/><text x="988.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (586 samples, 31.45%)</title><rect x="616" y="212" width="371" height="15" fill="rgb(217,88,51)"/><text x="619.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (7 samples, 0.38%)</title><rect x="982" y="228" width="5" height="15" fill="rgb(236,128,1)"/><text x="985.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.38%)</title><rect x="982" y="244" width="5" height="15" fill="rgb(253,29,13)"/><text x="985.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (7 samples, 0.38%)</title><rect x="982" y="260" width="5" height="15" fill="rgb(211,193,11)"/><text x="985.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (4 samples, 0.21%)</title><rect x="984" y="276" width="3" height="15" fill="rgb(233,54,15)"/><text x="987.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.21%)</title><rect x="984" y="292" width="3" height="15" fill="rgb(223,88,22)"/><text x="987.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (4 samples, 0.21%)</title><rect x="984" y="308" width="3" height="15" fill="rgb(233,141,9)"/><text x="987.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (3 samples, 0.16%)</title><rect x="985" y="324" width="2" height="15" fill="rgb(254,110,3)"/><text x="988.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (3 samples, 0.16%)</title><rect x="985" y="340" width="2" height="15" fill="rgb(242,201,12)"/><text x="988.00" y="350.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src) (6 samples, 0.32%)</title><rect x="989" y="372" width="4" height="15" fill="rgb(226,143,50)"/><text x="992.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (6 samples, 0.32%)</title><rect x="989" y="388" width="4" height="15" fill="rgb(209,33,34)"/><text x="992.00" y="398.50"></text></g><g><title>amedian3_swap_float (selection.c.src) (3 samples, 0.16%)</title><rect x="993" y="388" width="2" height="15" fill="rgb(245,90,53)"/><text x="996.00" y="398.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (47 samples, 2.52%)</title><rect x="987" y="260" width="30" height="15" fill="rgb(214,226,24)"/><text x="990.00" y="270.50">ar..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (47 samples, 2.52%)</title><rect x="987" y="276" width="30" height="15" fill="rgb(253,81,42)"/><text x="990.00" y="286.50">ar..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (47 samples, 2.52%)</title><rect x="987" y="292" width="30" height="15" fill="rgb(252,125,24)"/><text x="990.00" y="302.50">ar..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (47 samples, 2.52%)</title><rect x="987" y="308" width="30" height="15" fill="rgb(233,95,54)"/><text x="990.00" y="318.50">_w..</text></g><g><title>array_argpartition (methods.c) (47 samples, 2.52%)</title><rect x="987" y="324" width="30" height="15" fill="rgb(237,175,0)"/><text x="990.00" y="334.50">ar..</text></g><g><title>PyArray_ArgPartition (item_selection.c) (47 samples, 2.52%)</title><rect x="987" y="340" width="30" height="15" fill="rgb(225,222,49)"/><text x="990.00" y="350.50">Py..</text></g><g><title>_new_argsortlike (item_selection.c) (47 samples, 2.52%)</title><rect x="987" y="356" width="30" height="15" fill="rgb(221,9,9)"/><text x="990.00" y="366.50">_n..</text></g><g><title>aintroselect_float (selection.c.src) (39 samples, 2.09%)</title><rect x="993" y="372" width="24" height="15" fill="rgb(222,27,1)"/><text x="996.00" y="382.50">a..</text></g><g><title>aunguarded_partition_float (selection.c.src) (35 samples, 1.88%)</title><rect x="995" y="388" width="22" height="15" fill="rgb(216,188,14)"/><text x="998.00" y="398.50">a..</text></g><g><title>FLOAT_LT (npysort_common.h) (18 samples, 0.97%)</title><rect x="1006" y="404" width="11" height="15" fill="rgb(248,88,7)"/><text x="1009.00" y="414.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (3 samples, 0.16%)</title><rect x="1017" y="260" width="2" height="15" fill="rgb(249,221,17)"/><text x="1020.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.16%)</title><rect x="1017" y="276" width="2" height="15" fill="rgb(230,150,22)"/><text x="1020.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (3 samples, 0.16%)</title><rect x="1017" y="292" width="2" height="15" fill="rgb(211,54,22)"/><text x="1020.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.16%)</title><rect x="1017" y="308" width="2" height="15" fill="rgb(244,57,38)"/><text x="1020.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (3 samples, 0.16%)</title><rect x="1017" y="324" width="2" height="15" fill="rgb(209,28,38)"/><text x="1020.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (3 samples, 0.16%)</title><rect x="1017" y="340" width="2" height="15" fill="rgb(232,209,39)"/><text x="1020.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (3 samples, 0.16%)</title><rect x="1017" y="356" width="2" height="15" fill="rgb(221,137,48)"/><text x="1020.00" y="366.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (3 samples, 0.16%)</title><rect x="1019" y="276" width="2" height="15" fill="rgb(236,89,6)"/><text x="1022.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h) (2 samples, 0.11%)</title><rect x="1020" y="292" width="1" height="15" fill="rgb(210,222,22)"/><text x="1023.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (59 samples, 3.17%)</title><rect x="987" y="212" width="38" height="15" fill="rgb(213,135,44)"/><text x="990.00" y="222.50">_ru..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (59 samples, 3.17%)</title><rect x="987" y="228" width="38" height="15" fill="rgb(237,31,39)"/><text x="990.00" y="238.50">_co..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (59 samples, 3.17%)</title><rect x="987" y="244" width="38" height="15" fill="rgb(242,7,54)"/><text x="990.00" y="254.50">top..</text></g><g><title>array_subscript (mapping.c) (9 samples, 0.48%)</title><rect x="1019" y="260" width="6" height="15" fill="rgb(231,154,50)"/><text x="1022.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (5 samples, 0.27%)</title><rect x="1022" y="276" width="3" height="15" fill="rgb(219,72,46)"/><text x="1025.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (3 samples, 0.16%)</title><rect x="1025" y="228" width="2" height="15" fill="rgb(215,149,51)"/><text x="1028.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (3 samples, 0.16%)</title><rect x="1025" y="244" width="2" height="15" fill="rgb(228,75,3)"/><text x="1028.00" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (3 samples, 0.16%)</title><rect x="1025" y="260" width="2" height="15" fill="rgb(242,64,20)"/><text x="1028.00" y="270.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;) (3 samples, 0.16%)</title><rect x="1025" y="276" width="2" height="15" fill="rgb(241,164,4)"/><text x="1028.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.11%)</title><rect x="1025" y="292" width="2" height="15" fill="rgb(232,64,17)"/><text x="1028.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py) (2 samples, 0.11%)</title><rect x="1025" y="308" width="2" height="15" fill="rgb(214,57,20)"/><text x="1028.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (2 samples, 0.11%)</title><rect x="1025" y="324" width="2" height="15" fill="rgb(223,212,8)"/><text x="1028.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py) (2 samples, 0.11%)</title><rect x="1027" y="228" width="1" height="15" fill="rgb(233,81,20)"/><text x="1030.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (2 samples, 0.11%)</title><rect x="1027" y="244" width="1" height="15" fill="rgb(228,56,37)"/><text x="1030.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1027" y="260" width="1" height="15" fill="rgb(226,175,53)"/><text x="1030.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1027" y="276" width="1" height="15" fill="rgb(217,226,11)"/><text x="1030.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1027" y="292" width="1" height="15" fill="rgb(225,199,45)"/><text x="1030.00" y="302.50"></text></g><g><title>iterator_loop (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1027" y="308" width="1" height="15" fill="rgb(240,48,44)"/><text x="1030.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (4 samples, 0.21%)</title><rect x="1028" y="228" width="3" height="15" fill="rgb(206,172,8)"/><text x="1031.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (4 samples, 0.21%)</title><rect x="1028" y="244" width="3" height="15" fill="rgb(230,169,30)"/><text x="1031.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.21%)</title><rect x="1028" y="260" width="3" height="15" fill="rgb(250,31,52)"/><text x="1031.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (4 samples, 0.21%)</title><rect x="1028" y="276" width="3" height="15" fill="rgb(233,154,27)"/><text x="1031.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (4 samples, 0.21%)</title><rect x="1028" y="292" width="3" height="15" fill="rgb(253,169,14)"/><text x="1031.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.21%)</title><rect x="1028" y="308" width="3" height="15" fill="rgb(211,197,32)"/><text x="1031.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 0.21%)</title><rect x="1028" y="324" width="3" height="15" fill="rgb(232,90,45)"/><text x="1031.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 0.21%)</title><rect x="1028" y="340" width="3" height="15" fill="rgb(218,211,7)"/><text x="1031.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (4 samples, 0.21%)</title><rect x="1028" y="356" width="3" height="15" fill="rgb(248,212,25)"/><text x="1031.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c) (4 samples, 0.21%)</title><rect x="1028" y="372" width="3" height="15" fill="rgb(218,13,14)"/><text x="1031.00" y="382.50"></text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (685 samples, 36.77%)</title><rect x="599" y="68" width="433" height="15" fill="rgb(233,139,54)"/><text x="602.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1000_..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (685 samples, 36.77%)</title><rect x="599" y="84" width="433" height="15" fill="rgb(226,61,24)"/><text x="602.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1000..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (685 samples, 36.77%)</title><rect x="599" y="100" width="433" height="15" fill="rgb(251,31,5)"/><text x="602.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (685 samples, 36.77%)</title><rect x="599" y="116" width="433" height="15" fill="rgb(235,80,27)"/><text x="602.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (685 samples, 36.77%)</title><rect x="599" y="132" width="433" height="15" fill="rgb(230,190,45)"/><text x="602.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (685 samples, 36.77%)</title><rect x="599" y="148" width="433" height="15" fill="rgb(218,50,40)"/><text x="602.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (685 samples, 36.77%)</title><rect x="599" y="164" width="433" height="15" fill="rgb(246,78,19)"/><text x="602.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (685 samples, 36.77%)</title><rect x="599" y="180" width="433" height="15" fill="rgb(252,219,51)"/><text x="602.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (680 samples, 36.50%)</title><rect x="602" y="196" width="430" height="15" fill="rgb(252,42,9)"/><text x="605.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (12 samples, 0.64%)</title><rect x="1025" y="212" width="7" height="15" fill="rgb(235,93,40)"/><text x="1028.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (3 samples, 0.16%)</title><rect x="1031" y="228" width="1" height="15" fill="rgb(216,92,14)"/><text x="1034.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1031" y="244" width="1" height="15" fill="rgb(210,229,30)"/><text x="1034.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1031" y="260" width="1" height="15" fill="rgb(240,31,35)"/><text x="1034.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1031" y="276" width="1" height="15" fill="rgb(225,147,32)"/><text x="1034.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1031" y="292" width="1" height="15" fill="rgb(238,84,9)"/><text x="1034.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src) (2 samples, 0.11%)</title><rect x="1031" y="308" width="1" height="15" fill="rgb(207,51,43)"/><text x="1034.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src) (2 samples, 0.11%)</title><rect x="1031" y="324" width="1" height="15" fill="rgb(235,80,47)"/><text x="1034.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src) (2 samples, 0.11%)</title><rect x="1031" y="340" width="1" height="15" fill="rgb(251,131,14)"/><text x="1034.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (2 samples, 0.11%)</title><rect x="1031" y="356" width="1" height="15" fill="rgb(219,35,37)"/><text x="1034.00" y="366.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.11%)</title><rect x="1034" y="164" width="1" height="15" fill="rgb(245,52,11)"/><text x="1037.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (2 samples, 0.11%)</title><rect x="1036" y="164" width="1" height="15" fill="rgb(227,35,11)"/><text x="1039.00" y="174.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (2 samples, 0.11%)</title><rect x="1039" y="372" width="2" height="15" fill="rgb(225,135,45)"/><text x="1042.00" y="382.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.11%)</title><rect x="1039" y="388" width="2" height="15" fill="rgb(231,32,7)"/><text x="1042.00" y="398.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.11%)</title><rect x="1039" y="404" width="2" height="15" fill="rgb(254,69,3)"/><text x="1042.00" y="414.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.11%)</title><rect x="1039" y="420" width="2" height="15" fill="rgb(206,25,2)"/><text x="1042.00" y="430.50"></text></g><g><title>PyArray_FromArray (ctors.c) (2 samples, 0.11%)</title><rect x="1039" y="436" width="2" height="15" fill="rgb(254,209,24)"/><text x="1042.00" y="446.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.11%)</title><rect x="1039" y="452" width="2" height="15" fill="rgb(208,21,9)"/><text x="1042.00" y="462.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.11%)</title><rect x="1039" y="468" width="2" height="15" fill="rgb(206,161,24)"/><text x="1042.00" y="478.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (2 samples, 0.11%)</title><rect x="1039" y="484" width="2" height="15" fill="rgb(230,149,11)"/><text x="1042.00" y="494.50"></text></g><g><title>0x7fb2bb31532c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.27%)</title><rect x="1038" y="324" width="3" height="15" fill="rgb(237,221,37)"/><text x="1041.00" y="334.50"></text></g><g><title>0x7fb2bb2e05cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.27%)</title><rect x="1038" y="340" width="3" height="15" fill="rgb(223,60,16)"/><text x="1041.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (5 samples, 0.27%)</title><rect x="1038" y="356" width="3" height="15" fill="rgb(237,56,23)"/><text x="1041.00" y="366.50"></text></g><g><title>0x7fb2bb2ebfb3 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1044" y="340" width="1" height="15" fill="rgb(220,194,49)"/><text x="1047.00" y="350.50"></text></g><g><title>0x7fb2bb2ebfb9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1045" y="340" width="1" height="15" fill="rgb(254,33,2)"/><text x="1048.00" y="350.50"></text></g><g><title>0x7fb2bb3170dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (22 samples, 1.18%)</title><rect x="1042" y="324" width="14" height="15" fill="rgb(254,160,36)"/><text x="1045.00" y="334.50"></text></g><g><title>0x7fb2bb2ebfc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 0.75%)</title><rect x="1047" y="340" width="9" height="15" fill="rgb(206,160,22)"/><text x="1050.00" y="350.50"></text></g><g><title>pow (libm-2.29.so) (14 samples, 0.75%)</title><rect x="1047" y="356" width="9" height="15" fill="rgb(228,220,21)"/><text x="1050.00" y="366.50"></text></g><g><title>0x7fb2bb2ebfb3 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="1059" y="356" width="2" height="15" fill="rgb(205,159,25)"/><text x="1062.00" y="366.50"></text></g><g><title>0x7fb2e106bda2 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1070" y="388" width="1" height="15" fill="rgb(234,22,24)"/><text x="1073.00" y="398.50"></text></g><g><title>0x7fb2e106bdc4 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1071" y="388" width="1" height="15" fill="rgb(225,219,4)"/><text x="1074.00" y="398.50"></text></g><g><title>0x7fb2bb2ee426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (29 samples, 1.56%)</title><rect x="1056" y="340" width="18" height="15" fill="rgb(208,158,51)"/><text x="1059.00" y="350.50"></text></g><g><title>0x7fb2bb2ebfc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (20 samples, 1.07%)</title><rect x="1062" y="356" width="12" height="15" fill="rgb(247,214,15)"/><text x="1065.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (20 samples, 1.07%)</title><rect x="1062" y="372" width="12" height="15" fill="rgb(244,190,23)"/><text x="1065.00" y="382.50"></text></g><g><title>0x7fb2bb2ebfaf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1075" y="356" width="2" height="15" fill="rgb(206,184,23)"/><text x="1078.00" y="366.50"></text></g><g><title>0x7fb2bb2ebfb9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1077" y="356" width="2" height="15" fill="rgb(220,5,4)"/><text x="1080.00" y="366.50"></text></g><g><title>0x7fb2e106bce4 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1085" y="388" width="1" height="15" fill="rgb(237,46,19)"/><text x="1088.00" y="398.50"></text></g><g><title>0x7fb2e106bcf8 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1086" y="388" width="2" height="15" fill="rgb(221,88,19)"/><text x="1089.00" y="398.50"></text></g><g><title>0x7fb2e106bdd4 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1091" y="388" width="1" height="15" fill="rgb(236,175,33)"/><text x="1094.00" y="398.50"></text></g><g><title>0x7fb2bb2ee454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (32 samples, 1.72%)</title><rect x="1074" y="340" width="20" height="15" fill="rgb(205,26,26)"/><text x="1077.00" y="350.50"></text></g><g><title>0x7fb2bb2ebfc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (24 samples, 1.29%)</title><rect x="1079" y="356" width="15" height="15" fill="rgb(246,181,27)"/><text x="1082.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (24 samples, 1.29%)</title><rect x="1079" y="372" width="15" height="15" fill="rgb(235,222,13)"/><text x="1082.00" y="382.50"></text></g><g><title>0x7fb2bb2ee2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.48%)</title><rect x="1095" y="356" width="6" height="15" fill="rgb(229,30,40)"/><text x="1098.00" y="366.50"></text></g><g><title>0x7fb2bb2ee2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (31 samples, 1.66%)</title><rect x="1101" y="356" width="19" height="15" fill="rgb(225,183,23)"/><text x="1104.00" y="366.50"></text></g><g><title>0x7fb2bb2ee2fb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1122" y="356" width="1" height="15" fill="rgb(223,36,43)"/><text x="1125.00" y="366.50"></text></g><g><title>0x7fb2bb2eca04 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1124" y="372" width="1" height="15" fill="rgb(229,194,3)"/><text x="1127.00" y="382.50"></text></g><g><title>0x7fb2bb2ee323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.27%)</title><rect x="1123" y="356" width="3" height="15" fill="rgb(226,104,52)"/><text x="1126.00" y="366.50"></text></g><g><title>0x7fb2bb2ee494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (52 samples, 2.79%)</title><rect x="1094" y="340" width="33" height="15" fill="rgb(237,225,44)"/><text x="1097.00" y="350.50">0x..</text></g><g><title>0x7fb2bb2ee4bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.32%)</title><rect x="1127" y="340" width="4" height="15" fill="rgb(229,105,53)"/><text x="1130.00" y="350.50"></text></g><g><title>0x7fb2bb2ee2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.27%)</title><rect x="1128" y="356" width="3" height="15" fill="rgb(230,15,37)"/><text x="1131.00" y="366.50"></text></g><g><title>0x7fb2bb2ee2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 0.97%)</title><rect x="1132" y="356" width="11" height="15" fill="rgb(244,222,53)"/><text x="1135.00" y="366.50"></text></g><g><title>0x7fb2bb2ee2b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1143" y="356" width="2" height="15" fill="rgb(238,139,44)"/><text x="1146.00" y="366.50"></text></g><g><title>0x7fb2bb2ee2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (35 samples, 1.88%)</title><rect x="1145" y="356" width="22" height="15" fill="rgb(234,45,49)"/><text x="1148.00" y="366.50">0..</text></g><g><title>0x7fb2bb2ee2fb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1168" y="356" width="1" height="15" fill="rgb(248,75,23)"/><text x="1171.00" y="366.50"></text></g><g><title>0x7fb2bb2ee323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.21%)</title><rect x="1169" y="356" width="3" height="15" fill="rgb(217,113,30)"/><text x="1172.00" y="366.50"></text></g><g><title>0x7fb2bb2ee50f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (65 samples, 3.49%)</title><rect x="1131" y="340" width="41" height="15" fill="rgb(218,115,22)"/><text x="1134.00" y="350.50">0x7..</text></g><g><title>0x7fb2bb2ee2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.32%)</title><rect x="1172" y="356" width="4" height="15" fill="rgb(224,185,49)"/><text x="1175.00" y="366.50"></text></g><g><title>0x7fb2bb2ee2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.48%)</title><rect x="1176" y="356" width="6" height="15" fill="rgb(213,129,36)"/><text x="1179.00" y="366.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (228 samples, 12.24%)</title><rect x="1038" y="276" width="145" height="15" fill="rgb(209,215,34)"/><text x="1041.00" y="286.50">&lt;listcomp&gt; (joblib..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py) (228 samples, 12.24%)</title><rect x="1038" y="292" width="145" height="15" fill="rgb(231,113,1)"/><text x="1041.00" y="302.50">_tree_query_parall..</text></g><g><title>0x7fb2bb319e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (228 samples, 12.24%)</title><rect x="1038" y="308" width="145" height="15" fill="rgb(227,15,20)"/><text x="1041.00" y="318.50">0x7fb2bb319e14 (sk..</text></g><g><title>0x7fb2bb317100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (200 samples, 10.74%)</title><rect x="1056" y="324" width="127" height="15" fill="rgb(217,20,34)"/><text x="1059.00" y="334.50">0x7fb2bb317100 ..</text></g><g><title>0x7fb2bb2ee538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (16 samples, 0.86%)</title><rect x="1172" y="340" width="11" height="15" fill="rgb(214,59,30)"/><text x="1175.00" y="350.50"></text></g><g><title>__call__ (joblib/parallel.py) (231 samples, 12.40%)</title><rect x="1037" y="180" width="146" height="15" fill="rgb(242,34,5)"/><text x="1040.00" y="190.50">__call__ (joblib/p..</text></g><g><title>dispatch_one_batch (joblib/parallel.py) (229 samples, 12.29%)</title><rect x="1038" y="196" width="145" height="15" fill="rgb(228,89,27)"/><text x="1041.00" y="206.50">dispatch_one_batch..</text></g><g><title>_dispatch (joblib/parallel.py) (229 samples, 12.29%)</title><rect x="1038" y="212" width="145" height="15" fill="rgb(253,190,8)"/><text x="1041.00" y="222.50">_dispatch (joblib/..</text></g><g><title>apply_async (joblib/_parallel_backends.py) (229 samples, 12.29%)</title><rect x="1038" y="228" width="145" height="15" fill="rgb(244,44,8)"/><text x="1041.00" y="238.50">apply_async (jobli..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (229 samples, 12.29%)</title><rect x="1038" y="244" width="145" height="15" fill="rgb(243,160,43)"/><text x="1041.00" y="254.50">__init__ (joblib/_..</text></g><g><title>__call__ (joblib/parallel.py) (229 samples, 12.29%)</title><rect x="1038" y="260" width="145" height="15" fill="rgb(254,224,47)"/><text x="1041.00" y="270.50">__call__ (joblib/p..</text></g><g><title>__init__ (joblib/parallel.py) (3 samples, 0.16%)</title><rect x="1184" y="180" width="2" height="15" fill="rgb(241,62,8)"/><text x="1187.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (238 samples, 12.78%)</title><rect x="1037" y="164" width="151" height="15" fill="rgb(213,200,41)"/><text x="1040.00" y="174.50">kneighbors (sklearn..</text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (1,862 samples, 99.95%)</title><rect x="10" y="52" width="1179" height="15" fill="rgb(240,68,2)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (247 samples, 13.26%)</title><rect x="1032" y="68" width="157" height="15" fill="rgb(241,177,38)"/><text x="1035.00" y="78.50">profile_skl (bench_K..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (247 samples, 13.26%)</title><rect x="1032" y="84" width="157" height="15" fill="rgb(229,4,34)"/><text x="1035.00" y="94.50">setup_profile (bench..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py) (247 samples, 13.26%)</title><rect x="1032" y="100" width="157" height="15" fill="rgb(208,21,53)"/><text x="1035.00" y="110.50">profile (bench_KNeig..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (247 samples, 13.26%)</title><rect x="1032" y="116" width="157" height="15" fill="rgb(241,34,28)"/><text x="1035.00" y="126.50">time_predict (mlprod..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (247 samples, 13.26%)</title><rect x="1032" y="132" width="157" height="15" fill="rgb(248,1,41)"/><text x="1035.00" y="142.50">&lt;lambda&gt; (mlprodict/..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py) (247 samples, 13.26%)</title><rect x="1032" y="148" width="157" height="15" fill="rgb(224,80,19)"/><text x="1035.00" y="158.50">predict_proba (sklea..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1188" y="164" width="1" height="15" fill="rgb(235,27,23)"/><text x="1191.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1188" y="180" width="1" height="15" fill="rgb(244,156,25)"/><text x="1191.00" y="190.50"></text></g><g><title>all (1,863 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(238,91,41)"/><text x="13.00" y="46.50"></text></g></g></svg>