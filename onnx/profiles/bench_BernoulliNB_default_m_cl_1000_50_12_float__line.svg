<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1526" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1509.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1509.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (4 samples, 1.03%)</title><rect x="0.2584%" y="820" width="1.0336%" height="15" fill="rgb(227,0,7)"/><text x="0.5084%" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (4 samples, 1.03%)</title><rect x="0.2584%" y="836" width="1.0336%" height="15" fill="rgb(217,0,24)"/><text x="0.5084%" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/naive_bayes/BernoulliNB/bench_BernoulliNB_default_m_cl.py:2) (5 samples, 1.29%)</title><rect x="0.2584%" y="148" width="1.2920%" height="15" fill="rgb(221,193,54)"/><text x="0.5084%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="0.2584%" y="164" width="1.2920%" height="15" fill="rgb(248,212,6)"/><text x="0.5084%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.29%)</title><rect x="0.2584%" y="180" width="1.2920%" height="15" fill="rgb(208,68,35)"/><text x="0.5084%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="0.2584%" y="196" width="1.2920%" height="15" fill="rgb(232,128,0)"/><text x="0.5084%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="0.2584%" y="212" width="1.2920%" height="15" fill="rgb(207,160,47)"/><text x="0.5084%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.29%)</title><rect x="0.2584%" y="228" width="1.2920%" height="15" fill="rgb(228,23,34)"/><text x="0.5084%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.29%)</title><rect x="0.2584%" y="244" width="1.2920%" height="15" fill="rgb(218,30,26)"/><text x="0.5084%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.29%)</title><rect x="0.2584%" y="260" width="1.2920%" height="15" fill="rgb(220,122,19)"/><text x="0.5084%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="0.2584%" y="276" width="1.2920%" height="15" fill="rgb(250,228,42)"/><text x="0.5084%" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (5 samples, 1.29%)</title><rect x="0.2584%" y="292" width="1.2920%" height="15" fill="rgb(240,193,28)"/><text x="0.5084%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="0.2584%" y="308" width="1.2920%" height="15" fill="rgb(216,20,37)"/><text x="0.5084%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.29%)</title><rect x="0.2584%" y="324" width="1.2920%" height="15" fill="rgb(206,188,39)"/><text x="0.5084%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.29%)</title><rect x="0.2584%" y="340" width="1.2920%" height="15" fill="rgb(217,207,13)"/><text x="0.5084%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.29%)</title><rect x="0.2584%" y="356" width="1.2920%" height="15" fill="rgb(231,73,38)"/><text x="0.5084%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="0.2584%" y="372" width="1.2920%" height="15" fill="rgb(225,20,46)"/><text x="0.5084%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (5 samples, 1.29%)</title><rect x="0.2584%" y="388" width="1.2920%" height="15" fill="rgb(210,31,41)"/><text x="0.5084%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="0.2584%" y="404" width="1.2920%" height="15" fill="rgb(221,200,47)"/><text x="0.5084%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.29%)</title><rect x="0.2584%" y="420" width="1.2920%" height="15" fill="rgb(226,26,5)"/><text x="0.5084%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.29%)</title><rect x="0.2584%" y="436" width="1.2920%" height="15" fill="rgb(249,33,26)"/><text x="0.5084%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.29%)</title><rect x="0.2584%" y="452" width="1.2920%" height="15" fill="rgb(235,183,28)"/><text x="0.5084%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="0.2584%" y="468" width="1.2920%" height="15" fill="rgb(221,5,38)"/><text x="0.5084%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (5 samples, 1.29%)</title><rect x="0.2584%" y="484" width="1.2920%" height="15" fill="rgb(247,18,42)"/><text x="0.5084%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="0.2584%" y="500" width="1.2920%" height="15" fill="rgb(241,131,45)"/><text x="0.5084%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.29%)</title><rect x="0.2584%" y="516" width="1.2920%" height="15" fill="rgb(249,31,29)"/><text x="0.5084%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.29%)</title><rect x="0.2584%" y="532" width="1.2920%" height="15" fill="rgb(225,111,53)"/><text x="0.5084%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.29%)</title><rect x="0.2584%" y="548" width="1.2920%" height="15" fill="rgb(238,160,17)"/><text x="0.5084%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="0.2584%" y="564" width="1.2920%" height="15" fill="rgb(214,148,48)"/><text x="0.5084%" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (5 samples, 1.29%)</title><rect x="0.2584%" y="580" width="1.2920%" height="15" fill="rgb(232,36,49)"/><text x="0.5084%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="0.2584%" y="596" width="1.2920%" height="15" fill="rgb(209,103,24)"/><text x="0.5084%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.29%)</title><rect x="0.2584%" y="612" width="1.2920%" height="15" fill="rgb(229,88,8)"/><text x="0.5084%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="0.2584%" y="628" width="1.2920%" height="15" fill="rgb(213,181,19)"/><text x="0.5084%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="0.2584%" y="644" width="1.2920%" height="15" fill="rgb(254,191,54)"/><text x="0.5084%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.29%)</title><rect x="0.2584%" y="660" width="1.2920%" height="15" fill="rgb(241,83,37)"/><text x="0.5084%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.29%)</title><rect x="0.2584%" y="676" width="1.2920%" height="15" fill="rgb(233,36,39)"/><text x="0.5084%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.29%)</title><rect x="0.2584%" y="692" width="1.2920%" height="15" fill="rgb(226,3,54)"/><text x="0.5084%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="0.2584%" y="708" width="1.2920%" height="15" fill="rgb(245,192,40)"/><text x="0.5084%" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (5 samples, 1.29%)</title><rect x="0.2584%" y="724" width="1.2920%" height="15" fill="rgb(238,167,29)"/><text x="0.5084%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="0.2584%" y="740" width="1.2920%" height="15" fill="rgb(232,182,51)"/><text x="0.5084%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.29%)</title><rect x="0.2584%" y="756" width="1.2920%" height="15" fill="rgb(231,60,39)"/><text x="0.5084%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.29%)</title><rect x="0.2584%" y="772" width="1.2920%" height="15" fill="rgb(208,69,12)"/><text x="0.5084%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.29%)</title><rect x="0.2584%" y="788" width="1.2920%" height="15" fill="rgb(235,93,37)"/><text x="0.5084%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="0.2584%" y="804" width="1.2920%" height="15" fill="rgb(213,116,39)"/><text x="0.5084%" y="814.50"></text></g><g><title>&lt;module&gt; (profiles/benches/naive_bayes/BernoulliNB/bench_BernoulliNB_default_m_cl.py:4) (8 samples, 2.07%)</title><rect x="1.5504%" y="148" width="2.0672%" height="15" fill="rgb(222,207,29)"/><text x="1.8004%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 2.07%)</title><rect x="1.5504%" y="164" width="2.0672%" height="15" fill="rgb(206,96,30)"/><text x="1.8004%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 2.07%)</title><rect x="1.5504%" y="180" width="2.0672%" height="15" fill="rgb(218,138,4)"/><text x="1.8004%" y="190.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 2.07%)</title><rect x="1.5504%" y="196" width="2.0672%" height="15" fill="rgb(250,191,14)"/><text x="1.8004%" y="206.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 2.07%)</title><rect x="1.5504%" y="212" width="2.0672%" height="15" fill="rgb(239,60,40)"/><text x="1.8004%" y="222.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 2.07%)</title><rect x="1.5504%" y="228" width="2.0672%" height="15" fill="rgb(206,27,48)"/><text x="1.8004%" y="238.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 2.07%)</title><rect x="1.5504%" y="244" width="2.0672%" height="15" fill="rgb(225,35,8)"/><text x="1.8004%" y="254.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 2.07%)</title><rect x="1.5504%" y="260" width="2.0672%" height="15" fill="rgb(250,213,24)"/><text x="1.8004%" y="270.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 2.07%)</title><rect x="1.5504%" y="276" width="2.0672%" height="15" fill="rgb(247,123,22)"/><text x="1.8004%" y="286.50">_..</text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (8 samples, 2.07%)</title><rect x="1.5504%" y="292" width="2.0672%" height="15" fill="rgb(231,138,38)"/><text x="1.8004%" y="302.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 2.07%)</title><rect x="1.5504%" y="308" width="2.0672%" height="15" fill="rgb(231,145,46)"/><text x="1.8004%" y="318.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 2.07%)</title><rect x="1.5504%" y="324" width="2.0672%" height="15" fill="rgb(251,118,11)"/><text x="1.8004%" y="334.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 2.07%)</title><rect x="1.5504%" y="340" width="2.0672%" height="15" fill="rgb(217,147,25)"/><text x="1.8004%" y="350.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 2.07%)</title><rect x="1.5504%" y="356" width="2.0672%" height="15" fill="rgb(247,81,37)"/><text x="1.8004%" y="366.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 2.07%)</title><rect x="1.5504%" y="372" width="2.0672%" height="15" fill="rgb(209,12,38)"/><text x="1.8004%" y="382.50">_..</text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (8 samples, 2.07%)</title><rect x="1.5504%" y="388" width="2.0672%" height="15" fill="rgb(227,1,9)"/><text x="1.8004%" y="398.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 2.07%)</title><rect x="1.5504%" y="404" width="2.0672%" height="15" fill="rgb(248,47,43)"/><text x="1.8004%" y="414.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 2.07%)</title><rect x="1.5504%" y="420" width="2.0672%" height="15" fill="rgb(221,10,30)"/><text x="1.8004%" y="430.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 2.07%)</title><rect x="1.5504%" y="436" width="2.0672%" height="15" fill="rgb(210,229,1)"/><text x="1.8004%" y="446.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 2.07%)</title><rect x="1.5504%" y="452" width="2.0672%" height="15" fill="rgb(222,148,37)"/><text x="1.8004%" y="462.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 2.07%)</title><rect x="1.5504%" y="468" width="2.0672%" height="15" fill="rgb(234,67,33)"/><text x="1.8004%" y="478.50">_..</text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (6 samples, 1.55%)</title><rect x="2.0672%" y="484" width="1.5504%" height="15" fill="rgb(247,98,35)"/><text x="2.3172%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.55%)</title><rect x="2.0672%" y="500" width="1.5504%" height="15" fill="rgb(247,138,52)"/><text x="2.3172%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.55%)</title><rect x="2.0672%" y="516" width="1.5504%" height="15" fill="rgb(213,79,30)"/><text x="2.3172%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.55%)</title><rect x="2.0672%" y="532" width="1.5504%" height="15" fill="rgb(246,177,23)"/><text x="2.3172%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.55%)</title><rect x="2.0672%" y="548" width="1.5504%" height="15" fill="rgb(230,62,27)"/><text x="2.3172%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.55%)</title><rect x="2.0672%" y="564" width="1.5504%" height="15" fill="rgb(216,154,8)"/><text x="2.3172%" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (6 samples, 1.55%)</title><rect x="2.0672%" y="580" width="1.5504%" height="15" fill="rgb(244,35,45)"/><text x="2.3172%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.55%)</title><rect x="2.0672%" y="596" width="1.5504%" height="15" fill="rgb(251,115,12)"/><text x="2.3172%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.55%)</title><rect x="2.0672%" y="612" width="1.5504%" height="15" fill="rgb(240,54,50)"/><text x="2.3172%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.55%)</title><rect x="2.0672%" y="628" width="1.5504%" height="15" fill="rgb(233,84,52)"/><text x="2.3172%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.55%)</title><rect x="2.0672%" y="644" width="1.5504%" height="15" fill="rgb(207,117,47)"/><text x="2.3172%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.55%)</title><rect x="2.0672%" y="660" width="1.5504%" height="15" fill="rgb(249,43,39)"/><text x="2.3172%" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (6 samples, 1.55%)</title><rect x="2.0672%" y="676" width="1.5504%" height="15" fill="rgb(209,38,44)"/><text x="2.3172%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.55%)</title><rect x="2.0672%" y="692" width="1.5504%" height="15" fill="rgb(236,212,23)"/><text x="2.3172%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.55%)</title><rect x="2.0672%" y="708" width="1.5504%" height="15" fill="rgb(242,79,21)"/><text x="2.3172%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.55%)</title><rect x="2.0672%" y="724" width="1.5504%" height="15" fill="rgb(211,96,35)"/><text x="2.3172%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.55%)</title><rect x="2.0672%" y="740" width="1.5504%" height="15" fill="rgb(253,215,40)"/><text x="2.3172%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.55%)</title><rect x="2.0672%" y="756" width="1.5504%" height="15" fill="rgb(211,81,21)"/><text x="2.3172%" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py:182) (5 samples, 1.29%)</title><rect x="2.3256%" y="772" width="1.2920%" height="15" fill="rgb(208,190,38)"/><text x="2.5756%" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (5 samples, 1.29%)</title><rect x="2.3256%" y="788" width="1.2920%" height="15" fill="rgb(235,213,38)"/><text x="2.5756%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="2.3256%" y="804" width="1.2920%" height="15" fill="rgb(237,122,38)"/><text x="2.5756%" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.29%)</title><rect x="2.3256%" y="820" width="1.2920%" height="15" fill="rgb(244,218,35)"/><text x="2.5756%" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.29%)</title><rect x="2.3256%" y="836" width="1.2920%" height="15" fill="rgb(240,68,47)"/><text x="2.5756%" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.29%)</title><rect x="2.3256%" y="852" width="1.2920%" height="15" fill="rgb(210,16,53)"/><text x="2.5756%" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.29%)</title><rect x="2.3256%" y="868" width="1.2920%" height="15" fill="rgb(235,124,12)"/><text x="2.5756%" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.29%)</title><rect x="2.3256%" y="884" width="1.2920%" height="15" fill="rgb(224,169,11)"/><text x="2.5756%" y="894.50"></text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:4) (21 samples, 5.43%)</title><rect x="0.0000%" y="52" width="5.4264%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="62.50">&lt;module..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (21 samples, 5.43%)</title><rect x="0.0000%" y="68" width="5.4264%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="78.50">_find_a..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (21 samples, 5.43%)</title><rect x="0.0000%" y="84" width="5.4264%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="94.50">_find_a..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (21 samples, 5.43%)</title><rect x="0.0000%" y="100" width="5.4264%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="110.50">_load_u..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (21 samples, 5.43%)</title><rect x="0.0000%" y="116" width="5.4264%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="126.50">exec_mo..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (21 samples, 5.43%)</title><rect x="0.0000%" y="132" width="5.4264%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="142.50">_call_w..</text></g><g><title>&lt;module&gt; (profiles/benches/naive_bayes/BernoulliNB/bench_BernoulliNB_default_m_cl.py:7) (7 samples, 1.81%)</title><rect x="3.6176%" y="148" width="1.8088%" height="15" fill="rgb(236,97,10)"/><text x="3.8676%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.81%)</title><rect x="3.6176%" y="164" width="1.8088%" height="15" fill="rgb(233,208,19)"/><text x="3.8676%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.81%)</title><rect x="3.6176%" y="180" width="1.8088%" height="15" fill="rgb(216,164,2)"/><text x="3.8676%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.81%)</title><rect x="3.6176%" y="196" width="1.8088%" height="15" fill="rgb(220,129,5)"/><text x="3.8676%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.81%)</title><rect x="3.6176%" y="212" width="1.8088%" height="15" fill="rgb(242,17,10)"/><text x="3.8676%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.81%)</title><rect x="3.6176%" y="228" width="1.8088%" height="15" fill="rgb(242,107,0)"/><text x="3.8676%" y="238.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (7 samples, 1.81%)</title><rect x="3.6176%" y="244" width="1.8088%" height="15" fill="rgb(251,28,31)"/><text x="3.8676%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.81%)</title><rect x="3.6176%" y="260" width="1.8088%" height="15" fill="rgb(233,223,10)"/><text x="3.8676%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.81%)</title><rect x="3.6176%" y="276" width="1.8088%" height="15" fill="rgb(215,21,27)"/><text x="3.8676%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.81%)</title><rect x="3.6176%" y="292" width="1.8088%" height="15" fill="rgb(232,23,21)"/><text x="3.8676%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.81%)</title><rect x="3.6176%" y="308" width="1.8088%" height="15" fill="rgb(244,5,23)"/><text x="3.8676%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.81%)</title><rect x="3.6176%" y="324" width="1.8088%" height="15" fill="rgb(226,81,46)"/><text x="3.8676%" y="334.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (7 samples, 1.81%)</title><rect x="3.6176%" y="340" width="1.8088%" height="15" fill="rgb(247,70,30)"/><text x="3.8676%" y="350.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.81%)</title><rect x="3.6176%" y="356" width="1.8088%" height="15" fill="rgb(212,68,19)"/><text x="3.8676%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.81%)</title><rect x="3.6176%" y="372" width="1.8088%" height="15" fill="rgb(240,187,13)"/><text x="3.8676%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.81%)</title><rect x="3.6176%" y="388" width="1.8088%" height="15" fill="rgb(223,113,26)"/><text x="3.8676%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.81%)</title><rect x="3.6176%" y="404" width="1.8088%" height="15" fill="rgb(206,192,2)"/><text x="3.8676%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.81%)</title><rect x="3.6176%" y="420" width="1.8088%" height="15" fill="rgb(241,108,4)"/><text x="3.8676%" y="430.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (4 samples, 1.03%)</title><rect x="4.3928%" y="436" width="1.0336%" height="15" fill="rgb(247,173,49)"/><text x="4.6428%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="452" width="1.0336%" height="15" fill="rgb(224,114,35)"/><text x="4.6428%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 1.03%)</title><rect x="4.3928%" y="468" width="1.0336%" height="15" fill="rgb(245,159,27)"/><text x="4.6428%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="484" width="1.0336%" height="15" fill="rgb(245,172,44)"/><text x="4.6428%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="500" width="1.0336%" height="15" fill="rgb(236,23,11)"/><text x="4.6428%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="516" width="1.0336%" height="15" fill="rgb(205,117,38)"/><text x="4.6428%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="532" width="1.0336%" height="15" fill="rgb(237,72,25)"/><text x="4.6428%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="548" width="1.0336%" height="15" fill="rgb(244,70,9)"/><text x="4.6428%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="564" width="1.0336%" height="15" fill="rgb(217,125,39)"/><text x="4.6428%" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (4 samples, 1.03%)</title><rect x="4.3928%" y="580" width="1.0336%" height="15" fill="rgb(235,36,10)"/><text x="4.6428%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="596" width="1.0336%" height="15" fill="rgb(251,123,47)"/><text x="4.6428%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="612" width="1.0336%" height="15" fill="rgb(221,13,13)"/><text x="4.6428%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="628" width="1.0336%" height="15" fill="rgb(238,131,9)"/><text x="4.6428%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="644" width="1.0336%" height="15" fill="rgb(211,50,8)"/><text x="4.6428%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="660" width="1.0336%" height="15" fill="rgb(245,182,24)"/><text x="4.6428%" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (4 samples, 1.03%)</title><rect x="4.3928%" y="676" width="1.0336%" height="15" fill="rgb(242,14,37)"/><text x="4.6428%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="692" width="1.0336%" height="15" fill="rgb(246,228,12)"/><text x="4.6428%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="708" width="1.0336%" height="15" fill="rgb(213,55,15)"/><text x="4.6428%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="724" width="1.0336%" height="15" fill="rgb(209,9,3)"/><text x="4.6428%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="740" width="1.0336%" height="15" fill="rgb(230,59,30)"/><text x="4.6428%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="756" width="1.0336%" height="15" fill="rgb(209,121,21)"/><text x="4.6428%" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (4 samples, 1.03%)</title><rect x="4.3928%" y="772" width="1.0336%" height="15" fill="rgb(220,109,13)"/><text x="4.6428%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="788" width="1.0336%" height="15" fill="rgb(232,18,1)"/><text x="4.6428%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="804" width="1.0336%" height="15" fill="rgb(215,41,42)"/><text x="4.6428%" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="820" width="1.0336%" height="15" fill="rgb(224,123,36)"/><text x="4.6428%" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="836" width="1.0336%" height="15" fill="rgb(240,125,3)"/><text x="4.6428%" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="852" width="1.0336%" height="15" fill="rgb(205,98,50)"/><text x="4.6428%" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (4 samples, 1.03%)</title><rect x="4.3928%" y="868" width="1.0336%" height="15" fill="rgb(205,185,37)"/><text x="4.6428%" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="884" width="1.0336%" height="15" fill="rgb(238,207,15)"/><text x="4.6428%" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 1.03%)</title><rect x="4.3928%" y="900" width="1.0336%" height="15" fill="rgb(213,199,42)"/><text x="4.6428%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="916" width="1.0336%" height="15" fill="rgb(235,201,11)"/><text x="4.6428%" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="932" width="1.0336%" height="15" fill="rgb(207,46,11)"/><text x="4.6428%" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="948" width="1.0336%" height="15" fill="rgb(241,35,35)"/><text x="4.6428%" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="964" width="1.0336%" height="15" fill="rgb(243,32,47)"/><text x="4.6428%" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="980" width="1.0336%" height="15" fill="rgb(247,202,23)"/><text x="4.6428%" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="996" width="1.0336%" height="15" fill="rgb(219,102,11)"/><text x="4.6428%" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (4 samples, 1.03%)</title><rect x="4.3928%" y="1012" width="1.0336%" height="15" fill="rgb(243,110,44)"/><text x="4.6428%" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="1028" width="1.0336%" height="15" fill="rgb(222,74,54)"/><text x="4.6428%" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="1044" width="1.0336%" height="15" fill="rgb(216,99,12)"/><text x="4.6428%" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="1060" width="1.0336%" height="15" fill="rgb(226,22,26)"/><text x="4.6428%" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="1076" width="1.0336%" height="15" fill="rgb(217,163,10)"/><text x="4.6428%" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="1092" width="1.0336%" height="15" fill="rgb(213,25,53)"/><text x="4.6428%" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (4 samples, 1.03%)</title><rect x="4.3928%" y="1108" width="1.0336%" height="15" fill="rgb(252,105,26)"/><text x="4.6428%" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 1.03%)</title><rect x="4.3928%" y="1124" width="1.0336%" height="15" fill="rgb(220,39,43)"/><text x="4.6428%" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="1140" width="1.0336%" height="15" fill="rgb(229,68,48)"/><text x="4.6428%" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="1156" width="1.0336%" height="15" fill="rgb(252,8,32)"/><text x="4.6428%" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="1172" width="1.0336%" height="15" fill="rgb(223,20,43)"/><text x="4.6428%" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="1188" width="1.0336%" height="15" fill="rgb(229,81,49)"/><text x="4.6428%" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="1204" width="1.0336%" height="15" fill="rgb(236,28,36)"/><text x="4.6428%" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="1220" width="1.0336%" height="15" fill="rgb(249,185,26)"/><text x="4.6428%" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (4 samples, 1.03%)</title><rect x="4.3928%" y="1236" width="1.0336%" height="15" fill="rgb(249,174,33)"/><text x="4.6428%" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 1.03%)</title><rect x="4.3928%" y="1252" width="1.0336%" height="15" fill="rgb(233,201,37)"/><text x="4.6428%" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="1268" width="1.0336%" height="15" fill="rgb(221,78,26)"/><text x="4.6428%" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="1284" width="1.0336%" height="15" fill="rgb(250,127,30)"/><text x="4.6428%" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="1300" width="1.0336%" height="15" fill="rgb(230,49,44)"/><text x="4.6428%" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="1316" width="1.0336%" height="15" fill="rgb(229,67,23)"/><text x="4.6428%" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="1332" width="1.0336%" height="15" fill="rgb(249,83,47)"/><text x="4.6428%" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="1348" width="1.0336%" height="15" fill="rgb(215,43,3)"/><text x="4.6428%" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (4 samples, 1.03%)</title><rect x="4.3928%" y="1364" width="1.0336%" height="15" fill="rgb(238,154,13)"/><text x="4.6428%" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.03%)</title><rect x="4.3928%" y="1380" width="1.0336%" height="15" fill="rgb(219,56,2)"/><text x="4.6428%" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.03%)</title><rect x="4.3928%" y="1396" width="1.0336%" height="15" fill="rgb(233,0,4)"/><text x="4.6428%" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.03%)</title><rect x="4.3928%" y="1412" width="1.0336%" height="15" fill="rgb(235,30,7)"/><text x="4.6428%" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.03%)</title><rect x="4.3928%" y="1428" width="1.0336%" height="15" fill="rgb(250,79,13)"/><text x="4.6428%" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.03%)</title><rect x="4.3928%" y="1444" width="1.0336%" height="15" fill="rgb(211,146,34)"/><text x="4.6428%" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:159) (4 samples, 1.03%)</title><rect x="4.3928%" y="1460" width="1.0336%" height="15" fill="rgb(228,22,38)"/><text x="4.6428%" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py:153) (4 samples, 1.03%)</title><rect x="4.3928%" y="1476" width="1.0336%" height="15" fill="rgb(235,168,5)"/><text x="4.6428%" y="1486.50"></text></g><g><title>_check_X (sklearn/naive_bayes.py:985) (8 samples, 2.07%)</title><rect x="6.7183%" y="180" width="2.0672%" height="15" fill="rgb(221,155,16)"/><text x="6.9683%" y="190.50">_..</text></g><g><title>_check_X (sklearn/naive_bayes.py:473) (8 samples, 2.07%)</title><rect x="6.7183%" y="196" width="2.0672%" height="15" fill="rgb(215,215,53)"/><text x="6.9683%" y="206.50">_..</text></g><g><title>binarize (sklearn/preprocessing/_data.py:1862) (12 samples, 3.10%)</title><rect x="8.7855%" y="196" width="3.1008%" height="15" fill="rgb(223,4,10)"/><text x="9.0355%" y="206.50">bin..</text></g><g><title>check_array (sklearn/utils/validation.py:586) (4 samples, 1.03%)</title><rect x="10.8527%" y="212" width="1.0336%" height="15" fill="rgb(234,103,6)"/><text x="11.1027%" y="222.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1691) (4 samples, 1.03%)</title><rect x="10.8527%" y="228" width="1.0336%" height="15" fill="rgb(227,97,0)"/><text x="11.1027%" y="238.50"></text></g><g><title>binarize (sklearn/preprocessing/_data.py:1873) (5 samples, 1.29%)</title><rect x="11.8863%" y="196" width="1.2920%" height="15" fill="rgb(234,150,53)"/><text x="12.1363%" y="206.50"></text></g><g><title>array_richcompare (arrayobject.c:1504) (5 samples, 1.29%)</title><rect x="11.8863%" y="212" width="1.2920%" height="15" fill="rgb(228,201,54)"/><text x="12.1363%" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.03%)</title><rect x="12.1447%" y="228" width="1.0336%" height="15" fill="rgb(222,22,37)"/><text x="12.3947%" y="238.50"></text></g><g><title>npy_memchr (common.h:262) (8 samples, 2.07%)</title><rect x="14.4703%" y="244" width="2.0672%" height="15" fill="rgb(237,53,32)"/><text x="14.7203%" y="254.50">n..</text></g><g><title>array_assign_boolean_subscript (mapping.c:1287) (10 samples, 2.58%)</title><rect x="14.4703%" y="228" width="2.5840%" height="15" fill="rgb(233,25,53)"/><text x="14.7203%" y="238.50">ar..</text></g><g><title>binarize (sklearn/preprocessing/_data.py:1875) (17 samples, 4.39%)</title><rect x="13.9535%" y="196" width="4.3928%" height="15" fill="rgb(210,40,34)"/><text x="14.2035%" y="206.50">binar..</text></g><g><title>array_assign_subscript (mapping.c:1859) (16 samples, 4.13%)</title><rect x="14.2119%" y="212" width="4.1344%" height="15" fill="rgb(241,220,44)"/><text x="14.4619%" y="222.50">array..</text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:94) (54 samples, 13.95%)</title><rect x="6.2016%" y="164" width="13.9535%" height="15" fill="rgb(235,28,35)"/><text x="6.4516%" y="174.50">predict_log_proba (sk..</text></g><g><title>_check_X (sklearn/naive_bayes.py:987) (44 samples, 11.37%)</title><rect x="8.7855%" y="180" width="11.3695%" height="15" fill="rgb(210,56,17)"/><text x="9.0355%" y="190.50">_check_X (sklearn..</text></g><g><title>binarize (sklearn/preprocessing/_data.py:1876) (7 samples, 1.81%)</title><rect x="18.3463%" y="196" width="1.8088%" height="15" fill="rgb(224,130,29)"/><text x="18.5963%" y="206.50">b..</text></g><g><title>array_assign_subscript (mapping.c:1859) (7 samples, 1.81%)</title><rect x="18.3463%" y="212" width="1.8088%" height="15" fill="rgb(235,212,8)"/><text x="18.5963%" y="222.50">a..</text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1018) (5 samples, 1.29%)</title><rect x="20.1550%" y="180" width="1.2920%" height="15" fill="rgb(223,33,50)"/><text x="20.4050%" y="190.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 2.58%)</title><rect x="21.7054%" y="212" width="2.5840%" height="15" fill="rgb(219,149,13)"/><text x="21.9554%" y="222.50">dg..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (6 samples, 1.55%)</title><rect x="24.5478%" y="244" width="1.5504%" height="15" fill="rgb(250,156,29)"/><text x="24.7978%" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (6 samples, 1.55%)</title><rect x="24.5478%" y="260" width="1.5504%" height="15" fill="rgb(216,193,19)"/><text x="24.7978%" y="270.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2942) (6 samples, 1.55%)</title><rect x="24.5478%" y="276" width="1.5504%" height="15" fill="rgb(216,135,14)"/><text x="24.7978%" y="286.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (6 samples, 1.55%)</title><rect x="24.5478%" y="292" width="1.5504%" height="15" fill="rgb(241,47,5)"/><text x="24.7978%" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (6 samples, 1.55%)</title><rect x="24.5478%" y="308" width="1.5504%" height="15" fill="rgb(233,42,35)"/><text x="24.7978%" y="318.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src:855) (6 samples, 1.55%)</title><rect x="24.5478%" y="324" width="1.5504%" height="15" fill="rgb(231,13,6)"/><text x="24.7978%" y="334.50"></text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1020) (23 samples, 5.94%)</title><rect x="21.4470%" y="180" width="5.9432%" height="15" fill="rgb(207,181,40)"/><text x="21.6970%" y="190.50">_joint_l..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (23 samples, 5.94%)</title><rect x="21.4470%" y="196" width="5.9432%" height="15" fill="rgb(254,173,49)"/><text x="21.6970%" y="206.50">safe_spa..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 3.10%)</title><rect x="24.2894%" y="212" width="3.1008%" height="15" fill="rgb(221,1,38)"/><text x="24.5394%" y="222.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (12 samples, 3.10%)</title><rect x="24.2894%" y="228" width="3.1008%" height="15" fill="rgb(206,124,46)"/><text x="24.5394%" y="238.50">PyU..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (4 samples, 1.03%)</title><rect x="26.3566%" y="244" width="1.0336%" height="15" fill="rgb(249,21,11)"/><text x="26.6066%" y="254.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (4 samples, 1.03%)</title><rect x="26.3566%" y="260" width="1.0336%" height="15" fill="rgb(222,201,40)"/><text x="26.6066%" y="270.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 1.03%)</title><rect x="26.3566%" y="276" width="1.0336%" height="15" fill="rgb(235,61,29)"/><text x="26.6066%" y="286.50"></text></g><g><title>dgemm_tn (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 1.03%)</title><rect x="26.3566%" y="292" width="1.0336%" height="15" fill="rgb(219,207,3)"/><text x="26.6066%" y="302.50"></text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 1.03%)</title><rect x="26.3566%" y="308" width="1.0336%" height="15" fill="rgb(222,56,46)"/><text x="26.6066%" y="318.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:95) (36 samples, 9.30%)</title><rect x="20.1550%" y="164" width="9.3023%" height="15" fill="rgb(239,76,54)"/><text x="20.4050%" y="174.50">predict_log_p..</text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1021) (8 samples, 2.07%)</title><rect x="27.3902%" y="180" width="2.0672%" height="15" fill="rgb(231,124,27)"/><text x="27.6402%" y="190.50">_..</text></g><g><title>array_sum (methods.c:2215) (7 samples, 1.81%)</title><rect x="27.6486%" y="196" width="1.8088%" height="15" fill="rgb(249,195,6)"/><text x="27.8986%" y="206.50">a..</text></g><g><title>forward_ndarray_method (methods.c:108) (7 samples, 1.81%)</title><rect x="27.6486%" y="212" width="1.8088%" height="15" fill="rgb(237,174,47)"/><text x="27.8986%" y="222.50">f..</text></g><g><title>_sum (numpy/core/_methods.py:38) (6 samples, 1.55%)</title><rect x="27.9070%" y="228" width="1.5504%" height="15" fill="rgb(206,201,31)"/><text x="28.1570%" y="238.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 1.03%)</title><rect x="28.4238%" y="244" width="1.0336%" height="15" fill="rgb(231,57,52)"/><text x="28.6738%" y="254.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1857) (6 samples, 1.55%)</title><rect x="30.2326%" y="340" width="1.5504%" height="15" fill="rgb(248,177,22)"/><text x="30.4826%" y="350.50"></text></g><g><title>run_unary_reduce_simd_maximum_DOUBLE (simd.inc.src:195) (6 samples, 1.55%)</title><rect x="30.2326%" y="356" width="1.5504%" height="15" fill="rgb(215,211,37)"/><text x="30.4826%" y="366.50"></text></g><g><title>sse2_maximum_DOUBLE (simd.inc.src:1117) (6 samples, 1.55%)</title><rect x="30.2326%" y="372" width="1.5504%" height="15" fill="rgb(241,128,51)"/><text x="30.4826%" y="382.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1876) (9 samples, 2.33%)</title><rect x="31.7829%" y="340" width="2.3256%" height="15" fill="rgb(227,165,31)"/><text x="32.0329%" y="350.50">D..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (6 samples, 1.55%)</title><rect x="32.5581%" y="356" width="1.5504%" height="15" fill="rgb(228,167,24)"/><text x="32.8081%" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (6 samples, 1.55%)</title><rect x="32.5581%" y="372" width="1.5504%" height="15" fill="rgb(228,143,12)"/><text x="32.8081%" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (6 samples, 1.55%)</title><rect x="32.5581%" y="388" width="1.5504%" height="15" fill="rgb(249,149,8)"/><text x="32.8081%" y="398.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:101) (21 samples, 5.43%)</title><rect x="29.4574%" y="180" width="5.4264%" height="15" fill="rgb(243,35,44)"/><text x="29.7074%" y="190.50">logsume..</text></g><g><title>amax (&lt;__array_function__ internals&gt;:6) (21 samples, 5.43%)</title><rect x="29.4574%" y="196" width="5.4264%" height="15" fill="rgb(246,89,9)"/><text x="29.7074%" y="206.50">amax (&lt;..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (21 samples, 5.43%)</title><rect x="29.4574%" y="212" width="5.4264%" height="15" fill="rgb(233,213,13)"/><text x="29.7074%" y="222.50">array_i..</text></g><g><title>amax (numpy/core/fromnumeric.py:2621) (20 samples, 5.17%)</title><rect x="29.7158%" y="228" width="5.1680%" height="15" fill="rgb(233,141,41)"/><text x="29.9658%" y="238.50">amax (..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (19 samples, 4.91%)</title><rect x="29.9742%" y="244" width="4.9096%" height="15" fill="rgb(239,167,4)"/><text x="30.2242%" y="254.50">_wrapr..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (19 samples, 4.91%)</title><rect x="29.9742%" y="260" width="4.9096%" height="15" fill="rgb(209,217,16)"/><text x="30.2242%" y="270.50">ufunc_..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (19 samples, 4.91%)</title><rect x="29.9742%" y="276" width="4.9096%" height="15" fill="rgb(219,88,35)"/><text x="30.2242%" y="286.50">PyUFun..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (19 samples, 4.91%)</title><rect x="29.9742%" y="292" width="4.9096%" height="15" fill="rgb(220,193,23)"/><text x="30.2242%" y="302.50">PyUFun..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (18 samples, 4.65%)</title><rect x="30.2326%" y="308" width="4.6512%" height="15" fill="rgb(230,90,52)"/><text x="30.4826%" y="318.50">PyUFu..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (18 samples, 4.65%)</title><rect x="30.2326%" y="324" width="4.6512%" height="15" fill="rgb(252,106,19)"/><text x="30.4826%" y="334.50">reduc..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:104) (5 samples, 1.29%)</title><rect x="34.8837%" y="180" width="1.2920%" height="15" fill="rgb(206,74,20)"/><text x="35.1337%" y="190.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (7 samples, 1.81%)</title><rect x="36.1757%" y="244" width="1.8088%" height="15" fill="rgb(230,138,44)"/><text x="36.4257%" y="254.50">e..</text></g><g><title>array_subtract (number.c:342) (8 samples, 2.07%)</title><rect x="36.1757%" y="196" width="2.0672%" height="15" fill="rgb(235,182,43)"/><text x="36.4257%" y="206.50">a..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 2.07%)</title><rect x="36.1757%" y="212" width="2.0672%" height="15" fill="rgb(242,16,51)"/><text x="36.4257%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (8 samples, 2.07%)</title><rect x="36.1757%" y="228" width="2.0672%" height="15" fill="rgb(248,9,4)"/><text x="36.4257%" y="238.50">P..</text></g><g><title>exp (libm-2.29.so) (8 samples, 2.07%)</title><rect x="38.5013%" y="276" width="2.0672%" height="15" fill="rgb(210,31,22)"/><text x="38.7513%" y="286.50">e..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:112) (18 samples, 4.65%)</title><rect x="36.1757%" y="180" width="4.6512%" height="15" fill="rgb(239,54,39)"/><text x="36.4257%" y="190.50">logsu..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 2.58%)</title><rect x="38.2429%" y="196" width="2.5840%" height="15" fill="rgb(230,99,41)"/><text x="38.4929%" y="206.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 2.58%)</title><rect x="38.2429%" y="212" width="2.5840%" height="15" fill="rgb(253,106,12)"/><text x="38.4929%" y="222.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (10 samples, 2.58%)</title><rect x="38.2429%" y="228" width="2.5840%" height="15" fill="rgb(213,46,41)"/><text x="38.4929%" y="238.50">ex..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (10 samples, 2.58%)</title><rect x="38.2429%" y="244" width="2.5840%" height="15" fill="rgb(215,133,35)"/><text x="38.4929%" y="254.50">tr..</text></g><g><title>PyUFunc_d_d (loops.c.src:190) (9 samples, 2.33%)</title><rect x="38.5013%" y="260" width="2.3256%" height="15" fill="rgb(213,28,5)"/><text x="38.7513%" y="270.50">P..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:116) (5 samples, 1.29%)</title><rect x="41.0853%" y="180" width="1.2920%" height="15" fill="rgb(215,77,49)"/><text x="41.3353%" y="190.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (4 samples, 1.03%)</title><rect x="41.3437%" y="196" width="1.0336%" height="15" fill="rgb(248,100,22)"/><text x="41.5937%" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 1.03%)</title><rect x="41.3437%" y="212" width="1.0336%" height="15" fill="rgb(208,67,9)"/><text x="41.5937%" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (4 samples, 1.03%)</title><rect x="41.3437%" y="228" width="1.0336%" height="15" fill="rgb(219,133,21)"/><text x="41.5937%" y="238.50"></text></g><g><title>__exit__ (numpy/core/_ufunc_config.py:447) (4 samples, 1.03%)</title><rect x="42.3773%" y="196" width="1.0336%" height="15" fill="rgb(246,46,29)"/><text x="42.6273%" y="206.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:120) (10 samples, 2.58%)</title><rect x="42.3773%" y="180" width="2.5840%" height="15" fill="rgb(246,185,52)"/><text x="42.6273%" y="190.50">lo..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 1.55%)</title><rect x="43.4109%" y="196" width="1.5504%" height="15" fill="rgb(252,136,11)"/><text x="43.6609%" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 1.55%)</title><rect x="43.4109%" y="212" width="1.5504%" height="15" fill="rgb(219,138,53)"/><text x="43.6609%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (5 samples, 1.29%)</title><rect x="43.6693%" y="228" width="1.2920%" height="15" fill="rgb(211,51,23)"/><text x="43.9193%" y="238.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (5 samples, 1.29%)</title><rect x="43.6693%" y="244" width="1.2920%" height="15" fill="rgb(247,221,28)"/><text x="43.9193%" y="254.50"></text></g><g><title>PyUFunc_d_d (loops.c.src:190) (4 samples, 1.03%)</title><rect x="43.9276%" y="260" width="1.0336%" height="15" fill="rgb(251,222,45)"/><text x="44.1776%" y="270.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:97) (63 samples, 16.28%)</title><rect x="29.4574%" y="164" width="16.2791%" height="15" fill="rgb(217,162,53)"/><text x="29.7074%" y="174.50">predict_log_proba (sklear..</text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:98) (6 samples, 1.55%)</title><rect x="45.7364%" y="164" width="1.5504%" height="15" fill="rgb(229,93,14)"/><text x="45.9864%" y="174.50"></text></g><g><title>array_subtract (number.c:342) (5 samples, 1.29%)</title><rect x="45.9948%" y="180" width="1.2920%" height="15" fill="rgb(209,67,49)"/><text x="46.2448%" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 1.29%)</title><rect x="45.9948%" y="196" width="1.2920%" height="15" fill="rgb(213,87,29)"/><text x="46.2448%" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.29%)</title><rect x="45.9948%" y="212" width="1.2920%" height="15" fill="rgb(205,151,52)"/><text x="46.2448%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 1.29%)</title><rect x="45.9948%" y="228" width="1.2920%" height="15" fill="rgb(253,215,39)"/><text x="46.2448%" y="238.50"></text></g><g><title>exp (libm-2.29.so) (5 samples, 1.29%)</title><rect x="47.2868%" y="244" width="1.2920%" height="15" fill="rgb(221,220,41)"/><text x="47.5368%" y="254.50"></text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:54) (167 samples, 43.15%)</title><rect x="5.6848%" y="52" width="43.1525%" height="15" fill="rgb(218,133,21)"/><text x="5.9348%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:54)</text></g><g><title>profile_skl (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:53) (167 samples, 43.15%)</title><rect x="5.6848%" y="68" width="43.1525%" height="15" fill="rgb(221,193,43)"/><text x="5.9348%" y="78.50">profile_skl (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:53)</text></g><g><title>setup_profile (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:37) (167 samples, 43.15%)</title><rect x="5.6848%" y="84" width="43.1525%" height="15" fill="rgb(240,128,52)"/><text x="5.9348%" y="94.50">setup_profile (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:37)</text></g><g><title>profile (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:31) (167 samples, 43.15%)</title><rect x="5.6848%" y="100" width="43.1525%" height="15" fill="rgb(253,114,12)"/><text x="5.9348%" y="110.50">profile (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (167 samples, 43.15%)</title><rect x="5.6848%" y="116" width="43.1525%" height="15" fill="rgb(215,223,47)"/><text x="5.9348%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (167 samples, 43.15%)</title><rect x="5.6848%" y="132" width="43.1525%" height="15" fill="rgb(248,225,23)"/><text x="5.9348%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229)</text></g><g><title>predict_proba (sklearn/naive_bayes.py:115) (167 samples, 43.15%)</title><rect x="5.6848%" y="148" width="43.1525%" height="15" fill="rgb(250,108,0)"/><text x="5.9348%" y="158.50">predict_proba (sklearn/naive_bayes.py:115)</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 1.55%)</title><rect x="47.2868%" y="164" width="1.5504%" height="15" fill="rgb(228,208,7)"/><text x="47.5368%" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 1.55%)</title><rect x="47.2868%" y="180" width="1.5504%" height="15" fill="rgb(244,45,10)"/><text x="47.5368%" y="190.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (6 samples, 1.55%)</title><rect x="47.2868%" y="196" width="1.5504%" height="15" fill="rgb(207,125,25)"/><text x="47.5368%" y="206.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (6 samples, 1.55%)</title><rect x="47.2868%" y="212" width="1.5504%" height="15" fill="rgb(210,195,18)"/><text x="47.5368%" y="222.50"></text></g><g><title>PyUFunc_d_d (loops.c.src:190) (6 samples, 1.55%)</title><rect x="47.2868%" y="228" width="1.5504%" height="15" fill="rgb(249,80,12)"/><text x="47.5368%" y="238.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src:816) (8 samples, 2.07%)</title><rect x="49.8708%" y="276" width="2.0672%" height="15" fill="rgb(221,65,9)"/><text x="50.1208%" y="286.50">_..</text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (9 samples, 2.33%)</title><rect x="49.8708%" y="260" width="2.3256%" height="15" fill="rgb(235,49,36)"/><text x="50.1208%" y="270.50">r..</text></g><g><title>compiled_run (&lt;string&gt;:13) (10 samples, 2.58%)</title><rect x="49.8708%" y="180" width="2.5840%" height="15" fill="rgb(225,32,20)"/><text x="50.1208%" y="190.50">co..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:39) (10 samples, 2.58%)</title><rect x="49.8708%" y="196" width="2.5840%" height="15" fill="rgb(215,141,46)"/><text x="50.1208%" y="206.50">_r..</text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (10 samples, 2.58%)</title><rect x="49.8708%" y="212" width="2.5840%" height="15" fill="rgb(250,160,47)"/><text x="50.1208%" y="222.50">&lt;l..</text></g><g><title>array_astype (methods.c:845) (10 samples, 2.58%)</title><rect x="49.8708%" y="228" width="2.5840%" height="15" fill="rgb(216,222,40)"/><text x="50.1208%" y="238.50">ar..</text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (10 samples, 2.58%)</title><rect x="49.8708%" y="244" width="2.5840%" height="15" fill="rgb(234,217,39)"/><text x="50.1208%" y="254.50">Py..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (7 samples, 1.81%)</title><rect x="53.2300%" y="260" width="1.8088%" height="15" fill="rgb(207,178,40)"/><text x="53.4800%" y="270.50">i..</text></g><g><title>FLOAT_add (loops.c.src:1755) (7 samples, 1.81%)</title><rect x="53.2300%" y="276" width="1.8088%" height="15" fill="rgb(221,136,13)"/><text x="53.4800%" y="286.50">F..</text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src:250) (7 samples, 1.81%)</title><rect x="53.2300%" y="292" width="1.8088%" height="15" fill="rgb(249,199,10)"/><text x="53.4800%" y="302.50">r..</text></g><g><title>sse2_binary_add_FLOAT (simd.inc.src:604) (5 samples, 1.29%)</title><rect x="53.7468%" y="308" width="1.2920%" height="15" fill="rgb(249,222,13)"/><text x="53.9968%" y="318.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 1.29%)</title><rect x="53.7468%" y="324" width="1.2920%" height="15" fill="rgb(244,185,38)"/><text x="53.9968%" y="334.50"></text></g><g><title>compiled_run (&lt;string&gt;:14) (11 samples, 2.84%)</title><rect x="52.4548%" y="180" width="2.8424%" height="15" fill="rgb(236,202,9)"/><text x="52.7048%" y="190.50">co..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (11 samples, 2.84%)</title><rect x="52.4548%" y="196" width="2.8424%" height="15" fill="rgb(250,229,37)"/><text x="52.7048%" y="206.50">_r..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 2.58%)</title><rect x="52.7132%" y="212" width="2.5840%" height="15" fill="rgb(206,174,23)"/><text x="52.9632%" y="222.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 2.58%)</title><rect x="52.7132%" y="228" width="2.5840%" height="15" fill="rgb(211,33,43)"/><text x="52.9632%" y="238.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 2.58%)</title><rect x="52.7132%" y="244" width="2.5840%" height="15" fill="rgb(245,58,50)"/><text x="52.9632%" y="254.50">ex..</text></g><g><title>compiled_run (&lt;string&gt;:18) (6 samples, 1.55%)</title><rect x="55.8140%" y="180" width="1.5504%" height="15" fill="rgb(244,68,36)"/><text x="56.0640%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (6 samples, 1.55%)</title><rect x="55.8140%" y="196" width="1.5504%" height="15" fill="rgb(232,229,15)"/><text x="56.0640%" y="206.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (4 samples, 1.03%)</title><rect x="56.3307%" y="212" width="1.0336%" height="15" fill="rgb(254,30,23)"/><text x="56.5807%" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 1.03%)</title><rect x="56.3307%" y="228" width="1.0336%" height="15" fill="rgb(235,160,14)"/><text x="56.5807%" y="238.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (4 samples, 1.03%)</title><rect x="56.3307%" y="244" width="1.0336%" height="15" fill="rgb(212,155,44)"/><text x="56.5807%" y="254.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (4 samples, 1.03%)</title><rect x="56.3307%" y="260" width="1.0336%" height="15" fill="rgb(226,2,50)"/><text x="56.5807%" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 1.29%)</title><rect x="57.3643%" y="244" width="1.2920%" height="15" fill="rgb(234,177,6)"/><text x="57.6143%" y="254.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (5 samples, 1.29%)</title><rect x="57.3643%" y="260" width="1.2920%" height="15" fill="rgb(217,24,9)"/><text x="57.6143%" y="270.50"></text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (5 samples, 1.29%)</title><rect x="57.3643%" y="276" width="1.2920%" height="15" fill="rgb(220,13,46)"/><text x="57.6143%" y="286.50"></text></g><g><title>compiled_run (&lt;string&gt;:20) (19 samples, 4.91%)</title><rect x="57.3643%" y="180" width="4.9096%" height="15" fill="rgb(239,221,27)"/><text x="57.6143%" y="190.50">compil..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (19 samples, 4.91%)</title><rect x="57.3643%" y="196" width="4.9096%" height="15" fill="rgb(222,198,25)"/><text x="57.6143%" y="206.50">_run (..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (19 samples, 4.91%)</title><rect x="57.3643%" y="212" width="4.9096%" height="15" fill="rgb(211,99,13)"/><text x="57.6143%" y="222.50">numpy_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (19 samples, 4.91%)</title><rect x="57.3643%" y="228" width="4.9096%" height="15" fill="rgb(232,111,31)"/><text x="57.6143%" y="238.50">dot (&lt;..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (13 samples, 3.36%)</title><rect x="58.9147%" y="244" width="3.3592%" height="15" fill="rgb(245,82,37)"/><text x="59.1647%" y="254.50">sge..</text></g><g><title>compiled_run (&lt;string&gt;:23) (6 samples, 1.55%)</title><rect x="63.8243%" y="180" width="1.5504%" height="15" fill="rgb(227,149,46)"/><text x="64.0743%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (5 samples, 1.29%)</title><rect x="64.0827%" y="196" width="1.2920%" height="15" fill="rgb(218,36,50)"/><text x="64.3327%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (5 samples, 1.29%)</title><rect x="64.0827%" y="212" width="1.2920%" height="15" fill="rgb(226,80,48)"/><text x="64.3327%" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_log_sum_exp.py:30) (5 samples, 1.29%)</title><rect x="65.3747%" y="196" width="1.2920%" height="15" fill="rgb(238,224,15)"/><text x="65.6247%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 1.29%)</title><rect x="65.3747%" y="212" width="1.2920%" height="15" fill="rgb(241,136,10)"/><text x="65.6247%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.29%)</title><rect x="65.3747%" y="228" width="1.2920%" height="15" fill="rgb(208,32,45)"/><text x="65.6247%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (5 samples, 1.29%)</title><rect x="65.3747%" y="244" width="1.2920%" height="15" fill="rgb(207,135,9)"/><text x="65.6247%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (5 samples, 1.29%)</title><rect x="65.3747%" y="260" width="1.2920%" height="15" fill="rgb(206,86,44)"/><text x="65.6247%" y="270.50"></text></g><g><title>FLOAT_exp (loops.c.src:1602) (5 samples, 1.29%)</title><rect x="65.3747%" y="276" width="1.2920%" height="15" fill="rgb(245,177,15)"/><text x="65.6247%" y="286.50"></text></g><g><title>expf (libm-2.29.so) (5 samples, 1.29%)</title><rect x="65.3747%" y="292" width="1.2920%" height="15" fill="rgb(206,64,50)"/><text x="65.6247%" y="302.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (11 samples, 2.84%)</title><rect x="66.9251%" y="212" width="2.8424%" height="15" fill="rgb(234,36,40)"/><text x="67.1751%" y="222.50">su..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 2.84%)</title><rect x="66.9251%" y="228" width="2.8424%" height="15" fill="rgb(213,64,8)"/><text x="67.1751%" y="238.50">ar..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (11 samples, 2.84%)</title><rect x="66.9251%" y="244" width="2.8424%" height="15" fill="rgb(210,75,36)"/><text x="67.1751%" y="254.50">su..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (10 samples, 2.58%)</title><rect x="67.1835%" y="260" width="2.5840%" height="15" fill="rgb(229,88,21)"/><text x="67.4335%" y="270.50">_w..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (9 samples, 2.33%)</title><rect x="67.4419%" y="276" width="2.3256%" height="15" fill="rgb(252,204,47)"/><text x="67.6919%" y="286.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (8 samples, 2.07%)</title><rect x="67.7003%" y="292" width="2.0672%" height="15" fill="rgb(208,77,27)"/><text x="67.9503%" y="302.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (8 samples, 2.07%)</title><rect x="67.7003%" y="308" width="2.0672%" height="15" fill="rgb(221,76,26)"/><text x="67.9503%" y="318.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (6 samples, 1.55%)</title><rect x="68.2171%" y="324" width="1.5504%" height="15" fill="rgb(225,139,18)"/><text x="68.4671%" y="334.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (5 samples, 1.29%)</title><rect x="68.4755%" y="340" width="1.2920%" height="15" fill="rgb(230,137,11)"/><text x="68.7255%" y="350.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (4 samples, 1.03%)</title><rect x="68.7339%" y="356" width="1.0336%" height="15" fill="rgb(212,28,1)"/><text x="68.9839%" y="366.50"></text></g><g><title>compiled_run (&lt;string&gt;:24) (21 samples, 5.43%)</title><rect x="65.3747%" y="180" width="5.4264%" height="15" fill="rgb(248,164,17)"/><text x="65.6247%" y="190.50">compile..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_log_sum_exp.py:33) (16 samples, 4.13%)</title><rect x="66.6667%" y="196" width="4.1344%" height="15" fill="rgb(222,171,42)"/><text x="66.9167%" y="206.50">_run ..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.03%)</title><rect x="69.7674%" y="212" width="1.0336%" height="15" fill="rgb(243,84,45)"/><text x="70.0174%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 1.03%)</title><rect x="69.7674%" y="228" width="1.0336%" height="15" fill="rgb(252,49,23)"/><text x="70.0174%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (4 samples, 1.03%)</title><rect x="69.7674%" y="244" width="1.0336%" height="15" fill="rgb(215,19,7)"/><text x="70.0174%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (4 samples, 1.03%)</title><rect x="69.7674%" y="260" width="1.0336%" height="15" fill="rgb(238,81,41)"/><text x="70.0174%" y="270.50"></text></g><g><title>FLOAT_log (loops.c.src:1602) (4 samples, 1.03%)</title><rect x="69.7674%" y="276" width="1.0336%" height="15" fill="rgb(210,199,37)"/><text x="70.0174%" y="286.50"></text></g><g><title>compiled_run (&lt;string&gt;:26) (4 samples, 1.03%)</title><rect x="71.3178%" y="180" width="1.0336%" height="15" fill="rgb(244,192,49)"/><text x="71.5678%" y="190.50"></text></g><g><title>compiled_run (&lt;string&gt;:27) (7 samples, 1.81%)</title><rect x="72.3514%" y="180" width="1.8088%" height="15" fill="rgb(226,211,11)"/><text x="72.6014%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_exp.py:20) (7 samples, 1.81%)</title><rect x="72.3514%" y="196" width="1.8088%" height="15" fill="rgb(236,162,54)"/><text x="72.6014%" y="206.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 1.81%)</title><rect x="72.3514%" y="212" width="1.8088%" height="15" fill="rgb(220,229,9)"/><text x="72.6014%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (7 samples, 1.81%)</title><rect x="72.3514%" y="228" width="1.8088%" height="15" fill="rgb(250,87,22)"/><text x="72.6014%" y="238.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (7 samples, 1.81%)</title><rect x="72.3514%" y="244" width="1.8088%" height="15" fill="rgb(239,43,17)"/><text x="72.6014%" y="254.50">e..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (7 samples, 1.81%)</title><rect x="72.3514%" y="260" width="1.8088%" height="15" fill="rgb(231,177,25)"/><text x="72.6014%" y="270.50">t..</text></g><g><title>FLOAT_exp (loops.c.src:1602) (7 samples, 1.81%)</title><rect x="72.3514%" y="276" width="1.8088%" height="15" fill="rgb(219,179,1)"/><text x="72.6014%" y="286.50">F..</text></g><g><title>expf (libm-2.29.so) (7 samples, 1.81%)</title><rect x="72.3514%" y="292" width="1.8088%" height="15" fill="rgb(238,219,53)"/><text x="72.6014%" y="302.50">e..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (5 samples, 1.29%)</title><rect x="75.1938%" y="260" width="1.2920%" height="15" fill="rgb(232,167,36)"/><text x="75.4438%" y="270.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (5 samples, 1.29%)</title><rect x="75.1938%" y="276" width="1.2920%" height="15" fill="rgb(244,19,51)"/><text x="75.4438%" y="286.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (5 samples, 1.29%)</title><rect x="75.1938%" y="292" width="1.2920%" height="15" fill="rgb(224,6,22)"/><text x="75.4438%" y="302.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (9 samples, 2.33%)</title><rect x="75.1938%" y="244" width="2.3256%" height="15" fill="rgb(224,145,5)"/><text x="75.4438%" y="254.50">P..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (4 samples, 1.03%)</title><rect x="76.4858%" y="260" width="1.0336%" height="15" fill="rgb(234,130,49)"/><text x="76.7358%" y="270.50"></text></g><g><title>array_subscript (mapping.c:1539) (19 samples, 4.91%)</title><rect x="75.1938%" y="212" width="4.9096%" height="15" fill="rgb(254,6,2)"/><text x="75.4438%" y="222.50">array_..</text></g><g><title>prepare_index (mapping.c:516) (19 samples, 4.91%)</title><rect x="75.1938%" y="228" width="4.9096%" height="15" fill="rgb(208,96,46)"/><text x="75.4438%" y="238.50">prepar..</text></g><g><title>PyArray_FromAny (ctors.c:1938) (10 samples, 2.58%)</title><rect x="77.5194%" y="244" width="2.5840%" height="15" fill="rgb(239,3,39)"/><text x="77.7694%" y="254.50">Py..</text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (10 samples, 2.58%)</title><rect x="77.5194%" y="260" width="2.5840%" height="15" fill="rgb(233,210,1)"/><text x="77.7694%" y="270.50">Py..</text></g><g><title>setArrayFromSequence (ctors.c:550) (9 samples, 2.33%)</title><rect x="77.7778%" y="276" width="2.3256%" height="15" fill="rgb(244,137,37)"/><text x="78.0278%" y="286.50">s..</text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (9 samples, 2.33%)</title><rect x="77.7778%" y="292" width="2.3256%" height="15" fill="rgb(240,136,2)"/><text x="78.0278%" y="302.50">P..</text></g><g><title>compiled_run (&lt;string&gt;:28) (27 samples, 6.98%)</title><rect x="74.1602%" y="180" width="6.9767%" height="15" fill="rgb(239,18,37)"/><text x="74.4102%" y="190.50">compiled_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (23 samples, 5.94%)</title><rect x="75.1938%" y="196" width="5.9432%" height="15" fill="rgb(218,185,22)"/><text x="75.4438%" y="206.50">_run (ml..</text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:61) (126 samples, 32.56%)</title><rect x="48.8372%" y="52" width="32.5581%" height="15" fill="rgb(225,218,4)"/><text x="49.0872%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_50_12_f..</text></g><g><title>profile_pyrtc (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:60) (126 samples, 32.56%)</title><rect x="48.8372%" y="68" width="32.5581%" height="15" fill="rgb(230,182,32)"/><text x="49.0872%" y="78.50">profile_pyrtc (bench_BernoulliNB_default_m_cl_1000_50..</text></g><g><title>setup_profile (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:37) (126 samples, 32.56%)</title><rect x="48.8372%" y="84" width="32.5581%" height="15" fill="rgb(242,56,43)"/><text x="49.0872%" y="94.50">setup_profile (bench_BernoulliNB_default_m_cl_1000_50..</text></g><g><title>profile (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:31) (126 samples, 32.56%)</title><rect x="48.8372%" y="100" width="32.5581%" height="15" fill="rgb(233,99,24)"/><text x="49.0872%" y="110.50">profile (bench_BernoulliNB_default_m_cl_1000_50_12_fl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (126 samples, 32.56%)</title><rect x="48.8372%" y="116" width="32.5581%" height="15" fill="rgb(234,209,42)"/><text x="49.0872%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl...</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (125 samples, 32.30%)</title><rect x="49.0956%" y="132" width="32.2997%" height="15" fill="rgb(227,7,12)"/><text x="49.3456%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (125 samples, 32.30%)</title><rect x="49.0956%" y="148" width="32.2997%" height="15" fill="rgb(245,203,43)"/><text x="49.3456%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (125 samples, 32.30%)</title><rect x="49.0956%" y="164" width="32.2997%" height="15" fill="rgb(238,205,33)"/><text x="49.3456%" y="174.50">_run_sequence_runtime_compiled (mlprodict/onnxrt/onn..</text></g><g><title>onnxruntime::Add&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.33%)</title><rect x="82.4289%" y="324" width="2.3256%" height="15" fill="rgb(231,56,7)"/><text x="82.6789%" y="334.50">o..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.33%)</title><rect x="82.4289%" y="340" width="2.3256%" height="15" fill="rgb(244,186,29)"/><text x="82.6789%" y="350.50">o..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.33%)</title><rect x="82.4289%" y="356" width="2.3256%" height="15" fill="rgb(234,111,31)"/><text x="82.6789%" y="366.50">o..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.03%)</title><rect x="83.7209%" y="372" width="1.0336%" height="15" fill="rgb(241,149,10)"/><text x="83.9709%" y="382.50"></text></g><g><title>onnxruntime::Cast&lt;bool&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 3.36%)</title><rect x="84.7545%" y="324" width="3.3592%" height="15" fill="rgb(249,206,44)"/><text x="85.0045%" y="334.50">onn..</text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (17 samples, 4.39%)</title><rect x="88.6305%" y="372" width="4.3928%" height="15" fill="rgb(251,153,30)"/><text x="88.8805%" y="382.50">dnnl_..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (16 samples, 4.13%)</title><rect x="88.8889%" y="388" width="4.1344%" height="15" fill="rgb(239,152,38)"/><text x="89.1389%" y="398.50">dnnl_..</text></g><g><title>dnnl::impl::cpu::simple_sum_t&lt;(dnnl_data_type_t)3, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (16 samples, 4.13%)</title><rect x="88.8889%" y="404" width="4.1344%" height="15" fill="rgb(249,139,47)"/><text x="89.1389%" y="414.50">dnnl:..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (16 samples, 4.13%)</title><rect x="88.8889%" y="420" width="4.1344%" height="15" fill="rgb(244,64,35)"/><text x="89.1389%" y="430.50">GOMP_..</text></g><g><title>__kmp_join_call (libiomp5.so) (16 samples, 4.13%)</title><rect x="88.8889%" y="436" width="4.1344%" height="15" fill="rgb(216,46,15)"/><text x="89.1389%" y="446.50">__kmp..</text></g><g><title>__kmp_internal_join (libiomp5.so) (16 samples, 4.13%)</title><rect x="88.8889%" y="452" width="4.1344%" height="15" fill="rgb(250,74,19)"/><text x="89.1389%" y="462.50">__kmp..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (16 samples, 4.13%)</title><rect x="88.8889%" y="468" width="4.1344%" height="15" fill="rgb(249,42,33)"/><text x="89.1389%" y="478.50">__kmp..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (16 samples, 4.13%)</title><rect x="88.8889%" y="484" width="4.1344%" height="15" fill="rgb(242,149,17)"/><text x="89.1389%" y="494.50">_INTE..</text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 4.91%)</title><rect x="88.3721%" y="324" width="4.9096%" height="15" fill="rgb(244,29,21)"/><text x="88.6221%" y="334.50">onnxru..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 4.91%)</title><rect x="88.3721%" y="340" width="4.9096%" height="15" fill="rgb(220,130,37)"/><text x="88.6221%" y="350.50">std::_..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 4.91%)</title><rect x="88.3721%" y="356" width="4.9096%" height="15" fill="rgb(211,67,2)"/><text x="88.6221%" y="366.50">onnxru..</text></g><g><title>onnxruntime::MatMul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="324" width="6.2016%" height="15" fill="rgb(235,68,52)"/><text x="93.7901%" y="334.50">onnxrunt..</text></g><g><title>onnxruntime::math::MatMul&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="340" width="6.2016%" height="15" fill="rgb(246,142,3)"/><text x="93.7901%" y="350.50">onnxrunt..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="356" width="6.2016%" height="15" fill="rgb(241,25,7)"/><text x="93.7901%" y="366.50">cblas_sg..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="372" width="6.2016%" height="15" fill="rgb(242,119,39)"/><text x="93.7901%" y="382.50">sgemm_ (..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="388" width="6.2016%" height="15" fill="rgb(241,98,45)"/><text x="93.7901%" y="398.50">mkl_blas..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="404" width="6.2016%" height="15" fill="rgb(254,28,30)"/><text x="93.7901%" y="414.50">mkl_blas..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="420" width="6.2016%" height="15" fill="rgb(241,142,54)"/><text x="93.7901%" y="430.50">mkl_blas..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="436" width="6.2016%" height="15" fill="rgb(222,85,15)"/><text x="93.7901%" y="446.50">mkl_blas..</text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (24 samples, 6.20%)</title><rect x="93.5401%" y="452" width="6.2016%" height="15" fill="rgb(210,85,47)"/><text x="93.7901%" y="462.50">mkl_blas..</text></g><g><title>all (387 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(224,206,25)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:68) (72 samples, 18.60%)</title><rect x="81.3953%" y="52" width="18.6047%" height="15" fill="rgb(243,201,19)"/><text x="81.6453%" y="62.50">&lt;module&gt; (bench_BernoulliNB_d..</text></g><g><title>profile_ort (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:67) (72 samples, 18.60%)</title><rect x="81.3953%" y="68" width="18.6047%" height="15" fill="rgb(236,59,4)"/><text x="81.6453%" y="78.50">profile_ort (bench_BernoulliN..</text></g><g><title>setup_profile (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:37) (69 samples, 17.83%)</title><rect x="82.1705%" y="84" width="17.8295%" height="15" fill="rgb(254,179,45)"/><text x="82.4205%" y="94.50">setup_profile (bench_Bernoul..</text></g><g><title>profile (bench_BernoulliNB_default_m_cl_1000_50_12_float_.py:31) (69 samples, 17.83%)</title><rect x="82.1705%" y="100" width="17.8295%" height="15" fill="rgb(226,14,10)"/><text x="82.4205%" y="110.50">profile (bench_BernoulliNB_d..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (69 samples, 17.83%)</title><rect x="82.1705%" y="116" width="17.8295%" height="15" fill="rgb(244,27,41)"/><text x="82.4205%" y="126.50">time_predict (mlprodict/asv_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (69 samples, 17.83%)</title><rect x="82.1705%" y="132" width="17.8295%" height="15" fill="rgb(235,35,32)"/><text x="82.4205%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benc..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (69 samples, 17.83%)</title><rect x="82.1705%" y="148" width="17.8295%" height="15" fill="rgb(218,68,31)"/><text x="82.4205%" y="158.50">run (mlprodict/onnxrt/onnx_i..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (69 samples, 17.83%)</title><rect x="82.1705%" y="164" width="17.8295%" height="15" fill="rgb(207,120,37)"/><text x="82.4205%" y="174.50">_run_whole_runtime (mlprodic..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (69 samples, 17.83%)</title><rect x="82.1705%" y="180" width="17.8295%" height="15" fill="rgb(227,98,0)"/><text x="82.4205%" y="190.50">run (mlprodict/onnxrt/ops_wh..</text></g><g><title>run (onnxruntime/capi/session.py:140) (69 samples, 17.83%)</title><rect x="82.1705%" y="196" width="17.8295%" height="15" fill="rgb(207,7,3)"/><text x="82.4205%" y="206.50">run (onnxruntime/capi/sessio..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 17.57%)</title><rect x="82.4289%" y="212" width="17.5711%" height="15" fill="rgb(206,98,19)"/><text x="82.6789%" y="222.50">pybind11::cpp_function::dis..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 17.57%)</title><rect x="82.4289%" y="228" width="17.5711%" height="15" fill="rgb(217,5,26)"/><text x="82.6789%" y="238.50">void pybind11::cpp_function..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 17.57%)</title><rect x="82.4289%" y="244" width="17.5711%" height="15" fill="rgb(235,190,38)"/><text x="82.6789%" y="254.50">onnxruntime::InferenceSessi..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 17.57%)</title><rect x="82.4289%" y="260" width="17.5711%" height="15" fill="rgb(247,86,24)"/><text x="82.6789%" y="270.50">onnxruntime::InferenceSessi..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 17.57%)</title><rect x="82.4289%" y="276" width="17.5711%" height="15" fill="rgb(205,101,16)"/><text x="82.6789%" y="286.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 17.57%)</title><rect x="82.4289%" y="292" width="17.5711%" height="15" fill="rgb(246,168,33)"/><text x="82.6789%" y="302.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 17.57%)</title><rect x="82.4289%" y="308" width="17.5711%" height="15" fill="rgb(231,114,1)"/><text x="82.6789%" y="318.50">onnxruntime::SequentialExec..</text></g></svg></svg>