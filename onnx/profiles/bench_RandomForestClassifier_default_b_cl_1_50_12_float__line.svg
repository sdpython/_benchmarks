<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1494" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1477.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1477.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:1) (4 samples, 1.37%)</title><rect x="0.0000%" y="148" width="1.3746%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.37%)</title><rect x="0.0000%" y="164" width="1.3746%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.37%)</title><rect x="0.0000%" y="180" width="1.3746%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.37%)</title><rect x="0.0000%" y="196" width="1.3746%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.37%)</title><rect x="0.0000%" y="212" width="1.3746%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="0.0000%" y="228" width="1.3746%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="238.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:2) (3 samples, 1.03%)</title><rect x="1.3746%" y="148" width="1.0309%" height="15" fill="rgb(207,160,47)"/><text x="1.6246%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="1.3746%" y="164" width="1.0309%" height="15" fill="rgb(228,23,34)"/><text x="1.6246%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 1.03%)</title><rect x="1.3746%" y="180" width="1.0309%" height="15" fill="rgb(218,30,26)"/><text x="1.6246%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="1.3746%" y="196" width="1.0309%" height="15" fill="rgb(220,122,19)"/><text x="1.6246%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="1.3746%" y="212" width="1.0309%" height="15" fill="rgb(250,228,42)"/><text x="1.6246%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="1.3746%" y="228" width="1.0309%" height="15" fill="rgb(240,193,28)"/><text x="1.6246%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="1.3746%" y="244" width="1.0309%" height="15" fill="rgb(216,20,37)"/><text x="1.6246%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="1.3746%" y="260" width="1.0309%" height="15" fill="rgb(206,188,39)"/><text x="1.6246%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="1.3746%" y="276" width="1.0309%" height="15" fill="rgb(217,207,13)"/><text x="1.6246%" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (3 samples, 1.03%)</title><rect x="1.3746%" y="292" width="1.0309%" height="15" fill="rgb(231,73,38)"/><text x="1.6246%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="1.3746%" y="308" width="1.0309%" height="15" fill="rgb(225,20,46)"/><text x="1.6246%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="1.3746%" y="324" width="1.0309%" height="15" fill="rgb(210,31,41)"/><text x="1.6246%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="1.3746%" y="340" width="1.0309%" height="15" fill="rgb(221,200,47)"/><text x="1.6246%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="1.3746%" y="356" width="1.0309%" height="15" fill="rgb(226,26,5)"/><text x="1.6246%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="1.3746%" y="372" width="1.0309%" height="15" fill="rgb(249,33,26)"/><text x="1.6246%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (3 samples, 1.03%)</title><rect x="1.3746%" y="388" width="1.0309%" height="15" fill="rgb(235,183,28)"/><text x="1.6246%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="1.3746%" y="404" width="1.0309%" height="15" fill="rgb(221,5,38)"/><text x="1.6246%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="1.3746%" y="420" width="1.0309%" height="15" fill="rgb(247,18,42)"/><text x="1.6246%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="1.3746%" y="436" width="1.0309%" height="15" fill="rgb(241,131,45)"/><text x="1.6246%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="1.3746%" y="452" width="1.0309%" height="15" fill="rgb(249,31,29)"/><text x="1.6246%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="1.3746%" y="468" width="1.0309%" height="15" fill="rgb(225,111,53)"/><text x="1.6246%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (3 samples, 1.03%)</title><rect x="1.3746%" y="484" width="1.0309%" height="15" fill="rgb(238,160,17)"/><text x="1.6246%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="1.3746%" y="500" width="1.0309%" height="15" fill="rgb(214,148,48)"/><text x="1.6246%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="1.3746%" y="516" width="1.0309%" height="15" fill="rgb(232,36,49)"/><text x="1.6246%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="1.3746%" y="532" width="1.0309%" height="15" fill="rgb(209,103,24)"/><text x="1.6246%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="1.3746%" y="548" width="1.0309%" height="15" fill="rgb(229,88,8)"/><text x="1.6246%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="1.3746%" y="564" width="1.0309%" height="15" fill="rgb(213,181,19)"/><text x="1.6246%" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (3 samples, 1.03%)</title><rect x="1.3746%" y="580" width="1.0309%" height="15" fill="rgb(254,191,54)"/><text x="1.6246%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="1.3746%" y="596" width="1.0309%" height="15" fill="rgb(241,83,37)"/><text x="1.6246%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 1.03%)</title><rect x="1.3746%" y="612" width="1.0309%" height="15" fill="rgb(233,36,39)"/><text x="1.6246%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="1.3746%" y="628" width="1.0309%" height="15" fill="rgb(226,3,54)"/><text x="1.6246%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="1.3746%" y="644" width="1.0309%" height="15" fill="rgb(245,192,40)"/><text x="1.6246%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="1.3746%" y="660" width="1.0309%" height="15" fill="rgb(238,167,29)"/><text x="1.6246%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="1.3746%" y="676" width="1.0309%" height="15" fill="rgb(232,182,51)"/><text x="1.6246%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="1.3746%" y="692" width="1.0309%" height="15" fill="rgb(231,60,39)"/><text x="1.6246%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="1.3746%" y="708" width="1.0309%" height="15" fill="rgb(208,69,12)"/><text x="1.6246%" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (3 samples, 1.03%)</title><rect x="1.3746%" y="724" width="1.0309%" height="15" fill="rgb(235,93,37)"/><text x="1.6246%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="1.3746%" y="740" width="1.0309%" height="15" fill="rgb(213,116,39)"/><text x="1.6246%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="1.3746%" y="756" width="1.0309%" height="15" fill="rgb(222,207,29)"/><text x="1.6246%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="1.3746%" y="772" width="1.0309%" height="15" fill="rgb(206,96,30)"/><text x="1.6246%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="1.3746%" y="788" width="1.0309%" height="15" fill="rgb(218,138,4)"/><text x="1.6246%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="1.3746%" y="804" width="1.0309%" height="15" fill="rgb(250,191,14)"/><text x="1.6246%" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (3 samples, 1.03%)</title><rect x="1.3746%" y="820" width="1.0309%" height="15" fill="rgb(239,60,40)"/><text x="1.6246%" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (3 samples, 1.03%)</title><rect x="1.3746%" y="836" width="1.0309%" height="15" fill="rgb(206,27,48)"/><text x="1.6246%" y="846.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:4) (15 samples, 5.15%)</title><rect x="0.0000%" y="52" width="5.1546%" height="15" fill="rgb(225,35,8)"/><text x="0.2500%" y="62.50">&lt;modul..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (15 samples, 5.15%)</title><rect x="0.0000%" y="68" width="5.1546%" height="15" fill="rgb(250,213,24)"/><text x="0.2500%" y="78.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (15 samples, 5.15%)</title><rect x="0.0000%" y="84" width="5.1546%" height="15" fill="rgb(247,123,22)"/><text x="0.2500%" y="94.50">_find_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (15 samples, 5.15%)</title><rect x="0.0000%" y="100" width="5.1546%" height="15" fill="rgb(231,138,38)"/><text x="0.2500%" y="110.50">_load_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (15 samples, 5.15%)</title><rect x="0.0000%" y="116" width="5.1546%" height="15" fill="rgb(231,145,46)"/><text x="0.2500%" y="126.50">exec_m..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 5.15%)</title><rect x="0.0000%" y="132" width="5.1546%" height="15" fill="rgb(251,118,11)"/><text x="0.2500%" y="142.50">_call_..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:7) (6 samples, 2.06%)</title><rect x="3.0928%" y="148" width="2.0619%" height="15" fill="rgb(217,147,25)"/><text x="3.3428%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.06%)</title><rect x="3.0928%" y="164" width="2.0619%" height="15" fill="rgb(247,81,37)"/><text x="3.3428%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.06%)</title><rect x="3.0928%" y="180" width="2.0619%" height="15" fill="rgb(209,12,38)"/><text x="3.3428%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.06%)</title><rect x="3.0928%" y="196" width="2.0619%" height="15" fill="rgb(227,1,9)"/><text x="3.3428%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.06%)</title><rect x="3.0928%" y="212" width="2.0619%" height="15" fill="rgb(248,47,43)"/><text x="3.3428%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.06%)</title><rect x="3.0928%" y="228" width="2.0619%" height="15" fill="rgb(221,10,30)"/><text x="3.3428%" y="238.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (6 samples, 2.06%)</title><rect x="3.0928%" y="244" width="2.0619%" height="15" fill="rgb(210,229,1)"/><text x="3.3428%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.06%)</title><rect x="3.0928%" y="260" width="2.0619%" height="15" fill="rgb(222,148,37)"/><text x="3.3428%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.06%)</title><rect x="3.0928%" y="276" width="2.0619%" height="15" fill="rgb(234,67,33)"/><text x="3.3428%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.06%)</title><rect x="3.0928%" y="292" width="2.0619%" height="15" fill="rgb(247,98,35)"/><text x="3.3428%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.06%)</title><rect x="3.0928%" y="308" width="2.0619%" height="15" fill="rgb(247,138,52)"/><text x="3.3428%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.06%)</title><rect x="3.0928%" y="324" width="2.0619%" height="15" fill="rgb(213,79,30)"/><text x="3.3428%" y="334.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:27) (6 samples, 2.06%)</title><rect x="3.0928%" y="340" width="2.0619%" height="15" fill="rgb(246,177,23)"/><text x="3.3428%" y="350.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.06%)</title><rect x="3.0928%" y="356" width="2.0619%" height="15" fill="rgb(230,62,27)"/><text x="3.3428%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.06%)</title><rect x="3.0928%" y="372" width="2.0619%" height="15" fill="rgb(216,154,8)"/><text x="3.3428%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.06%)</title><rect x="3.0928%" y="388" width="2.0619%" height="15" fill="rgb(244,35,45)"/><text x="3.3428%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.06%)</title><rect x="3.0928%" y="404" width="2.0619%" height="15" fill="rgb(251,115,12)"/><text x="3.3428%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.06%)</title><rect x="3.0928%" y="420" width="2.0619%" height="15" fill="rgb(240,54,50)"/><text x="3.3428%" y="430.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (5 samples, 1.72%)</title><rect x="3.4364%" y="436" width="1.7182%" height="15" fill="rgb(233,84,52)"/><text x="3.6864%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.72%)</title><rect x="3.4364%" y="452" width="1.7182%" height="15" fill="rgb(207,117,47)"/><text x="3.6864%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.72%)</title><rect x="3.4364%" y="468" width="1.7182%" height="15" fill="rgb(249,43,39)"/><text x="3.6864%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.72%)</title><rect x="3.4364%" y="484" width="1.7182%" height="15" fill="rgb(209,38,44)"/><text x="3.6864%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.72%)</title><rect x="3.4364%" y="500" width="1.7182%" height="15" fill="rgb(236,212,23)"/><text x="3.6864%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.72%)</title><rect x="3.4364%" y="516" width="1.7182%" height="15" fill="rgb(242,79,21)"/><text x="3.6864%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.72%)</title><rect x="3.4364%" y="532" width="1.7182%" height="15" fill="rgb(211,96,35)"/><text x="3.6864%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.72%)</title><rect x="3.4364%" y="548" width="1.7182%" height="15" fill="rgb(253,215,40)"/><text x="3.6864%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.72%)</title><rect x="3.4364%" y="564" width="1.7182%" height="15" fill="rgb(211,81,21)"/><text x="3.6864%" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (5 samples, 1.72%)</title><rect x="3.4364%" y="580" width="1.7182%" height="15" fill="rgb(208,190,38)"/><text x="3.6864%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.72%)</title><rect x="3.4364%" y="596" width="1.7182%" height="15" fill="rgb(235,213,38)"/><text x="3.6864%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.72%)</title><rect x="3.4364%" y="612" width="1.7182%" height="15" fill="rgb(237,122,38)"/><text x="3.6864%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.72%)</title><rect x="3.4364%" y="628" width="1.7182%" height="15" fill="rgb(244,218,35)"/><text x="3.6864%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.72%)</title><rect x="3.4364%" y="644" width="1.7182%" height="15" fill="rgb(240,68,47)"/><text x="3.6864%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.72%)</title><rect x="3.4364%" y="660" width="1.7182%" height="15" fill="rgb(210,16,53)"/><text x="3.6864%" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (5 samples, 1.72%)</title><rect x="3.4364%" y="676" width="1.7182%" height="15" fill="rgb(235,124,12)"/><text x="3.6864%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.72%)</title><rect x="3.4364%" y="692" width="1.7182%" height="15" fill="rgb(224,169,11)"/><text x="3.6864%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.72%)</title><rect x="3.4364%" y="708" width="1.7182%" height="15" fill="rgb(250,166,2)"/><text x="3.6864%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.72%)</title><rect x="3.4364%" y="724" width="1.7182%" height="15" fill="rgb(242,216,29)"/><text x="3.6864%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.72%)</title><rect x="3.4364%" y="740" width="1.7182%" height="15" fill="rgb(230,116,27)"/><text x="3.6864%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.72%)</title><rect x="3.4364%" y="756" width="1.7182%" height="15" fill="rgb(228,99,48)"/><text x="3.6864%" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (5 samples, 1.72%)</title><rect x="3.4364%" y="772" width="1.7182%" height="15" fill="rgb(253,11,6)"/><text x="3.6864%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.72%)</title><rect x="3.4364%" y="788" width="1.7182%" height="15" fill="rgb(247,143,39)"/><text x="3.6864%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.72%)</title><rect x="3.4364%" y="804" width="1.7182%" height="15" fill="rgb(236,97,10)"/><text x="3.6864%" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.72%)</title><rect x="3.4364%" y="820" width="1.7182%" height="15" fill="rgb(233,208,19)"/><text x="3.6864%" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.72%)</title><rect x="3.4364%" y="836" width="1.7182%" height="15" fill="rgb(216,164,2)"/><text x="3.6864%" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.72%)</title><rect x="3.4364%" y="852" width="1.7182%" height="15" fill="rgb(220,129,5)"/><text x="3.6864%" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (5 samples, 1.72%)</title><rect x="3.4364%" y="868" width="1.7182%" height="15" fill="rgb(242,17,10)"/><text x="3.6864%" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.72%)</title><rect x="3.4364%" y="884" width="1.7182%" height="15" fill="rgb(242,107,0)"/><text x="3.6864%" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.72%)</title><rect x="3.4364%" y="900" width="1.7182%" height="15" fill="rgb(251,28,31)"/><text x="3.6864%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.72%)</title><rect x="3.4364%" y="916" width="1.7182%" height="15" fill="rgb(233,223,10)"/><text x="3.6864%" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.72%)</title><rect x="3.4364%" y="932" width="1.7182%" height="15" fill="rgb(215,21,27)"/><text x="3.6864%" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.72%)</title><rect x="3.4364%" y="948" width="1.7182%" height="15" fill="rgb(232,23,21)"/><text x="3.6864%" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.72%)</title><rect x="3.4364%" y="964" width="1.7182%" height="15" fill="rgb(244,5,23)"/><text x="3.6864%" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.72%)</title><rect x="3.4364%" y="980" width="1.7182%" height="15" fill="rgb(226,81,46)"/><text x="3.6864%" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.72%)</title><rect x="3.4364%" y="996" width="1.7182%" height="15" fill="rgb(247,70,30)"/><text x="3.6864%" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (5 samples, 1.72%)</title><rect x="3.4364%" y="1012" width="1.7182%" height="15" fill="rgb(212,68,19)"/><text x="3.6864%" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.72%)</title><rect x="3.4364%" y="1028" width="1.7182%" height="15" fill="rgb(240,187,13)"/><text x="3.6864%" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.72%)</title><rect x="3.4364%" y="1044" width="1.7182%" height="15" fill="rgb(223,113,26)"/><text x="3.6864%" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.72%)</title><rect x="3.4364%" y="1060" width="1.7182%" height="15" fill="rgb(206,192,2)"/><text x="3.6864%" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.72%)</title><rect x="3.4364%" y="1076" width="1.7182%" height="15" fill="rgb(241,108,4)"/><text x="3.6864%" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.72%)</title><rect x="3.4364%" y="1092" width="1.7182%" height="15" fill="rgb(247,173,49)"/><text x="3.6864%" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (3 samples, 1.03%)</title><rect x="4.1237%" y="1108" width="1.0309%" height="15" fill="rgb(224,114,35)"/><text x="4.3737%" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 1.03%)</title><rect x="4.1237%" y="1124" width="1.0309%" height="15" fill="rgb(245,159,27)"/><text x="4.3737%" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="4.1237%" y="1140" width="1.0309%" height="15" fill="rgb(245,172,44)"/><text x="4.3737%" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="4.1237%" y="1156" width="1.0309%" height="15" fill="rgb(236,23,11)"/><text x="4.3737%" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="4.1237%" y="1172" width="1.0309%" height="15" fill="rgb(205,117,38)"/><text x="4.3737%" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="4.1237%" y="1188" width="1.0309%" height="15" fill="rgb(237,72,25)"/><text x="4.3737%" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="4.1237%" y="1204" width="1.0309%" height="15" fill="rgb(244,70,9)"/><text x="4.3737%" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="4.1237%" y="1220" width="1.0309%" height="15" fill="rgb(217,125,39)"/><text x="4.3737%" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (3 samples, 1.03%)</title><rect x="4.1237%" y="1236" width="1.0309%" height="15" fill="rgb(235,36,10)"/><text x="4.3737%" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 1.03%)</title><rect x="4.1237%" y="1252" width="1.0309%" height="15" fill="rgb(251,123,47)"/><text x="4.3737%" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="4.1237%" y="1268" width="1.0309%" height="15" fill="rgb(221,13,13)"/><text x="4.3737%" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="4.1237%" y="1284" width="1.0309%" height="15" fill="rgb(238,131,9)"/><text x="4.3737%" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="4.1237%" y="1300" width="1.0309%" height="15" fill="rgb(211,50,8)"/><text x="4.3737%" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="4.1237%" y="1316" width="1.0309%" height="15" fill="rgb(245,182,24)"/><text x="4.3737%" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="4.1237%" y="1332" width="1.0309%" height="15" fill="rgb(242,14,37)"/><text x="4.3737%" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="4.1237%" y="1348" width="1.0309%" height="15" fill="rgb(246,228,12)"/><text x="4.3737%" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (3 samples, 1.03%)</title><rect x="4.1237%" y="1364" width="1.0309%" height="15" fill="rgb(213,55,15)"/><text x="4.3737%" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="4.1237%" y="1380" width="1.0309%" height="15" fill="rgb(209,9,3)"/><text x="4.3737%" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="4.1237%" y="1396" width="1.0309%" height="15" fill="rgb(230,59,30)"/><text x="4.3737%" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="4.1237%" y="1412" width="1.0309%" height="15" fill="rgb(209,121,21)"/><text x="4.3737%" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="4.1237%" y="1428" width="1.0309%" height="15" fill="rgb(220,109,13)"/><text x="4.3737%" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="4.1237%" y="1444" width="1.0309%" height="15" fill="rgb(232,18,1)"/><text x="4.3737%" y="1454.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:40) (4 samples, 1.37%)</title><rect x="5.1546%" y="52" width="1.3746%" height="15" fill="rgb(215,41,42)"/><text x="5.4046%" y="62.50"></text></g><g><title>start (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:11) (4 samples, 1.37%)</title><rect x="5.1546%" y="68" width="1.3746%" height="15" fill="rgb(224,123,36)"/><text x="5.4046%" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:39) (4 samples, 1.37%)</title><rect x="5.1546%" y="84" width="1.3746%" height="15" fill="rgb(240,125,3)"/><text x="5.4046%" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:152) (4 samples, 1.37%)</title><rect x="5.1546%" y="100" width="1.3746%" height="15" fill="rgb(205,98,50)"/><text x="5.4046%" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py:383) (3 samples, 1.03%)</title><rect x="5.4983%" y="116" width="1.0309%" height="15" fill="rgb(205,185,37)"/><text x="5.7483%" y="126.50"></text></g><g><title>__call__ (joblib/parallel.py:1007) (3 samples, 1.03%)</title><rect x="5.4983%" y="132" width="1.0309%" height="15" fill="rgb(238,207,15)"/><text x="5.7483%" y="142.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:835) (3 samples, 1.03%)</title><rect x="5.4983%" y="148" width="1.0309%" height="15" fill="rgb(213,199,42)"/><text x="5.7483%" y="158.50"></text></g><g><title>_dispatch (joblib/parallel.py:754) (3 samples, 1.03%)</title><rect x="5.4983%" y="164" width="1.0309%" height="15" fill="rgb(235,201,11)"/><text x="5.7483%" y="174.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:209) (3 samples, 1.03%)</title><rect x="5.4983%" y="180" width="1.0309%" height="15" fill="rgb(207,46,11)"/><text x="5.7483%" y="190.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:590) (3 samples, 1.03%)</title><rect x="5.4983%" y="196" width="1.0309%" height="15" fill="rgb(241,35,35)"/><text x="5.7483%" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (3 samples, 1.03%)</title><rect x="5.4983%" y="212" width="1.0309%" height="15" fill="rgb(243,32,47)"/><text x="5.7483%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (3 samples, 1.03%)</title><rect x="5.4983%" y="228" width="1.0309%" height="15" fill="rgb(247,202,23)"/><text x="5.7483%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (3 samples, 1.03%)</title><rect x="8.2474%" y="260" width="1.0309%" height="15" fill="rgb(219,102,11)"/><text x="8.4974%" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (3 samples, 1.03%)</title><rect x="8.2474%" y="276" width="1.0309%" height="15" fill="rgb(243,110,44)"/><text x="8.4974%" y="286.50"></text></g><g><title>__call__ (joblib/parallel.py:1007) (8 samples, 2.75%)</title><rect x="6.8729%" y="164" width="2.7491%" height="15" fill="rgb(222,74,54)"/><text x="7.1229%" y="174.50">__..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:835) (5 samples, 1.72%)</title><rect x="7.9038%" y="180" width="1.7182%" height="15" fill="rgb(216,99,12)"/><text x="8.1538%" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:754) (5 samples, 1.72%)</title><rect x="7.9038%" y="196" width="1.7182%" height="15" fill="rgb(226,22,26)"/><text x="8.1538%" y="206.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:209) (5 samples, 1.72%)</title><rect x="7.9038%" y="212" width="1.7182%" height="15" fill="rgb(217,163,10)"/><text x="8.1538%" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:590) (5 samples, 1.72%)</title><rect x="7.9038%" y="228" width="1.7182%" height="15" fill="rgb(213,25,53)"/><text x="8.1538%" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (4 samples, 1.37%)</title><rect x="8.2474%" y="244" width="1.3746%" height="15" fill="rgb(252,105,26)"/><text x="8.4974%" y="254.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:47) (10 samples, 3.44%)</title><rect x="6.5292%" y="52" width="3.4364%" height="15" fill="rgb(220,39,43)"/><text x="6.7792%" y="62.50">&lt;mo..</text></g><g><title>profile0_skl (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:46) (10 samples, 3.44%)</title><rect x="6.5292%" y="68" width="3.4364%" height="15" fill="rgb(229,68,48)"/><text x="6.7792%" y="78.50">pro..</text></g><g><title>setup_profile0 (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:26) (9 samples, 3.09%)</title><rect x="6.8729%" y="84" width="3.0928%" height="15" fill="rgb(252,8,32)"/><text x="7.1229%" y="94.50">set..</text></g><g><title>profile0 (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:18) (9 samples, 3.09%)</title><rect x="6.8729%" y="100" width="3.0928%" height="15" fill="rgb(223,20,43)"/><text x="7.1229%" y="110.50">pro..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (9 samples, 3.09%)</title><rect x="6.8729%" y="116" width="3.0928%" height="15" fill="rgb(229,81,49)"/><text x="7.1229%" y="126.50">tim..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (9 samples, 3.09%)</title><rect x="6.8729%" y="132" width="3.0928%" height="15" fill="rgb(236,28,36)"/><text x="7.1229%" y="142.50">&lt;la..</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:669) (9 samples, 3.09%)</title><rect x="6.8729%" y="148" width="3.0928%" height="15" fill="rgb(249,185,26)"/><text x="7.1229%" y="158.50">pre..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:797) (8 samples, 2.75%)</title><rect x="14.0893%" y="180" width="2.7491%" height="15" fill="rgb(249,174,33)"/><text x="14.3393%" y="190.50">di..</text></g><g><title>get (queue.py:182) (3 samples, 1.03%)</title><rect x="15.8076%" y="196" width="1.0309%" height="15" fill="rgb(233,201,37)"/><text x="16.0576%" y="206.50"></text></g><g><title>update_wrapper (functools.py:54) (6 samples, 2.06%)</title><rect x="22.6804%" y="228" width="2.0619%" height="15" fill="rgb(221,78,26)"/><text x="22.9304%" y="238.50">u..</text></g><g><title>update_wrapper (functools.py:58) (4 samples, 1.37%)</title><rect x="24.7423%" y="228" width="1.3746%" height="15" fill="rgb(250,127,30)"/><text x="24.9923%" y="238.50"></text></g><g><title>delayed (joblib/parallel.py:308) (17 samples, 5.84%)</title><rect x="20.9622%" y="212" width="5.8419%" height="15" fill="rgb(230,49,44)"/><text x="21.2122%" y="222.50">delayed..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:808) (29 samples, 9.97%)</title><rect x="17.1821%" y="180" width="9.9656%" height="15" fill="rgb(229,67,23)"/><text x="17.4321%" y="190.50">dispatch_one_b..</text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:669) (25 samples, 8.59%)</title><rect x="18.5567%" y="196" width="8.5911%" height="15" fill="rgb(249,83,47)"/><text x="18.8067%" y="206.50">&lt;genexpr&gt; (s..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (3 samples, 1.03%)</title><rect x="30.9278%" y="212" width="1.0309%" height="15" fill="rgb(215,43,3)"/><text x="31.1778%" y="222.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:216) (10 samples, 3.44%)</title><rect x="29.2096%" y="196" width="3.4364%" height="15" fill="rgb(238,154,13)"/><text x="29.4596%" y="206.50">get..</text></g><g><title>get_active_backend (joblib/parallel.py:116) (6 samples, 2.06%)</title><rect x="32.6460%" y="212" width="2.0619%" height="15" fill="rgb(219,56,2)"/><text x="32.8960%" y="222.50">g..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:825) (17 samples, 5.84%)</title><rect x="29.2096%" y="180" width="5.8419%" height="15" fill="rgb(233,0,4)"/><text x="29.4596%" y="190.50">dispatc..</text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:220) (7 samples, 2.41%)</title><rect x="32.6460%" y="196" width="2.4055%" height="15" fill="rgb(235,30,7)"/><text x="32.8960%" y="206.50">ge..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (4 samples, 1.37%)</title><rect x="35.0515%" y="180" width="1.3746%" height="15" fill="rgb(250,79,13)"/><text x="35.3015%" y="190.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:827) (13 samples, 4.47%)</title><rect x="36.4261%" y="180" width="4.4674%" height="15" fill="rgb(211,146,34)"/><text x="36.6761%" y="190.50">dispa..</text></g><g><title>put (queue.py:151) (9 samples, 3.09%)</title><rect x="37.8007%" y="196" width="3.0928%" height="15" fill="rgb(228,22,38)"/><text x="38.0507%" y="206.50">put..</text></g><g><title>notify (threading.py:348) (3 samples, 1.03%)</title><rect x="39.8625%" y="212" width="1.0309%" height="15" fill="rgb(235,168,5)"/><text x="40.1125%" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:830) (3 samples, 1.03%)</title><rect x="40.8935%" y="180" width="1.0309%" height="15" fill="rgb(221,155,16)"/><text x="41.1435%" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:750) (3 samples, 1.03%)</title><rect x="43.2990%" y="196" width="1.0309%" height="15" fill="rgb(215,215,53)"/><text x="43.5490%" y="206.50"></text></g><g><title>time_time (python3.7) (3 samples, 1.03%)</title><rect x="43.2990%" y="212" width="1.0309%" height="15" fill="rgb(223,4,10)"/><text x="43.5490%" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:254) (12 samples, 4.12%)</title><rect x="46.3918%" y="244" width="4.1237%" height="15" fill="rgb(234,103,6)"/><text x="46.6418%" y="254.50">__ca..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:963) (4 samples, 1.37%)</title><rect x="55.3265%" y="324" width="1.3746%" height="15" fill="rgb(227,97,0)"/><text x="55.5765%" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (4 samples, 1.37%)</title><rect x="57.0447%" y="340" width="1.3746%" height="15" fill="rgb(234,150,53)"/><text x="57.2947%" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:904) (15 samples, 5.15%)</title><rect x="53.6082%" y="292" width="5.1546%" height="15" fill="rgb(228,201,54)"/><text x="53.8582%" y="302.50">predic..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (10 samples, 3.44%)</title><rect x="55.3265%" y="308" width="3.4364%" height="15" fill="rgb(222,22,37)"/><text x="55.5765%" y="318.50">che..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:964) (6 samples, 2.06%)</title><rect x="56.7010%" y="324" width="2.0619%" height="15" fill="rgb(237,53,32)"/><text x="56.9510%" y="334.50">&lt;..</text></g><g><title>0x7f9cd942d2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 1.03%)</title><rect x="59.1065%" y="356" width="1.0309%" height="15" fill="rgb(233,25,53)"/><text x="59.3565%" y="366.50"></text></g><g><title>0x7f9cd942d592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.72%)</title><rect x="61.8557%" y="356" width="1.7182%" height="15" fill="rgb(210,40,34)"/><text x="62.1057%" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1973) (5 samples, 1.72%)</title><rect x="61.8557%" y="372" width="1.7182%" height="15" fill="rgb(241,220,44)"/><text x="62.1057%" y="382.50"></text></g><g><title>0x7f9cd942e405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 6.19%)</title><rect x="59.1065%" y="340" width="6.1856%" height="15" fill="rgb(235,28,35)"/><text x="59.3565%" y="350.50">0x7f9cd9..</text></g><g><title>0x7f9cd941efa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (20 samples, 6.87%)</title><rect x="59.1065%" y="324" width="6.8729%" height="15" fill="rgb(210,56,17)"/><text x="59.3565%" y="334.50">0x7f9cd94..</text></g><g><title>array_take (methods.c:138) (3 samples, 1.03%)</title><rect x="65.9794%" y="340" width="1.0309%" height="15" fill="rgb(224,130,29)"/><text x="66.2294%" y="350.50"></text></g><g><title>0x7f9cd941f05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 2.06%)</title><rect x="65.9794%" y="324" width="2.0619%" height="15" fill="rgb(235,212,8)"/><text x="66.2294%" y="334.50">0..</text></g><g><title>array_take (methods.c:145) (3 samples, 1.03%)</title><rect x="67.0103%" y="340" width="1.0309%" height="15" fill="rgb(223,33,50)"/><text x="67.2603%" y="350.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:49) (3 samples, 1.03%)</title><rect x="67.0103%" y="356" width="1.0309%" height="15" fill="rgb(219,149,13)"/><text x="67.2603%" y="366.50"></text></g><g><title>0x7f9cd941f14f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 1.03%)</title><rect x="68.7285%" y="324" width="1.0309%" height="15" fill="rgb(250,156,29)"/><text x="68.9785%" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 1.03%)</title><rect x="68.7285%" y="340" width="1.0309%" height="15" fill="rgb(216,193,19)"/><text x="68.9785%" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (3 samples, 1.03%)</title><rect x="68.7285%" y="356" width="1.0309%" height="15" fill="rgb(216,135,14)"/><text x="68.9785%" y="366.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:906) (38 samples, 13.06%)</title><rect x="58.7629%" y="292" width="13.0584%" height="15" fill="rgb(241,47,5)"/><text x="59.0129%" y="302.50">predict_proba (sklea..</text></g><g><title>0x7f9cd941fd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (37 samples, 12.71%)</title><rect x="59.1065%" y="308" width="12.7148%" height="15" fill="rgb(233,42,35)"/><text x="59.3565%" y="318.50">0x7f9cd941fd2e (skl..</text></g><g><title>0x7f9cd941f328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.72%)</title><rect x="70.1031%" y="324" width="1.7182%" height="15" fill="rgb(231,13,6)"/><text x="70.3531%" y="334.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:909) (4 samples, 1.37%)</title><rect x="72.1649%" y="292" width="1.3746%" height="15" fill="rgb(207,181,40)"/><text x="72.4149%" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (3 samples, 1.03%)</title><rect x="78.3505%" y="404" width="1.0309%" height="15" fill="rgb(254,173,49)"/><text x="78.6005%" y="414.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:910) (19 samples, 6.53%)</title><rect x="73.5395%" y="292" width="6.5292%" height="15" fill="rgb(221,1,38)"/><text x="73.7895%" y="302.50">predict_p..</text></g><g><title>array_sum (methods.c:2215) (14 samples, 4.81%)</title><rect x="75.2577%" y="308" width="4.8110%" height="15" fill="rgb(206,124,46)"/><text x="75.5077%" y="318.50">array_..</text></g><g><title>forward_ndarray_method (methods.c:108) (13 samples, 4.47%)</title><rect x="75.6014%" y="324" width="4.4674%" height="15" fill="rgb(249,21,11)"/><text x="75.8514%" y="334.50">forwa..</text></g><g><title>_sum (numpy/core/_methods.py:38) (13 samples, 4.47%)</title><rect x="75.6014%" y="340" width="4.4674%" height="15" fill="rgb(222,201,40)"/><text x="75.8514%" y="350.50">_sum ..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (10 samples, 3.44%)</title><rect x="76.6323%" y="356" width="3.4364%" height="15" fill="rgb(235,61,29)"/><text x="76.8823%" y="366.50">ufu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (7 samples, 2.41%)</title><rect x="77.6632%" y="372" width="2.4055%" height="15" fill="rgb(219,207,3)"/><text x="77.9132%" y="382.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (6 samples, 2.06%)</title><rect x="78.0069%" y="388" width="2.0619%" height="15" fill="rgb(222,56,46)"/><text x="78.2569%" y="398.50">P..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (3 samples, 1.03%)</title><rect x="81.7869%" y="340" width="1.0309%" height="15" fill="rgb(239,76,54)"/><text x="82.0369%" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (3 samples, 1.03%)</title><rect x="82.8179%" y="340" width="1.0309%" height="15" fill="rgb(231,124,27)"/><text x="83.0679%" y="350.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c:363) (3 samples, 1.03%)</title><rect x="82.8179%" y="356" width="1.0309%" height="15" fill="rgb(249,195,6)"/><text x="83.0679%" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1848) (3 samples, 1.03%)</title><rect x="82.8179%" y="372" width="1.0309%" height="15" fill="rgb(237,174,47)"/><text x="83.0679%" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 2.75%)</title><rect x="81.7869%" y="324" width="2.7491%" height="15" fill="rgb(206,201,31)"/><text x="82.0369%" y="334.50">uf..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:911) (14 samples, 4.81%)</title><rect x="80.0687%" y="292" width="4.8110%" height="15" fill="rgb(231,57,52)"/><text x="80.3187%" y="302.50">predic..</text></g><g><title>array_richcompare (arrayobject.c:1445) (10 samples, 3.44%)</title><rect x="81.4433%" y="308" width="3.4364%" height="15" fill="rgb(248,177,22)"/><text x="81.6933%" y="318.50">arr..</text></g><g><title>iterator_loop (ufunc_object.c:1520) (5 samples, 1.72%)</title><rect x="85.2234%" y="356" width="1.7182%" height="15" fill="rgb(215,211,37)"/><text x="85.4734%" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 2.41%)</title><rect x="84.8797%" y="308" width="2.4055%" height="15" fill="rgb(241,128,51)"/><text x="85.1297%" y="318.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 2.06%)</title><rect x="85.2234%" y="324" width="2.0619%" height="15" fill="rgb(227,165,31)"/><text x="85.4734%" y="334.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (6 samples, 2.06%)</title><rect x="85.2234%" y="340" width="2.0619%" height="15" fill="rgb(228,167,24)"/><text x="85.4734%" y="350.50">e..</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (105 samples, 36.08%)</title><rect x="51.5464%" y="276" width="36.0825%" height="15" fill="rgb(228,143,12)"/><text x="51.7964%" y="286.50">_accumulate_prediction (sklearn/ensemble/_forest.py:449)</text></g><g><title>predict_proba (sklearn/tree/_classes.py:912) (8 samples, 2.75%)</title><rect x="84.8797%" y="292" width="2.7491%" height="15" fill="rgb(249,149,8)"/><text x="85.1297%" y="302.50">pr..</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:450) (3 samples, 1.03%)</title><rect x="87.6289%" y="276" width="1.0309%" height="15" fill="rgb(243,35,44)"/><text x="87.8789%" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1717) (3 samples, 1.03%)</title><rect x="89.6907%" y="324" width="1.0309%" height="15" fill="rgb(246,89,9)"/><text x="89.9407%" y="334.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (6 samples, 2.06%)</title><rect x="89.0034%" y="276" width="2.0619%" height="15" fill="rgb(233,213,13)"/><text x="89.2534%" y="286.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.37%)</title><rect x="89.6907%" y="292" width="1.3746%" height="15" fill="rgb(233,141,41)"/><text x="89.9407%" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 1.37%)</title><rect x="89.6907%" y="308" width="1.3746%" height="15" fill="rgb(239,167,4)"/><text x="89.9407%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (120 samples, 41.24%)</title><rect x="50.8591%" y="260" width="41.2371%" height="15" fill="rgb(209,217,16)"/><text x="51.1091%" y="270.50">&lt;listcomp&gt; (joblib/parallel.py:256)</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:455) (3 samples, 1.03%)</title><rect x="91.0653%" y="276" width="1.0309%" height="15" fill="rgb(219,88,35)"/><text x="91.3153%" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:209) (137 samples, 47.08%)</title><rect x="45.7045%" y="212" width="47.0790%" height="15" fill="rgb(220,193,23)"/><text x="45.9545%" y="222.50">apply_async (joblib/_parallel_backends.py:209)</text></g><g><title>__init__ (joblib/_parallel_backends.py:590) (136 samples, 46.74%)</title><rect x="46.0481%" y="228" width="46.7354%" height="15" fill="rgb(230,90,52)"/><text x="46.2981%" y="238.50">__init__ (joblib/_parallel_backends.py:590)</text></g><g><title>__call__ (joblib/parallel.py:256) (123 samples, 42.27%)</title><rect x="50.5155%" y="244" width="42.2680%" height="15" fill="rgb(252,106,19)"/><text x="50.7655%" y="254.50">__call__ (joblib/parallel.py:256)</text></g><g><title>_dispatch (joblib/parallel.py:754) (145 samples, 49.83%)</title><rect x="45.7045%" y="196" width="49.8282%" height="15" fill="rgb(206,74,20)"/><text x="45.9545%" y="206.50">_dispatch (joblib/parallel.py:754)</text></g><g><title>apply_async (joblib/_parallel_backends.py:211) (8 samples, 2.75%)</title><rect x="92.7835%" y="212" width="2.7491%" height="15" fill="rgb(230,138,44)"/><text x="93.0335%" y="222.50">ap..</text></g><g><title>__call__ (joblib/parallel.py:1007) (248 samples, 85.22%)</title><rect x="11.6838%" y="164" width="85.2234%" height="15" fill="rgb(235,182,43)"/><text x="11.9338%" y="174.50">__call__ (joblib/parallel.py:1007)</text></g><g><title>dispatch_one_batch (joblib/parallel.py:835) (159 samples, 54.64%)</title><rect x="42.2680%" y="180" width="54.6392%" height="15" fill="rgb(242,16,51)"/><text x="42.5180%" y="190.50">dispatch_one_batch (joblib/parallel.py:835)</text></g><g><title>_dispatch (joblib/parallel.py:759) (4 samples, 1.37%)</title><rect x="95.5326%" y="196" width="1.3746%" height="15" fill="rgb(248,9,4)"/><text x="95.7826%" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:1017) (4 samples, 1.37%)</title><rect x="96.9072%" y="164" width="1.3746%" height="15" fill="rgb(210,31,22)"/><text x="97.1572%" y="174.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:54) (258 samples, 88.66%)</title><rect x="9.9656%" y="52" width="88.6598%" height="15" fill="rgb(239,54,39)"/><text x="10.2156%" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:54)</text></g><g><title>profile_skl (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:53) (258 samples, 88.66%)</title><rect x="9.9656%" y="68" width="88.6598%" height="15" fill="rgb(230,99,41)"/><text x="10.2156%" y="78.50">profile_skl (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:53)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:37) (257 samples, 88.32%)</title><rect x="10.3093%" y="84" width="88.3162%" height="15" fill="rgb(253,106,12)"/><text x="10.5593%" y="94.50">setup_profile (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:37)</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:31) (257 samples, 88.32%)</title><rect x="10.3093%" y="100" width="88.3162%" height="15" fill="rgb(213,46,41)"/><text x="10.5593%" y="110.50">profile (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (257 samples, 88.32%)</title><rect x="10.3093%" y="116" width="88.3162%" height="15" fill="rgb(215,133,35)"/><text x="10.5593%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (257 samples, 88.32%)</title><rect x="10.3093%" y="132" width="88.3162%" height="15" fill="rgb(213,28,5)"/><text x="10.5593%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228)</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:669) (255 samples, 87.63%)</title><rect x="10.9966%" y="148" width="87.6289%" height="15" fill="rgb(215,77,49)"/><text x="11.2466%" y="158.50">predict_proba (sklearn/ensemble/_forest.py:669)</text></g><g><title>all (291 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(248,100,22)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>