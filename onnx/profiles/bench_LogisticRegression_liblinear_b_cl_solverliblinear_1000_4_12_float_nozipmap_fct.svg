<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="501.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="501.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 1.24%)</title><rect x="0.7764%" y="340" width="1.2422%" height="15" fill="rgb(227,0,7)"/><text x="1.0264%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="0.7764%" y="356" width="1.2422%" height="15" fill="rgb(217,0,24)"/><text x="1.0264%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="0.7764%" y="372" width="1.2422%" height="15" fill="rgb(221,193,54)"/><text x="1.0264%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="0.7764%" y="388" width="1.2422%" height="15" fill="rgb(248,212,6)"/><text x="1.0264%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.24%)</title><rect x="0.7764%" y="404" width="1.2422%" height="15" fill="rgb(208,68,35)"/><text x="1.0264%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="0.7764%" y="420" width="1.2422%" height="15" fill="rgb(232,128,0)"/><text x="1.0264%" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (8 samples, 1.24%)</title><rect x="0.7764%" y="436" width="1.2422%" height="15" fill="rgb(207,160,47)"/><text x="1.0264%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="0.7764%" y="452" width="1.2422%" height="15" fill="rgb(228,23,34)"/><text x="1.0264%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="0.7764%" y="468" width="1.2422%" height="15" fill="rgb(218,30,26)"/><text x="1.0264%" y="478.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (18 samples, 2.80%)</title><rect x="0.0000%" y="68" width="2.7950%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (18 samples, 2.80%)</title><rect x="0.0000%" y="84" width="2.7950%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (18 samples, 2.80%)</title><rect x="0.0000%" y="100" width="2.7950%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (18 samples, 2.80%)</title><rect x="0.0000%" y="116" width="2.7950%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (18 samples, 2.80%)</title><rect x="0.0000%" y="132" width="2.7950%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="142.50">_c..</text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_b_cl_solverliblinear.py) (18 samples, 2.80%)</title><rect x="0.0000%" y="148" width="2.7950%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="158.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (18 samples, 2.80%)</title><rect x="0.0000%" y="164" width="2.7950%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="174.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (18 samples, 2.80%)</title><rect x="0.0000%" y="180" width="2.7950%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.02%)</title><rect x="0.7764%" y="196" width="2.0186%" height="15" fill="rgb(210,31,41)"/><text x="1.0264%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 2.02%)</title><rect x="0.7764%" y="212" width="2.0186%" height="15" fill="rgb(221,200,47)"/><text x="1.0264%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.02%)</title><rect x="0.7764%" y="228" width="2.0186%" height="15" fill="rgb(226,26,5)"/><text x="1.0264%" y="238.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (13 samples, 2.02%)</title><rect x="0.7764%" y="244" width="2.0186%" height="15" fill="rgb(249,33,26)"/><text x="1.0264%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.02%)</title><rect x="0.7764%" y="260" width="2.0186%" height="15" fill="rgb(235,183,28)"/><text x="1.0264%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.02%)</title><rect x="0.7764%" y="276" width="2.0186%" height="15" fill="rgb(221,5,38)"/><text x="1.0264%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.02%)</title><rect x="0.7764%" y="292" width="2.0186%" height="15" fill="rgb(247,18,42)"/><text x="1.0264%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 2.02%)</title><rect x="0.7764%" y="308" width="2.0186%" height="15" fill="rgb(241,131,45)"/><text x="1.0264%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.02%)</title><rect x="0.7764%" y="324" width="2.0186%" height="15" fill="rgb(249,31,29)"/><text x="1.0264%" y="334.50">_..</text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (105 samples, 16.30%)</title><rect x="7.1429%" y="324" width="16.3043%" height="15" fill="rgb(225,111,53)"/><text x="7.3929%" y="334.50">onnxruntime::ml::LinearCl..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (52 samples, 8.07%)</title><rect x="15.3727%" y="340" width="8.0745%" height="15" fill="rgb(238,160,17)"/><text x="15.6227%" y="350.50">onnxruntime..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (149 samples, 23.14%)</title><rect x="5.7453%" y="244" width="23.1366%" height="15" fill="rgb(214,148,48)"/><text x="5.9953%" y="254.50">onnxruntime::InferenceSession::Run (o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (149 samples, 23.14%)</title><rect x="5.7453%" y="260" width="23.1366%" height="15" fill="rgb(232,36,49)"/><text x="5.9953%" y="270.50">onnxruntime::InferenceSession::Run (o..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (149 samples, 23.14%)</title><rect x="5.7453%" y="276" width="23.1366%" height="15" fill="rgb(209,103,24)"/><text x="5.9953%" y="286.50">onnxruntime::utils::ExecuteGraph (onn..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (149 samples, 23.14%)</title><rect x="5.7453%" y="292" width="23.1366%" height="15" fill="rgb(229,88,8)"/><text x="5.9953%" y="302.50">onnxruntime::utils::ExecuteGraphImpl ..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (149 samples, 23.14%)</title><rect x="5.7453%" y="308" width="23.1366%" height="15" fill="rgb(213,181,19)"/><text x="5.9953%" y="318.50">onnxruntime::SequentialExecutor::Exec..</text></g><g><title>onnxruntime::ml::Normalizer::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 5.43%)</title><rect x="23.4472%" y="324" width="5.4348%" height="15" fill="rgb(254,191,54)"/><text x="23.6972%" y="334.50">onnxrun..</text></g><g><title>onnxruntime::ml::Normalizer::Normalize&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 5.43%)</title><rect x="23.4472%" y="340" width="5.4348%" height="15" fill="rgb(241,83,37)"/><text x="23.6972%" y="350.50">onnxrun..</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (175 samples, 27.17%)</title><rect x="2.7950%" y="68" width="27.1739%" height="15" fill="rgb(233,36,39)"/><text x="3.0450%" y="78.50">profile_ort (bench_LogisticRegression_liblin..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (175 samples, 27.17%)</title><rect x="2.7950%" y="84" width="27.1739%" height="15" fill="rgb(226,3,54)"/><text x="3.0450%" y="94.50">setup_profile (bench_LogisticRegression_libl..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (175 samples, 27.17%)</title><rect x="2.7950%" y="100" width="27.1739%" height="15" fill="rgb(245,192,40)"/><text x="3.0450%" y="110.50">profile (bench_LogisticRegression_liblinear_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (173 samples, 26.86%)</title><rect x="3.1056%" y="116" width="26.8634%" height="15" fill="rgb(238,167,29)"/><text x="3.3556%" y="126.50">time_predict (mlprodict/asv_benchmark/commo..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (173 samples, 26.86%)</title><rect x="3.1056%" y="132" width="26.8634%" height="15" fill="rgb(232,182,51)"/><text x="3.3556%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_as..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (172 samples, 26.71%)</title><rect x="3.2609%" y="148" width="26.7081%" height="15" fill="rgb(231,60,39)"/><text x="3.5109%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (171 samples, 26.55%)</title><rect x="3.4161%" y="164" width="26.5528%" height="15" fill="rgb(208,69,12)"/><text x="3.6661%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_i..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (168 samples, 26.09%)</title><rect x="3.8820%" y="180" width="26.0870%" height="15" fill="rgb(235,93,37)"/><text x="4.1320%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (166 samples, 25.78%)</title><rect x="4.1925%" y="196" width="25.7764%" height="15" fill="rgb(213,116,39)"/><text x="4.4425%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (159 samples, 24.69%)</title><rect x="5.2795%" y="212" width="24.6894%" height="15" fill="rgb(222,207,29)"/><text x="5.5295%" y="222.50">pybind11::cpp_function::dispatcher (onn..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (159 samples, 24.69%)</title><rect x="5.2795%" y="228" width="24.6894%" height="15" fill="rgb(206,96,30)"/><text x="5.5295%" y="238.50">void pybind11::cpp_function::initialize..</text></g><g><title>PyArray_ArgMax (calculation.c) (10 samples, 1.55%)</title><rect x="33.0745%" y="292" width="1.5528%" height="15" fill="rgb(218,138,4)"/><text x="33.3245%" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py) (14 samples, 2.17%)</title><rect x="32.7640%" y="244" width="2.1739%" height="15" fill="rgb(250,191,14)"/><text x="33.0140%" y="254.50">a..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (14 samples, 2.17%)</title><rect x="32.7640%" y="260" width="2.1739%" height="15" fill="rgb(239,60,40)"/><text x="33.0140%" y="270.50">_..</text></g><g><title>array_argmax (methods.c) (12 samples, 1.86%)</title><rect x="33.0745%" y="276" width="1.8634%" height="15" fill="rgb(206,27,48)"/><text x="33.3245%" y="286.50">a..</text></g><g><title>argmax (&lt;__array_function__ internals&gt;) (20 samples, 3.11%)</title><rect x="32.1429%" y="212" width="3.1056%" height="15" fill="rgb(225,35,8)"/><text x="32.3929%" y="222.50">arg..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (20 samples, 3.11%)</title><rect x="32.1429%" y="228" width="3.1056%" height="15" fill="rgb(250,213,24)"/><text x="32.3929%" y="238.50">arr..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (8 samples, 1.24%)</title><rect x="35.8696%" y="276" width="1.2422%" height="15" fill="rgb(247,123,22)"/><text x="36.1196%" y="286.50"></text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (7 samples, 1.09%)</title><rect x="36.0248%" y="292" width="1.0870%" height="15" fill="rgb(231,138,38)"/><text x="36.2748%" y="302.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (11 samples, 1.71%)</title><rect x="35.5590%" y="244" width="1.7081%" height="15" fill="rgb(231,145,46)"/><text x="35.8090%" y="254.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c) (10 samples, 1.55%)</title><rect x="35.7143%" y="260" width="1.5528%" height="15" fill="rgb(251,118,11)"/><text x="35.9643%" y="270.50"></text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (26 samples, 4.04%)</title><rect x="35.2484%" y="212" width="4.0373%" height="15" fill="rgb(217,147,25)"/><text x="35.4984%" y="222.50">nump..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (25 samples, 3.88%)</title><rect x="35.4037%" y="228" width="3.8820%" height="15" fill="rgb(247,81,37)"/><text x="35.6537%" y="238.50">dot ..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (11 samples, 1.71%)</title><rect x="37.5776%" y="244" width="1.7081%" height="15" fill="rgb(209,12,38)"/><text x="37.8276%" y="254.50"></text></g><g><title>iterator_loop (ufunc_object.c) (10 samples, 1.55%)</title><rect x="40.2174%" y="260" width="1.5528%" height="15" fill="rgb(227,1,9)"/><text x="40.4674%" y="270.50"></text></g><g><title>0x7f2efc3b41d4 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (28 samples, 4.35%)</title><rect x="42.5466%" y="292" width="4.3478%" height="15" fill="rgb(248,47,43)"/><text x="42.7966%" y="302.50">0x7f2..</text></g><g><title>expf (libm-2.29.so) (26 samples, 4.04%)</title><rect x="42.8571%" y="308" width="4.0373%" height="15" fill="rgb(221,10,30)"/><text x="43.1071%" y="318.50">expf..</text></g><g><title>0x7f2efc391f9d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (40 samples, 6.21%)</title><rect x="42.2360%" y="276" width="6.2112%" height="15" fill="rgb(210,229,1)"/><text x="42.4860%" y="286.50">0x7f2efc..</text></g><g><title>0x7f2efc3b41e8 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (10 samples, 1.55%)</title><rect x="46.8944%" y="292" width="1.5528%" height="15" fill="rgb(222,148,37)"/><text x="47.1444%" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (58 samples, 9.01%)</title><rect x="39.5963%" y="244" width="9.0062%" height="15" fill="rgb(234,67,33)"/><text x="39.8463%" y="254.50">execute_legac..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (44 samples, 6.83%)</title><rect x="41.7702%" y="260" width="6.8323%" height="15" fill="rgb(247,98,35)"/><text x="42.0202%" y="270.50">trivial_t..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (62 samples, 9.63%)</title><rect x="39.5963%" y="228" width="9.6273%" height="15" fill="rgb(247,138,52)"/><text x="39.8463%" y="238.50">PyUFunc_Generi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py) (118 samples, 18.32%)</title><rect x="31.0559%" y="196" width="18.3230%" height="15" fill="rgb(213,79,30)"/><text x="31.3059%" y="206.50">_run (mlprodict/onnxrt/ops_cp..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (65 samples, 10.09%)</title><rect x="39.2857%" y="212" width="10.0932%" height="15" fill="rgb(246,177,23)"/><text x="39.5357%" y="222.50">ufunc_generic_c..</text></g><g><title>FLOAT_add (loops.c.src) (11 samples, 1.71%)</title><rect x="52.1739%" y="356" width="1.7081%" height="15" fill="rgb(230,62,27)"/><text x="52.4239%" y="366.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (30 samples, 4.66%)</title><rect x="50.6211%" y="324" width="4.6584%" height="15" fill="rgb(216,154,8)"/><text x="50.8711%" y="334.50">PyUFu..</text></g><g><title>reduce_loop (ufunc_object.c) (23 samples, 3.57%)</title><rect x="51.7081%" y="340" width="3.5714%" height="15" fill="rgb(244,35,45)"/><text x="51.9581%" y="350.50">redu..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (9 samples, 1.40%)</title><rect x="53.8820%" y="356" width="1.3975%" height="15" fill="rgb(251,115,12)"/><text x="54.1320%" y="366.50"></text></g><g><title>array_sum (methods.c) (35 samples, 5.43%)</title><rect x="50.1553%" y="228" width="5.4348%" height="15" fill="rgb(240,54,50)"/><text x="50.4053%" y="238.50">array_s..</text></g><g><title>forward_ndarray_method (methods.c) (35 samples, 5.43%)</title><rect x="50.1553%" y="244" width="5.4348%" height="15" fill="rgb(233,84,52)"/><text x="50.4053%" y="254.50">forward..</text></g><g><title>_sum (numpy/core/_methods.py) (32 samples, 4.97%)</title><rect x="50.6211%" y="260" width="4.9689%" height="15" fill="rgb(207,117,47)"/><text x="50.8711%" y="270.50">_sum (..</text></g><g><title>ufunc_reduce (ufunc_object.c) (32 samples, 4.97%)</title><rect x="50.6211%" y="276" width="4.9689%" height="15" fill="rgb(249,43,39)"/><text x="50.8711%" y="286.50">ufunc_..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (32 samples, 4.97%)</title><rect x="50.6211%" y="292" width="4.9689%" height="15" fill="rgb(209,38,44)"/><text x="50.8711%" y="302.50">PyUFun..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (32 samples, 4.97%)</title><rect x="50.6211%" y="308" width="4.9689%" height="15" fill="rgb(236,212,23)"/><text x="50.8711%" y="318.50">PyUFun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (11 samples, 1.71%)</title><rect x="55.5901%" y="260" width="1.7081%" height="15" fill="rgb(242,79,21)"/><text x="55.8401%" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (11 samples, 1.71%)</title><rect x="55.5901%" y="276" width="1.7081%" height="15" fill="rgb(211,96,35)"/><text x="55.8401%" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (11 samples, 1.71%)</title><rect x="55.5901%" y="292" width="1.7081%" height="15" fill="rgb(253,215,40)"/><text x="55.8401%" y="302.50"></text></g><g><title>array_true_divide (number.c) (12 samples, 1.86%)</title><rect x="55.5901%" y="228" width="1.8634%" height="15" fill="rgb(211,81,21)"/><text x="55.8401%" y="238.50">a..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (12 samples, 1.86%)</title><rect x="55.5901%" y="244" width="1.8634%" height="15" fill="rgb(208,190,38)"/><text x="55.8401%" y="254.50">u..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (180 samples, 27.95%)</title><rect x="29.9689%" y="100" width="27.9503%" height="15" fill="rgb(235,213,38)"/><text x="30.2189%" y="110.50">profile (bench_LogisticRegression_liblinear_b..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (179 samples, 27.80%)</title><rect x="30.1242%" y="116" width="27.7950%" height="15" fill="rgb(237,122,38)"/><text x="30.3742%" y="126.50">time_predict (mlprodict/asv_benchmark/common_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (177 samples, 27.48%)</title><rect x="30.4348%" y="132" width="27.4845%" height="15" fill="rgb(244,218,35)"/><text x="30.6848%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (175 samples, 27.17%)</title><rect x="30.7453%" y="148" width="27.1739%" height="15" fill="rgb(240,68,47)"/><text x="30.9953%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (174 samples, 27.02%)</title><rect x="30.9006%" y="164" width="27.0186%" height="15" fill="rgb(210,16,53)"/><text x="31.1506%" y="174.50">_run_sequence_runtime_compiled (mlprodict/o..</text></g><g><title>compiled_run (&lt;string&gt;) (174 samples, 27.02%)</title><rect x="30.9006%" y="180" width="27.0186%" height="15" fill="rgb(235,124,12)"/><text x="31.1506%" y="190.50">compiled_run (&lt;string&gt;)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py) (55 samples, 8.54%)</title><rect x="49.3789%" y="196" width="8.5404%" height="15" fill="rgb(224,169,11)"/><text x="49.6289%" y="206.50">_run (mlprod..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py) (53 samples, 8.23%)</title><rect x="49.6894%" y="212" width="8.2298%" height="15" fill="rgb(250,166,2)"/><text x="49.9394%" y="222.50">norm_l1 (ml..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (181 samples, 28.11%)</title><rect x="29.9689%" y="68" width="28.1056%" height="15" fill="rgb(242,216,29)"/><text x="30.2189%" y="78.50">profile_pyrtc (bench_LogisticRegression_libli..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (181 samples, 28.11%)</title><rect x="29.9689%" y="84" width="28.1056%" height="15" fill="rgb(230,116,27)"/><text x="30.2189%" y="94.50">setup_profile (bench_LogisticRegression_libli..</text></g><g><title>DOUBLE_add (loops.c.src) (24 samples, 3.73%)</title><rect x="62.8882%" y="308" width="3.7267%" height="15" fill="rgb(228,99,48)"/><text x="63.1382%" y="318.50">DOUB..</text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (10 samples, 1.55%)</title><rect x="65.0621%" y="324" width="1.5528%" height="15" fill="rgb(253,11,6)"/><text x="65.3121%" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (43 samples, 6.68%)</title><rect x="61.1801%" y="276" width="6.6770%" height="15" fill="rgb(247,143,39)"/><text x="61.4301%" y="286.50">PyUFunc_R..</text></g><g><title>reduce_loop (ufunc_object.c) (37 samples, 5.75%)</title><rect x="62.1118%" y="292" width="5.7453%" height="15" fill="rgb(236,97,10)"/><text x="62.3618%" y="302.50">reduce_..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (7 samples, 1.09%)</title><rect x="66.7702%" y="308" width="1.0870%" height="15" fill="rgb(233,208,19)"/><text x="67.0202%" y="318.50"></text></g><g><title>array_sum (methods.c) (49 samples, 7.61%)</title><rect x="60.5590%" y="180" width="7.6087%" height="15" fill="rgb(216,164,2)"/><text x="60.8090%" y="190.50">array_sum ..</text></g><g><title>forward_ndarray_method (methods.c) (49 samples, 7.61%)</title><rect x="60.5590%" y="196" width="7.6087%" height="15" fill="rgb(220,129,5)"/><text x="60.8090%" y="206.50">forward_nd..</text></g><g><title>_sum (numpy/core/_methods.py) (48 samples, 7.45%)</title><rect x="60.7143%" y="212" width="7.4534%" height="15" fill="rgb(242,17,10)"/><text x="60.9643%" y="222.50">_sum (nump..</text></g><g><title>ufunc_reduce (ufunc_object.c) (48 samples, 7.45%)</title><rect x="60.7143%" y="228" width="7.4534%" height="15" fill="rgb(242,107,0)"/><text x="60.9643%" y="238.50">ufunc_redu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (46 samples, 7.14%)</title><rect x="61.0248%" y="244" width="7.1429%" height="15" fill="rgb(251,28,31)"/><text x="61.2748%" y="254.50">PyUFunc_Ge..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (45 samples, 6.99%)</title><rect x="61.1801%" y="260" width="6.9876%" height="15" fill="rgb(233,223,10)"/><text x="61.4301%" y="270.50">PyUFunc_R..</text></g><g><title>array_add (number.c) (15 samples, 2.33%)</title><rect x="69.0994%" y="196" width="2.3292%" height="15" fill="rgb(215,21,27)"/><text x="69.3494%" y="206.50">a..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (14 samples, 2.17%)</title><rect x="69.2547%" y="212" width="2.1739%" height="15" fill="rgb(232,23,21)"/><text x="69.5047%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (14 samples, 2.17%)</title><rect x="69.2547%" y="228" width="2.1739%" height="15" fill="rgb(244,5,23)"/><text x="69.5047%" y="238.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (13 samples, 2.02%)</title><rect x="69.4099%" y="244" width="2.0186%" height="15" fill="rgb(226,81,46)"/><text x="69.6599%" y="254.50">e..</text></g><g><title>iterator_loop (ufunc_object.c) (13 samples, 2.02%)</title><rect x="69.4099%" y="260" width="2.0186%" height="15" fill="rgb(247,70,30)"/><text x="69.6599%" y="270.50">i..</text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (11 samples, 1.71%)</title><rect x="74.5342%" y="212" width="1.7081%" height="15" fill="rgb(212,68,19)"/><text x="74.7842%" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (10 samples, 1.55%)</title><rect x="76.2422%" y="212" width="1.5528%" height="15" fill="rgb(240,187,13)"/><text x="76.4922%" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (52 samples, 8.07%)</title><rect x="71.4286%" y="196" width="8.0745%" height="15" fill="rgb(223,113,26)"/><text x="71.6786%" y="206.50">check_array..</text></g><g><title>simplefilter (warnings.py) (8 samples, 1.24%)</title><rect x="78.2609%" y="212" width="1.2422%" height="15" fill="rgb(206,192,2)"/><text x="78.5109%" y="222.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (12 samples, 1.86%)</title><rect x="80.5901%" y="212" width="1.8634%" height="15" fill="rgb(241,108,4)"/><text x="80.8401%" y="222.50">d..</text></g><g><title>PyArray_AssignArray (array_assign_array.c) (7 samples, 1.09%)</title><rect x="84.1615%" y="292" width="1.0870%" height="15" fill="rgb(247,173,49)"/><text x="84.4115%" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (7 samples, 1.09%)</title><rect x="84.1615%" y="308" width="1.0870%" height="15" fill="rgb(224,114,35)"/><text x="84.4115%" y="318.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (10 samples, 1.55%)</title><rect x="84.1615%" y="276" width="1.5528%" height="15" fill="rgb(245,159,27)"/><text x="84.4115%" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (11 samples, 1.71%)</title><rect x="84.1615%" y="260" width="1.7081%" height="15" fill="rgb(245,172,44)"/><text x="84.4115%" y="270.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py) (115 samples, 17.86%)</title><rect x="68.1677%" y="180" width="17.8571%" height="15" fill="rgb(236,23,11)"/><text x="68.4177%" y="190.50">decision_function (sklearn/l..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (38 samples, 5.90%)</title><rect x="80.1242%" y="196" width="5.9006%" height="15" fill="rgb(205,117,38)"/><text x="80.3742%" y="206.50">safe_spa..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (20 samples, 3.11%)</title><rect x="82.9193%" y="212" width="3.1056%" height="15" fill="rgb(237,72,25)"/><text x="83.1693%" y="222.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (20 samples, 3.11%)</title><rect x="82.9193%" y="228" width="3.1056%" height="15" fill="rgb(244,70,9)"/><text x="83.1693%" y="238.50">PyU..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (20 samples, 3.11%)</title><rect x="82.9193%" y="244" width="3.1056%" height="15" fill="rgb(217,125,39)"/><text x="83.1693%" y="254.50">PyU..</text></g><g><title>DOUBLE_divide (loops.c.src) (15 samples, 2.33%)</title><rect x="87.1118%" y="244" width="2.3292%" height="15" fill="rgb(235,36,10)"/><text x="87.3618%" y="254.50">D..</text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src) (15 samples, 2.33%)</title><rect x="87.1118%" y="260" width="2.3292%" height="15" fill="rgb(251,123,47)"/><text x="87.3618%" y="270.50">r..</text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src) (15 samples, 2.33%)</title><rect x="87.1118%" y="276" width="2.3292%" height="15" fill="rgb(221,13,13)"/><text x="87.3618%" y="286.50">s..</text></g><g><title>_mm_store_pd (emmintrin.h) (14 samples, 2.17%)</title><rect x="87.2671%" y="292" width="2.1739%" height="15" fill="rgb(238,131,9)"/><text x="87.5171%" y="302.50">_..</text></g><g><title>iterator_loop (ufunc_object.c) (17 samples, 2.64%)</title><rect x="87.1118%" y="228" width="2.6398%" height="15" fill="rgb(211,50,8)"/><text x="87.3618%" y="238.50">it..</text></g><g><title>0x7f2efc3b4225 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (23 samples, 3.57%)</title><rect x="89.7516%" y="260" width="3.5714%" height="15" fill="rgb(245,182,24)"/><text x="90.0016%" y="270.50">0x7f..</text></g><g><title>exp (libm-2.29.so) (21 samples, 3.26%)</title><rect x="90.0621%" y="276" width="3.2609%" height="15" fill="rgb(242,14,37)"/><text x="90.3121%" y="286.50">exp..</text></g><g><title>0x7f2efc39363d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (49 samples, 7.61%)</title><rect x="89.7516%" y="244" width="7.6087%" height="15" fill="rgb(246,228,12)"/><text x="90.0016%" y="254.50">0x7f2efc39..</text></g><g><title>0x7f2efc3b4239 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (25 samples, 3.88%)</title><rect x="93.4783%" y="260" width="3.8820%" height="15" fill="rgb(213,55,15)"/><text x="93.7283%" y="270.50">0x7f..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (74 samples, 11.49%)</title><rect x="86.3354%" y="212" width="11.4907%" height="15" fill="rgb(209,9,3)"/><text x="86.5854%" y="222.50">execute_legacy_uf..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (52 samples, 8.07%)</title><rect x="89.7516%" y="228" width="8.0745%" height="15" fill="rgb(230,59,30)"/><text x="90.0016%" y="238.50">trivial_two..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py) (248 samples, 38.51%)</title><rect x="59.6273%" y="164" width="38.5093%" height="15" fill="rgb(209,121,21)"/><text x="59.8773%" y="174.50">_predict_proba_lr (sklearn/linear_model/_base.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (78 samples, 12.11%)</title><rect x="86.0248%" y="180" width="12.1118%" height="15" fill="rgb(220,109,13)"/><text x="86.2748%" y="190.50">ufunc_generic_call..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (78 samples, 12.11%)</title><rect x="86.0248%" y="196" width="12.1118%" height="15" fill="rgb(232,18,1)"/><text x="86.2748%" y="206.50">PyUFunc_GenericFun..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (267 samples, 41.46%)</title><rect x="58.3851%" y="132" width="41.4596%" height="15" fill="rgb(215,41,42)"/><text x="58.6351%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py) (267 samples, 41.46%)</title><rect x="58.3851%" y="148" width="41.4596%" height="15" fill="rgb(224,123,36)"/><text x="58.6351%" y="158.50">predict_proba (sklearn/linear_model/_logistic.py)</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (11 samples, 1.71%)</title><rect x="98.1366%" y="164" width="1.7081%" height="15" fill="rgb(240,125,3)"/><text x="98.3866%" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (7 samples, 1.09%)</title><rect x="98.7578%" y="180" width="1.0870%" height="15" fill="rgb(205,98,50)"/><text x="99.0078%" y="190.50"></text></g><g><title>all (644 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (644 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py)</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (270 samples, 41.93%)</title><rect x="58.0745%" y="68" width="41.9255%" height="15" fill="rgb(213,199,42)"/><text x="58.3245%" y="78.50">profile_skl (bench_LogisticRegression_liblinear_b_cl_solverliblinear_..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (270 samples, 41.93%)</title><rect x="58.0745%" y="84" width="41.9255%" height="15" fill="rgb(235,201,11)"/><text x="58.3245%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinea..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py) (270 samples, 41.93%)</title><rect x="58.0745%" y="100" width="41.9255%" height="15" fill="rgb(207,46,11)"/><text x="58.3245%" y="110.50">profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (268 samples, 41.61%)</title><rect x="58.3851%" y="116" width="41.6149%" height="15" fill="rgb(241,35,35)"/><text x="58.6351%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g></svg></svg>