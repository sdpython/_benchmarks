<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1718" onload="init(evt)" viewBox="0 0 1200 1718" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1718" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1701.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1701.00"> </text><g id="frames"><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="12" y="932" width="3" height="15" fill="rgb(214,106,38)"/><text x="15.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.22%)</title><rect x="12" y="948" width="3" height="15" fill="rgb(206,96,24)"/><text x="15.00" y="958.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="292" width="5" height="15" fill="rgb(209,163,3)"/><text x="15.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="308" width="5" height="15" fill="rgb(245,58,22)"/><text x="15.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="324" width="5" height="15" fill="rgb(217,37,34)"/><text x="15.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="340" width="5" height="15" fill="rgb(205,171,7)"/><text x="15.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="12" y="356" width="5" height="15" fill="rgb(229,71,20)"/><text x="15.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="372" width="5" height="15" fill="rgb(240,134,16)"/><text x="15.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (2 samples, 0.43%)</title><rect x="12" y="388" width="5" height="15" fill="rgb(246,158,36)"/><text x="15.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="404" width="5" height="15" fill="rgb(238,116,7)"/><text x="15.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="420" width="5" height="15" fill="rgb(246,173,31)"/><text x="15.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="436" width="5" height="15" fill="rgb(236,116,45)"/><text x="15.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="12" y="452" width="5" height="15" fill="rgb(215,39,32)"/><text x="15.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="468" width="5" height="15" fill="rgb(249,202,7)"/><text x="15.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (2 samples, 0.43%)</title><rect x="12" y="484" width="5" height="15" fill="rgb(245,139,27)"/><text x="15.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="500" width="5" height="15" fill="rgb(211,221,2)"/><text x="15.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="516" width="5" height="15" fill="rgb(239,162,53)"/><text x="15.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="532" width="5" height="15" fill="rgb(206,216,40)"/><text x="15.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="12" y="548" width="5" height="15" fill="rgb(223,104,25)"/><text x="15.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="564" width="5" height="15" fill="rgb(216,74,20)"/><text x="15.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (2 samples, 0.43%)</title><rect x="12" y="580" width="5" height="15" fill="rgb(234,185,37)"/><text x="15.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="596" width="5" height="15" fill="rgb(252,104,26)"/><text x="15.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="612" width="5" height="15" fill="rgb(246,173,25)"/><text x="15.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="628" width="5" height="15" fill="rgb(238,84,50)"/><text x="15.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="644" width="5" height="15" fill="rgb(207,27,48)"/><text x="15.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="660" width="5" height="15" fill="rgb(239,76,1)"/><text x="15.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="676" width="5" height="15" fill="rgb(243,173,37)"/><text x="15.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="12" y="692" width="5" height="15" fill="rgb(208,106,38)"/><text x="15.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="708" width="5" height="15" fill="rgb(248,198,36)"/><text x="15.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="724" width="5" height="15" fill="rgb(211,205,2)"/><text x="15.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="740" width="5" height="15" fill="rgb(212,137,0)"/><text x="15.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="756" width="5" height="15" fill="rgb(233,184,51)"/><text x="15.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="772" width="5" height="15" fill="rgb(218,126,39)"/><text x="15.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="12" y="788" width="5" height="15" fill="rgb(210,131,7)"/><text x="15.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="12" y="804" width="5" height="15" fill="rgb(238,83,14)"/><text x="15.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="820" width="5" height="15" fill="rgb(220,202,52)"/><text x="15.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="836" width="5" height="15" fill="rgb(225,206,10)"/><text x="15.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="852" width="5" height="15" fill="rgb(249,11,8)"/><text x="15.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="868" width="5" height="15" fill="rgb(246,18,6)"/><text x="15.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="884" width="5" height="15" fill="rgb(248,163,21)"/><text x="15.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="900" width="5" height="15" fill="rgb(253,183,15)"/><text x="15.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="916" width="5" height="15" fill="rgb(221,112,41)"/><text x="15.00" y="926.50"></text></g><g><title>splitext (posixpath.py) (1 samples, 0.22%)</title><rect x="15" y="932" width="2" height="15" fill="rgb(253,105,5)"/><text x="18.00" y="942.50"></text></g><g><title>_splitext (genericpath.py) (1 samples, 0.22%)</title><rect x="15" y="948" width="2" height="15" fill="rgb(244,79,22)"/><text x="18.00" y="958.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="12" y="196" width="8" height="15" fill="rgb(224,212,3)"/><text x="15.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="12" y="212" width="8" height="15" fill="rgb(206,174,27)"/><text x="15.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="12" y="228" width="8" height="15" fill="rgb(205,207,41)"/><text x="15.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="12" y="244" width="8" height="15" fill="rgb(228,34,52)"/><text x="15.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="12" y="260" width="8" height="15" fill="rgb(239,29,3)"/><text x="15.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="12" y="276" width="8" height="15" fill="rgb(219,46,32)"/><text x="15.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (1 samples, 0.22%)</title><rect x="17" y="292" width="3" height="15" fill="rgb(220,201,10)"/><text x="20.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="308" width="3" height="15" fill="rgb(238,94,3)"/><text x="20.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="324" width="3" height="15" fill="rgb(242,18,27)"/><text x="20.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="340" width="3" height="15" fill="rgb(218,35,39)"/><text x="20.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="356" width="3" height="15" fill="rgb(232,192,14)"/><text x="20.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="372" width="3" height="15" fill="rgb(231,88,50)"/><text x="20.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (1 samples, 0.22%)</title><rect x="17" y="388" width="3" height="15" fill="rgb(231,60,16)"/><text x="20.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="404" width="3" height="15" fill="rgb(229,146,51)"/><text x="20.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="420" width="3" height="15" fill="rgb(217,224,49)"/><text x="20.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="436" width="3" height="15" fill="rgb(246,54,52)"/><text x="20.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="452" width="3" height="15" fill="rgb(234,100,43)"/><text x="20.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="468" width="3" height="15" fill="rgb(209,127,45)"/><text x="20.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (1 samples, 0.22%)</title><rect x="17" y="484" width="3" height="15" fill="rgb(227,87,51)"/><text x="20.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="500" width="3" height="15" fill="rgb(250,17,2)"/><text x="20.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="516" width="3" height="15" fill="rgb(218,192,17)"/><text x="20.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="532" width="3" height="15" fill="rgb(206,2,34)"/><text x="20.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="548" width="3" height="15" fill="rgb(208,60,30)"/><text x="20.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="564" width="3" height="15" fill="rgb(224,94,47)"/><text x="20.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.22%)</title><rect x="17" y="580" width="3" height="15" fill="rgb(247,111,27)"/><text x="20.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="596" width="3" height="15" fill="rgb(209,197,19)"/><text x="20.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="612" width="3" height="15" fill="rgb(241,129,37)"/><text x="20.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="628" width="3" height="15" fill="rgb(212,99,44)"/><text x="20.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="644" width="3" height="15" fill="rgb(226,218,38)"/><text x="20.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="660" width="3" height="15" fill="rgb(210,136,13)"/><text x="20.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.22%)</title><rect x="17" y="676" width="3" height="15" fill="rgb(247,121,8)"/><text x="20.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="692" width="3" height="15" fill="rgb(212,115,19)"/><text x="20.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="708" width="3" height="15" fill="rgb(222,132,0)"/><text x="20.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="724" width="3" height="15" fill="rgb(228,61,4)"/><text x="20.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="740" width="3" height="15" fill="rgb(207,85,23)"/><text x="20.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="756" width="3" height="15" fill="rgb(254,89,6)"/><text x="20.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (1 samples, 0.22%)</title><rect x="17" y="772" width="3" height="15" fill="rgb(213,107,11)"/><text x="20.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="788" width="3" height="15" fill="rgb(244,196,32)"/><text x="20.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="804" width="3" height="15" fill="rgb(229,99,39)"/><text x="20.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="820" width="3" height="15" fill="rgb(220,202,5)"/><text x="20.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="836" width="3" height="15" fill="rgb(217,62,32)"/><text x="20.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="852" width="3" height="15" fill="rgb(221,199,40)"/><text x="20.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="868" width="3" height="15" fill="rgb(230,19,28)"/><text x="20.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="884" width="3" height="15" fill="rgb(232,102,28)"/><text x="20.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.22%)</title><rect x="17" y="900" width="3" height="15" fill="rgb(248,4,12)"/><text x="20.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="916" width="3" height="15" fill="rgb(215,211,44)"/><text x="20.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="932" width="3" height="15" fill="rgb(233,67,3)"/><text x="20.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="948" width="3" height="15" fill="rgb(223,136,22)"/><text x="20.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="964" width="3" height="15" fill="rgb(231,20,31)"/><text x="20.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="980" width="3" height="15" fill="rgb(206,164,9)"/><text x="20.00" y="990.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_distn_infrastructure.py) (1 samples, 0.22%)</title><rect x="17" y="996" width="3" height="15" fill="rgb(224,194,10)"/><text x="20.00" y="1006.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1012" width="3" height="15" fill="rgb(216,185,14)"/><text x="20.00" y="1022.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1028" width="3" height="15" fill="rgb(239,129,18)"/><text x="20.00" y="1038.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1044" width="3" height="15" fill="rgb(223,77,29)"/><text x="20.00" y="1054.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1060" width="3" height="15" fill="rgb(228,212,9)"/><text x="20.00" y="1070.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1076" width="3" height="15" fill="rgb(228,166,18)"/><text x="20.00" y="1086.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="1092" width="3" height="15" fill="rgb(217,53,18)"/><text x="20.00" y="1102.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1108" width="3" height="15" fill="rgb(208,176,39)"/><text x="20.00" y="1118.50"></text></g><g><title>&lt;module&gt; (scipy/optimize/__init__.py) (1 samples, 0.22%)</title><rect x="17" y="1124" width="3" height="15" fill="rgb(234,56,31)"/><text x="20.00" y="1134.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1140" width="3" height="15" fill="rgb(246,164,38)"/><text x="20.00" y="1150.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1156" width="3" height="15" fill="rgb(226,167,13)"/><text x="20.00" y="1166.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="1172" width="3" height="15" fill="rgb(235,149,11)"/><text x="20.00" y="1182.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="1188" width="3" height="15" fill="rgb(207,184,35)"/><text x="20.00" y="1198.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="1204" width="3" height="15" fill="rgb(245,127,49)"/><text x="20.00" y="1214.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="1220" width="3" height="15" fill="rgb(251,123,50)"/><text x="20.00" y="1230.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1124" width="2" height="15" fill="rgb(248,164,8)"/><text x="23.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1140" width="2" height="15" fill="rgb(252,114,49)"/><text x="23.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1156" width="2" height="15" fill="rgb(243,17,35)"/><text x="23.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1172" width="2" height="15" fill="rgb(236,124,20)"/><text x="23.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1188" width="2" height="15" fill="rgb(205,25,49)"/><text x="23.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (1 samples, 0.22%)</title><rect x="20" y="1204" width="2" height="15" fill="rgb(220,49,48)"/><text x="23.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1220" width="2" height="15" fill="rgb(238,168,28)"/><text x="23.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1236" width="2" height="15" fill="rgb(234,79,35)"/><text x="23.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1252" width="2" height="15" fill="rgb(213,182,35)"/><text x="23.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1268" width="2" height="15" fill="rgb(220,57,10)"/><text x="23.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1284" width="2" height="15" fill="rgb(206,25,22)"/><text x="23.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (1 samples, 0.22%)</title><rect x="20" y="1300" width="2" height="15" fill="rgb(246,99,50)"/><text x="23.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (1 samples, 0.22%)</title><rect x="20" y="1316" width="2" height="15" fill="rgb(254,33,17)"/><text x="23.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (1 samples, 0.22%)</title><rect x="20" y="1332" width="2" height="15" fill="rgb(227,32,48)"/><text x="23.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (1 samples, 0.22%)</title><rect x="20" y="1348" width="2" height="15" fill="rgb(233,52,50)"/><text x="23.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (1 samples, 0.22%)</title><rect x="20" y="1364" width="2" height="15" fill="rgb(228,96,37)"/><text x="23.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py) (1 samples, 0.22%)</title><rect x="20" y="1380" width="2" height="15" fill="rgb(239,202,13)"/><text x="23.00" y="1390.50"></text></g><g><title>0x7f11847940e9 (?) (1 samples, 0.22%)</title><rect x="22" y="1508" width="3" height="15" fill="rgb(217,161,19)"/><text x="25.00" y="1518.50"></text></g><g><title>0x7f11847986e7 (?) (1 samples, 0.22%)</title><rect x="22" y="1524" width="3" height="15" fill="rgb(231,180,23)"/><text x="25.00" y="1534.50"></text></g><g><title>0x7f1184797593 (?) (1 samples, 0.22%)</title><rect x="22" y="1540" width="3" height="15" fill="rgb(240,92,49)"/><text x="25.00" y="1550.50"></text></g><g><title>0x7f11847973bf (?) (1 samples, 0.22%)</title><rect x="22" y="1556" width="3" height="15" fill="rgb(237,208,47)"/><text x="25.00" y="1566.50"></text></g><g><title>0x7f11847970b0 (?) (1 samples, 0.22%)</title><rect x="22" y="1572" width="3" height="15" fill="rgb(217,147,20)"/><text x="25.00" y="1582.50"></text></g><g><title>0x7f11841a57a0 (?) (1 samples, 0.22%)</title><rect x="22" y="1588" width="3" height="15" fill="rgb(221,113,10)"/><text x="25.00" y="1598.50"></text></g><g><title>0x7f1182a2b94d (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="27" y="1620" width="3" height="15" fill="rgb(251,60,5)"/><text x="30.00" y="1630.50"></text></g><g><title>google::protobuf::Message::_InternalParse (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="27" y="1636" width="3" height="15" fill="rgb(229,136,12)"/><text x="30.00" y="1646.50"></text></g><g><title>0x7f1182aeb89f (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="27" y="1652" width="3" height="15" fill="rgb(250,130,24)"/><text x="30.00" y="1662.50"></text></g><g><title>0x7f1182a206f0 (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="27" y="1668" width="3" height="15" fill="rgb(235,37,28)"/><text x="30.00" y="1678.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="484" width="12" height="15" fill="rgb(224,48,41)"/><text x="23.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="500" width="12" height="15" fill="rgb(221,22,11)"/><text x="23.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="516" width="12" height="15" fill="rgb(236,159,50)"/><text x="23.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="532" width="12" height="15" fill="rgb(238,228,24)"/><text x="23.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="20" y="548" width="12" height="15" fill="rgb(219,164,45)"/><text x="23.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="564" width="12" height="15" fill="rgb(253,222,28)"/><text x="23.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (5 samples, 1.08%)</title><rect x="20" y="580" width="12" height="15" fill="rgb(253,75,19)"/><text x="23.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="596" width="12" height="15" fill="rgb(216,28,0)"/><text x="23.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="612" width="12" height="15" fill="rgb(246,171,48)"/><text x="23.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="628" width="12" height="15" fill="rgb(234,99,4)"/><text x="23.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="20" y="644" width="12" height="15" fill="rgb(222,209,2)"/><text x="23.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="660" width="12" height="15" fill="rgb(253,91,23)"/><text x="23.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (5 samples, 1.08%)</title><rect x="20" y="676" width="12" height="15" fill="rgb(217,147,11)"/><text x="23.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="692" width="12" height="15" fill="rgb(208,158,37)"/><text x="23.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="708" width="12" height="15" fill="rgb(250,141,3)"/><text x="23.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="724" width="12" height="15" fill="rgb(216,119,39)"/><text x="23.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="20" y="740" width="12" height="15" fill="rgb(249,156,24)"/><text x="23.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="756" width="12" height="15" fill="rgb(251,28,1)"/><text x="23.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (5 samples, 1.08%)</title><rect x="20" y="772" width="12" height="15" fill="rgb(252,165,28)"/><text x="23.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="788" width="12" height="15" fill="rgb(244,151,45)"/><text x="23.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="804" width="12" height="15" fill="rgb(252,113,18)"/><text x="23.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="820" width="12" height="15" fill="rgb(244,173,18)"/><text x="23.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="20" y="836" width="12" height="15" fill="rgb(247,6,33)"/><text x="23.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="852" width="12" height="15" fill="rgb(218,4,52)"/><text x="23.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (5 samples, 1.08%)</title><rect x="20" y="868" width="12" height="15" fill="rgb(253,140,1)"/><text x="23.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="884" width="12" height="15" fill="rgb(248,112,38)"/><text x="23.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="900" width="12" height="15" fill="rgb(240,125,42)"/><text x="23.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="916" width="12" height="15" fill="rgb(205,149,35)"/><text x="23.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="932" width="12" height="15" fill="rgb(235,18,7)"/><text x="23.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="948" width="12" height="15" fill="rgb(205,202,26)"/><text x="23.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="964" width="12" height="15" fill="rgb(228,118,49)"/><text x="23.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="20" y="980" width="12" height="15" fill="rgb(234,62,3)"/><text x="23.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="996" width="12" height="15" fill="rgb(239,154,41)"/><text x="23.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (5 samples, 1.08%)</title><rect x="20" y="1012" width="12" height="15" fill="rgb(209,133,52)"/><text x="23.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="1028" width="12" height="15" fill="rgb(249,116,5)"/><text x="23.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="1044" width="12" height="15" fill="rgb(242,19,37)"/><text x="23.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="1060" width="12" height="15" fill="rgb(226,201,12)"/><text x="23.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="20" y="1076" width="12" height="15" fill="rgb(236,167,35)"/><text x="23.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="20" y="1092" width="12" height="15" fill="rgb(247,161,28)"/><text x="23.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (5 samples, 1.08%)</title><rect x="20" y="1108" width="12" height="15" fill="rgb(222,104,41)"/><text x="23.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1124" width="10" height="15" fill="rgb(212,226,51)"/><text x="25.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1140" width="10" height="15" fill="rgb(227,209,51)"/><text x="25.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1156" width="10" height="15" fill="rgb(253,113,10)"/><text x="25.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1172" width="10" height="15" fill="rgb(213,27,27)"/><text x="25.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1188" width="10" height="15" fill="rgb(209,40,2)"/><text x="25.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.86%)</title><rect x="22" y="1204" width="10" height="15" fill="rgb(235,51,47)"/><text x="25.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1220" width="10" height="15" fill="rgb(226,211,8)"/><text x="25.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (4 samples, 0.86%)</title><rect x="22" y="1236" width="10" height="15" fill="rgb(250,227,44)"/><text x="25.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1252" width="10" height="15" fill="rgb(251,45,5)"/><text x="25.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1268" width="10" height="15" fill="rgb(216,103,35)"/><text x="25.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1284" width="10" height="15" fill="rgb(230,216,50)"/><text x="25.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1300" width="10" height="15" fill="rgb(253,25,7)"/><text x="25.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1316" width="10" height="15" fill="rgb(209,141,12)"/><text x="25.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.86%)</title><rect x="22" y="1332" width="10" height="15" fill="rgb(206,172,1)"/><text x="25.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1348" width="10" height="15" fill="rgb(241,93,24)"/><text x="25.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (4 samples, 0.86%)</title><rect x="22" y="1364" width="10" height="15" fill="rgb(216,84,45)"/><text x="25.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1380" width="10" height="15" fill="rgb(237,6,46)"/><text x="25.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1396" width="10" height="15" fill="rgb(236,24,44)"/><text x="25.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1412" width="10" height="15" fill="rgb(230,44,11)"/><text x="25.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.86%)</title><rect x="22" y="1428" width="10" height="15" fill="rgb(214,47,11)"/><text x="25.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="22" y="1444" width="10" height="15" fill="rgb(239,177,34)"/><text x="25.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.86%)</title><rect x="22" y="1460" width="10" height="15" fill="rgb(231,46,5)"/><text x="25.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.86%)</title><rect x="22" y="1476" width="10" height="15" fill="rgb(254,34,52)"/><text x="25.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.86%)</title><rect x="22" y="1492" width="10" height="15" fill="rgb(212,97,3)"/><text x="25.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (3 samples, 0.65%)</title><rect x="25" y="1508" width="7" height="15" fill="rgb(242,67,17)"/><text x="28.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (3 samples, 0.65%)</title><rect x="25" y="1524" width="7" height="15" fill="rgb(241,148,53)"/><text x="28.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (3 samples, 0.65%)</title><rect x="25" y="1540" width="7" height="15" fill="rgb(220,17,3)"/><text x="28.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (3 samples, 0.65%)</title><rect x="25" y="1556" width="7" height="15" fill="rgb(247,1,3)"/><text x="28.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (3 samples, 0.65%)</title><rect x="25" y="1572" width="7" height="15" fill="rgb(242,151,28)"/><text x="28.00" y="1582.50"></text></g><g><title>getattr (jinja2/environment.py) (3 samples, 0.65%)</title><rect x="25" y="1588" width="7" height="15" fill="rgb(214,146,35)"/><text x="28.00" y="1598.50"></text></g><g><title>_Attribute_default_value (onnx/defs/__init__.py) (2 samples, 0.43%)</title><rect x="27" y="1604" width="5" height="15" fill="rgb(224,38,39)"/><text x="30.00" y="1614.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="30" y="1620" width="2" height="15" fill="rgb(218,39,40)"/><text x="33.00" y="1630.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="772" width="3" height="15" fill="rgb(244,43,20)"/><text x="35.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="788" width="3" height="15" fill="rgb(249,162,13)"/><text x="35.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="804" width="3" height="15" fill="rgb(220,70,41)"/><text x="35.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="820" width="3" height="15" fill="rgb(220,95,3)"/><text x="35.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="32" y="836" width="3" height="15" fill="rgb(210,70,5)"/><text x="35.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="852" width="3" height="15" fill="rgb(223,214,0)"/><text x="35.00" y="862.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/__init__.py) (1 samples, 0.22%)</title><rect x="32" y="868" width="3" height="15" fill="rgb(250,18,36)"/><text x="35.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="884" width="3" height="15" fill="rgb(206,174,37)"/><text x="35.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="900" width="3" height="15" fill="rgb(248,225,6)"/><text x="35.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="916" width="3" height="15" fill="rgb(221,147,19)"/><text x="35.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="32" y="932" width="3" height="15" fill="rgb(228,220,35)"/><text x="35.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="948" width="3" height="15" fill="rgb(249,184,30)"/><text x="35.00" y="958.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/base.py) (1 samples, 0.22%)</title><rect x="32" y="964" width="3" height="15" fill="rgb(248,166,51)"/><text x="35.00" y="974.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="980" width="3" height="15" fill="rgb(247,116,9)"/><text x="35.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="996" width="3" height="15" fill="rgb(206,102,19)"/><text x="35.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="1012" width="3" height="15" fill="rgb(213,26,51)"/><text x="35.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="1028" width="3" height="15" fill="rgb(240,22,44)"/><text x="35.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="32" y="1044" width="3" height="15" fill="rgb(236,164,4)"/><text x="35.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="32" y="1060" width="3" height="15" fill="rgb(251,80,25)"/><text x="35.00" y="1070.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="32" y="1076" width="3" height="15" fill="rgb(236,86,34)"/><text x="35.00" y="1086.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="32" y="1092" width="3" height="15" fill="rgb(246,173,0)"/><text x="35.00" y="1102.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.37%)</title><rect x="12" y="68" width="28" height="15" fill="rgb(246,159,49)"/><text x="15.00" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.37%)</title><rect x="12" y="84" width="28" height="15" fill="rgb(233,19,48)"/><text x="15.00" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.37%)</title><rect x="12" y="100" width="28" height="15" fill="rgb(211,71,38)"/><text x="15.00" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 2.37%)</title><rect x="12" y="116" width="28" height="15" fill="rgb(231,29,4)"/><text x="15.00" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.37%)</title><rect x="12" y="132" width="28" height="15" fill="rgb(247,211,6)"/><text x="15.00" y="142.50">_..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostClassifier/bench_AdaBoostClassifier_default_b_cl.py) (11 samples, 2.37%)</title><rect x="12" y="148" width="28" height="15" fill="rgb(232,142,12)"/><text x="15.00" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.37%)</title><rect x="12" y="164" width="28" height="15" fill="rgb(217,221,16)"/><text x="15.00" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.37%)</title><rect x="12" y="180" width="28" height="15" fill="rgb(206,97,24)"/><text x="15.00" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="196" width="20" height="15" fill="rgb(217,39,22)"/><text x="23.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.72%)</title><rect x="20" y="212" width="20" height="15" fill="rgb(210,95,49)"/><text x="23.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="228" width="20" height="15" fill="rgb(250,91,14)"/><text x="23.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (8 samples, 1.72%)</title><rect x="20" y="244" width="20" height="15" fill="rgb(227,198,1)"/><text x="23.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="260" width="20" height="15" fill="rgb(231,188,32)"/><text x="23.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="276" width="20" height="15" fill="rgb(237,95,1)"/><text x="23.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="292" width="20" height="15" fill="rgb(239,210,23)"/><text x="23.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.72%)</title><rect x="20" y="308" width="20" height="15" fill="rgb(235,139,30)"/><text x="23.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="324" width="20" height="15" fill="rgb(221,108,38)"/><text x="23.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 1.72%)</title><rect x="20" y="340" width="20" height="15" fill="rgb(225,181,30)"/><text x="23.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="356" width="20" height="15" fill="rgb(213,192,1)"/><text x="23.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="372" width="20" height="15" fill="rgb(230,227,39)"/><text x="23.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="388" width="20" height="15" fill="rgb(205,95,33)"/><text x="23.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.72%)</title><rect x="20" y="404" width="20" height="15" fill="rgb(211,58,50)"/><text x="23.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="420" width="20" height="15" fill="rgb(240,169,31)"/><text x="23.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (8 samples, 1.72%)</title><rect x="20" y="436" width="20" height="15" fill="rgb(251,122,11)"/><text x="23.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="452" width="20" height="15" fill="rgb(208,109,48)"/><text x="23.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="20" y="468" width="20" height="15" fill="rgb(229,90,31)"/><text x="23.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="484" width="8" height="15" fill="rgb(226,83,52)"/><text x="35.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="32" y="500" width="8" height="15" fill="rgb(252,151,39)"/><text x="35.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="516" width="8" height="15" fill="rgb(229,22,48)"/><text x="35.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.65%)</title><rect x="32" y="532" width="8" height="15" fill="rgb(228,222,16)"/><text x="35.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="548" width="8" height="15" fill="rgb(223,110,47)"/><text x="35.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="564" width="8" height="15" fill="rgb(218,51,13)"/><text x="35.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="580" width="8" height="15" fill="rgb(244,180,44)"/><text x="35.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="32" y="596" width="8" height="15" fill="rgb(208,100,2)"/><text x="35.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="612" width="8" height="15" fill="rgb(247,79,52)"/><text x="35.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.65%)</title><rect x="32" y="628" width="8" height="15" fill="rgb(252,77,24)"/><text x="35.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="644" width="8" height="15" fill="rgb(206,215,6)"/><text x="35.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="660" width="8" height="15" fill="rgb(212,196,1)"/><text x="35.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="676" width="8" height="15" fill="rgb(229,49,26)"/><text x="35.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="32" y="692" width="8" height="15" fill="rgb(212,219,32)"/><text x="35.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="708" width="8" height="15" fill="rgb(215,126,10)"/><text x="35.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (3 samples, 0.65%)</title><rect x="32" y="724" width="8" height="15" fill="rgb(220,203,41)"/><text x="35.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="740" width="8" height="15" fill="rgb(217,206,30)"/><text x="35.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="32" y="756" width="8" height="15" fill="rgb(250,30,31)"/><text x="35.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="35" y="772" width="5" height="15" fill="rgb(211,0,1)"/><text x="38.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="35" y="788" width="5" height="15" fill="rgb(244,162,3)"/><text x="38.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="35" y="804" width="5" height="15" fill="rgb(237,213,9)"/><text x="38.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (2 samples, 0.43%)</title><rect x="35" y="820" width="5" height="15" fill="rgb(243,74,30)"/><text x="38.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="35" y="836" width="5" height="15" fill="rgb(242,198,14)"/><text x="38.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="35" y="852" width="5" height="15" fill="rgb(215,199,34)"/><text x="38.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="35" y="868" width="5" height="15" fill="rgb(233,107,6)"/><text x="38.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="35" y="884" width="5" height="15" fill="rgb(238,58,13)"/><text x="38.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="35" y="900" width="5" height="15" fill="rgb(232,5,25)"/><text x="38.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (2 samples, 0.43%)</title><rect x="35" y="916" width="5" height="15" fill="rgb(226,205,14)"/><text x="38.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="37" y="932" width="3" height="15" fill="rgb(219,40,51)"/><text x="40.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="37" y="948" width="3" height="15" fill="rgb(231,172,9)"/><text x="40.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="37" y="964" width="3" height="15" fill="rgb(224,183,43)"/><text x="40.00" y="974.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="37" y="980" width="3" height="15" fill="rgb(218,185,46)"/><text x="40.00" y="990.50"></text></g><g><title>_init_module_attrs (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="37" y="996" width="3" height="15" fill="rgb(230,212,16)"/><text x="40.00" y="1006.50"></text></g><g><title>0x7f1154396ff9 (?) (1 samples, 0.22%)</title><rect x="40" y="212" width="3" height="15" fill="rgb(226,71,27)"/><text x="43.00" y="222.50"></text></g><g><title>0x7f1154391ef6 (?) (1 samples, 0.22%)</title><rect x="40" y="228" width="3" height="15" fill="rgb(229,168,6)"/><text x="43.00" y="238.50"></text></g><g><title>0x7f1154386962 (?) (1 samples, 0.22%)</title><rect x="40" y="244" width="3" height="15" fill="rgb(224,36,17)"/><text x="43.00" y="254.50"></text></g><g><title>0x7f11543ba7a7 (?) (1 samples, 0.22%)</title><rect x="40" y="260" width="3" height="15" fill="rgb(216,99,46)"/><text x="43.00" y="270.50"></text></g><g><title>0x7f11543ba379 (?) (1 samples, 0.22%)</title><rect x="40" y="276" width="3" height="15" fill="rgb(230,23,10)"/><text x="43.00" y="286.50"></text></g><g><title>0x7f11548188b8 (?) (1 samples, 0.22%)</title><rect x="40" y="292" width="3" height="15" fill="rgb(207,168,33)"/><text x="43.00" y="302.50"></text></g><g><title>0x7f1154816c7f (?) (1 samples, 0.22%)</title><rect x="40" y="308" width="3" height="15" fill="rgb(245,176,4)"/><text x="43.00" y="318.50"></text></g><g><title>0x7f1154829ceb (?) (1 samples, 0.22%)</title><rect x="40" y="324" width="3" height="15" fill="rgb(211,131,36)"/><text x="43.00" y="334.50"></text></g><g><title>0x7f11547c863a (?) (1 samples, 0.22%)</title><rect x="40" y="340" width="3" height="15" fill="rgb(210,150,12)"/><text x="43.00" y="350.50"></text></g><g><title>0x7f11547ca360 (?) (1 samples, 0.22%)</title><rect x="40" y="356" width="3" height="15" fill="rgb(238,145,12)"/><text x="43.00" y="366.50"></text></g><g><title>0x7f11547ca09a (?) (1 samples, 0.22%)</title><rect x="40" y="372" width="3" height="15" fill="rgb(249,22,21)"/><text x="43.00" y="382.50"></text></g><g><title>0x7f11547b9e0e (?) (1 samples, 0.22%)</title><rect x="40" y="388" width="3" height="15" fill="rgb(236,30,22)"/><text x="43.00" y="398.50"></text></g><g><title>0x7f11547fcf7c (?) (1 samples, 0.22%)</title><rect x="40" y="404" width="3" height="15" fill="rgb(254,125,3)"/><text x="43.00" y="414.50"></text></g><g><title>0x7f11946d8d07 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="40" y="420" width="3" height="15" fill="rgb(236,82,19)"/><text x="43.00" y="430.50"></text></g><g><title>onnxruntime::Clip&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="340" width="2" height="15" fill="rgb(232,61,52)"/><text x="46.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="356" width="2" height="15" fill="rgb(242,165,5)"/><text x="46.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="372" width="2" height="15" fill="rgb(211,140,28)"/><text x="46.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="388" width="2" height="15" fill="rgb(210,114,54)"/><text x="46.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="404" width="2" height="15" fill="rgb(241,35,2)"/><text x="46.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="420" width="2" height="15" fill="rgb(248,41,30)"/><text x="46.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="436" width="2" height="15" fill="rgb(220,4,20)"/><text x="46.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="452" width="2" height="15" fill="rgb(243,37,52)"/><text x="46.00" y="462.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="43" y="468" width="2" height="15" fill="rgb(223,214,34)"/><text x="46.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="45" y="372" width="3" height="15" fill="rgb(228,164,46)"/><text x="48.00" y="382.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="45" y="388" width="3" height="15" fill="rgb(219,34,20)"/><text x="48.00" y="398.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="45" y="404" width="3" height="15" fill="rgb(218,204,54)"/><text x="48.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="45" y="420" width="3" height="15" fill="rgb(225,68,30)"/><text x="48.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="45" y="436" width="3" height="15" fill="rgb(227,140,35)"/><text x="48.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="45" y="452" width="3" height="15" fill="rgb(212,84,40)"/><text x="48.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="45" y="468" width="3" height="15" fill="rgb(206,144,12)"/><text x="48.00" y="478.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="45" y="484" width="3" height="15" fill="rgb(216,32,35)"/><text x="48.00" y="494.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.43%)</title><rect x="45" y="340" width="5" height="15" fill="rgb(206,181,0)"/><text x="48.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.43%)</title><rect x="45" y="356" width="5" height="15" fill="rgb(222,35,14)"/><text x="48.00" y="366.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="48" y="372" width="2" height="15" fill="rgb(208,202,29)"/><text x="51.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="48" y="388" width="2" height="15" fill="rgb(233,46,8)"/><text x="51.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="48" y="404" width="2" height="15" fill="rgb(218,154,24)"/><text x="51.00" y="414.50"></text></g><g><title>0x7f11946da00a (libc-2.29.so) (1 samples, 0.22%)</title><rect x="48" y="420" width="2" height="15" fill="rgb(243,215,29)"/><text x="51.00" y="430.50"></text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="50" y="340" width="3" height="15" fill="rgb(230,155,31)"/><text x="53.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelInfo::node (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="50" y="356" width="3" height="15" fill="rgb(237,122,47)"/><text x="53.00" y="366.50"></text></g><g><title>0x7f115435e0f0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="53" y="356" width="2" height="15" fill="rgb(226,152,19)"/><text x="56.00" y="366.50"></text></g><g><title>onnxruntime::Reshape::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.43%)</title><rect x="53" y="340" width="5" height="15" fill="rgb(230,70,16)"/><text x="56.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="55" y="356" width="3" height="15" fill="rgb(213,207,6)"/><text x="58.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="55" y="372" width="3" height="15" fill="rgb(223,40,14)"/><text x="58.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="55" y="388" width="3" height="15" fill="rgb(210,104,2)"/><text x="58.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="55" y="404" width="3" height="15" fill="rgb(249,142,17)"/><text x="58.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="55" y="420" width="3" height="15" fill="rgb(239,93,43)"/><text x="58.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="55" y="436" width="3" height="15" fill="rgb(235,58,17)"/><text x="58.00" y="446.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="55" y="452" width="3" height="15" fill="rgb(232,28,44)"/><text x="58.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="55" y="468" width="3" height="15" fill="rgb(234,99,29)"/><text x="58.00" y="478.50"></text></g><g><title>onnxruntime::Sum_8&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="58" y="340" width="2" height="15" fill="rgb(249,182,5)"/><text x="61.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastVariadic&lt;float, float, onnxruntime::Sum_8&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sum_8&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sum_8&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; [clone .isra.816] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="58" y="356" width="2" height="15" fill="rgb(246,90,12)"/><text x="61.00" y="366.50"></text></g><g><title>0x7f11946d8982 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="58" y="372" width="2" height="15" fill="rgb(237,131,18)"/><text x="61.00" y="382.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="63" y="356" width="2" height="15" fill="rgb(210,147,25)"/><text x="66.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="63" y="372" width="2" height="15" fill="rgb(225,218,2)"/><text x="66.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="63" y="388" width="2" height="15" fill="rgb(215,66,24)"/><text x="66.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="63" y="404" width="2" height="15" fill="rgb(223,8,48)"/><text x="66.00" y="414.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.65%)</title><rect x="60" y="340" width="8" height="15" fill="rgb(254,60,17)"/><text x="63.00" y="350.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="65" y="356" width="3" height="15" fill="rgb(250,97,33)"/><text x="68.00" y="366.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;long, float&gt;&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="65" y="372" width="3" height="15" fill="rgb(234,38,16)"/><text x="68.00" y="382.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 2.37%)</title><rect x="43" y="244" width="28" height="15" fill="rgb(216,174,4)"/><text x="46.00" y="254.50">o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 2.37%)</title><rect x="43" y="260" width="28" height="15" fill="rgb(220,147,8)"/><text x="46.00" y="270.50">o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 2.37%)</title><rect x="43" y="276" width="28" height="15" fill="rgb(239,160,17)"/><text x="46.00" y="286.50">o..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 2.37%)</title><rect x="43" y="292" width="28" height="15" fill="rgb(216,11,9)"/><text x="46.00" y="302.50">o..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 2.37%)</title><rect x="43" y="308" width="28" height="15" fill="rgb(247,97,12)"/><text x="46.00" y="318.50">o..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 2.37%)</title><rect x="43" y="324" width="28" height="15" fill="rgb(235,71,45)"/><text x="46.00" y="334.50">o..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="68" y="340" width="3" height="15" fill="rgb(232,211,20)"/><text x="71.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="68" y="356" width="3" height="15" fill="rgb(214,219,49)"/><text x="71.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="68" y="372" width="3" height="15" fill="rgb(215,182,11)"/><text x="71.00" y="382.50"></text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (13 samples, 2.80%)</title><rect x="40" y="100" width="33" height="15" fill="rgb(207,30,37)"/><text x="43.00" y="110.50">pr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (13 samples, 2.80%)</title><rect x="40" y="116" width="33" height="15" fill="rgb(237,190,17)"/><text x="43.00" y="126.50">ti..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (13 samples, 2.80%)</title><rect x="40" y="132" width="33" height="15" fill="rgb(241,117,40)"/><text x="43.00" y="142.50">&lt;l..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (13 samples, 2.80%)</title><rect x="40" y="148" width="33" height="15" fill="rgb(230,150,45)"/><text x="43.00" y="158.50">ru..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (13 samples, 2.80%)</title><rect x="40" y="164" width="33" height="15" fill="rgb(217,88,47)"/><text x="43.00" y="174.50">_r..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (13 samples, 2.80%)</title><rect x="40" y="180" width="33" height="15" fill="rgb(215,46,2)"/><text x="43.00" y="190.50">ru..</text></g><g><title>run (onnxruntime/capi/session.py) (13 samples, 2.80%)</title><rect x="40" y="196" width="33" height="15" fill="rgb(247,172,31)"/><text x="43.00" y="206.50">ru..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 2.59%)</title><rect x="43" y="212" width="30" height="15" fill="rgb(252,216,17)"/><text x="46.00" y="222.50">py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 2.59%)</title><rect x="43" y="228" width="30" height="15" fill="rgb(233,25,34)"/><text x="46.00" y="238.50">vo..</text></g><g><title>std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;::~vector [clone .lto_priv.576] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="71" y="244" width="2" height="15" fill="rgb(211,143,28)"/><text x="74.00" y="254.50"></text></g><g><title>convert_sklearn_ada_boost_classifier (skl2onnx/operator_converters/ada_boost.py) (1 samples, 0.22%)</title><rect x="73" y="196" width="3" height="15" fill="rgb(213,150,52)"/><text x="76.00" y="206.50"></text></g><g><title>_samme_r_proba (skl2onnx/operator_converters/ada_boost.py) (1 samples, 0.22%)</title><rect x="73" y="212" width="3" height="15" fill="rgb(231,117,1)"/><text x="76.00" y="222.50"></text></g><g><title>apply_reshape (onnxconverter_common/onnx_ops.py) (1 samples, 0.22%)</title><rect x="73" y="228" width="3" height="15" fill="rgb(219,108,24)"/><text x="76.00" y="238.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (1 samples, 0.22%)</title><rect x="73" y="244" width="3" height="15" fill="rgb(230,178,31)"/><text x="76.00" y="254.50"></text></g><g><title>_check_operator (skl2onnx/common/_container.py) (1 samples, 0.22%)</title><rect x="73" y="260" width="3" height="15" fill="rgb(237,222,21)"/><text x="76.00" y="270.50"></text></g><g><title>extract_stack (traceback.py) (1 samples, 0.22%)</title><rect x="73" y="276" width="3" height="15" fill="rgb(228,182,17)"/><text x="76.00" y="286.50"></text></g><g><title>extract (traceback.py) (1 samples, 0.22%)</title><rect x="73" y="292" width="3" height="15" fill="rgb(236,142,15)"/><text x="76.00" y="302.50"></text></g><g><title>checkcache (linecache.py) (1 samples, 0.22%)</title><rect x="73" y="308" width="3" height="15" fill="rgb(242,50,28)"/><text x="76.00" y="318.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.22%)</title><rect x="73" y="324" width="3" height="15" fill="rgb(235,61,20)"/><text x="76.00" y="334.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.43%)</title><rect x="73" y="116" width="5" height="15" fill="rgb(211,79,14)"/><text x="76.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.43%)</title><rect x="73" y="132" width="5" height="15" fill="rgb(221,51,25)"/><text x="76.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (2 samples, 0.43%)</title><rect x="73" y="148" width="5" height="15" fill="rgb(210,109,50)"/><text x="76.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (2 samples, 0.43%)</title><rect x="73" y="164" width="5" height="15" fill="rgb(242,214,15)"/><text x="76.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (2 samples, 0.43%)</title><rect x="73" y="180" width="5" height="15" fill="rgb(207,48,23)"/><text x="76.00" y="190.50"></text></g><g><title>convert_sklearn_decision_tree_classifier (skl2onnx/operator_converters/decision_tree.py) (1 samples, 0.22%)</title><rect x="76" y="196" width="2" height="15" fill="rgb(253,89,54)"/><text x="79.00" y="206.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (1 samples, 0.22%)</title><rect x="76" y="212" width="2" height="15" fill="rgb(245,111,22)"/><text x="79.00" y="222.50"></text></g><g><title>make_node (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.22%)</title><rect x="76" y="228" width="2" height="15" fill="rgb(205,133,51)"/><text x="79.00" y="238.50"></text></g><g><title>google::protobuf::python::repeated_composite_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="76" y="244" width="2" height="15" fill="rgb(227,228,1)"/><text x="79.00" y="254.50"></text></g><g><title>profile_ort (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (16 samples, 3.45%)</title><rect x="40" y="68" width="41" height="15" fill="rgb(229,135,22)"/><text x="43.00" y="78.50">pro..</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (16 samples, 3.45%)</title><rect x="40" y="84" width="41" height="15" fill="rgb(211,190,5)"/><text x="43.00" y="94.50">set..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.65%)</title><rect x="73" y="100" width="8" height="15" fill="rgb(221,220,7)"/><text x="76.00" y="110.50"></text></g><g><title>register_converters (mlprodict/onnx_conv/register.py) (1 samples, 0.22%)</title><rect x="78" y="116" width="3" height="15" fill="rgb(242,19,54)"/><text x="81.00" y="126.50"></text></g><g><title>_register_converters_lightgbm (mlprodict/onnx_conv/register.py) (1 samples, 0.22%)</title><rect x="78" y="132" width="3" height="15" fill="rgb(212,96,0)"/><text x="81.00" y="142.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (4 samples, 0.86%)</title><rect x="185" y="196" width="10" height="15" fill="rgb(217,36,3)"/><text x="188.00" y="206.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (1 samples, 0.22%)</title><rect x="210" y="244" width="3" height="15" fill="rgb(212,148,7)"/><text x="213.00" y="254.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="210" y="260" width="3" height="15" fill="rgb(237,172,33)"/><text x="213.00" y="270.50"></text></g><g><title>0x7f11946da028 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="210" y="276" width="3" height="15" fill="rgb(229,160,22)"/><text x="213.00" y="286.50"></text></g><g><title>0x7f11946d7bcc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="210" y="292" width="3" height="15" fill="rgb(221,31,34)"/><text x="213.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (2 samples, 0.43%)</title><rect x="210" y="212" width="5" height="15" fill="rgb(246,18,5)"/><text x="213.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.43%)</title><rect x="210" y="228" width="5" height="15" fill="rgb(217,95,15)"/><text x="213.00" y="238.50"></text></g><g><title>arraymapiter_dealloc (mapping.c) (1 samples, 0.22%)</title><rect x="213" y="244" width="2" height="15" fill="rgb(240,18,18)"/><text x="216.00" y="254.50"></text></g><g><title>PyArray_ResolveWritebackIfCopy (arrayobject.c) (1 samples, 0.22%)</title><rect x="213" y="260" width="2" height="15" fill="rgb(211,87,29)"/><text x="216.00" y="270.50"></text></g><g><title>array_item (mapping.c) (1 samples, 0.22%)</title><rect x="218" y="276" width="3" height="15" fill="rgb(209,6,31)"/><text x="221.00" y="286.50"></text></g><g><title>PyArray_Scalar (scalarapi.c) (1 samples, 0.22%)</title><rect x="218" y="292" width="3" height="15" fill="rgb(221,94,42)"/><text x="221.00" y="302.50"></text></g><g><title>scalar_value (scalarapi.c) (1 samples, 0.22%)</title><rect x="218" y="308" width="3" height="15" fill="rgb(237,226,47)"/><text x="221.00" y="318.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (2 samples, 0.43%)</title><rect x="218" y="244" width="5" height="15" fill="rgb(215,27,8)"/><text x="221.00" y="254.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (2 samples, 0.43%)</title><rect x="218" y="260" width="5" height="15" fill="rgb(245,132,18)"/><text x="221.00" y="270.50"></text></g><g><title>gentype_dealloc (scalartypes.c.src) (1 samples, 0.22%)</title><rect x="221" y="276" width="2" height="15" fill="rgb(254,80,53)"/><text x="224.00" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="221" y="292" width="2" height="15" fill="rgb(205,3,24)"/><text x="224.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="221" y="308" width="2" height="15" fill="rgb(245,30,44)"/><text x="224.00" y="318.50"></text></g><g><title>PyArray_SetBaseObject (arrayobject.c) (1 samples, 0.22%)</title><rect x="226" y="292" width="2" height="15" fill="rgb(216,177,21)"/><text x="229.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py) (6 samples, 1.29%)</title><rect x="215" y="212" width="16" height="15" fill="rgb(238,89,8)"/><text x="218.00" y="222.50"></text></g><g><title>array_reshape (methods.c) (5 samples, 1.08%)</title><rect x="218" y="228" width="13" height="15" fill="rgb(236,15,20)"/><text x="221.00" y="238.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (3 samples, 0.65%)</title><rect x="223" y="244" width="8" height="15" fill="rgb(227,150,25)"/><text x="226.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c) (3 samples, 0.65%)</title><rect x="223" y="260" width="8" height="15" fill="rgb(220,20,4)"/><text x="226.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.43%)</title><rect x="226" y="276" width="5" height="15" fill="rgb(241,147,17)"/><text x="229.00" y="286.50"></text></g><g><title>_array_fill_strides (ctors.c) (1 samples, 0.22%)</title><rect x="228" y="292" width="3" height="15" fill="rgb(225,75,45)"/><text x="231.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.43%)</title><rect x="254" y="260" width="5" height="15" fill="rgb(211,59,36)"/><text x="257.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.43%)</title><rect x="254" y="276" width="5" height="15" fill="rgb(213,32,35)"/><text x="257.00" y="286.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (2 samples, 0.43%)</title><rect x="254" y="292" width="5" height="15" fill="rgb(211,126,40)"/><text x="257.00" y="302.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.22%)</title><rect x="256" y="308" width="3" height="15" fill="rgb(232,149,15)"/><text x="259.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="261" y="276" width="3" height="15" fill="rgb(217,190,26)"/><text x="264.00" y="286.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.22%)</title><rect x="261" y="292" width="3" height="15" fill="rgb(251,17,43)"/><text x="264.00" y="302.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.22%)</title><rect x="274" y="388" width="3" height="15" fill="rgb(210,90,53)"/><text x="277.00" y="398.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.22%)</title><rect x="274" y="404" width="3" height="15" fill="rgb(216,211,26)"/><text x="277.00" y="414.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.22%)</title><rect x="274" y="420" width="3" height="15" fill="rgb(210,100,27)"/><text x="277.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="274" y="436" width="3" height="15" fill="rgb(236,69,48)"/><text x="277.00" y="446.50"></text></g><g><title>0x7f11946da6df (libc-2.29.so) (1 samples, 0.22%)</title><rect x="274" y="452" width="3" height="15" fill="rgb(214,128,2)"/><text x="277.00" y="462.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (3 samples, 0.65%)</title><rect x="271" y="340" width="8" height="15" fill="rgb(208,126,1)"/><text x="274.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (3 samples, 0.65%)</title><rect x="271" y="356" width="8" height="15" fill="rgb(243,130,48)"/><text x="274.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (3 samples, 0.65%)</title><rect x="271" y="372" width="8" height="15" fill="rgb(227,158,30)"/><text x="274.00" y="382.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.22%)</title><rect x="277" y="388" width="2" height="15" fill="rgb(249,61,15)"/><text x="280.00" y="398.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (5 samples, 1.08%)</title><rect x="269" y="324" width="13" height="15" fill="rgb(209,65,19)"/><text x="272.00" y="334.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.22%)</title><rect x="279" y="340" width="3" height="15" fill="rgb(244,203,46)"/><text x="282.00" y="350.50"></text></g><g><title>get_array_memory_extents (mem_overlap.c) (1 samples, 0.22%)</title><rect x="279" y="356" width="3" height="15" fill="rgb(239,169,34)"/><text x="282.00" y="366.50"></text></g><g><title>offset_bounds_from_strides (mem_overlap.c) (1 samples, 0.22%)</title><rect x="279" y="372" width="3" height="15" fill="rgb(219,212,31)"/><text x="282.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (8 samples, 1.72%)</title><rect x="264" y="308" width="20" height="15" fill="rgb(211,180,5)"/><text x="267.00" y="318.50"></text></g><g><title>npyiter_flip_negative_strides (nditer_constr.c) (1 samples, 0.22%)</title><rect x="282" y="324" width="2" height="15" fill="rgb(218,160,41)"/><text x="285.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (9 samples, 1.94%)</title><rect x="264" y="276" width="23" height="15" fill="rgb(221,120,41)"/><text x="267.00" y="286.50">e..</text></g><g><title>iterator_loop (ufunc_object.c) (9 samples, 1.94%)</title><rect x="264" y="292" width="23" height="15" fill="rgb(208,176,33)"/><text x="267.00" y="302.50">i..</text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src) (1 samples, 0.22%)</title><rect x="284" y="308" width="3" height="15" fill="rgb(228,17,21)"/><text x="287.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (12 samples, 2.59%)</title><rect x="259" y="260" width="30" height="15" fill="rgb(210,151,14)"/><text x="262.00" y="270.50">Py..</text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.22%)</title><rect x="287" y="276" width="2" height="15" fill="rgb(242,21,52)"/><text x="290.00" y="286.50"></text></g><g><title>_set_out_array (ufunc_object.c) (1 samples, 0.22%)</title><rect x="287" y="292" width="2" height="15" fill="rgb(237,70,37)"/><text x="290.00" y="302.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c) (1 samples, 0.22%)</title><rect x="287" y="308" width="2" height="15" fill="rgb(248,89,53)"/><text x="290.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (22 samples, 4.74%)</title><rect x="236" y="228" width="56" height="15" fill="rgb(231,224,54)"/><text x="239.00" y="238.50">_run ..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (15 samples, 3.23%)</title><rect x="254" y="244" width="38" height="15" fill="rgb(246,106,20)"/><text x="257.00" y="254.50">ufu..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.22%)</title><rect x="289" y="260" width="3" height="15" fill="rgb(227,203,31)"/><text x="292.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.22%)</title><rect x="292" y="276" width="2" height="15" fill="rgb(220,49,31)"/><text x="295.00" y="286.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.22%)</title><rect x="292" y="292" width="2" height="15" fill="rgb(215,101,19)"/><text x="295.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.22%)</title><rect x="292" y="308" width="2" height="15" fill="rgb(251,139,54)"/><text x="295.00" y="318.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.22%)</title><rect x="292" y="324" width="2" height="15" fill="rgb(247,146,33)"/><text x="295.00" y="334.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.22%)</title><rect x="294" y="276" width="3" height="15" fill="rgb(241,136,43)"/><text x="297.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_log.py) (3 samples, 0.65%)</title><rect x="292" y="228" width="7" height="15" fill="rgb(249,175,19)"/><text x="295.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.65%)</title><rect x="292" y="244" width="7" height="15" fill="rgb(218,218,19)"/><text x="295.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.65%)</title><rect x="292" y="260" width="7" height="15" fill="rgb(217,4,11)"/><text x="295.00" y="270.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.22%)</title><rect x="297" y="276" width="2" height="15" fill="rgb(207,100,54)"/><text x="300.00" y="286.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="299" y="260" width="3" height="15" fill="rgb(219,73,36)"/><text x="302.00" y="270.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="317" y="308" width="3" height="15" fill="rgb(219,212,1)"/><text x="320.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.43%)</title><rect x="320" y="324" width="5" height="15" fill="rgb(211,17,30)"/><text x="323.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.43%)</title><rect x="320" y="340" width="5" height="15" fill="rgb(252,202,46)"/><text x="323.00" y="350.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (2 samples, 0.43%)</title><rect x="320" y="356" width="5" height="15" fill="rgb(249,198,53)"/><text x="323.00" y="366.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (2 samples, 0.43%)</title><rect x="320" y="372" width="5" height="15" fill="rgb(245,116,22)"/><text x="323.00" y="382.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (2 samples, 0.43%)</title><rect x="320" y="388" width="5" height="15" fill="rgb(244,8,16)"/><text x="323.00" y="398.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (1 samples, 0.22%)</title><rect x="325" y="340" width="2" height="15" fill="rgb(219,175,1)"/><text x="328.00" y="350.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.22%)</title><rect x="327" y="388" width="3" height="15" fill="rgb(218,222,9)"/><text x="330.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.65%)</title><rect x="327" y="372" width="8" height="15" fill="rgb(226,153,51)"/><text x="330.00" y="382.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (2 samples, 0.43%)</title><rect x="330" y="388" width="5" height="15" fill="rgb(222,93,36)"/><text x="333.00" y="398.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (1 samples, 0.22%)</title><rect x="332" y="404" width="3" height="15" fill="rgb(234,119,8)"/><text x="335.00" y="414.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.22%)</title><rect x="332" y="420" width="3" height="15" fill="rgb(239,120,21)"/><text x="335.00" y="430.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.22%)</title><rect x="332" y="436" width="3" height="15" fill="rgb(232,39,47)"/><text x="335.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.22%)</title><rect x="335" y="372" width="3" height="15" fill="rgb(235,204,10)"/><text x="338.00" y="382.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.22%)</title><rect x="335" y="388" width="3" height="15" fill="rgb(243,106,50)"/><text x="338.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.22%)</title><rect x="335" y="404" width="3" height="15" fill="rgb(229,164,41)"/><text x="338.00" y="414.50"></text></g><g><title>0x7f11946f8d50 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="335" y="420" width="3" height="15" fill="rgb(208,177,34)"/><text x="338.00" y="430.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (1 samples, 0.22%)</title><rect x="338" y="420" width="2" height="15" fill="rgb(248,224,28)"/><text x="341.00" y="430.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.22%)</title><rect x="338" y="436" width="2" height="15" fill="rgb(221,221,19)"/><text x="341.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (6 samples, 1.29%)</title><rect x="327" y="356" width="16" height="15" fill="rgb(222,58,4)"/><text x="330.00" y="366.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (2 samples, 0.43%)</title><rect x="338" y="372" width="5" height="15" fill="rgb(221,227,20)"/><text x="341.00" y="382.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (2 samples, 0.43%)</title><rect x="338" y="388" width="5" height="15" fill="rgb(229,38,48)"/><text x="341.00" y="398.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (2 samples, 0.43%)</title><rect x="338" y="404" width="5" height="15" fill="rgb(220,35,52)"/><text x="341.00" y="414.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (1 samples, 0.22%)</title><rect x="340" y="420" width="3" height="15" fill="rgb(239,79,31)"/><text x="343.00" y="430.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (1 samples, 0.22%)</title><rect x="340" y="436" width="3" height="15" fill="rgb(249,62,33)"/><text x="343.00" y="446.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (18 samples, 3.88%)</title><rect x="299" y="228" width="46" height="15" fill="rgb(222,205,1)"/><text x="302.00" y="238.50">_run..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (18 samples, 3.88%)</title><rect x="299" y="244" width="46" height="15" fill="rgb(245,147,54)"/><text x="302.00" y="254.50">sum ..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (17 samples, 3.66%)</title><rect x="302" y="260" width="43" height="15" fill="rgb(233,102,36)"/><text x="305.00" y="270.50">arra..</text></g><g><title>sum (numpy/core/fromnumeric.py) (15 samples, 3.23%)</title><rect x="307" y="276" width="38" height="15" fill="rgb(246,123,46)"/><text x="310.00" y="286.50">sum..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (12 samples, 2.59%)</title><rect x="315" y="292" width="30" height="15" fill="rgb(254,96,5)"/><text x="318.00" y="302.50">_w..</text></g><g><title>ufunc_reduce (ufunc_object.c) (10 samples, 2.16%)</title><rect x="320" y="308" width="25" height="15" fill="rgb(239,132,8)"/><text x="323.00" y="318.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (8 samples, 1.72%)</title><rect x="325" y="324" width="20" height="15" fill="rgb(235,124,24)"/><text x="328.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (7 samples, 1.51%)</title><rect x="327" y="340" width="18" height="15" fill="rgb(253,213,45)"/><text x="330.00" y="350.50"></text></g><g><title>_get_identity (ufunc_object.c) (1 samples, 0.22%)</title><rect x="343" y="356" width="2" height="15" fill="rgb(229,130,19)"/><text x="346.00" y="366.50"></text></g><g><title>0x7f1155236422 (?) (1 samples, 0.22%)</title><rect x="345" y="244" width="3" height="15" fill="rgb(220,148,4)"/><text x="348.00" y="254.50"></text></g><g><title>0x7f115523c89e (?) (1 samples, 0.22%)</title><rect x="345" y="260" width="3" height="15" fill="rgb(232,21,11)"/><text x="348.00" y="270.50"></text></g><g><title>0x7f115523c74f (?) (1 samples, 0.22%)</title><rect x="345" y="276" width="3" height="15" fill="rgb(241,88,49)"/><text x="348.00" y="286.50"></text></g><g><title>0x7f1155242a3a (?) (1 samples, 0.22%)</title><rect x="345" y="292" width="3" height="15" fill="rgb(205,16,7)"/><text x="348.00" y="302.50"></text></g><g><title>0x7f115e694cfa (?) (1 samples, 0.22%)</title><rect x="345" y="308" width="3" height="15" fill="rgb(233,68,21)"/><text x="348.00" y="318.50"></text></g><g><title>0x7f115e69ddaa (?) (1 samples, 0.22%)</title><rect x="345" y="324" width="3" height="15" fill="rgb(238,26,13)"/><text x="348.00" y="334.50"></text></g><g><title>0x7f115e69fcfd (?) (1 samples, 0.22%)</title><rect x="345" y="340" width="3" height="15" fill="rgb(247,128,27)"/><text x="348.00" y="350.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::argument_loader (cast.h) (1 samples, 0.22%)</title><rect x="348" y="292" width="2" height="15" fill="rgb(228,206,49)"/><text x="351.00" y="302.50"></text></g><g><title>std::tuple&lt;pybind11::detail::type_caster&lt;RuntimeTreeEnsembleClassifierFloat, void&gt;, pybind11::detail::type_caster&lt;pybind11::array_t&lt;float, 16&gt;, void&gt; &gt;::tuple&lt;pybind11::detail::type_caster&lt;RuntimeTreeEnsembleClassifierFloat, void&gt;, pybind11::detail::type_caster&lt;pybind11::array_t&lt;float, 16&gt;, void&gt;, true&gt; (tuple) (1 samples, 0.22%)</title><rect x="348" y="308" width="2" height="15" fill="rgb(205,141,0)"/><text x="351.00" y="318.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, pybind11::detail::type_caster&lt;RuntimeTreeEnsembleClassifierFloat, void&gt;, pybind11::detail::type_caster&lt;pybind11::array_t&lt;float, 16&gt;, void&gt; &gt;::_Tuple_impl (tuple) (1 samples, 0.22%)</title><rect x="348" y="324" width="2" height="15" fill="rgb(229,30,29)"/><text x="351.00" y="334.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)0, pybind11::detail::type_caster&lt;RuntimeTreeEnsembleClassifierFloat, void&gt;, false&gt;::_Head_base (tuple) (1 samples, 0.22%)</title><rect x="348" y="340" width="2" height="15" fill="rgb(254,125,34)"/><text x="351.00" y="350.50"></text></g><g><title>pybind11::detail::type_caster&lt;RuntimeTreeEnsembleClassifierFloat, void&gt;::type_caster (cast.h) (1 samples, 0.22%)</title><rect x="348" y="356" width="2" height="15" fill="rgb(213,176,52)"/><text x="351.00" y="366.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;RuntimeTreeEnsembleClassifierFloat&gt;::type_caster_base (cast.h) (1 samples, 0.22%)</title><rect x="348" y="372" width="2" height="15" fill="rgb(213,171,50)"/><text x="351.00" y="382.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;RuntimeTreeEnsembleClassifierFloat&gt;::type_caster_base (cast.h) (1 samples, 0.22%)</title><rect x="348" y="388" width="2" height="15" fill="rgb(225,41,7)"/><text x="351.00" y="398.50"></text></g><g><title>pybind11::array::array&lt;float&gt; (numpy.h) (1 samples, 0.22%)</title><rect x="348" y="404" width="2" height="15" fill="rgb(251,50,53)"/><text x="351.00" y="414.50"></text></g><g><title>pybind11::detail::any_container&lt;long&gt;::~any_container (common.h) (1 samples, 0.22%)</title><rect x="348" y="420" width="2" height="15" fill="rgb(248,56,52)"/><text x="351.00" y="430.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::~vector (stl_vector.h) (1 samples, 0.22%)</title><rect x="348" y="436" width="2" height="15" fill="rgb(241,175,53)"/><text x="351.00" y="446.50"></text></g><g><title>pybind11::array::array&lt;float&gt; (numpy.h) (1 samples, 0.22%)</title><rect x="348" y="452" width="2" height="15" fill="rgb(226,21,36)"/><text x="351.00" y="462.50"></text></g><g><title>pybind11::dtype::~dtype (numpy.h) (1 samples, 0.22%)</title><rect x="348" y="468" width="2" height="15" fill="rgb(213,107,44)"/><text x="351.00" y="478.50"></text></g><g><title>pybind11::object::~object (pytypes.h) (1 samples, 0.22%)</title><rect x="348" y="484" width="2" height="15" fill="rgb(226,105,30)"/><text x="351.00" y="494.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (1 samples, 0.22%)</title><rect x="348" y="500" width="2" height="15" fill="rgb(250,85,0)"/><text x="351.00" y="510.50"></text></g><g><title>pybind11::array::array (numpy.h) (1 samples, 0.22%)</title><rect x="348" y="516" width="2" height="15" fill="rgb(222,160,52)"/><text x="351.00" y="526.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.22%)</title><rect x="348" y="532" width="2" height="15" fill="rgb(217,172,14)"/><text x="351.00" y="542.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="348" y="548" width="2" height="15" fill="rgb(224,158,11)"/><text x="351.00" y="558.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.22%)</title><rect x="348" y="564" width="2" height="15" fill="rgb(243,39,9)"/><text x="351.00" y="574.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.22%)</title><rect x="348" y="580" width="2" height="15" fill="rgb(237,174,35)"/><text x="351.00" y="590.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.22%)</title><rect x="348" y="596" width="2" height="15" fill="rgb(225,165,7)"/><text x="351.00" y="606.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="348" y="612" width="2" height="15" fill="rgb(249,108,4)"/><text x="351.00" y="622.50"></text></g><g><title>0x7f11946da6df (libc-2.29.so) (1 samples, 0.22%)</title><rect x="348" y="628" width="2" height="15" fill="rgb(219,81,50)"/><text x="351.00" y="638.50"></text></g><g><title>0x7f115e69fea0 (libgomp.so.1.0.0) (2 samples, 0.43%)</title><rect x="350" y="468" width="5" height="15" fill="rgb(251,79,33)"/><text x="353.00" y="478.50"></text></g><g><title>0x7f115e69fea9 (libgomp.so.1.0.0) (6 samples, 1.29%)</title><rect x="355" y="468" width="16" height="15" fill="rgb(207,37,12)"/><text x="358.00" y="478.50"></text></g><g><title>0x7f115e69feab (libgomp.so.1.0.0) (9 samples, 1.94%)</title><rect x="371" y="468" width="23" height="15" fill="rgb(251,105,7)"/><text x="374.00" y="478.50">0..</text></g><g><title>0x7f115e69eab9 (libgomp.so.1.0.0) (24 samples, 5.17%)</title><rect x="350" y="452" width="61" height="15" fill="rgb(232,43,15)"/><text x="353.00" y="462.50">0x7f11..</text></g><g><title>0x7f115e69fead (libgomp.so.1.0.0) (7 samples, 1.51%)</title><rect x="394" y="468" width="17" height="15" fill="rgb(228,195,30)"/><text x="397.00" y="478.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (87 samples, 18.75%)</title><rect x="195" y="196" width="221" height="15" fill="rgb(253,23,51)"/><text x="198.00" y="206.50">run (mlprodict/onnxrt/ops_cpu..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (73 samples, 15.73%)</title><rect x="231" y="212" width="185" height="15" fill="rgb(234,100,19)"/><text x="234.00" y="222.50">run (mlprodict/onnxrt/op..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (28 samples, 6.03%)</title><rect x="345" y="228" width="71" height="15" fill="rgb(251,90,42)"/><text x="348.00" y="238.50">_run (ml..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (27 samples, 5.82%)</title><rect x="348" y="244" width="68" height="15" fill="rgb(227,55,11)"/><text x="351.00" y="254.50">pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (27 samples, 5.82%)</title><rect x="348" y="260" width="68" height="15" fill="rgb(253,158,16)"/><text x="351.00" y="270.50">void py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (27 samples, 5.82%)</title><rect x="348" y="276" width="68" height="15" fill="rgb(245,116,7)"/><text x="351.00" y="286.50">void py..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (26 samples, 5.60%)</title><rect x="350" y="292" width="66" height="15" fill="rgb(213,35,3)"/><text x="353.00" y="302.50">pybind1..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (26 samples, 5.60%)</title><rect x="350" y="308" width="66" height="15" fill="rgb(225,165,45)"/><text x="353.00" y="318.50">pybind1..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (26 samples, 5.60%)</title><rect x="350" y="324" width="66" height="15" fill="rgb(247,151,10)"/><text x="353.00" y="334.50">pybind1..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (26 samples, 5.60%)</title><rect x="350" y="340" width="66" height="15" fill="rgb(211,190,20)"/><text x="353.00" y="350.50">pybind1..</text></g><g><title>pybind11::array::~array (numpy.h) (26 samples, 5.60%)</title><rect x="350" y="356" width="66" height="15" fill="rgb(213,84,39)"/><text x="353.00" y="366.50">pybind1..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (26 samples, 5.60%)</title><rect x="350" y="372" width="66" height="15" fill="rgb(205,205,14)"/><text x="353.00" y="382.50">pybind1..</text></g><g><title>pybind11::object::~object (pytypes.h) (26 samples, 5.60%)</title><rect x="350" y="388" width="66" height="15" fill="rgb(240,112,1)"/><text x="353.00" y="398.50">pybind1..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (26 samples, 5.60%)</title><rect x="350" y="404" width="66" height="15" fill="rgb(246,109,32)"/><text x="353.00" y="414.50">pybind1..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (26 samples, 5.60%)</title><rect x="350" y="420" width="66" height="15" fill="rgb(228,202,11)"/><text x="353.00" y="430.50">Runtime..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (26 samples, 5.60%)</title><rect x="350" y="436" width="66" height="15" fill="rgb(253,78,18)"/><text x="353.00" y="446.50">pybind1..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (2 samples, 0.43%)</title><rect x="411" y="452" width="5" height="15" fill="rgb(251,181,53)"/><text x="414.00" y="462.50"></text></g><g><title>0x7f115e69ddaa (libgomp.so.1.0.0) (2 samples, 0.43%)</title><rect x="411" y="468" width="5" height="15" fill="rgb(248,173,44)"/><text x="414.00" y="478.50"></text></g><g><title>0x7f115e69fcfb (libgomp.so.1.0.0) (2 samples, 0.43%)</title><rect x="411" y="484" width="5" height="15" fill="rgb(213,212,18)"/><text x="414.00" y="494.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.22%)</title><rect x="427" y="228" width="2" height="15" fill="rgb(251,174,54)"/><text x="430.00" y="238.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;) (1 samples, 0.22%)</title><rect x="427" y="244" width="2" height="15" fill="rgb(244,226,24)"/><text x="430.00" y="254.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="427" y="260" width="2" height="15" fill="rgb(225,85,35)"/><text x="430.00" y="270.50"></text></g><g><title>array_clip (methods.c) (1 samples, 0.22%)</title><rect x="427" y="276" width="2" height="15" fill="rgb(253,204,46)"/><text x="430.00" y="286.50"></text></g><g><title>forward_ndarray_method (methods.c) (1 samples, 0.22%)</title><rect x="427" y="292" width="2" height="15" fill="rgb(236,130,8)"/><text x="430.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="427" y="308" width="2" height="15" fill="rgb(206,182,52)"/><text x="430.00" y="318.50"></text></g><g><title>_clip (numpy/core/_methods.py) (1 samples, 0.22%)</title><rect x="427" y="324" width="2" height="15" fill="rgb(226,108,42)"/><text x="430.00" y="334.50"></text></g><g><title>PyArray_MinScalarType_internal (convert_datatype.c) (1 samples, 0.22%)</title><rect x="460" y="420" width="2" height="15" fill="rgb(226,64,50)"/><text x="463.00" y="430.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.43%)</title><rect x="460" y="388" width="5" height="15" fill="rgb(246,191,48)"/><text x="463.00" y="398.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.43%)</title><rect x="460" y="404" width="5" height="15" fill="rgb(209,155,35)"/><text x="463.00" y="414.50"></text></g><g><title>promote_types (convert_datatype.c) (1 samples, 0.22%)</title><rect x="462" y="420" width="3" height="15" fill="rgb(217,218,26)"/><text x="465.00" y="430.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (1 samples, 0.22%)</title><rect x="462" y="436" width="3" height="15" fill="rgb(243,117,33)"/><text x="465.00" y="446.50"></text></g><g><title>ensure_dtype_nbo (convert_datatype.c) (1 samples, 0.22%)</title><rect x="462" y="452" width="3" height="15" fill="rgb(214,69,43)"/><text x="465.00" y="462.50"></text></g><g><title>DOUBLE_clip (clip.c.src) (1 samples, 0.22%)</title><rect x="465" y="420" width="2" height="15" fill="rgb(208,5,20)"/><text x="468.00" y="430.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.22%)</title><rect x="467" y="436" width="3" height="15" fill="rgb(251,42,37)"/><text x="470.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.65%)</title><rect x="465" y="388" width="7" height="15" fill="rgb(234,124,22)"/><text x="468.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.65%)</title><rect x="465" y="404" width="7" height="15" fill="rgb(228,27,37)"/><text x="468.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.43%)</title><rect x="467" y="420" width="5" height="15" fill="rgb(254,125,7)"/><text x="470.00" y="430.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (1 samples, 0.22%)</title><rect x="470" y="436" width="2" height="15" fill="rgb(215,206,50)"/><text x="473.00" y="446.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.22%)</title><rect x="472" y="388" width="3" height="15" fill="rgb(250,159,12)"/><text x="475.00" y="398.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.22%)</title><rect x="472" y="404" width="3" height="15" fill="rgb(229,49,52)"/><text x="475.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="472" y="420" width="3" height="15" fill="rgb(219,0,43)"/><text x="475.00" y="430.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="472" y="436" width="3" height="15" fill="rgb(232,218,33)"/><text x="475.00" y="446.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (10 samples, 2.16%)</title><rect x="455" y="340" width="25" height="15" fill="rgb(209,91,36)"/><text x="458.00" y="350.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 1.72%)</title><rect x="460" y="356" width="20" height="15" fill="rgb(213,146,24)"/><text x="463.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 1.72%)</title><rect x="460" y="372" width="20" height="15" fill="rgb(248,75,10)"/><text x="463.00" y="382.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (2 samples, 0.43%)</title><rect x="475" y="388" width="5" height="15" fill="rgb(222,99,18)"/><text x="478.00" y="398.50"></text></g><g><title>0x7f11946f9120 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="477" y="404" width="3" height="15" fill="rgb(250,168,40)"/><text x="480.00" y="414.50"></text></g><g><title>_clip_dep_is_byte_swapped (numpy/core/_methods.py) (1 samples, 0.22%)</title><rect x="480" y="340" width="3" height="15" fill="rgb(213,100,31)"/><text x="483.00" y="350.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.86%)</title><rect x="493" y="356" width="10" height="15" fill="rgb(233,17,7)"/><text x="496.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="513" y="404" width="3" height="15" fill="rgb(206,74,6)"/><text x="516.00" y="414.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="513" y="420" width="3" height="15" fill="rgb(236,29,35)"/><text x="516.00" y="430.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="513" y="436" width="3" height="15" fill="rgb(241,13,21)"/><text x="516.00" y="446.50"></text></g><g><title>PyArray_BoolConverter (conversion_utils.c) (1 samples, 0.22%)</title><rect x="523" y="436" width="3" height="15" fill="rgb(226,188,54)"/><text x="526.00" y="446.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.22%)</title><rect x="526" y="484" width="2" height="15" fill="rgb(237,181,20)"/><text x="529.00" y="494.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.22%)</title><rect x="526" y="500" width="2" height="15" fill="rgb(246,158,40)"/><text x="529.00" y="510.50"></text></g><g><title>PyArray_NDIM (ndarraytypes.h) (1 samples, 0.22%)</title><rect x="526" y="516" width="2" height="15" fill="rgb(253,66,8)"/><text x="529.00" y="526.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (11 samples, 2.37%)</title><rect x="503" y="356" width="28" height="15" fill="rgb(209,48,30)"/><text x="506.00" y="366.50">n..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (11 samples, 2.37%)</title><rect x="503" y="372" width="28" height="15" fill="rgb(230,15,33)"/><text x="506.00" y="382.50">a..</text></g><g><title>ndim (numpy/core/fromnumeric.py) (10 samples, 2.16%)</title><rect x="505" y="388" width="26" height="15" fill="rgb(208,106,20)"/><text x="508.00" y="398.50">n..</text></g><g><title>asarray (numpy/core/_asarray.py) (6 samples, 1.29%)</title><rect x="516" y="404" width="15" height="15" fill="rgb(240,200,0)"/><text x="519.00" y="414.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.86%)</title><rect x="521" y="420" width="10" height="15" fill="rgb(213,17,31)"/><text x="524.00" y="430.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.43%)</title><rect x="526" y="436" width="5" height="15" fill="rgb(252,63,32)"/><text x="529.00" y="446.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.43%)</title><rect x="526" y="452" width="5" height="15" fill="rgb(239,31,32)"/><text x="529.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.43%)</title><rect x="526" y="468" width="5" height="15" fill="rgb(208,149,50)"/><text x="529.00" y="478.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="528" y="484" width="3" height="15" fill="rgb(216,79,7)"/><text x="531.00" y="494.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.43%)</title><rect x="536" y="388" width="5" height="15" fill="rgb(230,84,37)"/><text x="539.00" y="398.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (1 samples, 0.22%)</title><rect x="538" y="404" width="3" height="15" fill="rgb(212,175,40)"/><text x="541.00" y="414.50"></text></g><g><title>DOUBLE_isnan (loops.c.src) (1 samples, 0.22%)</title><rect x="538" y="420" width="3" height="15" fill="rgb(215,175,4)"/><text x="541.00" y="430.50"></text></g><g><title>run_isnan_simd_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="538" y="436" width="3" height="15" fill="rgb(251,104,32)"/><text x="541.00" y="446.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.65%)</title><rect x="541" y="388" width="8" height="15" fill="rgb(247,103,54)"/><text x="544.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 1.72%)</title><rect x="536" y="372" width="20" height="15" fill="rgb(205,103,2)"/><text x="539.00" y="382.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (3 samples, 0.65%)</title><rect x="549" y="388" width="7" height="15" fill="rgb(213,168,21)"/><text x="552.00" y="398.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (3 samples, 0.65%)</title><rect x="549" y="404" width="7" height="15" fill="rgb(228,11,23)"/><text x="552.00" y="414.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.22%)</title><rect x="554" y="420" width="2" height="15" fill="rgb(251,52,39)"/><text x="557.00" y="430.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (188 samples, 40.52%)</title><rect x="81" y="164" width="478" height="15" fill="rgb(249,46,30)"/><text x="84.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (181 samples, 39.01%)</title><rect x="99" y="180" width="460" height="15" fill="rgb(211,57,45)"/><text x="102.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/op_clip.py) (56 samples, 12.07%)</title><rect x="416" y="196" width="143" height="15" fill="rgb(216,221,54)"/><text x="419.00" y="206.50">run (mlprodict/onn..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_clip.py) (56 samples, 12.07%)</title><rect x="416" y="212" width="143" height="15" fill="rgb(230,134,15)"/><text x="419.00" y="222.50">_run (mlprodict/on..</text></g><g><title>clip (&lt;__array_function__ internals&gt;) (51 samples, 10.99%)</title><rect x="429" y="228" width="130" height="15" fill="rgb(239,49,27)"/><text x="432.00" y="238.50">clip (&lt;__array_f..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (49 samples, 10.56%)</title><rect x="434" y="244" width="125" height="15" fill="rgb(216,129,7)"/><text x="437.00" y="254.50">array_implement..</text></g><g><title>clip (numpy/core/fromnumeric.py) (48 samples, 10.34%)</title><rect x="437" y="260" width="122" height="15" fill="rgb(230,52,54)"/><text x="440.00" y="270.50">clip (numpy/cor..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (46 samples, 9.91%)</title><rect x="442" y="276" width="117" height="15" fill="rgb(232,107,29)"/><text x="445.00" y="286.50">_wrapfunc (num..</text></g><g><title>array_clip (methods.c) (45 samples, 9.70%)</title><rect x="444" y="292" width="115" height="15" fill="rgb(214,108,53)"/><text x="447.00" y="302.50">array_clip (me..</text></g><g><title>forward_ndarray_method (methods.c) (45 samples, 9.70%)</title><rect x="444" y="308" width="115" height="15" fill="rgb(246,159,5)"/><text x="447.00" y="318.50">forward_ndarra..</text></g><g><title>_clip (numpy/core/_methods.py) (45 samples, 9.70%)</title><rect x="444" y="324" width="115" height="15" fill="rgb(223,191,52)"/><text x="447.00" y="334.50">_clip (numpy/c..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (30 samples, 6.47%)</title><rect x="483" y="340" width="76" height="15" fill="rgb(226,19,40)"/><text x="486.00" y="350.50">_clip_de..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 2.37%)</title><rect x="531" y="356" width="28" height="15" fill="rgb(251,49,23)"/><text x="534.00" y="366.50">u..</text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.22%)</title><rect x="556" y="372" width="3" height="15" fill="rgb(245,174,7)"/><text x="559.00" y="382.50"></text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (189 samples, 40.73%)</title><rect x="81" y="100" width="480" height="15" fill="rgb(232,5,39)"/><text x="84.00" y="110.50">profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (189 samples, 40.73%)</title><rect x="81" y="116" width="480" height="15" fill="rgb(212,103,4)"/><text x="84.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (189 samples, 40.73%)</title><rect x="81" y="132" width="480" height="15" fill="rgb(233,148,8)"/><text x="84.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (189 samples, 40.73%)</title><rect x="81" y="148" width="480" height="15" fill="rgb(241,154,11)"/><text x="84.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="559" y="164" width="2" height="15" fill="rgb(247,56,17)"/><text x="562.00" y="174.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.22%)</title><rect x="559" y="180" width="2" height="15" fill="rgb(236,61,31)"/><text x="562.00" y="190.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.22%)</title><rect x="561" y="180" width="3" height="15" fill="rgb(245,80,42)"/><text x="564.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (1 samples, 0.22%)</title><rect x="561" y="196" width="3" height="15" fill="rgb(211,192,1)"/><text x="564.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="212" width="3" height="15" fill="rgb(211,152,10)"/><text x="564.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="228" width="3" height="15" fill="rgb(230,52,17)"/><text x="564.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="244" width="3" height="15" fill="rgb(248,103,18)"/><text x="564.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="561" y="260" width="3" height="15" fill="rgb(206,174,1)"/><text x="564.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="276" width="3" height="15" fill="rgb(240,85,46)"/><text x="564.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (1 samples, 0.22%)</title><rect x="561" y="292" width="3" height="15" fill="rgb(215,5,24)"/><text x="564.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="308" width="3" height="15" fill="rgb(208,86,4)"/><text x="564.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="324" width="3" height="15" fill="rgb(207,214,21)"/><text x="564.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="340" width="3" height="15" fill="rgb(214,187,22)"/><text x="564.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="561" y="356" width="3" height="15" fill="rgb(218,162,29)"/><text x="564.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="372" width="3" height="15" fill="rgb(220,97,26)"/><text x="564.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (1 samples, 0.22%)</title><rect x="561" y="388" width="3" height="15" fill="rgb(220,51,30)"/><text x="564.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="404" width="3" height="15" fill="rgb(221,131,19)"/><text x="564.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="420" width="3" height="15" fill="rgb(213,78,52)"/><text x="564.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="436" width="3" height="15" fill="rgb(205,190,40)"/><text x="564.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="561" y="452" width="3" height="15" fill="rgb(247,85,42)"/><text x="564.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="561" y="468" width="3" height="15" fill="rgb(246,99,14)"/><text x="564.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (1 samples, 0.22%)</title><rect x="561" y="484" width="3" height="15" fill="rgb(250,222,0)"/><text x="564.00" y="494.50"></text></g><g><title>TreeEnsembleRegressorDouble (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (1 samples, 0.22%)</title><rect x="561" y="500" width="3" height="15" fill="rgb(245,176,25)"/><text x="564.00" y="510.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.43%)</title><rect x="561" y="132" width="5" height="15" fill="rgb(229,40,5)"/><text x="564.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.43%)</title><rect x="561" y="148" width="5" height="15" fill="rgb(228,78,24)"/><text x="564.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.43%)</title><rect x="561" y="164" width="5" height="15" fill="rgb(224,215,41)"/><text x="564.00" y="174.50"></text></g><g><title>to_sequence (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.22%)</title><rect x="564" y="180" width="2" height="15" fill="rgb(230,134,47)"/><text x="567.00" y="190.50"></text></g><g><title>_var_as_dict (mlprodict/onnxrt/onnx2py_helper.py) (1 samples, 0.22%)</title><rect x="564" y="196" width="2" height="15" fill="rgb(240,118,46)"/><text x="567.00" y="206.50"></text></g><g><title>_var_as_dict (mlprodict/onnxrt/onnx2py_helper.py) (1 samples, 0.22%)</title><rect x="564" y="212" width="2" height="15" fill="rgb(213,21,31)"/><text x="567.00" y="222.50"></text></g><g><title>0x7f1182a22779 (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="564" y="228" width="2" height="15" fill="rgb(241,196,24)"/><text x="567.00" y="238.50"></text></g><g><title>google::protobuf::python::ContainerBase::RemoveFromParentCache (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="564" y="244" width="2" height="15" fill="rgb(208,55,15)"/><text x="567.00" y="254.50"></text></g><g><title>0x7f1182a254ba (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="564" y="260" width="2" height="15" fill="rgb(218,116,13)"/><text x="567.00" y="270.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.22%)</title><rect x="564" y="276" width="2" height="15" fill="rgb(215,135,39)"/><text x="567.00" y="286.50"></text></g><g><title>profile_pyrt (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (192 samples, 41.38%)</title><rect x="81" y="68" width="488" height="15" fill="rgb(212,98,30)"/><text x="84.00" y="78.50">profile_pyrt (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_..</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (192 samples, 41.38%)</title><rect x="81" y="84" width="488" height="15" fill="rgb(221,13,18)"/><text x="84.00" y="94.50">setup_profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.65%)</title><rect x="561" y="100" width="8" height="15" fill="rgb(226,103,7)"/><text x="564.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.65%)</title><rect x="561" y="116" width="8" height="15" fill="rgb(248,135,39)"/><text x="564.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="566" y="132" width="3" height="15" fill="rgb(214,103,3)"/><text x="569.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (1 samples, 0.22%)</title><rect x="566" y="148" width="3" height="15" fill="rgb(211,175,17)"/><text x="569.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (1 samples, 0.22%)</title><rect x="566" y="164" width="3" height="15" fill="rgb(208,159,43)"/><text x="569.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (1 samples, 0.22%)</title><rect x="566" y="180" width="3" height="15" fill="rgb(245,32,41)"/><text x="569.00" y="190.50"></text></g><g><title>convert_sklearn_ada_boost_classifier (skl2onnx/operator_converters/ada_boost.py) (1 samples, 0.22%)</title><rect x="566" y="196" width="3" height="15" fill="rgb(233,22,46)"/><text x="569.00" y="206.50"></text></g><g><title>_samme_r_proba (skl2onnx/operator_converters/ada_boost.py) (1 samples, 0.22%)</title><rect x="566" y="212" width="3" height="15" fill="rgb(221,110,47)"/><text x="569.00" y="222.50"></text></g><g><title>apply_mul (onnxconverter_common/onnx_ops.py) (1 samples, 0.22%)</title><rect x="566" y="228" width="3" height="15" fill="rgb(223,151,11)"/><text x="569.00" y="238.50"></text></g><g><title>_apply_basic_numerical_operation (onnxconverter_common/onnx_ops.py) (1 samples, 0.22%)</title><rect x="566" y="244" width="3" height="15" fill="rgb(237,152,48)"/><text x="569.00" y="254.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (1 samples, 0.22%)</title><rect x="566" y="260" width="3" height="15" fill="rgb(238,186,31)"/><text x="569.00" y="270.50"></text></g><g><title>_check_operator (skl2onnx/common/_container.py) (1 samples, 0.22%)</title><rect x="566" y="276" width="3" height="15" fill="rgb(244,139,10)"/><text x="569.00" y="286.50"></text></g><g><title>extract_stack (traceback.py) (1 samples, 0.22%)</title><rect x="566" y="292" width="3" height="15" fill="rgb(234,217,0)"/><text x="569.00" y="302.50"></text></g><g><title>extract (traceback.py) (1 samples, 0.22%)</title><rect x="566" y="308" width="3" height="15" fill="rgb(231,214,9)"/><text x="569.00" y="318.50"></text></g><g><title>line (traceback.py) (1 samples, 0.22%)</title><rect x="566" y="324" width="3" height="15" fill="rgb(224,76,8)"/><text x="569.00" y="334.50"></text></g><g><title>getline (linecache.py) (1 samples, 0.22%)</title><rect x="566" y="340" width="3" height="15" fill="rgb(213,181,46)"/><text x="569.00" y="350.50"></text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.22%)</title><rect x="574" y="164" width="3" height="15" fill="rgb(243,122,28)"/><text x="577.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (1 samples, 0.22%)</title><rect x="574" y="180" width="3" height="15" fill="rgb(249,227,42)"/><text x="577.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (1 samples, 0.22%)</title><rect x="574" y="196" width="3" height="15" fill="rgb(218,142,7)"/><text x="577.00" y="206.50"></text></g><g><title>0x7f11946f9120 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="594" y="212" width="3" height="15" fill="rgb(238,29,51)"/><text x="597.00" y="222.50"></text></g><g><title>__new__ (numpy/core/getlimits.py) (2 samples, 0.43%)</title><rect x="597" y="212" width="5" height="15" fill="rgb(249,113,2)"/><text x="600.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="602" y="228" width="3" height="15" fill="rgb(220,22,42)"/><text x="605.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="602" y="244" width="3" height="15" fill="rgb(235,201,34)"/><text x="605.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.43%)</title><rect x="602" y="212" width="5" height="15" fill="rgb(212,208,54)"/><text x="605.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="605" y="228" width="2" height="15" fill="rgb(226,118,31)"/><text x="608.00" y="238.50"></text></g><g><title>0x7f11946d8bc0 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="605" y="244" width="2" height="15" fill="rgb(246,180,24)"/><text x="608.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.22%)</title><rect x="607" y="212" width="3" height="15" fill="rgb(215,228,2)"/><text x="610.00" y="222.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;) (1 samples, 0.22%)</title><rect x="607" y="228" width="3" height="15" fill="rgb(239,203,34)"/><text x="610.00" y="238.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="607" y="244" width="3" height="15" fill="rgb(206,229,9)"/><text x="610.00" y="254.50"></text></g><g><title>array_clip (methods.c) (1 samples, 0.22%)</title><rect x="607" y="260" width="3" height="15" fill="rgb(236,39,27)"/><text x="610.00" y="270.50"></text></g><g><title>forward_ndarray_method (methods.c) (1 samples, 0.22%)</title><rect x="607" y="276" width="3" height="15" fill="rgb(219,127,53)"/><text x="610.00" y="286.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="607" y="292" width="3" height="15" fill="rgb(206,127,19)"/><text x="610.00" y="302.50"></text></g><g><title>_clip (numpy/core/_methods.py) (1 samples, 0.22%)</title><rect x="607" y="308" width="3" height="15" fill="rgb(223,219,27)"/><text x="610.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="612" y="260" width="3" height="15" fill="rgb(218,183,50)"/><text x="615.00" y="270.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.22%)</title><rect x="612" y="276" width="3" height="15" fill="rgb(248,163,54)"/><text x="615.00" y="286.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (1 samples, 0.22%)</title><rect x="612" y="292" width="3" height="15" fill="rgb(214,77,50)"/><text x="615.00" y="302.50"></text></g><g><title>dtype_kind_to_simplified_ordering (convert_datatype.c) (1 samples, 0.22%)</title><rect x="612" y="308" width="3" height="15" fill="rgb(246,162,27)"/><text x="615.00" y="318.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (1 samples, 0.22%)</title><rect x="615" y="260" width="2" height="15" fill="rgb(230,100,26)"/><text x="618.00" y="270.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c) (1 samples, 0.22%)</title><rect x="615" y="276" width="2" height="15" fill="rgb(206,54,34)"/><text x="618.00" y="286.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.22%)</title><rect x="615" y="292" width="2" height="15" fill="rgb(231,168,29)"/><text x="618.00" y="302.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.22%)</title><rect x="615" y="308" width="2" height="15" fill="rgb(239,218,27)"/><text x="618.00" y="318.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.22%)</title><rect x="615" y="324" width="2" height="15" fill="rgb(218,174,54)"/><text x="618.00" y="334.50"></text></g><g><title>_aligned_cast_long_to_double (lowlevel_strided_loops.c.src) (1 samples, 0.22%)</title><rect x="615" y="340" width="2" height="15" fill="rgb(247,212,53)"/><text x="618.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.43%)</title><rect x="617" y="260" width="5" height="15" fill="rgb(242,76,7)"/><text x="620.00" y="270.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.22%)</title><rect x="620" y="276" width="2" height="15" fill="rgb(205,131,32)"/><text x="623.00" y="286.50"></text></g><g><title>array_multiply (number.c) (6 samples, 1.29%)</title><rect x="610" y="212" width="15" height="15" fill="rgb(238,179,8)"/><text x="613.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 1.08%)</title><rect x="612" y="228" width="13" height="15" fill="rgb(225,150,49)"/><text x="615.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 1.08%)</title><rect x="612" y="244" width="13" height="15" fill="rgb(224,84,49)"/><text x="615.00" y="254.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.22%)</title><rect x="622" y="260" width="3" height="15" fill="rgb(245,204,28)"/><text x="625.00" y="270.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.22%)</title><rect x="625" y="228" width="2" height="15" fill="rgb(212,122,28)"/><text x="628.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.43%)</title><rect x="625" y="212" width="5" height="15" fill="rgb(245,0,8)"/><text x="628.00" y="222.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.22%)</title><rect x="627" y="228" width="3" height="15" fill="rgb(226,47,37)"/><text x="630.00" y="238.50"></text></g><g><title>unpack_indices (mapping.c) (1 samples, 0.22%)</title><rect x="627" y="244" width="3" height="15" fill="rgb(241,17,41)"/><text x="630.00" y="254.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="633" y="260" width="2" height="15" fill="rgb(248,154,4)"/><text x="636.00" y="270.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="633" y="276" width="2" height="15" fill="rgb(225,82,54)"/><text x="636.00" y="286.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.22%)</title><rect x="633" y="292" width="2" height="15" fill="rgb(225,121,42)"/><text x="636.00" y="302.50"></text></g><g><title>promote_types (convert_datatype.c) (1 samples, 0.22%)</title><rect x="633" y="308" width="2" height="15" fill="rgb(226,0,53)"/><text x="636.00" y="318.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (1 samples, 0.22%)</title><rect x="633" y="324" width="2" height="15" fill="rgb(224,83,37)"/><text x="636.00" y="334.50"></text></g><g><title>ensure_dtype_nbo (convert_datatype.c) (1 samples, 0.22%)</title><rect x="633" y="340" width="2" height="15" fill="rgb(224,50,48)"/><text x="636.00" y="350.50"></text></g><g><title>DOUBLE_subtract (loops.c.src) (1 samples, 0.22%)</title><rect x="635" y="292" width="3" height="15" fill="rgb(240,78,30)"/><text x="638.00" y="302.50"></text></g><g><title>run_binary_simd_subtract_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="635" y="308" width="3" height="15" fill="rgb(228,228,42)"/><text x="638.00" y="318.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (1 samples, 0.22%)</title><rect x="640" y="308" width="3" height="15" fill="rgb(237,125,50)"/><text x="643.00" y="318.50"></text></g><g><title>array_subtract (number.c) (7 samples, 1.51%)</title><rect x="630" y="212" width="18" height="15" fill="rgb(207,213,7)"/><text x="633.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 1.51%)</title><rect x="630" y="228" width="18" height="15" fill="rgb(209,174,16)"/><text x="633.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 1.29%)</title><rect x="633" y="244" width="15" height="15" fill="rgb(213,223,44)"/><text x="636.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (5 samples, 1.08%)</title><rect x="635" y="260" width="13" height="15" fill="rgb(233,201,17)"/><text x="638.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (5 samples, 1.08%)</title><rect x="635" y="276" width="13" height="15" fill="rgb(242,12,49)"/><text x="638.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (4 samples, 0.86%)</title><rect x="638" y="292" width="10" height="15" fill="rgb(247,25,10)"/><text x="641.00" y="302.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (2 samples, 0.43%)</title><rect x="643" y="308" width="5" height="15" fill="rgb(253,129,18)"/><text x="646.00" y="318.50"></text></g><g><title>npyiter_check_per_op_flags (nditer_constr.c) (1 samples, 0.22%)</title><rect x="645" y="324" width="3" height="15" fill="rgb(211,28,41)"/><text x="648.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (3 samples, 0.65%)</title><rect x="655" y="276" width="8" height="15" fill="rgb(230,84,1)"/><text x="658.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.65%)</title><rect x="655" y="292" width="8" height="15" fill="rgb(209,98,11)"/><text x="658.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.65%)</title><rect x="655" y="308" width="8" height="15" fill="rgb(235,217,19)"/><text x="658.00" y="318.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.65%)</title><rect x="655" y="324" width="8" height="15" fill="rgb(254,87,47)"/><text x="658.00" y="334.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (3 samples, 0.65%)</title><rect x="655" y="340" width="8" height="15" fill="rgb(223,4,26)"/><text x="658.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.22%)</title><rect x="668" y="324" width="3" height="15" fill="rgb(253,32,46)"/><text x="671.00" y="334.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c) (1 samples, 0.22%)</title><rect x="668" y="340" width="3" height="15" fill="rgb(247,207,7)"/><text x="671.00" y="350.50"></text></g><g><title>PyArray_CreateSortedStridePerm (shape.c) (1 samples, 0.22%)</title><rect x="671" y="356" width="2" height="15" fill="rgb(226,7,35)"/><text x="674.00" y="366.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (2 samples, 0.43%)</title><rect x="671" y="324" width="5" height="15" fill="rgb(213,49,52)"/><text x="674.00" y="334.50"></text></g><g><title>allocate_reduce_result (reduction.c) (2 samples, 0.43%)</title><rect x="671" y="340" width="5" height="15" fill="rgb(222,112,21)"/><text x="674.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.22%)</title><rect x="673" y="356" width="3" height="15" fill="rgb(212,78,2)"/><text x="676.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="673" y="372" width="3" height="15" fill="rgb(210,24,45)"/><text x="676.00" y="382.50"></text></g><g><title>npy_mul_with_overflow_intp (templ_common.h.src) (1 samples, 0.22%)</title><rect x="673" y="388" width="3" height="15" fill="rgb(251,21,2)"/><text x="676.00" y="398.50"></text></g><g><title>_check_ufunc_fperr (extobj.c) (1 samples, 0.22%)</title><rect x="676" y="324" width="2" height="15" fill="rgb(218,88,35)"/><text x="679.00" y="334.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.22%)</title><rect x="676" y="340" width="2" height="15" fill="rgb(251,165,51)"/><text x="679.00" y="350.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.22%)</title><rect x="676" y="356" width="2" height="15" fill="rgb(222,17,24)"/><text x="679.00" y="366.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (6 samples, 1.29%)</title><rect x="666" y="308" width="15" height="15" fill="rgb(239,117,42)"/><text x="669.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c) (1 samples, 0.22%)</title><rect x="678" y="324" width="3" height="15" fill="rgb(210,171,45)"/><text x="681.00" y="334.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.22%)</title><rect x="678" y="340" width="3" height="15" fill="rgb(238,85,44)"/><text x="681.00" y="350.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (1 samples, 0.22%)</title><rect x="678" y="356" width="3" height="15" fill="rgb(237,76,54)"/><text x="681.00" y="366.50"></text></g><g><title>PyUFunc_AdditionTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="681" y="324" width="2" height="15" fill="rgb(247,16,48)"/><text x="684.00" y="334.50"></text></g><g><title>array_sum (methods.c) (16 samples, 3.45%)</title><rect x="648" y="212" width="41" height="15" fill="rgb(226,173,43)"/><text x="651.00" y="222.50">arr..</text></g><g><title>forward_ndarray_method (methods.c) (16 samples, 3.45%)</title><rect x="648" y="228" width="41" height="15" fill="rgb(244,174,31)"/><text x="651.00" y="238.50">for..</text></g><g><title>_sum (numpy/core/_methods.py) (13 samples, 2.80%)</title><rect x="655" y="244" width="34" height="15" fill="rgb(208,158,27)"/><text x="658.00" y="254.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c) (13 samples, 2.80%)</title><rect x="655" y="260" width="34" height="15" fill="rgb(227,93,52)"/><text x="658.00" y="270.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (10 samples, 2.16%)</title><rect x="663" y="276" width="26" height="15" fill="rgb(248,61,44)"/><text x="666.00" y="286.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (9 samples, 1.94%)</title><rect x="666" y="292" width="23" height="15" fill="rgb(239,139,19)"/><text x="669.00" y="302.50">P..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (3 samples, 0.65%)</title><rect x="681" y="308" width="8" height="15" fill="rgb(225,108,9)"/><text x="684.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.43%)</title><rect x="683" y="324" width="6" height="15" fill="rgb(214,40,39)"/><text x="686.00" y="334.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="686" y="340" width="3" height="15" fill="rgb(218,195,6)"/><text x="689.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="714" y="372" width="2" height="15" fill="rgb(216,93,46)"/><text x="717.00" y="382.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.22%)</title><rect x="714" y="388" width="2" height="15" fill="rgb(245,37,38)"/><text x="717.00" y="398.50"></text></g><g><title>PyArray_MinScalarType_internal (convert_datatype.c) (1 samples, 0.22%)</title><rect x="714" y="404" width="2" height="15" fill="rgb(224,9,15)"/><text x="717.00" y="414.50"></text></g><g><title>min_scalar_type_num (convert_datatype.c) (1 samples, 0.22%)</title><rect x="714" y="420" width="2" height="15" fill="rgb(223,102,49)"/><text x="717.00" y="430.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.22%)</title><rect x="716" y="420" width="3" height="15" fill="rgb(212,134,49)"/><text x="719.00" y="430.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.22%)</title><rect x="716" y="436" width="3" height="15" fill="rgb(230,134,27)"/><text x="719.00" y="446.50"></text></g><g><title>0x7f11946907a5 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="716" y="452" width="3" height="15" fill="rgb(221,96,23)"/><text x="719.00" y="462.50"></text></g><g><title>0x7f11946f8d50 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="716" y="468" width="3" height="15" fill="rgb(243,213,45)"/><text x="719.00" y="478.50"></text></g><g><title>get_array_memory_extents (mem_overlap.c) (1 samples, 0.22%)</title><rect x="719" y="420" width="3" height="15" fill="rgb(249,73,6)"/><text x="722.00" y="430.50"></text></g><g><title>0x7f11946d8902 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="722" y="436" width="2" height="15" fill="rgb(239,202,28)"/><text x="725.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.86%)</title><rect x="716" y="372" width="11" height="15" fill="rgb(250,58,9)"/><text x="719.00" y="382.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (4 samples, 0.86%)</title><rect x="716" y="388" width="11" height="15" fill="rgb(227,25,35)"/><text x="719.00" y="398.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (4 samples, 0.86%)</title><rect x="716" y="404" width="11" height="15" fill="rgb(224,90,14)"/><text x="719.00" y="414.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (2 samples, 0.43%)</title><rect x="722" y="420" width="5" height="15" fill="rgb(213,191,35)"/><text x="725.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="724" y="436" width="3" height="15" fill="rgb(230,207,47)"/><text x="727.00" y="446.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (8 samples, 1.72%)</title><rect x="709" y="324" width="20" height="15" fill="rgb(230,169,30)"/><text x="712.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 1.72%)</title><rect x="709" y="340" width="20" height="15" fill="rgb(236,112,9)"/><text x="712.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 1.51%)</title><rect x="711" y="356" width="18" height="15" fill="rgb(207,35,8)"/><text x="714.00" y="366.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.22%)</title><rect x="727" y="372" width="2" height="15" fill="rgb(221,170,14)"/><text x="730.00" y="382.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.22%)</title><rect x="727" y="388" width="2" height="15" fill="rgb(249,111,27)"/><text x="730.00" y="398.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.22%)</title><rect x="727" y="404" width="2" height="15" fill="rgb(209,56,9)"/><text x="730.00" y="414.50"></text></g><g><title>PyArray_DescrFromScalar (scalarapi.c) (1 samples, 0.22%)</title><rect x="727" y="420" width="2" height="15" fill="rgb(223,192,9)"/><text x="730.00" y="430.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.22%)</title><rect x="727" y="436" width="2" height="15" fill="rgb(224,100,4)"/><text x="730.00" y="446.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.22%)</title><rect x="727" y="452" width="2" height="15" fill="rgb(212,211,42)"/><text x="730.00" y="462.50"></text></g><g><title>_clip_dep_is_byte_swapped (numpy/core/_methods.py) (2 samples, 0.43%)</title><rect x="729" y="324" width="5" height="15" fill="rgb(217,209,31)"/><text x="732.00" y="334.50"></text></g><g><title>arraydescr_isnative_get (descriptor.c) (1 samples, 0.22%)</title><rect x="732" y="340" width="2" height="15" fill="rgb(215,115,49)"/><text x="735.00" y="350.50"></text></g><g><title>_arraydescr_isnative (descriptor.c) (1 samples, 0.22%)</title><rect x="732" y="356" width="2" height="15" fill="rgb(244,7,12)"/><text x="735.00" y="366.50"></text></g><g><title>0x7f11946f9120 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="750" y="340" width="2" height="15" fill="rgb(243,153,23)"/><text x="753.00" y="350.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="752" y="340" width="5" height="15" fill="rgb(219,132,49)"/><text x="755.00" y="350.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (2 samples, 0.43%)</title><rect x="760" y="372" width="5" height="15" fill="rgb(243,25,21)"/><text x="763.00" y="382.50"></text></g><g><title>get_array_function (arrayfunction_override.c) (2 samples, 0.43%)</title><rect x="760" y="388" width="5" height="15" fill="rgb(210,147,6)"/><text x="763.00" y="398.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (2 samples, 0.43%)</title><rect x="760" y="404" width="5" height="15" fill="rgb(213,158,22)"/><text x="763.00" y="414.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (2 samples, 0.43%)</title><rect x="760" y="420" width="5" height="15" fill="rgb(211,166,46)"/><text x="763.00" y="430.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (7 samples, 1.51%)</title><rect x="757" y="340" width="18" height="15" fill="rgb(212,128,41)"/><text x="760.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 1.29%)</title><rect x="760" y="356" width="15" height="15" fill="rgb(237,78,20)"/><text x="763.00" y="366.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py) (4 samples, 0.86%)</title><rect x="765" y="372" width="10" height="15" fill="rgb(224,219,17)"/><text x="768.00" y="382.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (1 samples, 0.22%)</title><rect x="772" y="388" width="3" height="15" fill="rgb(228,60,21)"/><text x="775.00" y="398.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (1 samples, 0.22%)</title><rect x="772" y="404" width="3" height="15" fill="rgb(252,206,35)"/><text x="775.00" y="414.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (1 samples, 0.22%)</title><rect x="772" y="420" width="3" height="15" fill="rgb(223,64,2)"/><text x="775.00" y="430.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.22%)</title><rect x="772" y="436" width="3" height="15" fill="rgb(206,162,19)"/><text x="775.00" y="446.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (3 samples, 0.65%)</title><rect x="778" y="356" width="7" height="15" fill="rgb(251,116,48)"/><text x="781.00" y="366.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.65%)</title><rect x="778" y="372" width="7" height="15" fill="rgb(228,177,2)"/><text x="781.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.65%)</title><rect x="778" y="388" width="7" height="15" fill="rgb(217,211,48)"/><text x="781.00" y="398.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.65%)</title><rect x="778" y="404" width="7" height="15" fill="rgb(216,140,31)"/><text x="781.00" y="414.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (3 samples, 0.65%)</title><rect x="778" y="420" width="7" height="15" fill="rgb(234,205,5)"/><text x="781.00" y="430.50"></text></g><g><title>PyUFunc_DefaultTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="788" y="372" width="2" height="15" fill="rgb(205,156,21)"/><text x="791.00" y="382.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="790" y="372" width="3" height="15" fill="rgb(219,134,18)"/><text x="793.00" y="382.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="790" y="388" width="3" height="15" fill="rgb(209,13,50)"/><text x="793.00" y="398.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (4 samples, 0.86%)</title><rect x="793" y="372" width="10" height="15" fill="rgb(214,211,2)"/><text x="796.00" y="382.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.65%)</title><rect x="795" y="388" width="8" height="15" fill="rgb(245,213,34)"/><text x="798.00" y="398.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (2 samples, 0.43%)</title><rect x="798" y="404" width="5" height="15" fill="rgb(220,227,48)"/><text x="801.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (11 samples, 2.37%)</title><rect x="785" y="356" width="28" height="15" fill="rgb(234,146,34)"/><text x="788.00" y="366.50">P..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (4 samples, 0.86%)</title><rect x="803" y="372" width="10" height="15" fill="rgb(211,192,17)"/><text x="806.00" y="382.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (3 samples, 0.65%)</title><rect x="805" y="388" width="8" height="15" fill="rgb(216,95,13)"/><text x="808.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (2 samples, 0.43%)</title><rect x="808" y="404" width="5" height="15" fill="rgb(212,67,51)"/><text x="811.00" y="414.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (2 samples, 0.43%)</title><rect x="808" y="420" width="5" height="15" fill="rgb(250,184,19)"/><text x="811.00" y="430.50"></text></g><g><title>PyArray_CanCastSafely (convert_datatype.c) (1 samples, 0.22%)</title><rect x="811" y="436" width="2" height="15" fill="rgb(241,213,34)"/><text x="814.00" y="446.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (46 samples, 9.91%)</title><rect x="701" y="244" width="117" height="15" fill="rgb(227,105,20)"/><text x="704.00" y="254.50">clip (numpy/co..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (46 samples, 9.91%)</title><rect x="701" y="260" width="117" height="15" fill="rgb(218,216,5)"/><text x="704.00" y="270.50">_wrapfunc (num..</text></g><g><title>array_clip (methods.c) (45 samples, 9.70%)</title><rect x="704" y="276" width="114" height="15" fill="rgb(206,106,16)"/><text x="707.00" y="286.50">array_clip (me..</text></g><g><title>forward_ndarray_method (methods.c) (45 samples, 9.70%)</title><rect x="704" y="292" width="114" height="15" fill="rgb(247,208,32)"/><text x="707.00" y="302.50">forward_ndarra..</text></g><g><title>_clip (numpy/core/_methods.py) (45 samples, 9.70%)</title><rect x="704" y="308" width="114" height="15" fill="rgb(235,85,37)"/><text x="707.00" y="318.50">_clip (numpy/c..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (33 samples, 7.11%)</title><rect x="734" y="324" width="84" height="15" fill="rgb(253,13,26)"/><text x="737.00" y="334.50">_clip_dep..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (17 samples, 3.66%)</title><rect x="775" y="340" width="43" height="15" fill="rgb(219,62,53)"/><text x="778.00" y="350.50">ufun..</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.43%)</title><rect x="813" y="356" width="5" height="15" fill="rgb(210,91,26)"/><text x="816.00" y="366.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.43%)</title><rect x="813" y="372" width="5" height="15" fill="rgb(253,65,16)"/><text x="816.00" y="382.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.43%)</title><rect x="813" y="388" width="5" height="15" fill="rgb(236,152,48)"/><text x="816.00" y="398.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;) (52 samples, 11.21%)</title><rect x="689" y="212" width="132" height="15" fill="rgb(212,64,29)"/><text x="692.00" y="222.50">clip (&lt;__array_f..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (48 samples, 10.34%)</title><rect x="699" y="228" width="122" height="15" fill="rgb(207,56,20)"/><text x="702.00" y="238.50">array_implement..</text></g><g><title>npy_cache_import (npy_import.h) (1 samples, 0.22%)</title><rect x="818" y="244" width="3" height="15" fill="rgb(213,92,16)"/><text x="821.00" y="254.50"></text></g><g><title>0x7f116e11bf81 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="839" y="244" width="2" height="15" fill="rgb(247,3,31)"/><text x="842.00" y="254.50"></text></g><g><title>0x7f116e12a225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="841" y="276" width="5" height="15" fill="rgb(242,157,44)"/><text x="844.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (1 samples, 0.22%)</title><rect x="844" y="292" width="2" height="15" fill="rgb(246,93,0)"/><text x="847.00" y="302.50"></text></g><g><title>_buffer_format_string (buffer.c) (1 samples, 0.22%)</title><rect x="846" y="388" width="3" height="15" fill="rgb(244,140,47)"/><text x="849.00" y="398.50"></text></g><g><title>_is_natively_aligned_at (buffer.c) (1 samples, 0.22%)</title><rect x="846" y="404" width="3" height="15" fill="rgb(228,121,22)"/><text x="849.00" y="414.50"></text></g><g><title>0x7f116e10ed04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="846" y="292" width="5" height="15" fill="rgb(249,225,33)"/><text x="849.00" y="302.50"></text></g><g><title>0x7f116e10e666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="846" y="308" width="5" height="15" fill="rgb(228,198,52)"/><text x="849.00" y="318.50"></text></g><g><title>0x7f116e1042fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="846" y="324" width="5" height="15" fill="rgb(208,74,22)"/><text x="849.00" y="334.50"></text></g><g><title>array_getbuffer (buffer.c) (2 samples, 0.43%)</title><rect x="846" y="340" width="5" height="15" fill="rgb(244,59,7)"/><text x="849.00" y="350.50"></text></g><g><title>_buffer_get_info (buffer.c) (2 samples, 0.43%)</title><rect x="846" y="356" width="5" height="15" fill="rgb(242,227,9)"/><text x="849.00" y="366.50"></text></g><g><title>_buffer_info_new (buffer.c) (2 samples, 0.43%)</title><rect x="846" y="372" width="5" height="15" fill="rgb(249,127,16)"/><text x="849.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="849" y="388" width="2" height="15" fill="rgb(232,163,46)"/><text x="852.00" y="398.50"></text></g><g><title>0x7f116e12a2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.65%)</title><rect x="846" y="276" width="8" height="15" fill="rgb(211,196,34)"/><text x="849.00" y="286.50"></text></g><g><title>0x7f116e10ee72 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="851" y="292" width="3" height="15" fill="rgb(243,54,27)"/><text x="854.00" y="302.50"></text></g><g><title>0x7f116e1022bc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="851" y="308" width="3" height="15" fill="rgb(237,195,49)"/><text x="854.00" y="318.50"></text></g><g><title>0x7f116e101c78 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="851" y="324" width="3" height="15" fill="rgb(224,82,45)"/><text x="854.00" y="334.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.22%)</title><rect x="854" y="308" width="2" height="15" fill="rgb(250,103,6)"/><text x="857.00" y="318.50"></text></g><g><title>0x7f116e12a592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="854" y="276" width="5" height="15" fill="rgb(207,61,7)"/><text x="857.00" y="286.50"></text></g><g><title>array_zeros (multiarraymodule.c) (2 samples, 0.43%)</title><rect x="854" y="292" width="5" height="15" fill="rgb(251,121,43)"/><text x="857.00" y="302.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.22%)</title><rect x="856" y="308" width="3" height="15" fill="rgb(223,34,14)"/><text x="859.00" y="318.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.22%)</title><rect x="856" y="324" width="3" height="15" fill="rgb(223,52,39)"/><text x="859.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (1 samples, 0.22%)</title><rect x="856" y="340" width="3" height="15" fill="rgb(207,137,49)"/><text x="859.00" y="350.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.22%)</title><rect x="856" y="356" width="3" height="15" fill="rgb(234,202,26)"/><text x="859.00" y="366.50"></text></g><g><title>0x7f116e12a92f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="859" y="276" width="2" height="15" fill="rgb(215,26,7)"/><text x="862.00" y="286.50"></text></g><g><title>0x7f116e0ff8b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="859" y="292" width="2" height="15" fill="rgb(243,141,46)"/><text x="862.00" y="302.50"></text></g><g><title>0x7f116e12b405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 1.94%)</title><rect x="841" y="260" width="23" height="15" fill="rgb(254,149,46)"/><text x="844.00" y="270.50">0..</text></g><g><title>0x7f116e12ac27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="861" y="276" width="3" height="15" fill="rgb(249,122,28)"/><text x="864.00" y="286.50"></text></g><g><title>0x7f116e102529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="861" y="292" width="3" height="15" fill="rgb(215,87,11)"/><text x="864.00" y="302.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.22%)</title><rect x="861" y="308" width="3" height="15" fill="rgb(230,70,31)"/><text x="864.00" y="318.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.22%)</title><rect x="861" y="324" width="3" height="15" fill="rgb(233,72,15)"/><text x="864.00" y="334.50"></text></g><g><title>0x7f116e12b408 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="864" y="260" width="3" height="15" fill="rgb(207,31,28)"/><text x="867.00" y="270.50"></text></g><g><title>0x7f116e100178 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="867" y="276" width="2" height="15" fill="rgb(253,22,46)"/><text x="870.00" y="286.50"></text></g><g><title>0x7f116e11bfa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 2.59%)</title><rect x="841" y="244" width="31" height="15" fill="rgb(238,108,29)"/><text x="844.00" y="254.50">0x..</text></g><g><title>0x7f116e12b540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="867" y="260" width="5" height="15" fill="rgb(228,208,0)"/><text x="870.00" y="270.50"></text></g><g><title>0x7f116e1002f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="869" y="276" width="3" height="15" fill="rgb(206,128,2)"/><text x="872.00" y="286.50"></text></g><g><title>0x7f116e0ff4dd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="869" y="292" width="3" height="15" fill="rgb(212,226,12)"/><text x="872.00" y="302.50"></text></g><g><title>0x7f116e11c05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.65%)</title><rect x="872" y="244" width="7" height="15" fill="rgb(230,147,25)"/><text x="875.00" y="254.50"></text></g><g><title>array_take (methods.c) (3 samples, 0.65%)</title><rect x="872" y="260" width="7" height="15" fill="rgb(213,65,37)"/><text x="875.00" y="270.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (1 samples, 0.22%)</title><rect x="877" y="276" width="2" height="15" fill="rgb(212,28,19)"/><text x="880.00" y="286.50"></text></g><g><title>PyArray_CheckAxis (ctors.c) (1 samples, 0.22%)</title><rect x="877" y="292" width="2" height="15" fill="rgb(206,163,29)"/><text x="880.00" y="302.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (1 samples, 0.22%)</title><rect x="877" y="308" width="2" height="15" fill="rgb(206,117,51)"/><text x="880.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.22%)</title><rect x="877" y="324" width="2" height="15" fill="rgb(251,202,47)"/><text x="880.00" y="334.50"></text></g><g><title>0x7f116e11c14f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="879" y="244" width="3" height="15" fill="rgb(246,57,39)"/><text x="882.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="879" y="260" width="3" height="15" fill="rgb(249,202,37)"/><text x="882.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="879" y="276" width="3" height="15" fill="rgb(233,74,45)"/><text x="882.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="879" y="292" width="3" height="15" fill="rgb(221,86,9)"/><text x="882.00" y="302.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (1 samples, 0.22%)</title><rect x="882" y="276" width="2" height="15" fill="rgb(238,193,12)"/><text x="885.00" y="286.50"></text></g><g><title>0x7f116e11cd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (19 samples, 4.09%)</title><rect x="839" y="228" width="48" height="15" fill="rgb(207,90,32)"/><text x="842.00" y="238.50">0x7f..</text></g><g><title>0x7f116e11c328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="882" y="244" width="5" height="15" fill="rgb(231,38,37)"/><text x="885.00" y="254.50"></text></g><g><title>array_reshape (methods.c) (2 samples, 0.43%)</title><rect x="882" y="260" width="5" height="15" fill="rgb(245,3,28)"/><text x="885.00" y="270.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.22%)</title><rect x="884" y="276" width="3" height="15" fill="rgb(205,193,31)"/><text x="887.00" y="286.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.22%)</title><rect x="884" y="292" width="3" height="15" fill="rgb(209,170,11)"/><text x="887.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="884" y="308" width="3" height="15" fill="rgb(247,172,41)"/><text x="887.00" y="318.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="884" y="324" width="3" height="15" fill="rgb(220,146,21)"/><text x="887.00" y="334.50"></text></g><g><title>__enter__ (warnings.py) (5 samples, 1.08%)</title><rect x="928" y="260" width="12" height="15" fill="rgb(247,56,37)"/><text x="931.00" y="270.50"></text></g><g><title>__exit__ (warnings.py) (4 samples, 0.86%)</title><rect x="940" y="260" width="10" height="15" fill="rgb(249,41,25)"/><text x="943.00" y="270.50"></text></g><g><title>__init__ (warnings.py) (2 samples, 0.43%)</title><rect x="950" y="260" width="6" height="15" fill="rgb(234,126,17)"/><text x="953.00" y="270.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="971" y="276" width="2" height="15" fill="rgb(234,176,40)"/><text x="974.00" y="286.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (8 samples, 1.72%)</title><rect x="956" y="260" width="20" height="15" fill="rgb(237,12,43)"/><text x="959.00" y="270.50"></text></g><g><title>get_config (sklearn/_config.py) (1 samples, 0.22%)</title><rect x="973" y="276" width="3" height="15" fill="rgb(245,96,21)"/><text x="976.00" y="286.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (3 samples, 0.65%)</title><rect x="976" y="260" width="8" height="15" fill="rgb(239,215,28)"/><text x="979.00" y="270.50"></text></g><g><title>array_descr_get (getset.c) (1 samples, 0.22%)</title><rect x="981" y="276" width="3" height="15" fill="rgb(235,93,9)"/><text x="984.00" y="286.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (13 samples, 2.80%)</title><rect x="984" y="260" width="33" height="15" fill="rgb(251,98,51)"/><text x="987.00" y="270.50">_n..</text></g><g><title>__instancecheck__ (abc.py) (4 samples, 0.86%)</title><rect x="1006" y="276" width="11" height="15" fill="rgb(208,154,19)"/><text x="1009.00" y="286.50"></text></g><g><title>__subclasscheck__ (abc.py) (1 samples, 0.22%)</title><rect x="1014" y="292" width="3" height="15" fill="rgb(225,47,42)"/><text x="1017.00" y="302.50"></text></g><g><title>arraydescr_new (descriptor.c) (2 samples, 0.43%)</title><rect x="1017" y="260" width="5" height="15" fill="rgb(223,61,8)"/><text x="1020.00" y="270.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.22%)</title><rect x="1019" y="276" width="3" height="15" fill="rgb(228,20,34)"/><text x="1022.00" y="286.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.22%)</title><rect x="1019" y="292" width="3" height="15" fill="rgb(234,145,40)"/><text x="1022.00" y="302.50"></text></g><g><title>_typenum_fromtypeobj (scalartypes.c.src) (1 samples, 0.22%)</title><rect x="1019" y="308" width="3" height="15" fill="rgb(249,197,37)"/><text x="1022.00" y="318.50"></text></g><g><title>get_typeobj_idx (scalartypes.c.src) (1 samples, 0.22%)</title><rect x="1019" y="324" width="3" height="15" fill="rgb(232,212,21)"/><text x="1022.00" y="334.50"></text></g><g><title>PyArray_DescrConverter2 (descriptor.c) (1 samples, 0.22%)</title><rect x="1029" y="292" width="3" height="15" fill="rgb(216,146,6)"/><text x="1032.00" y="302.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (5 samples, 1.08%)</title><rect x="1022" y="260" width="12" height="15" fill="rgb(228,4,53)"/><text x="1025.00" y="270.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (3 samples, 0.65%)</title><rect x="1027" y="276" width="7" height="15" fill="rgb(214,57,47)"/><text x="1030.00" y="286.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.22%)</title><rect x="1032" y="292" width="2" height="15" fill="rgb(213,35,41)"/><text x="1035.00" y="302.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (66 samples, 14.22%)</title><rect x="887" y="228" width="168" height="15" fill="rgb(232,167,48)"/><text x="890.00" y="238.50">_validate_X_predict (..</text></g><g><title>check_array (sklearn/utils/validation.py) (64 samples, 13.79%)</title><rect x="892" y="244" width="163" height="15" fill="rgb(244,162,5)"/><text x="895.00" y="254.50">check_array (sklearn/..</text></g><g><title>simplefilter (warnings.py) (8 samples, 1.72%)</title><rect x="1034" y="260" width="21" height="15" fill="rgb(218,31,49)"/><text x="1037.00" y="270.50"></text></g><g><title>_add_filter (warnings.py) (8 samples, 1.72%)</title><rect x="1034" y="276" width="21" height="15" fill="rgb(231,159,20)"/><text x="1037.00" y="286.50"></text></g><g><title>array_assign_subscript (mapping.c) (1 samples, 0.22%)</title><rect x="1055" y="228" width="2" height="15" fill="rgb(241,122,9)"/><text x="1058.00" y="238.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1057" y="276" width="5" height="15" fill="rgb(248,123,17)"/><text x="1060.00" y="286.50"></text></g><g><title>0x7f11938fae80 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1062" y="308" width="3" height="15" fill="rgb(231,19,1)"/><text x="1065.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.86%)</title><rect x="1057" y="260" width="10" height="15" fill="rgb(213,85,53)"/><text x="1060.00" y="270.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (2 samples, 0.43%)</title><rect x="1062" y="276" width="5" height="15" fill="rgb(208,48,45)"/><text x="1065.00" y="286.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (2 samples, 0.43%)</title><rect x="1062" y="292" width="5" height="15" fill="rgb(239,167,20)"/><text x="1065.00" y="302.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.22%)</title><rect x="1065" y="308" width="2" height="15" fill="rgb(251,181,49)"/><text x="1068.00" y="318.50"></text></g><g><title>array_richcompare (arrayobject.c) (6 samples, 1.29%)</title><rect x="1057" y="228" width="16" height="15" fill="rgb(213,75,22)"/><text x="1060.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 1.29%)</title><rect x="1057" y="244" width="16" height="15" fill="rgb(220,86,34)"/><text x="1060.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.43%)</title><rect x="1067" y="260" width="6" height="15" fill="rgb(206,165,4)"/><text x="1070.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.43%)</title><rect x="1067" y="276" width="6" height="15" fill="rgb(250,41,4)"/><text x="1070.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.43%)</title><rect x="1067" y="292" width="6" height="15" fill="rgb(241,166,38)"/><text x="1070.00" y="302.50"></text></g><g><title>0x7f11938fb540 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1078" y="260" width="2" height="15" fill="rgb(233,5,11)"/><text x="1081.00" y="270.50"></text></g><g><title>get_view_from_index (mapping.c) (4 samples, 0.86%)</title><rect x="1075" y="244" width="10" height="15" fill="rgb(232,82,1)"/><text x="1078.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (2 samples, 0.43%)</title><rect x="1080" y="260" width="5" height="15" fill="rgb(246,9,35)"/><text x="1083.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.43%)</title><rect x="1080" y="276" width="5" height="15" fill="rgb(205,59,3)"/><text x="1083.00" y="286.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="1083" y="292" width="2" height="15" fill="rgb(208,74,18)"/><text x="1086.00" y="302.50"></text></g><g><title>array_subscript (mapping.c) (6 samples, 1.29%)</title><rect x="1073" y="228" width="15" height="15" fill="rgb(225,9,28)"/><text x="1076.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.22%)</title><rect x="1085" y="244" width="3" height="15" fill="rgb(252,102,52)"/><text x="1088.00" y="254.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.22%)</title><rect x="1088" y="292" width="2" height="15" fill="rgb(206,64,7)"/><text x="1091.00" y="302.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.22%)</title><rect x="1088" y="308" width="2" height="15" fill="rgb(215,4,1)"/><text x="1091.00" y="318.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.22%)</title><rect x="1088" y="324" width="2" height="15" fill="rgb(243,28,52)"/><text x="1091.00" y="334.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.22%)</title><rect x="1088" y="340" width="2" height="15" fill="rgb(224,43,49)"/><text x="1091.00" y="350.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.22%)</title><rect x="1088" y="356" width="2" height="15" fill="rgb(237,99,26)"/><text x="1091.00" y="366.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (1 samples, 0.22%)</title><rect x="1093" y="308" width="2" height="15" fill="rgb(253,175,26)"/><text x="1096.00" y="318.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (1 samples, 0.22%)</title><rect x="1093" y="324" width="2" height="15" fill="rgb(235,157,3)"/><text x="1096.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.22%)</title><rect x="1093" y="340" width="2" height="15" fill="rgb(213,37,49)"/><text x="1096.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1098" y="340" width="2" height="15" fill="rgb(241,103,15)"/><text x="1101.00" y="350.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1098" y="356" width="2" height="15" fill="rgb(248,139,21)"/><text x="1101.00" y="366.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (1 samples, 0.22%)</title><rect x="1100" y="340" width="3" height="15" fill="rgb(213,224,10)"/><text x="1103.00" y="350.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.22%)</title><rect x="1100" y="356" width="3" height="15" fill="rgb(212,78,8)"/><text x="1103.00" y="366.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.22%)</title><rect x="1100" y="372" width="3" height="15" fill="rgb(239,82,17)"/><text x="1103.00" y="382.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.22%)</title><rect x="1100" y="388" width="3" height="15" fill="rgb(249,75,54)"/><text x="1103.00" y="398.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.22%)</title><rect x="1103" y="356" width="3" height="15" fill="rgb(245,72,16)"/><text x="1106.00" y="366.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (1 samples, 0.22%)</title><rect x="1103" y="372" width="3" height="15" fill="rgb(250,96,26)"/><text x="1106.00" y="382.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (5 samples, 1.08%)</title><rect x="1095" y="324" width="13" height="15" fill="rgb(237,41,19)"/><text x="1098.00" y="334.50"></text></g><g><title>reduce_loop (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1103" y="340" width="5" height="15" fill="rgb(243,45,54)"/><text x="1106.00" y="350.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (1 samples, 0.22%)</title><rect x="1106" y="356" width="2" height="15" fill="rgb(219,19,0)"/><text x="1109.00" y="366.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.22%)</title><rect x="1106" y="372" width="2" height="15" fill="rgb(217,2,14)"/><text x="1109.00" y="382.50"></text></g><g><title>array_sum (methods.c) (9 samples, 1.94%)</title><rect x="1088" y="228" width="23" height="15" fill="rgb(205,115,28)"/><text x="1091.00" y="238.50">a..</text></g><g><title>forward_ndarray_method (methods.c) (9 samples, 1.94%)</title><rect x="1088" y="244" width="23" height="15" fill="rgb(210,111,0)"/><text x="1091.00" y="254.50">f..</text></g><g><title>_sum (numpy/core/_methods.py) (9 samples, 1.94%)</title><rect x="1088" y="260" width="23" height="15" fill="rgb(248,123,16)"/><text x="1091.00" y="270.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c) (9 samples, 1.94%)</title><rect x="1088" y="276" width="23" height="15" fill="rgb(221,95,49)"/><text x="1091.00" y="286.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (8 samples, 1.72%)</title><rect x="1090" y="292" width="21" height="15" fill="rgb(210,227,33)"/><text x="1093.00" y="302.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (6 samples, 1.29%)</title><rect x="1095" y="308" width="16" height="15" fill="rgb(247,217,43)"/><text x="1098.00" y="318.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1108" y="324" width="3" height="15" fill="rgb(237,128,9)"/><text x="1111.00" y="334.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="1108" y="340" width="3" height="15" fill="rgb(206,209,38)"/><text x="1111.00" y="350.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="1108" y="356" width="3" height="15" fill="rgb(240,124,54)"/><text x="1111.00" y="366.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (12 samples, 2.59%)</title><rect x="1111" y="228" width="30" height="15" fill="rgb(219,145,54)"/><text x="1114.00" y="238.50">ch..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (9 samples, 1.94%)</title><rect x="1118" y="244" width="23" height="15" fill="rgb(215,1,16)"/><text x="1121.00" y="254.50">&lt;..</text></g><g><title>unicode_endswith (python3.7) (2 samples, 0.43%)</title><rect x="1136" y="260" width="5" height="15" fill="rgb(218,149,18)"/><text x="1139.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1141" y="260" width="5" height="15" fill="rgb(226,156,12)"/><text x="1144.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1141" y="276" width="5" height="15" fill="rgb(211,106,5)"/><text x="1144.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1144" y="292" width="2" height="15" fill="rgb(244,190,9)"/><text x="1147.00" y="302.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1144" y="308" width="2" height="15" fill="rgb(230,60,29)"/><text x="1147.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.86%)</title><rect x="1141" y="244" width="10" height="15" fill="rgb(226,152,5)"/><text x="1144.00" y="254.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.43%)</title><rect x="1146" y="260" width="5" height="15" fill="rgb(237,195,35)"/><text x="1149.00" y="270.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (131 samples, 28.23%)</title><rect x="821" y="212" width="333" height="15" fill="rgb(222,66,52)"/><text x="824.00" y="222.50">predict_proba (sklearn/tree/_classes.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 1.08%)</title><rect x="1141" y="228" width="13" height="15" fill="rgb(221,208,37)"/><text x="1144.00" y="238.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1151" y="244" width="3" height="15" fill="rgb(210,17,49)"/><text x="1154.00" y="254.50"></text></g><g><title>0x7f11946f9124 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1151" y="260" width="3" height="15" fill="rgb(221,102,50)"/><text x="1154.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1154" y="244" width="5" height="15" fill="rgb(233,34,6)"/><text x="1157.00" y="254.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.43%)</title><rect x="1154" y="260" width="5" height="15" fill="rgb(226,95,53)"/><text x="1157.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.43%)</title><rect x="1154" y="276" width="5" height="15" fill="rgb(225,131,3)"/><text x="1157.00" y="286.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="1156" y="292" width="3" height="15" fill="rgb(223,166,22)"/><text x="1159.00" y="302.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.43%)</title><rect x="1159" y="244" width="5" height="15" fill="rgb(211,130,38)"/><text x="1162.00" y="254.50"></text></g><g><title>set_ufunc_loop_data_types (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="1162" y="260" width="2" height="15" fill="rgb(249,99,19)"/><text x="1165.00" y="270.50"></text></g><g><title>ensure_dtype_nbo (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="1162" y="276" width="2" height="15" fill="rgb(248,217,41)"/><text x="1165.00" y="286.50"></text></g><g><title>_samme_proba (sklearn/ensemble/_weight_boosting.py) (230 samples, 49.57%)</title><rect x="582" y="196" width="585" height="15" fill="rgb(224,81,38)"/><text x="585.00" y="206.50">_samme_proba (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 1.08%)</title><rect x="1154" y="212" width="13" height="15" fill="rgb(244,219,17)"/><text x="1157.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 1.08%)</title><rect x="1154" y="228" width="13" height="15" fill="rgb(220,84,34)"/><text x="1157.00" y="238.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1164" y="244" width="3" height="15" fill="rgb(225,101,53)"/><text x="1167.00" y="254.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_weight_boosting.py) (233 samples, 50.22%)</title><rect x="577" y="180" width="592" height="15" fill="rgb(221,46,38)"/><text x="580.00" y="190.50">&lt;genexpr&gt; (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="1167" y="196" width="2" height="15" fill="rgb(229,150,52)"/><text x="1170.00" y="206.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="1167" y="212" width="2" height="15" fill="rgb(240,135,12)"/><text x="1170.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="1167" y="228" width="2" height="15" fill="rgb(224,78,9)"/><text x="1170.00" y="238.50"></text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.22%)</title><rect x="1169" y="180" width="3" height="15" fill="rgb(233,94,1)"/><text x="1172.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (1 samples, 0.22%)</title><rect x="1169" y="196" width="3" height="15" fill="rgb(252,139,41)"/><text x="1172.00" y="206.50"></text></g><g><title>simplefilter (warnings.py) (1 samples, 0.22%)</title><rect x="1169" y="212" width="3" height="15" fill="rgb(207,208,49)"/><text x="1172.00" y="222.50"></text></g><g><title>_add_filter (warnings.py) (1 samples, 0.22%)</title><rect x="1169" y="228" width="3" height="15" fill="rgb(224,106,1)"/><text x="1172.00" y="238.50"></text></g><g><title>try_binary_elide (temp_elide.c) (1 samples, 0.22%)</title><rect x="1172" y="196" width="2" height="15" fill="rgb(215,161,25)"/><text x="1175.00" y="206.50"></text></g><g><title>can_elide_temp (temp_elide.c) (1 samples, 0.22%)</title><rect x="1172" y="212" width="2" height="15" fill="rgb(252,131,5)"/><text x="1175.00" y="222.50"></text></g><g><title>PyArray_CHKFLAGS (ndarraytypes.h) (1 samples, 0.22%)</title><rect x="1172" y="228" width="2" height="15" fill="rgb(239,5,19)"/><text x="1175.00" y="238.50"></text></g><g><title>PyArray_FLAGS (ndarraytypes.h) (1 samples, 0.22%)</title><rect x="1172" y="244" width="2" height="15" fill="rgb(238,224,24)"/><text x="1175.00" y="254.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="1174" y="228" width="3" height="15" fill="rgb(226,60,47)"/><text x="1177.00" y="238.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.22%)</title><rect x="1174" y="244" width="3" height="15" fill="rgb(229,227,53)"/><text x="1177.00" y="254.50"></text></g><g><title>array_add (number.c) (3 samples, 0.65%)</title><rect x="1172" y="180" width="7" height="15" fill="rgb(240,7,3)"/><text x="1175.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1174" y="196" width="5" height="15" fill="rgb(210,11,47)"/><text x="1177.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1174" y="212" width="5" height="15" fill="rgb(248,218,17)"/><text x="1177.00" y="222.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1177" y="228" width="2" height="15" fill="rgb(213,147,39)"/><text x="1180.00" y="238.50"></text></g><g><title>profile_skl (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (241 samples, 51.94%)</title><rect x="569" y="68" width="613" height="15" fill="rgb(250,102,34)"/><text x="572.00" y="78.50">profile_skl (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (241 samples, 51.94%)</title><rect x="569" y="84" width="613" height="15" fill="rgb(209,0,53)"/><text x="572.00" y="94.50">setup_profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (241 samples, 51.94%)</title><rect x="569" y="100" width="613" height="15" fill="rgb(242,72,15)"/><text x="572.00" y="110.50">profile (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (241 samples, 51.94%)</title><rect x="569" y="116" width="613" height="15" fill="rgb(221,141,28)"/><text x="572.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (239 samples, 51.51%)</title><rect x="574" y="132" width="608" height="15" fill="rgb(229,83,31)"/><text x="577.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/ensemble/_weight_boosting.py) (239 samples, 51.51%)</title><rect x="574" y="148" width="608" height="15" fill="rgb(210,92,35)"/><text x="577.00" y="158.50">predict_proba (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>decision_function (sklearn/ensemble/_weight_boosting.py) (238 samples, 51.29%)</title><rect x="577" y="164" width="605" height="15" fill="rgb(230,48,18)"/><text x="580.00" y="174.50">decision_function (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>array_sum (methods.c) (1 samples, 0.22%)</title><rect x="1179" y="180" width="3" height="15" fill="rgb(229,106,16)"/><text x="1182.00" y="190.50"></text></g><g><title>forward_ndarray_method (methods.c) (1 samples, 0.22%)</title><rect x="1179" y="196" width="3" height="15" fill="rgb(250,148,17)"/><text x="1182.00" y="206.50"></text></g><g><title>_sum (numpy/core/_methods.py) (1 samples, 0.22%)</title><rect x="1179" y="212" width="3" height="15" fill="rgb(248,10,53)"/><text x="1182.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1179" y="228" width="3" height="15" fill="rgb(210,174,23)"/><text x="1182.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1179" y="244" width="3" height="15" fill="rgb(218,209,0)"/><text x="1182.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1179" y="260" width="3" height="15" fill="rgb(216,170,10)"/><text x="1182.00" y="270.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (1 samples, 0.22%)</title><rect x="1179" y="276" width="3" height="15" fill="rgb(252,186,7)"/><text x="1182.00" y="286.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.22%)</title><rect x="1179" y="292" width="3" height="15" fill="rgb(238,197,48)"/><text x="1182.00" y="302.50"></text></g><g><title>_make_estimator (sklearn/ensemble/_base.py) (1 samples, 0.22%)</title><rect x="1182" y="180" width="2" height="15" fill="rgb(211,184,11)"/><text x="1185.00" y="190.50"></text></g><g><title>clone (sklearn/base.py) (1 samples, 0.22%)</title><rect x="1182" y="196" width="2" height="15" fill="rgb(245,226,1)"/><text x="1185.00" y="206.50"></text></g><g><title>get_params (sklearn/base.py) (1 samples, 0.22%)</title><rect x="1182" y="212" width="2" height="15" fill="rgb(208,64,36)"/><text x="1185.00" y="222.50"></text></g><g><title>_get_param_names (sklearn/base.py) (1 samples, 0.22%)</title><rect x="1182" y="228" width="2" height="15" fill="rgb(218,132,31)"/><text x="1185.00" y="238.50"></text></g><g><title>signature (inspect.py) (1 samples, 0.22%)</title><rect x="1182" y="244" width="2" height="15" fill="rgb(227,228,5)"/><text x="1185.00" y="254.50"></text></g><g><title>from_callable (inspect.py) (1 samples, 0.22%)</title><rect x="1182" y="260" width="2" height="15" fill="rgb(231,184,29)"/><text x="1185.00" y="270.50"></text></g><g><title>_signature_from_callable (inspect.py) (1 samples, 0.22%)</title><rect x="1182" y="276" width="2" height="15" fill="rgb(241,223,45)"/><text x="1185.00" y="286.50"></text></g><g><title>_signature_from_function (inspect.py) (1 samples, 0.22%)</title><rect x="1182" y="292" width="2" height="15" fill="rgb(205,21,8)"/><text x="1185.00" y="302.50"></text></g><g><title>_boost (sklearn/ensemble/_weight_boosting.py) (2 samples, 0.43%)</title><rect x="1182" y="148" width="5" height="15" fill="rgb(218,216,4)"/><text x="1185.00" y="158.50"></text></g><g><title>_boost_real (sklearn/ensemble/_weight_boosting.py) (2 samples, 0.43%)</title><rect x="1182" y="164" width="5" height="15" fill="rgb(238,145,24)"/><text x="1185.00" y="174.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (1 samples, 0.22%)</title><rect x="1184" y="180" width="3" height="15" fill="rgb(246,95,20)"/><text x="1187.00" y="190.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (1 samples, 0.22%)</title><rect x="1184" y="196" width="3" height="15" fill="rgb(226,83,45)"/><text x="1187.00" y="206.50"></text></g><g><title>0x7f116e11b7af (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1184" y="212" width="3" height="15" fill="rgb(254,179,7)"/><text x="1187.00" y="222.50"></text></g><g><title>0x7f116e1001e5 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1184" y="228" width="3" height="15" fill="rgb(244,179,46)"/><text x="1187.00" y="238.50"></text></g><g><title>amax (&lt;__array_function__ internals&gt;) (1 samples, 0.22%)</title><rect x="1184" y="244" width="3" height="15" fill="rgb(207,79,46)"/><text x="1187.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.22%)</title><rect x="1184" y="260" width="3" height="15" fill="rgb(246,220,17)"/><text x="1187.00" y="270.50"></text></g><g><title>amax (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="1184" y="276" width="3" height="15" fill="rgb(235,54,45)"/><text x="1187.00" y="286.50"></text></g><g><title>all (464 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(219,177,34)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (464 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(225,97,33)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>start (bench_AdaBoostClassifier_default_b_cl_1_50_12_float_.py) (3 samples, 0.65%)</title><rect x="1182" y="68" width="8" height="15" fill="rgb(230,197,48)"/><text x="1185.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/AdaBoostClassifier/bench_AdaBoostClassifier_default_b_cl.py) (3 samples, 0.65%)</title><rect x="1182" y="84" width="8" height="15" fill="rgb(208,34,50)"/><text x="1185.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.65%)</title><rect x="1182" y="100" width="8" height="15" fill="rgb(254,32,7)"/><text x="1185.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_weight_boosting.py) (3 samples, 0.65%)</title><rect x="1182" y="116" width="8" height="15" fill="rgb(224,225,29)"/><text x="1185.00" y="126.50"></text></g><g><title>fit (sklearn/ensemble/_weight_boosting.py) (3 samples, 0.65%)</title><rect x="1182" y="132" width="8" height="15" fill="rgb(230,111,53)"/><text x="1185.00" y="142.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (1 samples, 0.22%)</title><rect x="1187" y="148" width="3" height="15" fill="rgb(228,134,4)"/><text x="1190.00" y="158.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.22%)</title><rect x="1187" y="164" width="3" height="15" fill="rgb(212,48,30)"/><text x="1190.00" y="174.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="1187" y="180" width="3" height="15" fill="rgb(244,166,2)"/><text x="1190.00" y="190.50"></text></g></g></svg>