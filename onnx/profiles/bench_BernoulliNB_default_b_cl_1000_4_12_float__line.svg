<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:4) (12 samples, 1.82%)</title><rect x="0.0000%" y="52" width="1.8154%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 1.82%)</title><rect x="0.0000%" y="68" width="1.8154%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 1.82%)</title><rect x="0.0000%" y="84" width="1.8154%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (12 samples, 1.82%)</title><rect x="0.0000%" y="100" width="1.8154%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (12 samples, 1.82%)</title><rect x="0.0000%" y="116" width="1.8154%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 1.82%)</title><rect x="0.0000%" y="132" width="1.8154%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50">_..</text></g><g><title>&lt;module&gt; (profiles/benches/naive_bayes/BernoulliNB/bench_BernoulliNB_default_b_cl.py:7) (7 samples, 1.06%)</title><rect x="0.7564%" y="148" width="1.0590%" height="15" fill="rgb(207,160,47)"/><text x="1.0064%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.06%)</title><rect x="0.7564%" y="164" width="1.0590%" height="15" fill="rgb(228,23,34)"/><text x="1.0064%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.06%)</title><rect x="0.7564%" y="180" width="1.0590%" height="15" fill="rgb(218,30,26)"/><text x="1.0064%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.06%)</title><rect x="0.7564%" y="196" width="1.0590%" height="15" fill="rgb(220,122,19)"/><text x="1.0064%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.06%)</title><rect x="0.7564%" y="212" width="1.0590%" height="15" fill="rgb(250,228,42)"/><text x="1.0064%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.06%)</title><rect x="0.7564%" y="228" width="1.0590%" height="15" fill="rgb(240,193,28)"/><text x="1.0064%" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (7 samples, 1.06%)</title><rect x="0.7564%" y="244" width="1.0590%" height="15" fill="rgb(216,20,37)"/><text x="1.0064%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.06%)</title><rect x="0.7564%" y="260" width="1.0590%" height="15" fill="rgb(206,188,39)"/><text x="1.0064%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.06%)</title><rect x="0.7564%" y="276" width="1.0590%" height="15" fill="rgb(217,207,13)"/><text x="1.0064%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.06%)</title><rect x="0.7564%" y="292" width="1.0590%" height="15" fill="rgb(231,73,38)"/><text x="1.0064%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.06%)</title><rect x="0.7564%" y="308" width="1.0590%" height="15" fill="rgb(225,20,46)"/><text x="1.0064%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.06%)</title><rect x="0.7564%" y="324" width="1.0590%" height="15" fill="rgb(210,31,41)"/><text x="1.0064%" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:27) (7 samples, 1.06%)</title><rect x="0.7564%" y="340" width="1.0590%" height="15" fill="rgb(221,200,47)"/><text x="1.0064%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.06%)</title><rect x="0.7564%" y="356" width="1.0590%" height="15" fill="rgb(226,26,5)"/><text x="1.0064%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.06%)</title><rect x="0.7564%" y="372" width="1.0590%" height="15" fill="rgb(249,33,26)"/><text x="1.0064%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.06%)</title><rect x="0.7564%" y="388" width="1.0590%" height="15" fill="rgb(235,183,28)"/><text x="1.0064%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.06%)</title><rect x="0.7564%" y="404" width="1.0590%" height="15" fill="rgb(221,5,38)"/><text x="1.0064%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.06%)</title><rect x="0.7564%" y="420" width="1.0590%" height="15" fill="rgb(247,18,42)"/><text x="1.0064%" y="430.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:100) (8 samples, 1.21%)</title><rect x="2.1180%" y="164" width="1.2103%" height="15" fill="rgb(241,131,45)"/><text x="2.3680%" y="174.50"></text></g><g><title>_check_X (sklearn/naive_bayes.py:971) (14 samples, 2.12%)</title><rect x="3.7821%" y="180" width="2.1180%" height="15" fill="rgb(249,31,29)"/><text x="4.0321%" y="190.50">_..</text></g><g><title>_check_X (sklearn/naive_bayes.py:472) (13 samples, 1.97%)</title><rect x="3.9334%" y="196" width="1.9667%" height="15" fill="rgb(225,111,53)"/><text x="4.1834%" y="206.50">_..</text></g><g><title>binarize (sklearn/preprocessing/_data.py:1862) (12 samples, 1.82%)</title><rect x="6.2027%" y="196" width="1.8154%" height="15" fill="rgb(238,160,17)"/><text x="6.4527%" y="206.50">b..</text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:96) (35 samples, 5.30%)</title><rect x="3.7821%" y="164" width="5.2950%" height="15" fill="rgb(214,148,48)"/><text x="4.0321%" y="174.50">predic..</text></g><g><title>_check_X (sklearn/naive_bayes.py:973) (21 samples, 3.18%)</title><rect x="5.9002%" y="180" width="3.1770%" height="15" fill="rgb(232,36,49)"/><text x="6.1502%" y="190.50">_ch..</text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1006) (12 samples, 1.82%)</title><rect x="9.0772%" y="180" width="1.8154%" height="15" fill="rgb(209,103,24)"/><text x="9.3272%" y="190.50">_..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (10 samples, 1.51%)</title><rect x="9.3797%" y="196" width="1.5129%" height="15" fill="rgb(229,88,8)"/><text x="9.6297%" y="206.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:97) (19 samples, 2.87%)</title><rect x="9.0772%" y="164" width="2.8744%" height="15" fill="rgb(213,181,19)"/><text x="9.3272%" y="174.50">pr..</text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1007) (7 samples, 1.06%)</title><rect x="10.8926%" y="180" width="1.0590%" height="15" fill="rgb(254,191,54)"/><text x="11.1426%" y="190.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1862) (7 samples, 1.06%)</title><rect x="14.3722%" y="340" width="1.0590%" height="15" fill="rgb(241,83,37)"/><text x="14.6222%" y="350.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (9 samples, 1.36%)</title><rect x="15.7337%" y="356" width="1.3616%" height="15" fill="rgb(233,36,39)"/><text x="15.9837%" y="366.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1881) (12 samples, 1.82%)</title><rect x="15.4312%" y="340" width="1.8154%" height="15" fill="rgb(226,3,54)"/><text x="15.6812%" y="350.50">D..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:101) (36 samples, 5.45%)</title><rect x="12.2542%" y="180" width="5.4463%" height="15" fill="rgb(245,192,40)"/><text x="12.5042%" y="190.50">logsume..</text></g><g><title>amax (&lt;__array_function__ internals&gt;:6) (36 samples, 5.45%)</title><rect x="12.2542%" y="196" width="5.4463%" height="15" fill="rgb(238,167,29)"/><text x="12.5042%" y="206.50">amax (&lt;..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (35 samples, 5.30%)</title><rect x="12.4054%" y="212" width="5.2950%" height="15" fill="rgb(232,182,51)"/><text x="12.6554%" y="222.50">array_..</text></g><g><title>amax (numpy/core/fromnumeric.py:2621) (34 samples, 5.14%)</title><rect x="12.5567%" y="228" width="5.1437%" height="15" fill="rgb(231,60,39)"/><text x="12.8067%" y="238.50">amax (..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (32 samples, 4.84%)</title><rect x="12.8593%" y="244" width="4.8411%" height="15" fill="rgb(208,69,12)"/><text x="13.1093%" y="254.50">_wrapr..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (31 samples, 4.69%)</title><rect x="13.0106%" y="260" width="4.6899%" height="15" fill="rgb(235,93,37)"/><text x="13.2606%" y="270.50">ufunc..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (29 samples, 4.39%)</title><rect x="13.3132%" y="276" width="4.3873%" height="15" fill="rgb(213,116,39)"/><text x="13.5632%" y="286.50">PyUFu..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (27 samples, 4.08%)</title><rect x="13.6157%" y="292" width="4.0847%" height="15" fill="rgb(222,207,29)"/><text x="13.8657%" y="302.50">PyUF..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (22 samples, 3.33%)</title><rect x="14.3722%" y="308" width="3.3283%" height="15" fill="rgb(206,96,30)"/><text x="14.6222%" y="318.50">PyU..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (22 samples, 3.33%)</title><rect x="14.3722%" y="324" width="3.3283%" height="15" fill="rgb(218,138,4)"/><text x="14.6222%" y="334.50">red..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (9 samples, 1.36%)</title><rect x="19.0620%" y="244" width="1.3616%" height="15" fill="rgb(250,191,14)"/><text x="19.3120%" y="254.50"></text></g><g><title>PyUFunc_d_d (loops.c.src:190) (9 samples, 1.36%)</title><rect x="19.0620%" y="260" width="1.3616%" height="15" fill="rgb(239,60,40)"/><text x="19.3120%" y="270.50"></text></g><g><title>exp (libm-2.29.so) (9 samples, 1.36%)</title><rect x="19.0620%" y="276" width="1.3616%" height="15" fill="rgb(206,27,48)"/><text x="19.3120%" y="286.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:112) (16 samples, 2.42%)</title><rect x="18.1543%" y="180" width="2.4206%" height="15" fill="rgb(225,35,8)"/><text x="18.4043%" y="190.50">lo..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 1.51%)</title><rect x="19.0620%" y="196" width="1.5129%" height="15" fill="rgb(250,213,24)"/><text x="19.3120%" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 1.51%)</title><rect x="19.0620%" y="212" width="1.5129%" height="15" fill="rgb(247,123,22)"/><text x="19.3120%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (10 samples, 1.51%)</title><rect x="19.0620%" y="228" width="1.5129%" height="15" fill="rgb(231,138,38)"/><text x="19.3120%" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (12 samples, 1.82%)</title><rect x="21.9365%" y="276" width="1.8154%" height="15" fill="rgb(231,145,46)"/><text x="22.1865%" y="286.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (11 samples, 1.66%)</title><rect x="22.0877%" y="292" width="1.6641%" height="15" fill="rgb(251,118,11)"/><text x="22.3377%" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (7 samples, 1.06%)</title><rect x="22.6929%" y="308" width="1.0590%" height="15" fill="rgb(217,147,25)"/><text x="22.9429%" y="318.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:116) (16 samples, 2.42%)</title><rect x="21.4826%" y="180" width="2.4206%" height="15" fill="rgb(247,81,37)"/><text x="21.7326%" y="190.50">lo..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (16 samples, 2.42%)</title><rect x="21.4826%" y="196" width="2.4206%" height="15" fill="rgb(209,12,38)"/><text x="21.7326%" y="206.50">su..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (16 samples, 2.42%)</title><rect x="21.4826%" y="212" width="2.4206%" height="15" fill="rgb(227,1,9)"/><text x="21.7326%" y="222.50">ar..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (16 samples, 2.42%)</title><rect x="21.4826%" y="228" width="2.4206%" height="15" fill="rgb(248,47,43)"/><text x="21.7326%" y="238.50">su..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (14 samples, 2.12%)</title><rect x="21.7852%" y="244" width="2.1180%" height="15" fill="rgb(221,10,30)"/><text x="22.0352%" y="254.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (14 samples, 2.12%)</title><rect x="21.7852%" y="260" width="2.1180%" height="15" fill="rgb(210,229,1)"/><text x="22.0352%" y="270.50">u..</text></g><g><title>__exit__ (numpy/core/_ufunc_config.py:447) (7 samples, 1.06%)</title><rect x="23.9032%" y="196" width="1.0590%" height="15" fill="rgb(222,148,37)"/><text x="24.1532%" y="206.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:120) (12 samples, 1.82%)</title><rect x="23.9032%" y="180" width="1.8154%" height="15" fill="rgb(234,67,33)"/><text x="24.1532%" y="190.50">l..</text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:99) (98 samples, 14.83%)</title><rect x="11.9516%" y="164" width="14.8260%" height="15" fill="rgb(247,98,35)"/><text x="12.2016%" y="174.50">predict_log_proba (skle..</text></g><g><title>exp (libm-2.29.so) (15 samples, 2.27%)</title><rect x="26.9289%" y="244" width="2.2693%" height="15" fill="rgb(247,138,52)"/><text x="27.1789%" y="254.50">e..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (182 samples, 27.53%)</title><rect x="1.8154%" y="132" width="27.5340%" height="15" fill="rgb(213,79,30)"/><text x="2.0654%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv..</text></g><g><title>predict_proba (sklearn/naive_bayes.py:117) (181 samples, 27.38%)</title><rect x="1.9667%" y="148" width="27.3828%" height="15" fill="rgb(246,177,23)"/><text x="2.2167%" y="158.50">predict_proba (sklearn/naive_bayes.py:117)</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (17 samples, 2.57%)</title><rect x="26.7776%" y="164" width="2.5719%" height="15" fill="rgb(230,62,27)"/><text x="27.0276%" y="174.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (16 samples, 2.42%)</title><rect x="26.9289%" y="180" width="2.4206%" height="15" fill="rgb(216,154,8)"/><text x="27.1789%" y="190.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (16 samples, 2.42%)</title><rect x="26.9289%" y="196" width="2.4206%" height="15" fill="rgb(244,35,45)"/><text x="27.1789%" y="206.50">ex..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (16 samples, 2.42%)</title><rect x="26.9289%" y="212" width="2.4206%" height="15" fill="rgb(251,115,12)"/><text x="27.1789%" y="222.50">tr..</text></g><g><title>PyUFunc_d_d (loops.c.src:190) (16 samples, 2.42%)</title><rect x="26.9289%" y="228" width="2.4206%" height="15" fill="rgb(240,54,50)"/><text x="27.1789%" y="238.50">Py..</text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:54) (183 samples, 27.69%)</title><rect x="1.8154%" y="52" width="27.6853%" height="15" fill="rgb(233,84,52)"/><text x="2.0654%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_b_cl_100..</text></g><g><title>profile_skl (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:53) (183 samples, 27.69%)</title><rect x="1.8154%" y="68" width="27.6853%" height="15" fill="rgb(207,117,47)"/><text x="2.0654%" y="78.50">profile_skl (bench_BernoulliNB_default_b_cl_..</text></g><g><title>setup_profile (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:37) (183 samples, 27.69%)</title><rect x="1.8154%" y="84" width="27.6853%" height="15" fill="rgb(249,43,39)"/><text x="2.0654%" y="94.50">setup_profile (bench_BernoulliNB_default_b_c..</text></g><g><title>profile (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:31) (183 samples, 27.69%)</title><rect x="1.8154%" y="100" width="27.6853%" height="15" fill="rgb(209,38,44)"/><text x="2.0654%" y="110.50">profile (bench_BernoulliNB_default_b_cl_1000..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (183 samples, 27.69%)</title><rect x="1.8154%" y="116" width="27.6853%" height="15" fill="rgb(236,212,23)"/><text x="2.0654%" y="126.50">time_predict (mlprodict/asv_benchmark/common..</text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:13) (7 samples, 1.06%)</title><rect x="35.4009%" y="228" width="1.0590%" height="15" fill="rgb(242,79,21)"/><text x="35.6509%" y="238.50"></text></g><g><title>compiled_run (&lt;string&gt;:23) (12 samples, 1.82%)</title><rect x="35.4009%" y="180" width="1.8154%" height="15" fill="rgb(211,96,35)"/><text x="35.6509%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (12 samples, 1.82%)</title><rect x="35.4009%" y="196" width="1.8154%" height="15" fill="rgb(253,215,40)"/><text x="35.6509%" y="206.50">_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (12 samples, 1.82%)</title><rect x="35.4009%" y="212" width="1.8154%" height="15" fill="rgb(211,81,21)"/><text x="35.6509%" y="222.50">_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_log_sum_exp.py:30) (13 samples, 1.97%)</title><rect x="37.2163%" y="196" width="1.9667%" height="15" fill="rgb(208,190,38)"/><text x="37.4663%" y="206.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (13 samples, 1.97%)</title><rect x="37.2163%" y="212" width="1.9667%" height="15" fill="rgb(235,213,38)"/><text x="37.4663%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 1.97%)</title><rect x="37.2163%" y="228" width="1.9667%" height="15" fill="rgb(237,122,38)"/><text x="37.4663%" y="238.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (12 samples, 1.82%)</title><rect x="37.3676%" y="244" width="1.8154%" height="15" fill="rgb(244,218,35)"/><text x="37.6176%" y="254.50">e..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (12 samples, 1.82%)</title><rect x="37.3676%" y="260" width="1.8154%" height="15" fill="rgb(240,68,47)"/><text x="37.6176%" y="270.50">t..</text></g><g><title>FLOAT_exp (loops.c.src:1607) (12 samples, 1.82%)</title><rect x="37.3676%" y="276" width="1.8154%" height="15" fill="rgb(210,16,53)"/><text x="37.6176%" y="286.50">F..</text></g><g><title>expf (libm-2.29.so) (11 samples, 1.66%)</title><rect x="37.5189%" y="292" width="1.6641%" height="15" fill="rgb(235,124,12)"/><text x="37.7689%" y="302.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (19 samples, 2.87%)</title><rect x="39.3343%" y="212" width="2.8744%" height="15" fill="rgb(224,169,11)"/><text x="39.5843%" y="222.50">su..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (19 samples, 2.87%)</title><rect x="39.3343%" y="228" width="2.8744%" height="15" fill="rgb(250,166,2)"/><text x="39.5843%" y="238.50">ar..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (19 samples, 2.87%)</title><rect x="39.3343%" y="244" width="2.8744%" height="15" fill="rgb(242,216,29)"/><text x="39.5843%" y="254.50">su..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (16 samples, 2.42%)</title><rect x="39.7882%" y="260" width="2.4206%" height="15" fill="rgb(230,116,27)"/><text x="40.0382%" y="270.50">_w..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (14 samples, 2.12%)</title><rect x="40.0908%" y="276" width="2.1180%" height="15" fill="rgb(228,99,48)"/><text x="40.3408%" y="286.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (14 samples, 2.12%)</title><rect x="40.0908%" y="292" width="2.1180%" height="15" fill="rgb(253,11,6)"/><text x="40.3408%" y="302.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (14 samples, 2.12%)</title><rect x="40.0908%" y="308" width="2.1180%" height="15" fill="rgb(247,143,39)"/><text x="40.3408%" y="318.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (12 samples, 1.82%)</title><rect x="40.3933%" y="324" width="1.8154%" height="15" fill="rgb(236,97,10)"/><text x="40.6433%" y="334.50">P..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (7 samples, 1.06%)</title><rect x="41.1498%" y="340" width="1.0590%" height="15" fill="rgb(233,208,19)"/><text x="41.3998%" y="350.50"></text></g><g><title>compiled_run (&lt;string&gt;:24) (37 samples, 5.60%)</title><rect x="37.2163%" y="180" width="5.5976%" height="15" fill="rgb(216,164,2)"/><text x="37.4663%" y="190.50">compile..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_log_sum_exp.py:33) (24 samples, 3.63%)</title><rect x="39.1831%" y="196" width="3.6309%" height="15" fill="rgb(220,129,5)"/><text x="39.4331%" y="206.50">_run..</text></g><g><title>compiled_run (&lt;string&gt;:26) (8 samples, 1.21%)</title><rect x="43.1165%" y="180" width="1.2103%" height="15" fill="rgb(242,17,10)"/><text x="43.3665%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (8 samples, 1.21%)</title><rect x="43.1165%" y="196" width="1.2103%" height="15" fill="rgb(242,107,0)"/><text x="43.3665%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 1.21%)</title><rect x="43.1165%" y="212" width="1.2103%" height="15" fill="rgb(251,28,31)"/><text x="43.3665%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (8 samples, 1.21%)</title><rect x="43.1165%" y="228" width="1.2103%" height="15" fill="rgb(233,223,10)"/><text x="43.3665%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (8 samples, 1.21%)</title><rect x="43.1165%" y="244" width="1.2103%" height="15" fill="rgb(215,21,27)"/><text x="43.3665%" y="254.50"></text></g><g><title>compiled_run (&lt;string&gt;:27) (14 samples, 2.12%)</title><rect x="44.3268%" y="180" width="2.1180%" height="15" fill="rgb(232,23,21)"/><text x="44.5768%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_exp.py:20) (14 samples, 2.12%)</title><rect x="44.3268%" y="196" width="2.1180%" height="15" fill="rgb(244,5,23)"/><text x="44.5768%" y="206.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (13 samples, 1.97%)</title><rect x="44.4781%" y="212" width="1.9667%" height="15" fill="rgb(226,81,46)"/><text x="44.7281%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 1.97%)</title><rect x="44.4781%" y="228" width="1.9667%" height="15" fill="rgb(247,70,30)"/><text x="44.7281%" y="238.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (11 samples, 1.66%)</title><rect x="44.7806%" y="244" width="1.6641%" height="15" fill="rgb(212,68,19)"/><text x="45.0306%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (11 samples, 1.66%)</title><rect x="44.7806%" y="260" width="1.6641%" height="15" fill="rgb(240,187,13)"/><text x="45.0306%" y="270.50"></text></g><g><title>FLOAT_exp (loops.c.src:1607) (11 samples, 1.66%)</title><rect x="44.7806%" y="276" width="1.6641%" height="15" fill="rgb(223,113,26)"/><text x="45.0306%" y="286.50"></text></g><g><title>expf (libm-2.29.so) (11 samples, 1.66%)</title><rect x="44.7806%" y="292" width="1.6641%" height="15" fill="rgb(206,192,2)"/><text x="45.0306%" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (8 samples, 1.21%)</title><rect x="47.8064%" y="324" width="1.2103%" height="15" fill="rgb(241,108,4)"/><text x="48.0564%" y="334.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (15 samples, 2.27%)</title><rect x="47.5038%" y="276" width="2.2693%" height="15" fill="rgb(247,173,49)"/><text x="47.7538%" y="286.50">P..</text></g><g><title>PyArray_DTypeFromObject (common.c:108) (15 samples, 2.27%)</title><rect x="47.5038%" y="292" width="2.2693%" height="15" fill="rgb(224,114,35)"/><text x="47.7538%" y="302.50">P..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (15 samples, 2.27%)</title><rect x="47.5038%" y="308" width="2.2693%" height="15" fill="rgb(245,159,27)"/><text x="47.7538%" y="318.50">P..</text></g><g><title>PyArray_FromAny (ctors.c:1855) (27 samples, 4.08%)</title><rect x="47.5038%" y="260" width="4.0847%" height="15" fill="rgb(245,172,44)"/><text x="47.7538%" y="270.50">PyAr..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (12 samples, 1.82%)</title><rect x="49.7731%" y="276" width="1.8154%" height="15" fill="rgb(236,23,11)"/><text x="50.0231%" y="286.50">P..</text></g><g><title>discover_dimensions (ctors.c:884) (9 samples, 1.36%)</title><rect x="50.2269%" y="292" width="1.3616%" height="15" fill="rgb(205,117,38)"/><text x="50.4769%" y="302.50"></text></g><g><title>array_subscript (mapping.c:1539) (31 samples, 4.69%)</title><rect x="47.5038%" y="228" width="4.6899%" height="15" fill="rgb(237,72,25)"/><text x="47.7538%" y="238.50">array..</text></g><g><title>prepare_index (mapping.c:516) (31 samples, 4.69%)</title><rect x="47.5038%" y="244" width="4.6899%" height="15" fill="rgb(244,70,9)"/><text x="47.7538%" y="254.50">prepa..</text></g><g><title>compiled_run (&lt;string&gt;:28) (43 samples, 6.51%)</title><rect x="46.4448%" y="180" width="6.5053%" height="15" fill="rgb(217,125,39)"/><text x="46.6948%" y="190.50">compiled_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:80) (43 samples, 6.51%)</title><rect x="46.4448%" y="196" width="6.5053%" height="15" fill="rgb(235,36,10)"/><text x="46.6948%" y="206.50">_run (mlp..</text></g><g><title>_array_feature_extrator (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:37) (36 samples, 5.45%)</title><rect x="47.5038%" y="212" width="5.4463%" height="15" fill="rgb(251,123,47)"/><text x="47.7538%" y="222.50">_array_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (158 samples, 23.90%)</title><rect x="29.9546%" y="132" width="23.9032%" height="15" fill="rgb(221,13,13)"/><text x="30.2046%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/comm..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (155 samples, 23.45%)</title><rect x="30.4085%" y="148" width="23.4493%" height="15" fill="rgb(238,131,9)"/><text x="30.6585%" y="158.50">run (mlprodict/onnxrt/onnx_inference...</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (155 samples, 23.45%)</title><rect x="30.4085%" y="164" width="23.4493%" height="15" fill="rgb(211,50,8)"/><text x="30.6585%" y="174.50">_run_sequence_runtime_compiled (mlpro..</text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:61) (162 samples, 24.51%)</title><rect x="29.5008%" y="52" width="24.5083%" height="15" fill="rgb(245,182,24)"/><text x="29.7508%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_b_c..</text></g><g><title>profile_pyrtc (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:60) (162 samples, 24.51%)</title><rect x="29.5008%" y="68" width="24.5083%" height="15" fill="rgb(242,14,37)"/><text x="29.7508%" y="78.50">profile_pyrtc (bench_BernoulliNB_defaul..</text></g><g><title>setup_profile (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:37) (161 samples, 24.36%)</title><rect x="29.6520%" y="84" width="24.3570%" height="15" fill="rgb(246,228,12)"/><text x="29.9020%" y="94.50">setup_profile (bench_BernoulliNB_defaul..</text></g><g><title>profile (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:31) (161 samples, 24.36%)</title><rect x="29.6520%" y="100" width="24.3570%" height="15" fill="rgb(213,55,15)"/><text x="29.9020%" y="110.50">profile (bench_BernoulliNB_default_b_cl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (161 samples, 24.36%)</title><rect x="29.6520%" y="116" width="24.3570%" height="15" fill="rgb(209,9,3)"/><text x="29.9020%" y="126.50">time_predict (mlprodict/asv_benchmark/c..</text></g><g><title>0x7f55a44daec0 (libc-2.29.so) (14 samples, 2.12%)</title><rect x="56.2784%" y="116" width="2.1180%" height="15" fill="rgb(230,59,30)"/><text x="56.5284%" y="126.50">0..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 2.87%)</title><rect x="59.4554%" y="356" width="2.8744%" height="15" fill="rgb(209,121,21)"/><text x="59.7054%" y="366.50">on..</text></g><g><title>onnxruntime::Add&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 3.03%)</title><rect x="59.4554%" y="324" width="3.0257%" height="15" fill="rgb(220,109,13)"/><text x="59.7054%" y="334.50">onn..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 3.03%)</title><rect x="59.4554%" y="340" width="3.0257%" height="15" fill="rgb(232,18,1)"/><text x="59.7054%" y="350.50">onn..</text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.06%)</title><rect x="62.4811%" y="324" width="1.0590%" height="15" fill="rgb(215,41,42)"/><text x="62.7311%" y="334.50"></text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (7 samples, 1.06%)</title><rect x="66.1120%" y="420" width="1.0590%" height="15" fill="rgb(224,123,36)"/><text x="66.3620%" y="430.50"></text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (7 samples, 1.06%)</title><rect x="66.1120%" y="436" width="1.0590%" height="15" fill="rgb(240,125,3)"/><text x="66.3620%" y="446.50"></text></g><g><title>mkl_blas_avx_sgemm_nocopy_anbn (onnxruntime/capi/libmklml_intel.so) (7 samples, 1.06%)</title><rect x="66.1120%" y="452" width="1.0590%" height="15" fill="rgb(205,98,50)"/><text x="66.3620%" y="462.50"></text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 1.82%)</title><rect x="65.5068%" y="324" width="1.8154%" height="15" fill="rgb(205,185,37)"/><text x="65.7568%" y="334.50">o..</text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 1.21%)</title><rect x="66.1120%" y="340" width="1.2103%" height="15" fill="rgb(238,207,15)"/><text x="66.3620%" y="350.50"></text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (8 samples, 1.21%)</title><rect x="66.1120%" y="356" width="1.2103%" height="15" fill="rgb(213,199,42)"/><text x="66.3620%" y="366.50"></text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (8 samples, 1.21%)</title><rect x="66.1120%" y="372" width="1.2103%" height="15" fill="rgb(235,201,11)"/><text x="66.3620%" y="382.50"></text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (8 samples, 1.21%)</title><rect x="66.1120%" y="388" width="1.2103%" height="15" fill="rgb(207,46,11)"/><text x="66.3620%" y="398.50"></text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (8 samples, 1.21%)</title><rect x="66.1120%" y="404" width="1.2103%" height="15" fill="rgb(241,35,35)"/><text x="66.3620%" y="414.50"></text></g><g><title>onnxruntime::ReduceLogSumExp&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 2.72%)</title><rect x="67.6248%" y="324" width="2.7231%" height="15" fill="rgb(243,32,47)"/><text x="67.8748%" y="334.50">on..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.51%)</title><rect x="70.4992%" y="324" width="1.5129%" height="15" fill="rgb(247,202,23)"/><text x="70.7492%" y="334.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.51%)</title><rect x="70.4992%" y="340" width="1.5129%" height="15" fill="rgb(219,102,11)"/><text x="70.7492%" y="350.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.51%)</title><rect x="70.4992%" y="356" width="1.5129%" height="15" fill="rgb(243,110,44)"/><text x="70.7492%" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (51 samples, 7.72%)</title><rect x="74.1301%" y="340" width="7.7156%" height="15" fill="rgb(222,74,54)"/><text x="74.3801%" y="350.50">operator ne..</text></g><g><title>malloc (libc-2.29.so) (50 samples, 7.56%)</title><rect x="74.2814%" y="356" width="7.5643%" height="15" fill="rgb(216,99,12)"/><text x="74.5314%" y="366.50">malloc (li..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 23.45%)</title><rect x="59.4554%" y="244" width="23.4493%" height="15" fill="rgb(226,22,26)"/><text x="59.7054%" y="254.50">onnxruntime::InferenceSession::Run (o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 23.45%)</title><rect x="59.4554%" y="260" width="23.4493%" height="15" fill="rgb(217,163,10)"/><text x="59.7054%" y="270.50">onnxruntime::InferenceSession::Run (o..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 23.45%)</title><rect x="59.4554%" y="276" width="23.4493%" height="15" fill="rgb(213,25,53)"/><text x="59.7054%" y="286.50">onnxruntime::utils::ExecuteGraph (onn..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 23.45%)</title><rect x="59.4554%" y="292" width="23.4493%" height="15" fill="rgb(252,105,26)"/><text x="59.7054%" y="302.50">onnxruntime::utils::ExecuteGraphImpl ..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 23.45%)</title><rect x="59.4554%" y="308" width="23.4493%" height="15" fill="rgb(220,39,43)"/><text x="59.7054%" y="318.50">onnxruntime::SequentialExecutor::Exec..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (71 samples, 10.74%)</title><rect x="72.1634%" y="324" width="10.7413%" height="15" fill="rgb(229,68,48)"/><text x="72.4134%" y="334.50">onnxruntime::ml:..</text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 4.24%)</title><rect x="82.9047%" y="244" width="4.2360%" height="15" fill="rgb(252,8,32)"/><text x="83.1547%" y="254.50">onnxr..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 1.21%)</title><rect x="85.9304%" y="260" width="1.2103%" height="15" fill="rgb(223,20,43)"/><text x="86.1804%" y="270.50"></text></g><g><title>pybind11::detail::accessor&lt;pybind11::detail::accessor_policies::generic_item&gt;::~accessor (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.06%)</title><rect x="95.3101%" y="292" width="1.0590%" height="15" fill="rgb(229,81,49)"/><text x="95.5601%" y="302.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 2.42%)</title><rect x="96.3691%" y="292" width="2.4206%" height="15" fill="rgb(236,28,36)"/><text x="96.6191%" y="302.50">py..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (78 samples, 11.80%)</title><rect x="87.4433%" y="276" width="11.8003%" height="15" fill="rgb(249,185,26)"/><text x="87.6933%" y="286.50">pybind11::detail::..</text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (82 samples, 12.41%)</title><rect x="87.1407%" y="244" width="12.4054%" height="15" fill="rgb(249,174,33)"/><text x="87.3907%" y="254.50">onnxruntime::python..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (82 samples, 12.41%)</title><rect x="87.1407%" y="260" width="12.4054%" height="15" fill="rgb(233,201,37)"/><text x="87.3907%" y="270.50">onnxruntime::python..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (274 samples, 41.45%)</title><rect x="58.3964%" y="132" width="41.4523%" height="15" fill="rgb(221,78,26)"/><text x="58.6464%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (272 samples, 41.15%)</title><rect x="58.6989%" y="148" width="41.1498%" height="15" fill="rgb(250,127,30)"/><text x="58.9489%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (271 samples, 41.00%)</title><rect x="58.8502%" y="164" width="40.9985%" height="15" fill="rgb(230,49,44)"/><text x="59.1002%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (271 samples, 41.00%)</title><rect x="58.8502%" y="180" width="40.9985%" height="15" fill="rgb(229,67,23)"/><text x="59.1002%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:142) (269 samples, 40.70%)</title><rect x="59.1528%" y="196" width="40.6959%" height="15" fill="rgb(249,83,47)"/><text x="59.4028%" y="206.50">run (onnxruntime/capi/session.py:142)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (268 samples, 40.54%)</title><rect x="59.3041%" y="212" width="40.5446%" height="15" fill="rgb(215,43,3)"/><text x="59.5541%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_p..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (268 samples, 40.54%)</title><rect x="59.3041%" y="228" width="40.5446%" height="15" fill="rgb(238,154,13)"/><text x="59.5541%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addOb..</text></g><g><title>all (661 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:68) (304 samples, 45.99%)</title><rect x="54.0091%" y="52" width="45.9909%" height="15" fill="rgb(233,0,4)"/><text x="54.2591%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:68)</text></g><g><title>profile_ort (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:67) (304 samples, 45.99%)</title><rect x="54.0091%" y="68" width="45.9909%" height="15" fill="rgb(235,30,7)"/><text x="54.2591%" y="78.50">profile_ort (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:67)</text></g><g><title>setup_profile (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:37) (304 samples, 45.99%)</title><rect x="54.0091%" y="84" width="45.9909%" height="15" fill="rgb(250,79,13)"/><text x="54.2591%" y="94.50">setup_profile (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:37)</text></g><g><title>profile (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:31) (304 samples, 45.99%)</title><rect x="54.0091%" y="100" width="45.9909%" height="15" fill="rgb(211,146,34)"/><text x="54.2591%" y="110.50">profile (bench_BernoulliNB_default_b_cl_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (275 samples, 41.60%)</title><rect x="58.3964%" y="116" width="41.6036%" height="15" fill="rgb(228,22,38)"/><text x="58.6464%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g></svg></svg>