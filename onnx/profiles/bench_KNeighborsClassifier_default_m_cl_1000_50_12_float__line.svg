<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1142" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1125.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1125.00"> </text><g id="frames"><g><title>kneighbors (sklearn/neighbors/_base.py:583) (2 samples, 0.10%)</title><rect x="11" y="164" width="1" height="15" fill="rgb(235,94,23)"/><text x="14.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (2 samples, 0.10%)</title><rect x="11" y="180" width="1" height="15" fill="rgb(250,139,11)"/><text x="14.00" y="190.50"></text></g><g><title>0x7fc516408fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.15%)</title><rect x="15" y="340" width="2" height="15" fill="rgb(241,196,35)"/><text x="18.00" y="350.50"></text></g><g><title>pow (libm-2.29.so) (3 samples, 0.15%)</title><rect x="15" y="356" width="2" height="15" fill="rgb(236,56,29)"/><text x="18.00" y="366.50"></text></g><g><title>0x7fc5164340dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.30%)</title><rect x="14" y="324" width="3" height="15" fill="rgb(252,223,16)"/><text x="17.00" y="334.50"></text></g><g><title>0x7fc516408fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.15%)</title><rect x="19" y="356" width="2" height="15" fill="rgb(226,181,24)"/><text x="22.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (3 samples, 0.15%)</title><rect x="19" y="372" width="2" height="15" fill="rgb(225,211,39)"/><text x="22.00" y="382.50"></text></g><g><title>0x7fc51640b426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.35%)</title><rect x="17" y="340" width="4" height="15" fill="rgb(239,161,31)"/><text x="20.00" y="350.50"></text></g><g><title>0x7fc516408fb9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="21" y="356" width="1" height="15" fill="rgb(252,110,6)"/><text x="24.00" y="366.50"></text></g><g><title>0x7fc51640b454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.35%)</title><rect x="21" y="340" width="4" height="15" fill="rgb(223,9,16)"/><text x="24.00" y="350.50"></text></g><g><title>0x7fc516408fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.25%)</title><rect x="22" y="356" width="3" height="15" fill="rgb(242,148,12)"/><text x="25.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (5 samples, 0.25%)</title><rect x="22" y="372" width="3" height="15" fill="rgb(232,186,17)"/><text x="25.00" y="382.50"></text></g><g><title>0x7fc51640b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="25" y="356" width="2" height="15" fill="rgb(226,211,31)"/><text x="28.00" y="366.50"></text></g><g><title>0x7fc51640b2b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="27" y="356" width="1" height="15" fill="rgb(237,143,35)"/><text x="30.00" y="366.50"></text></g><g><title>0x7fc51640b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.55%)</title><rect x="28" y="356" width="6" height="15" fill="rgb(239,146,31)"/><text x="31.00" y="366.50"></text></g><g><title>0x7fc51640b494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (16 samples, 0.80%)</title><rect x="25" y="340" width="10" height="15" fill="rgb(231,14,52)"/><text x="28.00" y="350.50"></text></g><g><title>0x7fc51640b4bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.15%)</title><rect x="35" y="340" width="2" height="15" fill="rgb(217,215,22)"/><text x="38.00" y="350.50"></text></g><g><title>0x7fc51640b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="35" y="356" width="2" height="15" fill="rgb(211,76,20)"/><text x="38.00" y="366.50"></text></g><g><title>0x7fc51640b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.20%)</title><rect x="37" y="356" width="2" height="15" fill="rgb(205,101,16)"/><text x="40.00" y="366.50"></text></g><g><title>0x7fc51640b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.60%)</title><rect x="40" y="356" width="7" height="15" fill="rgb(225,198,23)"/><text x="43.00" y="366.50"></text></g><g><title>0x7fc51640b50f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 0.90%)</title><rect x="37" y="340" width="10" height="15" fill="rgb(205,34,36)"/><text x="40.00" y="350.50"></text></g><g><title>0x7fc51640b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="47" y="356" width="1" height="15" fill="rgb(207,80,5)"/><text x="50.00" y="366.50"></text></g><g><title>0x7fc51640b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.30%)</title><rect x="48" y="356" width="4" height="15" fill="rgb(212,128,18)"/><text x="51.00" y="366.50"></text></g><g><title>0x7fc516434100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (60 samples, 3.00%)</title><rect x="17" y="324" width="36" height="15" fill="rgb(205,62,21)"/><text x="20.00" y="334.50">0x7..</text></g><g><title>0x7fc51640b538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.45%)</title><rect x="47" y="340" width="6" height="15" fill="rgb(222,84,11)"/><text x="50.00" y="350.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (72 samples, 3.60%)</title><rect x="11" y="148" width="42" height="15" fill="rgb(241,48,6)"/><text x="14.00" y="158.50">pre..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (70 samples, 3.50%)</title><rect x="12" y="164" width="41" height="15" fill="rgb(224,68,16)"/><text x="15.00" y="174.50">kne..</text></g><g><title>__call__ (joblib/parallel.py:1003) (70 samples, 3.50%)</title><rect x="12" y="180" width="41" height="15" fill="rgb(205,218,10)"/><text x="15.00" y="190.50">__c..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (70 samples, 3.50%)</title><rect x="12" y="196" width="41" height="15" fill="rgb(206,212,7)"/><text x="15.00" y="206.50">dis..</text></g><g><title>_dispatch (joblib/parallel.py:753) (70 samples, 3.50%)</title><rect x="12" y="212" width="41" height="15" fill="rgb(254,61,36)"/><text x="15.00" y="222.50">_di..</text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (70 samples, 3.50%)</title><rect x="12" y="228" width="41" height="15" fill="rgb(208,78,45)"/><text x="15.00" y="238.50">app..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (70 samples, 3.50%)</title><rect x="12" y="244" width="41" height="15" fill="rgb(223,90,11)"/><text x="15.00" y="254.50">__i..</text></g><g><title>__call__ (joblib/parallel.py:256) (70 samples, 3.50%)</title><rect x="12" y="260" width="41" height="15" fill="rgb(226,201,34)"/><text x="15.00" y="270.50">__c..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (70 samples, 3.50%)</title><rect x="12" y="276" width="41" height="15" fill="rgb(224,70,16)"/><text x="15.00" y="286.50">&lt;li..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (70 samples, 3.50%)</title><rect x="12" y="292" width="41" height="15" fill="rgb(221,80,1)"/><text x="15.00" y="302.50">_tr..</text></g><g><title>0x7fc516436e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (70 samples, 3.50%)</title><rect x="12" y="308" width="41" height="15" fill="rgb(243,149,16)"/><text x="15.00" y="318.50">0x7..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:18) (75 samples, 3.75%)</title><rect x="10" y="100" width="44" height="15" fill="rgb(246,163,21)"/><text x="13.00" y="110.50">prof..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (75 samples, 3.75%)</title><rect x="10" y="116" width="44" height="15" fill="rgb(242,31,46)"/><text x="13.00" y="126.50">time..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (74 samples, 3.70%)</title><rect x="11" y="132" width="43" height="15" fill="rgb(216,3,53)"/><text x="14.00" y="142.50">&lt;lam..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (2 samples, 0.10%)</title><rect x="57" y="196" width="1" height="15" fill="rgb(220,122,52)"/><text x="60.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (2 samples, 0.10%)</title><rect x="58" y="196" width="1" height="15" fill="rgb(221,224,48)"/><text x="61.00" y="206.50"></text></g><g><title>put (queue.py:151) (2 samples, 0.10%)</title><rect x="58" y="212" width="1" height="15" fill="rgb(221,121,40)"/><text x="61.00" y="222.50"></text></g><g><title>0x7fc516432708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="60" y="324" width="1" height="15" fill="rgb(211,223,31)"/><text x="63.00" y="334.50"></text></g><g><title>0x7fc5163fd5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="60" y="340" width="1" height="15" fill="rgb(206,131,15)"/><text x="63.00" y="350.50"></text></g><g><title>0x7fc516432a72 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="61" y="324" width="2" height="15" fill="rgb(254,38,41)"/><text x="64.00" y="334.50"></text></g><g><title>0x7fc5163fd5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="61" y="340" width="2" height="15" fill="rgb(234,50,53)"/><text x="64.00" y="350.50"></text></g><g><title>0x7fc51640985a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="61" y="356" width="2" height="15" fill="rgb(221,148,43)"/><text x="64.00" y="366.50"></text></g><g><title>0x7fc516408fb9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="64" y="340" width="1" height="15" fill="rgb(229,28,36)"/><text x="67.00" y="350.50"></text></g><g><title>0x7fc5164340dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.55%)</title><rect x="63" y="324" width="6" height="15" fill="rgb(222,1,21)"/><text x="66.00" y="334.50"></text></g><g><title>0x7fc516408fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.30%)</title><rect x="66" y="340" width="3" height="15" fill="rgb(231,50,14)"/><text x="69.00" y="350.50"></text></g><g><title>pow (libm-2.29.so) (6 samples, 0.30%)</title><rect x="66" y="356" width="3" height="15" fill="rgb(244,178,0)"/><text x="69.00" y="366.50"></text></g><g><title>0x7fc516408fb9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.15%)</title><rect x="70" y="356" width="2" height="15" fill="rgb(249,65,35)"/><text x="73.00" y="366.50"></text></g><g><title>0x7fc53c188bf8 (libm-2.29.so) (2 samples, 0.10%)</title><rect x="76" y="388" width="1" height="15" fill="rgb(249,160,2)"/><text x="79.00" y="398.50"></text></g><g><title>0x7fc53c188c90 (libm-2.29.so) (2 samples, 0.10%)</title><rect x="77" y="388" width="2" height="15" fill="rgb(222,99,24)"/><text x="80.00" y="398.50"></text></g><g><title>0x7fc51640b426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (19 samples, 0.95%)</title><rect x="69" y="340" width="11" height="15" fill="rgb(214,129,49)"/><text x="72.00" y="350.50"></text></g><g><title>0x7fc516408fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 0.70%)</title><rect x="72" y="356" width="8" height="15" fill="rgb(244,66,27)"/><text x="75.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (14 samples, 0.70%)</title><rect x="72" y="372" width="8" height="15" fill="rgb(224,157,41)"/><text x="75.00" y="382.50"></text></g><g><title>0x7fc53c188ce4 (libm-2.29.so) (2 samples, 0.10%)</title><rect x="87" y="388" width="2" height="15" fill="rgb(229,196,3)"/><text x="90.00" y="398.50"></text></g><g><title>0x7fc53c188dc4 (libm-2.29.so) (2 samples, 0.10%)</title><rect x="90" y="388" width="1" height="15" fill="rgb(215,216,38)"/><text x="93.00" y="398.50"></text></g><g><title>0x7fc53c188df8 (libm-2.29.so) (2 samples, 0.10%)</title><rect x="92" y="388" width="1" height="15" fill="rgb(252,32,31)"/><text x="95.00" y="398.50"></text></g><g><title>0x7fc516408fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (19 samples, 0.95%)</title><rect x="83" y="356" width="11" height="15" fill="rgb(253,15,35)"/><text x="86.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (19 samples, 0.95%)</title><rect x="83" y="372" width="11" height="15" fill="rgb(241,136,42)"/><text x="86.00" y="382.50"></text></g><g><title>0x7fc51640b454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (24 samples, 1.20%)</title><rect x="80" y="340" width="15" height="15" fill="rgb(222,145,42)"/><text x="83.00" y="350.50"></text></g><g><title>0x7fc51640b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.55%)</title><rect x="96" y="356" width="6" height="15" fill="rgb(207,153,26)"/><text x="99.00" y="366.50"></text></g><g><title>0x7fc51640b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (25 samples, 1.25%)</title><rect x="102" y="356" width="15" height="15" fill="rgb(235,23,38)"/><text x="105.00" y="366.50"></text></g><g><title>0x7fc51640b494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (42 samples, 2.10%)</title><rect x="95" y="340" width="24" height="15" fill="rgb(244,60,16)"/><text x="98.00" y="350.50">0..</text></g><g><title>0x7fc51640b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="119" y="356" width="1" height="15" fill="rgb(207,10,31)"/><text x="122.00" y="366.50"></text></g><g><title>0x7fc51640b4bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.40%)</title><rect x="119" y="340" width="5" height="15" fill="rgb(224,149,2)"/><text x="122.00" y="350.50"></text></g><g><title>0x7fc51640b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.25%)</title><rect x="121" y="356" width="3" height="15" fill="rgb(213,25,53)"/><text x="124.00" y="366.50"></text></g><g><title>0x7fc51640b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.50%)</title><rect x="125" y="356" width="6" height="15" fill="rgb(221,222,13)"/><text x="128.00" y="366.50"></text></g><g><title>0x7fc51640b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (23 samples, 1.15%)</title><rect x="131" y="356" width="14" height="15" fill="rgb(252,111,40)"/><text x="134.00" y="366.50"></text></g><g><title>0x7fc51640b323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.20%)</title><rect x="145" y="356" width="3" height="15" fill="rgb(242,26,14)"/><text x="148.00" y="366.50"></text></g><g><title>0x7fc51640b50f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (43 samples, 2.15%)</title><rect x="124" y="340" width="25" height="15" fill="rgb(231,79,8)"/><text x="127.00" y="350.50">0..</text></g><g><title>0x7fc51640b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.15%)</title><rect x="149" y="356" width="2" height="15" fill="rgb(251,99,17)"/><text x="152.00" y="366.50"></text></g><g><title>0x7fc516434100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (149 samples, 7.45%)</title><rect x="69" y="324" width="88" height="15" fill="rgb(209,9,30)"/><text x="72.00" y="334.50">0x7fc51643..</text></g><g><title>0x7fc51640b538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.65%)</title><rect x="149" y="340" width="8" height="15" fill="rgb(208,44,29)"/><text x="152.00" y="350.50"></text></g><g><title>0x7fc51640b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.45%)</title><rect x="152" y="356" width="5" height="15" fill="rgb(235,154,54)"/><text x="155.00" y="366.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (172 samples, 8.60%)</title><rect x="57" y="180" width="101" height="15" fill="rgb(211,120,51)"/><text x="60.00" y="190.50">__call__ (jo..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (167 samples, 8.35%)</title><rect x="60" y="196" width="98" height="15" fill="rgb(244,133,51)"/><text x="63.00" y="206.50">dispatch_on..</text></g><g><title>_dispatch (joblib/parallel.py:753) (167 samples, 8.35%)</title><rect x="60" y="212" width="98" height="15" fill="rgb(254,87,52)"/><text x="63.00" y="222.50">_dispatch (..</text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (167 samples, 8.35%)</title><rect x="60" y="228" width="98" height="15" fill="rgb(231,61,12)"/><text x="63.00" y="238.50">apply_async..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (167 samples, 8.35%)</title><rect x="60" y="244" width="98" height="15" fill="rgb(230,113,26)"/><text x="63.00" y="254.50">__init__ (j..</text></g><g><title>__call__ (joblib/parallel.py:256) (167 samples, 8.35%)</title><rect x="60" y="260" width="98" height="15" fill="rgb(244,202,31)"/><text x="63.00" y="270.50">__call__ (j..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (167 samples, 8.35%)</title><rect x="60" y="276" width="98" height="15" fill="rgb(240,229,1)"/><text x="63.00" y="286.50">&lt;listcomp&gt; ..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (167 samples, 8.35%)</title><rect x="60" y="292" width="98" height="15" fill="rgb(248,229,12)"/><text x="63.00" y="302.50">_tree_query..</text></g><g><title>0x7fc516436e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (167 samples, 8.35%)</title><rect x="60" y="308" width="98" height="15" fill="rgb(232,170,8)"/><text x="63.00" y="318.50">0x7fc516436..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (176 samples, 8.80%)</title><rect x="55" y="148" width="104" height="15" fill="rgb(228,224,4)"/><text x="58.00" y="158.50">predict_prob..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (173 samples, 8.65%)</title><rect x="57" y="164" width="102" height="15" fill="rgb(219,22,50)"/><text x="60.00" y="174.50">kneighbors (..</text></g><g><title>array_assign_subscript (mapping.c:2046) (2 samples, 0.10%)</title><rect x="160" y="164" width="1" height="15" fill="rgb(215,62,50)"/><text x="163.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (7 samples, 0.35%)</title><rect x="159" y="148" width="4" height="15" fill="rgb(223,143,28)"/><text x="162.00" y="158.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.15%)</title><rect x="161" y="164" width="2" height="15" fill="rgb(228,118,14)"/><text x="164.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (2 samples, 0.10%)</title><rect x="162" y="180" width="1" height="15" fill="rgb(248,159,26)"/><text x="165.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:38) (261 samples, 13.06%)</title><rect x="10" y="52" width="154" height="15" fill="rgb(249,15,6)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNe..</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:37) (261 samples, 13.06%)</title><rect x="10" y="68" width="154" height="15" fill="rgb(226,129,17)"/><text x="13.00" y="78.50">profile_skl (bench_..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:29) (260 samples, 13.01%)</title><rect x="10" y="84" width="154" height="15" fill="rgb(241,11,1)"/><text x="13.00" y="94.50">setup_profile (benc..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:23) (185 samples, 9.25%)</title><rect x="54" y="100" width="110" height="15" fill="rgb(219,211,22)"/><text x="57.00" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (185 samples, 9.25%)</title><rect x="54" y="116" width="110" height="15" fill="rgb(227,0,7)"/><text x="57.00" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (185 samples, 9.25%)</title><rect x="54" y="132" width="110" height="15" fill="rgb(206,14,17)"/><text x="57.00" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (3 samples, 0.15%)</title><rect x="164" y="852" width="2" height="15" fill="rgb(247,129,16)"/><text x="167.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (3 samples, 0.15%)</title><rect x="164" y="868" width="2" height="15" fill="rgb(252,97,9)"/><text x="167.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (3 samples, 0.15%)</title><rect x="164" y="884" width="2" height="15" fill="rgb(225,191,2)"/><text x="167.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (3 samples, 0.15%)</title><rect x="164" y="900" width="2" height="15" fill="rgb(222,44,17)"/><text x="167.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (2 samples, 0.10%)</title><rect x="165" y="916" width="1" height="15" fill="rgb(212,6,37)"/><text x="168.00" y="926.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2061) (2 samples, 0.10%)</title><rect x="167" y="884" width="1" height="15" fill="rgb(238,190,29)"/><text x="170.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py:2034) (2 samples, 0.10%)</title><rect x="167" y="900" width="1" height="15" fill="rgb(247,157,2)"/><text x="170.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py:2032) (2 samples, 0.10%)</title><rect x="167" y="916" width="1" height="15" fill="rgb(234,194,41)"/><text x="170.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py:2032) (2 samples, 0.10%)</title><rect x="167" y="932" width="1" height="15" fill="rgb(227,29,45)"/><text x="170.00" y="942.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (7 samples, 0.35%)</title><rect x="164" y="820" width="4" height="15" fill="rgb(225,108,27)"/><text x="167.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (7 samples, 0.35%)</title><rect x="164" y="836" width="4" height="15" fill="rgb(214,88,8)"/><text x="167.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (3 samples, 0.15%)</title><rect x="167" y="852" width="1" height="15" fill="rgb(208,84,18)"/><text x="170.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (3 samples, 0.15%)</title><rect x="167" y="868" width="1" height="15" fill="rgb(205,120,7)"/><text x="170.00" y="878.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:2) (8 samples, 0.40%)</title><rect x="164" y="148" width="5" height="15" fill="rgb(208,113,3)"/><text x="167.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.40%)</title><rect x="164" y="164" width="5" height="15" fill="rgb(215,144,24)"/><text x="167.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 0.40%)</title><rect x="164" y="180" width="5" height="15" fill="rgb(227,116,52)"/><text x="167.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.40%)</title><rect x="164" y="196" width="5" height="15" fill="rgb(238,82,31)"/><text x="167.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.40%)</title><rect x="164" y="212" width="5" height="15" fill="rgb(219,117,12)"/><text x="167.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.40%)</title><rect x="164" y="228" width="5" height="15" fill="rgb(231,41,16)"/><text x="167.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.40%)</title><rect x="164" y="244" width="5" height="15" fill="rgb(227,72,43)"/><text x="167.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.40%)</title><rect x="164" y="260" width="5" height="15" fill="rgb(223,179,49)"/><text x="167.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.40%)</title><rect x="164" y="276" width="5" height="15" fill="rgb(209,107,25)"/><text x="167.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (8 samples, 0.40%)</title><rect x="164" y="292" width="5" height="15" fill="rgb(206,217,19)"/><text x="167.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.40%)</title><rect x="164" y="308" width="5" height="15" fill="rgb(237,203,30)"/><text x="167.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.40%)</title><rect x="164" y="324" width="5" height="15" fill="rgb(209,29,4)"/><text x="167.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.40%)</title><rect x="164" y="340" width="5" height="15" fill="rgb(207,121,23)"/><text x="167.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.40%)</title><rect x="164" y="356" width="5" height="15" fill="rgb(245,134,45)"/><text x="167.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.40%)</title><rect x="164" y="372" width="5" height="15" fill="rgb(244,183,30)"/><text x="167.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (8 samples, 0.40%)</title><rect x="164" y="388" width="5" height="15" fill="rgb(230,74,38)"/><text x="167.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.40%)</title><rect x="164" y="404" width="5" height="15" fill="rgb(232,65,46)"/><text x="167.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.40%)</title><rect x="164" y="420" width="5" height="15" fill="rgb(248,38,23)"/><text x="167.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.40%)</title><rect x="164" y="436" width="5" height="15" fill="rgb(225,202,52)"/><text x="167.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.40%)</title><rect x="164" y="452" width="5" height="15" fill="rgb(219,192,11)"/><text x="167.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.40%)</title><rect x="164" y="468" width="5" height="15" fill="rgb(228,63,46)"/><text x="167.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (8 samples, 0.40%)</title><rect x="164" y="484" width="5" height="15" fill="rgb(210,162,45)"/><text x="167.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.40%)</title><rect x="164" y="500" width="5" height="15" fill="rgb(235,68,16)"/><text x="167.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.40%)</title><rect x="164" y="516" width="5" height="15" fill="rgb(242,218,31)"/><text x="167.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.40%)</title><rect x="164" y="532" width="5" height="15" fill="rgb(248,18,45)"/><text x="167.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.40%)</title><rect x="164" y="548" width="5" height="15" fill="rgb(210,156,17)"/><text x="167.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.40%)</title><rect x="164" y="564" width="5" height="15" fill="rgb(233,17,52)"/><text x="167.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (8 samples, 0.40%)</title><rect x="164" y="580" width="5" height="15" fill="rgb(233,112,40)"/><text x="167.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.40%)</title><rect x="164" y="596" width="5" height="15" fill="rgb(238,111,10)"/><text x="167.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 0.40%)</title><rect x="164" y="612" width="5" height="15" fill="rgb(217,225,43)"/><text x="167.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.40%)</title><rect x="164" y="628" width="5" height="15" fill="rgb(224,18,54)"/><text x="167.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.40%)</title><rect x="164" y="644" width="5" height="15" fill="rgb(228,4,38)"/><text x="167.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.40%)</title><rect x="164" y="660" width="5" height="15" fill="rgb(215,133,43)"/><text x="167.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.40%)</title><rect x="164" y="676" width="5" height="15" fill="rgb(247,132,40)"/><text x="167.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.40%)</title><rect x="164" y="692" width="5" height="15" fill="rgb(219,201,43)"/><text x="167.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.40%)</title><rect x="164" y="708" width="5" height="15" fill="rgb(240,152,31)"/><text x="167.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (8 samples, 0.40%)</title><rect x="164" y="724" width="5" height="15" fill="rgb(224,24,49)"/><text x="167.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.40%)</title><rect x="164" y="740" width="5" height="15" fill="rgb(205,124,24)"/><text x="167.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.40%)</title><rect x="164" y="756" width="5" height="15" fill="rgb(206,223,1)"/><text x="167.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.40%)</title><rect x="164" y="772" width="5" height="15" fill="rgb(224,54,7)"/><text x="167.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.40%)</title><rect x="164" y="788" width="5" height="15" fill="rgb(218,212,9)"/><text x="167.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.40%)</title><rect x="164" y="804" width="5" height="15" fill="rgb(219,43,21)"/><text x="167.00" y="814.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:4) (4 samples, 0.20%)</title><rect x="169" y="148" width="2" height="15" fill="rgb(206,174,27)"/><text x="172.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.20%)</title><rect x="169" y="164" width="2" height="15" fill="rgb(254,140,9)"/><text x="172.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.20%)</title><rect x="169" y="180" width="2" height="15" fill="rgb(214,132,33)"/><text x="172.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.20%)</title><rect x="169" y="196" width="2" height="15" fill="rgb(233,56,17)"/><text x="172.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.20%)</title><rect x="169" y="212" width="2" height="15" fill="rgb(228,209,25)"/><text x="172.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.20%)</title><rect x="169" y="228" width="2" height="15" fill="rgb(206,102,17)"/><text x="172.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.20%)</title><rect x="169" y="244" width="2" height="15" fill="rgb(221,188,38)"/><text x="172.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.20%)</title><rect x="169" y="260" width="2" height="15" fill="rgb(237,172,26)"/><text x="172.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.20%)</title><rect x="169" y="276" width="2" height="15" fill="rgb(248,182,39)"/><text x="172.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (4 samples, 0.20%)</title><rect x="169" y="292" width="2" height="15" fill="rgb(207,119,3)"/><text x="172.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.20%)</title><rect x="169" y="308" width="2" height="15" fill="rgb(224,35,43)"/><text x="172.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.20%)</title><rect x="169" y="324" width="2" height="15" fill="rgb(246,216,28)"/><text x="172.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.20%)</title><rect x="169" y="340" width="2" height="15" fill="rgb(207,164,23)"/><text x="172.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.20%)</title><rect x="169" y="356" width="2" height="15" fill="rgb(223,79,40)"/><text x="172.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.20%)</title><rect x="169" y="372" width="2" height="15" fill="rgb(228,11,29)"/><text x="172.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (4 samples, 0.20%)</title><rect x="169" y="388" width="2" height="15" fill="rgb(243,43,30)"/><text x="172.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.20%)</title><rect x="169" y="404" width="2" height="15" fill="rgb(235,169,37)"/><text x="172.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.20%)</title><rect x="169" y="420" width="2" height="15" fill="rgb(232,9,54)"/><text x="172.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.20%)</title><rect x="169" y="436" width="2" height="15" fill="rgb(223,54,31)"/><text x="172.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.20%)</title><rect x="169" y="452" width="2" height="15" fill="rgb(250,92,32)"/><text x="172.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.20%)</title><rect x="169" y="468" width="2" height="15" fill="rgb(246,130,13)"/><text x="172.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (3 samples, 0.15%)</title><rect x="169" y="484" width="2" height="15" fill="rgb(209,52,23)"/><text x="172.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="169" y="500" width="2" height="15" fill="rgb(244,195,15)"/><text x="172.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="169" y="516" width="2" height="15" fill="rgb(254,193,14)"/><text x="172.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="169" y="532" width="2" height="15" fill="rgb(231,93,26)"/><text x="172.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="169" y="548" width="2" height="15" fill="rgb(235,18,37)"/><text x="172.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="169" y="564" width="2" height="15" fill="rgb(252,21,43)"/><text x="172.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (3 samples, 0.15%)</title><rect x="169" y="580" width="2" height="15" fill="rgb(244,129,16)"/><text x="172.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="169" y="596" width="2" height="15" fill="rgb(206,182,4)"/><text x="172.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="169" y="612" width="2" height="15" fill="rgb(221,29,3)"/><text x="172.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="169" y="628" width="2" height="15" fill="rgb(236,40,5)"/><text x="172.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="169" y="644" width="2" height="15" fill="rgb(239,193,37)"/><text x="172.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="169" y="660" width="2" height="15" fill="rgb(243,20,5)"/><text x="172.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (3 samples, 0.15%)</title><rect x="169" y="676" width="2" height="15" fill="rgb(206,84,46)"/><text x="172.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="169" y="692" width="2" height="15" fill="rgb(225,2,30)"/><text x="172.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="169" y="708" width="2" height="15" fill="rgb(227,51,16)"/><text x="172.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="169" y="724" width="2" height="15" fill="rgb(236,81,49)"/><text x="172.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="169" y="740" width="2" height="15" fill="rgb(206,84,40)"/><text x="172.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="169" y="756" width="2" height="15" fill="rgb(233,158,21)"/><text x="172.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (2 samples, 0.10%)</title><rect x="172" y="436" width="1" height="15" fill="rgb(254,115,23)"/><text x="175.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="172" y="452" width="1" height="15" fill="rgb(223,176,43)"/><text x="175.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="172" y="468" width="1" height="15" fill="rgb(253,101,54)"/><text x="175.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="172" y="484" width="1" height="15" fill="rgb(227,57,5)"/><text x="175.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="172" y="500" width="1" height="15" fill="rgb(228,21,31)"/><text x="175.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="172" y="516" width="1" height="15" fill="rgb(233,142,27)"/><text x="175.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (2 samples, 0.10%)</title><rect x="172" y="532" width="1" height="15" fill="rgb(208,156,40)"/><text x="175.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="172" y="548" width="1" height="15" fill="rgb(247,163,12)"/><text x="175.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="172" y="564" width="1" height="15" fill="rgb(224,25,16)"/><text x="175.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="172" y="580" width="1" height="15" fill="rgb(231,31,4)"/><text x="175.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="172" y="596" width="1" height="15" fill="rgb(240,188,3)"/><text x="175.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="172" y="612" width="1" height="15" fill="rgb(225,9,39)"/><text x="175.00" y="622.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:4) (19 samples, 0.95%)</title><rect x="164" y="52" width="11" height="15" fill="rgb(237,154,20)"/><text x="167.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (19 samples, 0.95%)</title><rect x="164" y="68" width="11" height="15" fill="rgb(229,89,22)"/><text x="167.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (19 samples, 0.95%)</title><rect x="164" y="84" width="11" height="15" fill="rgb(234,169,11)"/><text x="167.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (19 samples, 0.95%)</title><rect x="164" y="100" width="11" height="15" fill="rgb(235,150,45)"/><text x="167.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (19 samples, 0.95%)</title><rect x="164" y="116" width="11" height="15" fill="rgb(253,40,18)"/><text x="167.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 0.95%)</title><rect x="164" y="132" width="11" height="15" fill="rgb(249,194,23)"/><text x="167.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:7) (6 samples, 0.30%)</title><rect x="171" y="148" width="4" height="15" fill="rgb(215,99,3)"/><text x="174.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.30%)</title><rect x="171" y="164" width="4" height="15" fill="rgb(248,85,28)"/><text x="174.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.30%)</title><rect x="171" y="180" width="4" height="15" fill="rgb(245,7,52)"/><text x="174.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.30%)</title><rect x="171" y="196" width="4" height="15" fill="rgb(241,195,11)"/><text x="174.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.30%)</title><rect x="171" y="212" width="4" height="15" fill="rgb(220,204,50)"/><text x="174.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.30%)</title><rect x="171" y="228" width="4" height="15" fill="rgb(213,148,31)"/><text x="174.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 0.25%)</title><rect x="172" y="244" width="3" height="15" fill="rgb(220,168,34)"/><text x="175.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.25%)</title><rect x="172" y="260" width="3" height="15" fill="rgb(215,188,34)"/><text x="175.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.25%)</title><rect x="172" y="276" width="3" height="15" fill="rgb(247,160,32)"/><text x="175.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.25%)</title><rect x="172" y="292" width="3" height="15" fill="rgb(216,36,8)"/><text x="175.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.25%)</title><rect x="172" y="308" width="3" height="15" fill="rgb(241,32,7)"/><text x="175.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.25%)</title><rect x="172" y="324" width="3" height="15" fill="rgb(252,167,37)"/><text x="175.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (5 samples, 0.25%)</title><rect x="172" y="340" width="3" height="15" fill="rgb(215,96,20)"/><text x="175.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.25%)</title><rect x="172" y="356" width="3" height="15" fill="rgb(250,16,41)"/><text x="175.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.25%)</title><rect x="172" y="372" width="3" height="15" fill="rgb(220,183,46)"/><text x="175.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.25%)</title><rect x="172" y="388" width="3" height="15" fill="rgb(253,4,34)"/><text x="175.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.25%)</title><rect x="172" y="404" width="3" height="15" fill="rgb(248,4,0)"/><text x="175.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.25%)</title><rect x="172" y="420" width="3" height="15" fill="rgb(206,65,33)"/><text x="175.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.15%)</title><rect x="173" y="436" width="2" height="15" fill="rgb(246,172,32)"/><text x="176.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="173" y="452" width="2" height="15" fill="rgb(231,76,24)"/><text x="176.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.15%)</title><rect x="173" y="468" width="2" height="15" fill="rgb(225,122,21)"/><text x="176.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="173" y="484" width="2" height="15" fill="rgb(251,204,46)"/><text x="176.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="173" y="500" width="2" height="15" fill="rgb(206,21,2)"/><text x="176.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="173" y="516" width="2" height="15" fill="rgb(250,110,41)"/><text x="176.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="173" y="532" width="2" height="15" fill="rgb(246,163,53)"/><text x="176.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="173" y="548" width="2" height="15" fill="rgb(223,205,45)"/><text x="176.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="173" y="564" width="2" height="15" fill="rgb(225,145,25)"/><text x="176.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.15%)</title><rect x="173" y="580" width="2" height="15" fill="rgb(233,29,21)"/><text x="176.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="173" y="596" width="2" height="15" fill="rgb(234,111,21)"/><text x="176.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="173" y="612" width="2" height="15" fill="rgb(230,96,23)"/><text x="176.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="173" y="628" width="2" height="15" fill="rgb(245,5,30)"/><text x="176.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="173" y="644" width="2" height="15" fill="rgb(236,88,40)"/><text x="176.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="173" y="660" width="2" height="15" fill="rgb(241,155,13)"/><text x="176.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.15%)</title><rect x="173" y="676" width="2" height="15" fill="rgb(229,187,43)"/><text x="176.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="173" y="692" width="2" height="15" fill="rgb(244,61,53)"/><text x="176.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="173" y="708" width="2" height="15" fill="rgb(209,190,2)"/><text x="176.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="173" y="724" width="2" height="15" fill="rgb(244,178,28)"/><text x="176.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="173" y="740" width="2" height="15" fill="rgb(254,185,18)"/><text x="176.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="173" y="756" width="2" height="15" fill="rgb(251,116,27)"/><text x="176.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.15%)</title><rect x="173" y="772" width="2" height="15" fill="rgb(230,2,30)"/><text x="176.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="173" y="788" width="2" height="15" fill="rgb(243,212,34)"/><text x="176.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="173" y="804" width="2" height="15" fill="rgb(248,215,15)"/><text x="176.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="173" y="820" width="2" height="15" fill="rgb(242,104,34)"/><text x="176.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="173" y="836" width="2" height="15" fill="rgb(218,50,38)"/><text x="176.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="173" y="852" width="2" height="15" fill="rgb(215,201,11)"/><text x="176.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.15%)</title><rect x="173" y="868" width="2" height="15" fill="rgb(215,181,19)"/><text x="176.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="173" y="884" width="2" height="15" fill="rgb(241,140,49)"/><text x="176.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.15%)</title><rect x="173" y="900" width="2" height="15" fill="rgb(221,174,37)"/><text x="176.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="173" y="916" width="2" height="15" fill="rgb(241,60,31)"/><text x="176.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="173" y="932" width="2" height="15" fill="rgb(245,202,26)"/><text x="176.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="173" y="948" width="2" height="15" fill="rgb(223,160,10)"/><text x="176.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="173" y="964" width="2" height="15" fill="rgb(223,110,15)"/><text x="176.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="173" y="980" width="2" height="15" fill="rgb(243,160,52)"/><text x="176.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="173" y="996" width="2" height="15" fill="rgb(207,196,13)"/><text x="176.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.15%)</title><rect x="173" y="1012" width="2" height="15" fill="rgb(221,42,46)"/><text x="176.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="173" y="1028" width="2" height="15" fill="rgb(215,10,30)"/><text x="176.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="173" y="1044" width="2" height="15" fill="rgb(226,143,13)"/><text x="176.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="173" y="1060" width="2" height="15" fill="rgb(222,48,19)"/><text x="176.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="173" y="1076" width="2" height="15" fill="rgb(230,7,21)"/><text x="176.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="173" y="1092" width="2" height="15" fill="rgb(237,84,25)"/><text x="176.00" y="1102.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (2 samples, 0.10%)</title><rect x="178" y="260" width="2" height="15" fill="rgb(213,42,0)"/><text x="181.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (5 samples, 0.25%)</title><rect x="178" y="212" width="3" height="15" fill="rgb(233,91,15)"/><text x="181.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (5 samples, 0.25%)</title><rect x="178" y="228" width="3" height="15" fill="rgb(215,4,16)"/><text x="181.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (5 samples, 0.25%)</title><rect x="178" y="244" width="3" height="15" fill="rgb(233,28,11)"/><text x="181.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (3 samples, 0.15%)</title><rect x="180" y="260" width="1" height="15" fill="rgb(219,199,38)"/><text x="183.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (3 samples, 0.15%)</title><rect x="180" y="276" width="1" height="15" fill="rgb(241,159,31)"/><text x="183.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:550) (3 samples, 0.15%)</title><rect x="180" y="292" width="1" height="15" fill="rgb(241,91,35)"/><text x="183.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (3 samples, 0.15%)</title><rect x="180" y="308" width="1" height="15" fill="rgb(243,17,9)"/><text x="183.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (3 samples, 0.15%)</title><rect x="187" y="260" width="1" height="15" fill="rgb(229,25,0)"/><text x="190.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (9 samples, 0.45%)</title><rect x="188" y="260" width="6" height="15" fill="rgb(253,156,3)"/><text x="191.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (17 samples, 0.85%)</title><rect x="197" y="372" width="10" height="15" fill="rgb(240,41,7)"/><text x="200.00" y="382.50"></text></g><g><title>0x7fc53c03ed94 (libc-2.29.so) (17 samples, 0.85%)</title><rect x="197" y="388" width="10" height="15" fill="rgb(220,63,27)"/><text x="200.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (22 samples, 1.10%)</title><rect x="195" y="308" width="13" height="15" fill="rgb(221,83,22)"/><text x="198.00" y="318.50"></text></g><g><title>array_copy (methods.c:1133) (20 samples, 1.00%)</title><rect x="196" y="324" width="12" height="15" fill="rgb(227,194,8)"/><text x="199.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (19 samples, 0.95%)</title><rect x="197" y="340" width="11" height="15" fill="rgb(222,148,17)"/><text x="200.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (19 samples, 0.95%)</title><rect x="197" y="356" width="11" height="15" fill="rgb(236,12,29)"/><text x="200.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (4 samples, 0.20%)</title><rect x="208" y="356" width="2" height="15" fill="rgb(229,118,44)"/><text x="211.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (4 samples, 0.20%)</title><rect x="208" y="372" width="2" height="15" fill="rgb(217,42,4)"/><text x="211.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (4 samples, 0.20%)</title><rect x="208" y="388" width="2" height="15" fill="rgb(226,105,12)"/><text x="211.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (3 samples, 0.15%)</title><rect x="208" y="404" width="2" height="15" fill="rgb(230,49,43)"/><text x="211.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (3 samples, 0.15%)</title><rect x="208" y="420" width="2" height="15" fill="rgb(238,223,9)"/><text x="211.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.15%)</title><rect x="208" y="436" width="2" height="15" fill="rgb(241,62,41)"/><text x="211.00" y="446.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (8 samples, 0.40%)</title><rect x="211" y="388" width="5" height="15" fill="rgb(244,172,44)"/><text x="214.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (8 samples, 0.40%)</title><rect x="211" y="404" width="5" height="15" fill="rgb(220,158,29)"/><text x="214.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (16 samples, 0.80%)</title><rect x="208" y="308" width="9" height="15" fill="rgb(229,213,54)"/><text x="211.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (16 samples, 0.80%)</title><rect x="208" y="324" width="9" height="15" fill="rgb(229,65,13)"/><text x="211.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (16 samples, 0.80%)</title><rect x="208" y="340" width="9" height="15" fill="rgb(234,49,20)"/><text x="211.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (12 samples, 0.60%)</title><rect x="210" y="356" width="7" height="15" fill="rgb(251,214,37)"/><text x="213.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (11 samples, 0.55%)</title><rect x="211" y="372" width="6" height="15" fill="rgb(221,96,42)"/><text x="214.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (3 samples, 0.15%)</title><rect x="216" y="388" width="1" height="15" fill="rgb(229,136,44)"/><text x="219.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (3 samples, 0.15%)</title><rect x="216" y="404" width="1" height="15" fill="rgb(233,126,50)"/><text x="219.00" y="414.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (2 samples, 0.10%)</title><rect x="223" y="436" width="1" height="15" fill="rgb(228,180,35)"/><text x="226.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (2 samples, 0.10%)</title><rect x="223" y="452" width="1" height="15" fill="rgb(216,187,32)"/><text x="226.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (2 samples, 0.10%)</title><rect x="223" y="468" width="1" height="15" fill="rgb(253,35,0)"/><text x="226.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (2 samples, 0.10%)</title><rect x="223" y="484" width="1" height="15" fill="rgb(251,141,38)"/><text x="226.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (3 samples, 0.15%)</title><rect x="224" y="436" width="2" height="15" fill="rgb(252,216,33)"/><text x="227.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (3 samples, 0.15%)</title><rect x="224" y="452" width="2" height="15" fill="rgb(213,127,25)"/><text x="227.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (2 samples, 0.10%)</title><rect x="224" y="468" width="2" height="15" fill="rgb(236,129,51)"/><text x="227.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (3 samples, 0.15%)</title><rect x="228" y="468" width="2" height="15" fill="rgb(240,163,19)"/><text x="231.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1690) (2 samples, 0.10%)</title><rect x="231" y="484" width="1" height="15" fill="rgb(245,186,33)"/><text x="234.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1700) (6 samples, 0.30%)</title><rect x="234" y="484" width="3" height="15" fill="rgb(248,87,37)"/><text x="237.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1709) (3 samples, 0.15%)</title><rect x="239" y="484" width="1" height="15" fill="rgb(252,79,47)"/><text x="242.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (19 samples, 0.95%)</title><rect x="230" y="468" width="11" height="15" fill="rgb(237,52,7)"/><text x="233.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (27 samples, 1.35%)</title><rect x="226" y="436" width="16" height="15" fill="rgb(207,104,6)"/><text x="229.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (24 samples, 1.20%)</title><rect x="228" y="452" width="14" height="15" fill="rgb(226,167,49)"/><text x="231.00" y="462.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (83 samples, 4.15%)</title><rect x="194" y="276" width="49" height="15" fill="rgb(234,160,45)"/><text x="197.00" y="286.50">run ..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (83 samples, 4.15%)</title><rect x="194" y="292" width="49" height="15" fill="rgb(238,74,42)"/><text x="197.00" y="302.50">run ..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (44 samples, 2.20%)</title><rect x="217" y="308" width="26" height="15" fill="rgb(249,82,27)"/><text x="220.00" y="318.50">_..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (41 samples, 2.05%)</title><rect x="219" y="324" width="24" height="15" fill="rgb(232,226,9)"/><text x="222.00" y="334.50">s..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (41 samples, 2.05%)</title><rect x="219" y="340" width="24" height="15" fill="rgb(241,108,39)"/><text x="222.00" y="350.50">a..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (40 samples, 2.00%)</title><rect x="220" y="356" width="23" height="15" fill="rgb(210,99,11)"/><text x="223.00" y="366.50">s..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (40 samples, 2.00%)</title><rect x="220" y="372" width="23" height="15" fill="rgb(212,136,16)"/><text x="223.00" y="382.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (38 samples, 1.90%)</title><rect x="221" y="388" width="22" height="15" fill="rgb(234,169,52)"/><text x="224.00" y="398.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (37 samples, 1.85%)</title><rect x="221" y="404" width="22" height="15" fill="rgb(209,219,5)"/><text x="224.00" y="414.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (35 samples, 1.75%)</title><rect x="223" y="420" width="20" height="15" fill="rgb(240,55,41)"/><text x="226.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (2 samples, 0.10%)</title><rect x="242" y="436" width="1" height="15" fill="rgb(223,61,40)"/><text x="245.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.10%)</title><rect x="246" y="420" width="1" height="15" fill="rgb(233,218,14)"/><text x="249.00" y="430.50"></text></g><g><title>0x7fc53c03ef6a (libc-2.29.so) (2 samples, 0.10%)</title><rect x="246" y="436" width="1" height="15" fill="rgb(254,114,30)"/><text x="249.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (3 samples, 0.15%)</title><rect x="246" y="372" width="1" height="15" fill="rgb(214,72,52)"/><text x="249.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (3 samples, 0.15%)</title><rect x="246" y="388" width="1" height="15" fill="rgb(207,95,43)"/><text x="249.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 0.15%)</title><rect x="246" y="404" width="1" height="15" fill="rgb(210,117,46)"/><text x="249.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (8 samples, 0.40%)</title><rect x="247" y="420" width="5" height="15" fill="rgb(218,111,48)"/><text x="250.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (8 samples, 0.40%)</title><rect x="247" y="436" width="5" height="15" fill="rgb(212,138,52)"/><text x="250.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (17 samples, 0.85%)</title><rect x="247" y="388" width="10" height="15" fill="rgb(243,55,20)"/><text x="250.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (17 samples, 0.85%)</title><rect x="247" y="404" width="10" height="15" fill="rgb(208,50,43)"/><text x="250.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (9 samples, 0.45%)</title><rect x="252" y="420" width="5" height="15" fill="rgb(239,147,30)"/><text x="255.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (9 samples, 0.45%)</title><rect x="252" y="436" width="5" height="15" fill="rgb(247,186,38)"/><text x="255.00" y="446.50"></text></g><g><title>0x7fc53c03eddd (libc-2.29.so) (2 samples, 0.10%)</title><rect x="259" y="436" width="1" height="15" fill="rgb(234,124,47)"/><text x="262.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (8 samples, 0.40%)</title><rect x="259" y="420" width="4" height="15" fill="rgb(206,155,13)"/><text x="262.00" y="430.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (119 samples, 5.95%)</title><rect x="194" y="260" width="70" height="15" fill="rgb(245,223,25)"/><text x="197.00" y="270.50">run (ml..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (35 samples, 1.75%)</title><rect x="243" y="276" width="21" height="15" fill="rgb(219,204,24)"/><text x="246.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (35 samples, 1.75%)</title><rect x="243" y="292" width="21" height="15" fill="rgb(250,97,14)"/><text x="246.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (35 samples, 1.75%)</title><rect x="243" y="308" width="21" height="15" fill="rgb(236,54,22)"/><text x="246.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (35 samples, 1.75%)</title><rect x="243" y="324" width="21" height="15" fill="rgb(233,155,26)"/><text x="246.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (33 samples, 1.65%)</title><rect x="244" y="340" width="20" height="15" fill="rgb(221,84,46)"/><text x="247.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (33 samples, 1.65%)</title><rect x="244" y="356" width="20" height="15" fill="rgb(228,105,1)"/><text x="247.00" y="366.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (28 samples, 1.40%)</title><rect x="247" y="372" width="17" height="15" fill="rgb(227,222,34)"/><text x="250.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (11 samples, 0.55%)</title><rect x="257" y="388" width="7" height="15" fill="rgb(207,218,38)"/><text x="260.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (10 samples, 0.50%)</title><rect x="258" y="404" width="6" height="15" fill="rgb(228,48,23)"/><text x="261.00" y="414.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (2 samples, 0.10%)</title><rect x="264" y="260" width="1" height="15" fill="rgb(246,110,0)"/><text x="267.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (3 samples, 0.15%)</title><rect x="266" y="260" width="2" height="15" fill="rgb(246,161,29)"/><text x="269.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (141 samples, 7.05%)</title><rect x="185" y="244" width="84" height="15" fill="rgb(220,67,18)"/><text x="188.00" y="254.50">_run_sequ..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (145 samples, 7.25%)</title><rect x="184" y="212" width="85" height="15" fill="rgb(240,7,39)"/><text x="187.00" y="222.50">_run (mlpr..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (145 samples, 7.25%)</title><rect x="184" y="228" width="85" height="15" fill="rgb(213,73,3)"/><text x="187.00" y="238.50">run (mlpro..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (7 samples, 0.35%)</title><rect x="270" y="212" width="5" height="15" fill="rgb(221,221,14)"/><text x="273.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (4 samples, 0.20%)</title><rect x="272" y="228" width="3" height="15" fill="rgb(241,12,20)"/><text x="275.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.20%)</title><rect x="272" y="244" width="3" height="15" fill="rgb(229,136,0)"/><text x="275.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (2 samples, 0.10%)</title><rect x="273" y="260" width="2" height="15" fill="rgb(216,136,50)"/><text x="276.00" y="270.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:201) (4 samples, 0.20%)</title><rect x="277" y="388" width="2" height="15" fill="rgb(244,128,35)"/><text x="280.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (2 samples, 0.10%)</title><rect x="278" y="404" width="1" height="15" fill="rgb(218,207,10)"/><text x="281.00" y="414.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:202) (2 samples, 0.10%)</title><rect x="279" y="388" width="1" height="15" fill="rgb(231,158,52)"/><text x="282.00" y="398.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (11 samples, 0.55%)</title><rect x="275" y="244" width="6" height="15" fill="rgb(241,36,53)"/><text x="278.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (11 samples, 0.55%)</title><rect x="275" y="260" width="6" height="15" fill="rgb(215,156,14)"/><text x="278.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.55%)</title><rect x="275" y="276" width="6" height="15" fill="rgb(243,115,4)"/><text x="278.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (11 samples, 0.55%)</title><rect x="275" y="292" width="6" height="15" fill="rgb(235,131,52)"/><text x="278.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (10 samples, 0.50%)</title><rect x="275" y="308" width="6" height="15" fill="rgb(240,119,3)"/><text x="278.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (10 samples, 0.50%)</title><rect x="275" y="324" width="6" height="15" fill="rgb(222,18,14)"/><text x="278.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (10 samples, 0.50%)</title><rect x="275" y="340" width="6" height="15" fill="rgb(225,82,9)"/><text x="278.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (9 samples, 0.45%)</title><rect x="276" y="356" width="5" height="15" fill="rgb(241,90,45)"/><text x="279.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src:380) (8 samples, 0.40%)</title><rect x="276" y="372" width="5" height="15" fill="rgb(210,140,25)"/><text x="279.00" y="382.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1564) (2 samples, 0.10%)</title><rect x="281" y="276" width="1" height="15" fill="rgb(223,39,40)"/><text x="284.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (178 samples, 8.90%)</title><rect x="178" y="196" width="105" height="15" fill="rgb(211,84,40)"/><text x="181.00" y="206.50">run (mlprodi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (14 samples, 0.70%)</title><rect x="275" y="212" width="8" height="15" fill="rgb(211,22,18)"/><text x="278.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (14 samples, 0.70%)</title><rect x="275" y="228" width="8" height="15" fill="rgb(231,48,27)"/><text x="278.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (3 samples, 0.15%)</title><rect x="281" y="244" width="2" height="15" fill="rgb(250,33,47)"/><text x="284.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (3 samples, 0.15%)</title><rect x="281" y="260" width="2" height="15" fill="rgb(226,128,3)"/><text x="284.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (2 samples, 0.10%)</title><rect x="283" y="228" width="2" height="15" fill="rgb(213,213,33)"/><text x="286.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (2 samples, 0.10%)</title><rect x="283" y="244" width="2" height="15" fill="rgb(214,28,40)"/><text x="286.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.10%)</title><rect x="283" y="260" width="2" height="15" fill="rgb(238,41,35)"/><text x="286.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (2 samples, 0.10%)</title><rect x="283" y="276" width="2" height="15" fill="rgb(208,113,39)"/><text x="286.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (2 samples, 0.10%)</title><rect x="283" y="292" width="2" height="15" fill="rgb(248,75,23)"/><text x="286.00" y="302.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:18) (186 samples, 9.30%)</title><rect x="175" y="100" width="110" height="15" fill="rgb(243,196,14)"/><text x="178.00" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (186 samples, 9.30%)</title><rect x="175" y="116" width="110" height="15" fill="rgb(218,22,3)"/><text x="178.00" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (185 samples, 9.25%)</title><rect x="176" y="132" width="109" height="15" fill="rgb(213,163,28)"/><text x="179.00" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (185 samples, 9.25%)</title><rect x="176" y="148" width="109" height="15" fill="rgb(247,223,25)"/><text x="179.00" y="158.50">run (mlprodic..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (185 samples, 9.25%)</title><rect x="176" y="164" width="109" height="15" fill="rgb(246,225,36)"/><text x="179.00" y="174.50">_run_sequence..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (184 samples, 9.20%)</title><rect x="177" y="180" width="108" height="15" fill="rgb(218,93,11)"/><text x="180.00" y="190.50">run (mlprodic..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (3 samples, 0.15%)</title><rect x="283" y="196" width="2" height="15" fill="rgb(218,113,24)"/><text x="286.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (3 samples, 0.15%)</title><rect x="283" y="212" width="2" height="15" fill="rgb(211,86,1)"/><text x="286.00" y="222.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (4 samples, 0.20%)</title><rect x="288" y="276" width="2" height="15" fill="rgb(217,68,24)"/><text x="291.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (4 samples, 0.20%)</title><rect x="288" y="292" width="2" height="15" fill="rgb(209,74,43)"/><text x="291.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (4 samples, 0.20%)</title><rect x="288" y="308" width="2" height="15" fill="rgb(244,88,28)"/><text x="291.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (3 samples, 0.15%)</title><rect x="288" y="324" width="2" height="15" fill="rgb(247,83,26)"/><text x="291.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:47) (2 samples, 0.10%)</title><rect x="289" y="340" width="1" height="15" fill="rgb(215,59,28)"/><text x="292.00" y="350.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (7 samples, 0.35%)</title><rect x="288" y="260" width="4" height="15" fill="rgb(212,72,15)"/><text x="291.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (3 samples, 0.15%)</title><rect x="290" y="276" width="2" height="15" fill="rgb(217,23,34)"/><text x="293.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c:884) (3 samples, 0.15%)</title><rect x="290" y="292" width="2" height="15" fill="rgb(224,128,52)"/><text x="293.00" y="302.50"></text></g><g><title>setArrayFromSequence (ctors.c:536) (3 samples, 0.15%)</title><rect x="292" y="292" width="1" height="15" fill="rgb(239,46,34)"/><text x="295.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (11 samples, 0.55%)</title><rect x="288" y="212" width="6" height="15" fill="rgb(226,73,1)"/><text x="291.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (11 samples, 0.55%)</title><rect x="288" y="228" width="6" height="15" fill="rgb(208,151,38)"/><text x="291.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (11 samples, 0.55%)</title><rect x="288" y="244" width="6" height="15" fill="rgb(231,123,30)"/><text x="291.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (4 samples, 0.20%)</title><rect x="292" y="260" width="2" height="15" fill="rgb(225,26,51)"/><text x="295.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (4 samples, 0.20%)</title><rect x="292" y="276" width="2" height="15" fill="rgb(219,217,12)"/><text x="295.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (3 samples, 0.15%)</title><rect x="296" y="212" width="2" height="15" fill="rgb(208,40,40)"/><text x="299.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (3 samples, 0.15%)</title><rect x="298" y="212" width="2" height="15" fill="rgb(241,21,54)"/><text x="301.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (2 samples, 0.10%)</title><rect x="299" y="228" width="1" height="15" fill="rgb(233,99,9)"/><text x="302.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (2 samples, 0.10%)</title><rect x="299" y="244" width="1" height="15" fill="rgb(231,86,29)"/><text x="302.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (2 samples, 0.10%)</title><rect x="299" y="260" width="1" height="15" fill="rgb(229,27,0)"/><text x="302.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (2 samples, 0.10%)</title><rect x="306" y="244" width="1" height="15" fill="rgb(233,228,12)"/><text x="309.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (15 samples, 0.75%)</title><rect x="312" y="260" width="9" height="15" fill="rgb(220,25,22)"/><text x="315.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (2 samples, 0.10%)</title><rect x="320" y="276" width="1" height="15" fill="rgb(212,195,39)"/><text x="323.00" y="286.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (2 samples, 0.10%)</title><rect x="331" y="340" width="1" height="15" fill="rgb(253,87,52)"/><text x="334.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (2 samples, 0.10%)</title><rect x="331" y="356" width="1" height="15" fill="rgb(240,108,27)"/><text x="334.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (2 samples, 0.10%)</title><rect x="331" y="372" width="1" height="15" fill="rgb(224,138,46)"/><text x="334.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (2 samples, 0.10%)</title><rect x="331" y="388" width="1" height="15" fill="rgb(216,47,35)"/><text x="334.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (31 samples, 1.55%)</title><rect x="333" y="372" width="18" height="15" fill="rgb(247,4,30)"/><text x="336.00" y="382.50"></text></g><g><title>0x7fc53c03ed94 (libc-2.29.so) (31 samples, 1.55%)</title><rect x="333" y="388" width="18" height="15" fill="rgb(215,36,40)"/><text x="336.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (2 samples, 0.10%)</title><rect x="351" y="372" width="1" height="15" fill="rgb(208,44,54)"/><text x="354.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (38 samples, 1.90%)</title><rect x="331" y="308" width="22" height="15" fill="rgb(221,131,34)"/><text x="334.00" y="318.50">_..</text></g><g><title>array_copy (methods.c:1133) (37 samples, 1.85%)</title><rect x="331" y="324" width="22" height="15" fill="rgb(223,211,54)"/><text x="334.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c:560) (35 samples, 1.75%)</title><rect x="332" y="340" width="21" height="15" fill="rgb(206,172,37)"/><text x="335.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (35 samples, 1.75%)</title><rect x="332" y="356" width="21" height="15" fill="rgb(237,151,41)"/><text x="335.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (3 samples, 0.15%)</title><rect x="354" y="340" width="1" height="15" fill="rgb(210,45,45)"/><text x="357.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (3 samples, 0.15%)</title><rect x="354" y="356" width="1" height="15" fill="rgb(239,173,23)"/><text x="357.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (2 samples, 0.10%)</title><rect x="356" y="356" width="1" height="15" fill="rgb(232,127,48)"/><text x="359.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (2 samples, 0.10%)</title><rect x="356" y="372" width="1" height="15" fill="rgb(211,163,36)"/><text x="359.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:593) (5 samples, 0.25%)</title><rect x="358" y="388" width="3" height="15" fill="rgb(251,58,4)"/><text x="361.00" y="398.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (10 samples, 0.50%)</title><rect x="361" y="388" width="6" height="15" fill="rgb(219,113,13)"/><text x="364.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (10 samples, 0.50%)</title><rect x="361" y="404" width="6" height="15" fill="rgb(221,7,5)"/><text x="364.00" y="414.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (30 samples, 1.50%)</title><rect x="358" y="372" width="17" height="15" fill="rgb(252,67,0)"/><text x="361.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (15 samples, 0.75%)</title><rect x="367" y="388" width="8" height="15" fill="rgb(221,98,19)"/><text x="370.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (15 samples, 0.75%)</title><rect x="367" y="404" width="8" height="15" fill="rgb(222,209,4)"/><text x="370.00" y="414.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (38 samples, 1.90%)</title><rect x="354" y="324" width="22" height="15" fill="rgb(251,83,44)"/><text x="357.00" y="334.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (35 samples, 1.75%)</title><rect x="355" y="340" width="21" height="15" fill="rgb(216,213,33)"/><text x="358.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (32 samples, 1.60%)</title><rect x="357" y="356" width="19" height="15" fill="rgb(214,57,40)"/><text x="360.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (41 samples, 2.05%)</title><rect x="353" y="308" width="24" height="15" fill="rgb(213,138,11)"/><text x="356.00" y="318.50">_..</text></g><g><title>array_dealloc (arrayobject.c:476) (2 samples, 0.10%)</title><rect x="379" y="324" width="1" height="15" fill="rgb(230,112,22)"/><text x="382.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (2 samples, 0.10%)</title><rect x="379" y="340" width="1" height="15" fill="rgb(251,158,51)"/><text x="382.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (2 samples, 0.10%)</title><rect x="379" y="356" width="1" height="15" fill="rgb(237,38,4)"/><text x="382.00" y="366.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (2 samples, 0.10%)</title><rect x="380" y="324" width="1" height="15" fill="rgb(217,134,16)"/><text x="383.00" y="334.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (3 samples, 0.15%)</title><rect x="382" y="356" width="2" height="15" fill="rgb(212,36,42)"/><text x="385.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (2 samples, 0.10%)</title><rect x="384" y="388" width="2" height="15" fill="rgb(215,27,28)"/><text x="387.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (5 samples, 0.25%)</title><rect x="384" y="372" width="3" height="15" fill="rgb(206,141,45)"/><text x="387.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (2 samples, 0.10%)</title><rect x="386" y="388" width="1" height="15" fill="rgb(207,139,51)"/><text x="389.00" y="398.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3635) (2 samples, 0.10%)</title><rect x="390" y="420" width="1" height="15" fill="rgb(240,195,26)"/><text x="393.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:444) (2 samples, 0.10%)</title><rect x="392" y="436" width="1" height="15" fill="rgb(250,125,47)"/><text x="395.00" y="446.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (2 samples, 0.10%)</title><rect x="393" y="468" width="1" height="15" fill="rgb(229,82,48)"/><text x="396.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (2 samples, 0.10%)</title><rect x="394" y="500" width="2" height="15" fill="rgb(236,36,32)"/><text x="397.00" y="510.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (7 samples, 0.35%)</title><rect x="393" y="436" width="4" height="15" fill="rgb(216,164,19)"/><text x="396.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (7 samples, 0.35%)</title><rect x="393" y="452" width="4" height="15" fill="rgb(234,14,2)"/><text x="396.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (5 samples, 0.25%)</title><rect x="394" y="468" width="3" height="15" fill="rgb(241,95,4)"/><text x="397.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (5 samples, 0.25%)</title><rect x="394" y="484" width="3" height="15" fill="rgb(208,34,12)"/><text x="397.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (3 samples, 0.15%)</title><rect x="396" y="500" width="1" height="15" fill="rgb(237,225,41)"/><text x="399.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (2 samples, 0.10%)</title><rect x="396" y="516" width="1" height="15" fill="rgb(229,17,25)"/><text x="399.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.10%)</title><rect x="396" y="532" width="1" height="15" fill="rgb(241,65,39)"/><text x="399.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.10%)</title><rect x="396" y="548" width="1" height="15" fill="rgb(216,217,16)"/><text x="399.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.10%)</title><rect x="396" y="564" width="1" height="15" fill="rgb(245,0,12)"/><text x="399.00" y="574.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (2 samples, 0.10%)</title><rect x="400" y="484" width="1" height="15" fill="rgb(221,8,47)"/><text x="403.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3673) (2 samples, 0.10%)</title><rect x="400" y="500" width="1" height="15" fill="rgb(233,169,53)"/><text x="403.00" y="510.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c:274) (2 samples, 0.10%)</title><rect x="400" y="516" width="1" height="15" fill="rgb(250,108,4)"/><text x="403.00" y="526.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (8 samples, 0.40%)</title><rect x="397" y="436" width="5" height="15" fill="rgb(218,39,12)"/><text x="400.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (7 samples, 0.35%)</title><rect x="398" y="452" width="4" height="15" fill="rgb(219,164,51)"/><text x="401.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (4 samples, 0.20%)</title><rect x="400" y="468" width="2" height="15" fill="rgb(205,208,38)"/><text x="403.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (2 samples, 0.10%)</title><rect x="402" y="452" width="1" height="15" fill="rgb(242,189,5)"/><text x="405.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:471) (3 samples, 0.15%)</title><rect x="404" y="452" width="2" height="15" fill="rgb(247,101,16)"/><text x="407.00" y="462.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (3 samples, 0.15%)</title><rect x="404" y="468" width="2" height="15" fill="rgb(253,191,35)"/><text x="407.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.15%)</title><rect x="404" y="484" width="2" height="15" fill="rgb(224,19,44)"/><text x="407.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (8 samples, 0.40%)</title><rect x="402" y="436" width="5" height="15" fill="rgb(249,75,36)"/><text x="405.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3534) (4 samples, 0.20%)</title><rect x="407" y="452" width="3" height="15" fill="rgb(232,0,32)"/><text x="410.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3540) (3 samples, 0.15%)</title><rect x="410" y="452" width="1" height="15" fill="rgb(215,71,4)"/><text x="413.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (2 samples, 0.10%)</title><rect x="411" y="452" width="2" height="15" fill="rgb(209,198,45)"/><text x="414.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (4 samples, 0.20%)</title><rect x="414" y="468" width="2" height="15" fill="rgb(231,131,45)"/><text x="417.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (5 samples, 0.25%)</title><rect x="416" y="468" width="3" height="15" fill="rgb(240,205,8)"/><text x="419.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1662) (5 samples, 0.25%)</title><rect x="420" y="484" width="3" height="15" fill="rgb(218,72,30)"/><text x="423.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1690) (3 samples, 0.15%)</title><rect x="424" y="484" width="2" height="15" fill="rgb(246,201,26)"/><text x="427.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1693) (2 samples, 0.10%)</title><rect x="426" y="484" width="1" height="15" fill="rgb(221,139,6)"/><text x="429.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1694) (5 samples, 0.25%)</title><rect x="427" y="484" width="3" height="15" fill="rgb(213,135,48)"/><text x="430.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1695) (3 samples, 0.15%)</title><rect x="430" y="484" width="2" height="15" fill="rgb(224,21,43)"/><text x="433.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1696) (5 samples, 0.25%)</title><rect x="432" y="484" width="3" height="15" fill="rgb(233,45,23)"/><text x="435.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1698) (6 samples, 0.30%)</title><rect x="436" y="484" width="3" height="15" fill="rgb(242,10,6)"/><text x="439.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1700) (8 samples, 0.40%)</title><rect x="439" y="484" width="5" height="15" fill="rgb(225,33,26)"/><text x="442.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1704) (2 samples, 0.10%)</title><rect x="444" y="484" width="1" height="15" fill="rgb(239,198,32)"/><text x="447.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1705) (3 samples, 0.15%)</title><rect x="445" y="484" width="2" height="15" fill="rgb(209,217,24)"/><text x="448.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1708) (4 samples, 0.20%)</title><rect x="447" y="484" width="2" height="15" fill="rgb(233,163,37)"/><text x="450.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1709) (7 samples, 0.35%)</title><rect x="449" y="484" width="4" height="15" fill="rgb(215,78,22)"/><text x="452.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (60 samples, 3.00%)</title><rect x="419" y="468" width="36" height="15" fill="rgb(240,11,47)"/><text x="422.00" y="478.50">FLO..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1721) (2 samples, 0.10%)</title><rect x="453" y="484" width="2" height="15" fill="rgb(252,219,38)"/><text x="456.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1762) (3 samples, 0.15%)</title><rect x="455" y="468" width="1" height="15" fill="rgb(246,112,6)"/><text x="458.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (2 samples, 0.10%)</title><rect x="457" y="468" width="1" height="15" fill="rgb(230,124,24)"/><text x="460.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (3 samples, 0.15%)</title><rect x="458" y="468" width="2" height="15" fill="rgb(207,84,12)"/><text x="461.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (95 samples, 4.75%)</title><rect x="407" y="436" width="56" height="15" fill="rgb(239,63,50)"/><text x="410.00" y="446.50">PyUFu..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (85 samples, 4.25%)</title><rect x="413" y="452" width="50" height="15" fill="rgb(228,50,6)"/><text x="416.00" y="462.50">reduc..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (3 samples, 0.15%)</title><rect x="461" y="468" width="2" height="15" fill="rgb(253,128,8)"/><text x="464.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (2 samples, 0.10%)</title><rect x="463" y="436" width="1" height="15" fill="rgb(236,82,34)"/><text x="466.00" y="446.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (234 samples, 11.71%)</title><rect x="326" y="276" width="139" height="15" fill="rgb(221,161,54)"/><text x="329.00" y="286.50">run (mlprodict/on..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (229 samples, 11.46%)</title><rect x="329" y="292" width="136" height="15" fill="rgb(221,11,44)"/><text x="332.00" y="302.50">run (mlprodict/on..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (148 samples, 7.40%)</title><rect x="377" y="308" width="88" height="15" fill="rgb(227,195,6)"/><text x="380.00" y="318.50">_run (mlpr..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (140 samples, 7.00%)</title><rect x="382" y="324" width="83" height="15" fill="rgb(218,59,18)"/><text x="385.00" y="334.50">sum (&lt;__a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (140 samples, 7.00%)</title><rect x="382" y="340" width="83" height="15" fill="rgb(237,13,30)"/><text x="385.00" y="350.50">array_imp..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (137 samples, 6.85%)</title><rect x="384" y="356" width="81" height="15" fill="rgb(225,36,22)"/><text x="387.00" y="366.50">sum (nump..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (131 samples, 6.55%)</title><rect x="387" y="372" width="78" height="15" fill="rgb(253,218,28)"/><text x="390.00" y="382.50">_wrapredu..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (127 samples, 6.35%)</title><rect x="390" y="388" width="75" height="15" fill="rgb(220,122,4)"/><text x="393.00" y="398.50">ufunc_re..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (126 samples, 6.30%)</title><rect x="390" y="404" width="75" height="15" fill="rgb(214,157,19)"/><text x="393.00" y="414.50">PyUFunc_..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (123 samples, 6.15%)</title><rect x="392" y="420" width="73" height="15" fill="rgb(220,129,5)"/><text x="395.00" y="430.50">PyUFunc_..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (4 samples, 0.20%)</title><rect x="465" y="276" width="2" height="15" fill="rgb(226,58,33)"/><text x="468.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (2 samples, 0.10%)</title><rect x="473" y="388" width="1" height="15" fill="rgb(237,111,2)"/><text x="476.00" y="398.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (2 samples, 0.10%)</title><rect x="473" y="404" width="1" height="15" fill="rgb(209,43,2)"/><text x="476.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (4 samples, 0.20%)</title><rect x="472" y="372" width="3" height="15" fill="rgb(214,93,38)"/><text x="475.00" y="382.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (3 samples, 0.15%)</title><rect x="475" y="420" width="1" height="15" fill="rgb(229,64,27)"/><text x="478.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (5 samples, 0.25%)</title><rect x="475" y="372" width="3" height="15" fill="rgb(233,22,48)"/><text x="478.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (5 samples, 0.25%)</title><rect x="475" y="388" width="3" height="15" fill="rgb(222,150,10)"/><text x="478.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (5 samples, 0.25%)</title><rect x="475" y="404" width="3" height="15" fill="rgb(217,37,42)"/><text x="478.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:600) (2 samples, 0.10%)</title><rect x="478" y="420" width="1" height="15" fill="rgb(221,202,22)"/><text x="481.00" y="430.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (20 samples, 1.00%)</title><rect x="479" y="420" width="12" height="15" fill="rgb(206,225,23)"/><text x="482.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (20 samples, 1.00%)</title><rect x="479" y="436" width="12" height="15" fill="rgb(249,132,4)"/><text x="482.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (50 samples, 2.50%)</title><rect x="478" y="388" width="29" height="15" fill="rgb(217,177,25)"/><text x="481.00" y="398.50">FL..</text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (50 samples, 2.50%)</title><rect x="478" y="404" width="29" height="15" fill="rgb(226,66,21)"/><text x="481.00" y="414.50">ru..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (28 samples, 1.40%)</title><rect x="491" y="420" width="16" height="15" fill="rgb(237,24,5)"/><text x="494.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (28 samples, 1.40%)</title><rect x="491" y="436" width="16" height="15" fill="rgb(253,12,12)"/><text x="494.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (4 samples, 0.20%)</title><rect x="509" y="420" width="3" height="15" fill="rgb(254,34,17)"/><text x="512.00" y="430.50"></text></g><g><title>0x7fc53c03ef03 (libc-2.29.so) (2 samples, 0.10%)</title><rect x="514" y="436" width="1" height="15" fill="rgb(214,98,48)"/><text x="517.00" y="446.50"></text></g><g><title>0x7fc53c03ef36 (libc-2.29.so) (2 samples, 0.10%)</title><rect x="516" y="436" width="1" height="15" fill="rgb(205,101,41)"/><text x="519.00" y="446.50"></text></g><g><title>0x7fc53c03ef58 (libc-2.29.so) (3 samples, 0.15%)</title><rect x="519" y="436" width="2" height="15" fill="rgb(245,164,4)"/><text x="522.00" y="446.50"></text></g><g><title>0x7fc53c03ef5d (libc-2.29.so) (2 samples, 0.10%)</title><rect x="521" y="436" width="1" height="15" fill="rgb(209,136,5)"/><text x="524.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (23 samples, 1.15%)</title><rect x="512" y="420" width="13" height="15" fill="rgb(230,201,4)"/><text x="515.00" y="430.50"></text></g><g><title>0x7fc53c03ef7a (libc-2.29.so) (4 samples, 0.20%)</title><rect x="523" y="436" width="2" height="15" fill="rgb(254,114,42)"/><text x="526.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (82 samples, 4.10%)</title><rect x="478" y="372" width="48" height="15" fill="rgb(226,104,50)"/><text x="481.00" y="382.50">iter..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (30 samples, 1.50%)</title><rect x="508" y="388" width="18" height="15" fill="rgb(228,158,52)"/><text x="511.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (29 samples, 1.45%)</title><rect x="509" y="404" width="17" height="15" fill="rgb(205,79,21)"/><text x="512.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (2 samples, 0.10%)</title><rect x="526" y="388" width="1" height="15" fill="rgb(250,86,2)"/><text x="529.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (94 samples, 4.70%)</title><rect x="472" y="356" width="56" height="15" fill="rgb(233,184,33)"/><text x="475.00" y="366.50">execu..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (3 samples, 0.15%)</title><rect x="526" y="372" width="2" height="15" fill="rgb(225,51,5)"/><text x="529.00" y="382.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (103 samples, 5.15%)</title><rect x="468" y="276" width="60" height="15" fill="rgb(242,77,27)"/><text x="471.00" y="286.50">run (m..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (102 samples, 5.10%)</title><rect x="468" y="292" width="60" height="15" fill="rgb(225,196,15)"/><text x="471.00" y="302.50">run (m..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (99 samples, 4.95%)</title><rect x="470" y="308" width="58" height="15" fill="rgb(216,208,8)"/><text x="473.00" y="318.50">_run (..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (97 samples, 4.85%)</title><rect x="471" y="324" width="57" height="15" fill="rgb(235,71,9)"/><text x="474.00" y="334.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (95 samples, 4.75%)</title><rect x="472" y="340" width="56" height="15" fill="rgb(222,16,54)"/><text x="475.00" y="350.50">PyUFu..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (352 samples, 17.61%)</title><rect x="321" y="260" width="208" height="15" fill="rgb(227,79,41)"/><text x="324.00" y="270.50">run (mlprodict/onnxrt/onnx_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (6 samples, 0.30%)</title><rect x="529" y="260" width="4" height="15" fill="rgb(208,150,32)"/><text x="532.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (2 samples, 0.10%)</title><rect x="533" y="260" width="1" height="15" fill="rgb(224,201,10)"/><text x="536.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (7 samples, 0.35%)</title><rect x="534" y="260" width="4" height="15" fill="rgb(237,202,46)"/><text x="537.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (395 samples, 19.76%)</title><rect x="308" y="244" width="233" height="15" fill="rgb(235,214,20)"/><text x="311.00" y="254.50">_run_sequence_runtime (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (4 samples, 0.20%)</title><rect x="538" y="260" width="3" height="15" fill="rgb(254,24,3)"/><text x="541.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (412 samples, 20.61%)</title><rect x="300" y="212" width="243" height="15" fill="rgb(229,55,3)"/><text x="303.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/o..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (407 samples, 20.36%)</title><rect x="303" y="228" width="240" height="15" fill="rgb(220,152,28)"/><text x="306.00" y="238.50">run (mlprodict/onnxrt/onnx_infe..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (4 samples, 0.20%)</title><rect x="541" y="244" width="2" height="15" fill="rgb(233,72,52)"/><text x="544.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (2 samples, 0.10%)</title><rect x="542" y="260" width="1" height="15" fill="rgb(219,33,16)"/><text x="545.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (3 samples, 0.15%)</title><rect x="543" y="212" width="2" height="15" fill="rgb(250,34,48)"/><text x="546.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (2 samples, 0.10%)</title><rect x="548" y="228" width="1" height="15" fill="rgb(209,18,11)"/><text x="551.00" y="238.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (5 samples, 0.25%)</title><rect x="551" y="260" width="3" height="15" fill="rgb(218,34,35)"/><text x="554.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (4 samples, 0.20%)</title><rect x="551" y="276" width="3" height="15" fill="rgb(243,75,3)"/><text x="554.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (18 samples, 0.90%)</title><rect x="545" y="212" width="11" height="15" fill="rgb(208,35,39)"/><text x="548.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (12 samples, 0.60%)</title><rect x="549" y="228" width="7" height="15" fill="rgb(222,157,24)"/><text x="552.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 0.50%)</title><rect x="550" y="244" width="6" height="15" fill="rgb(225,208,47)"/><text x="553.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (3 samples, 0.15%)</title><rect x="554" y="260" width="2" height="15" fill="rgb(214,122,32)"/><text x="557.00" y="270.50"></text></g><g><title>array_reshape (methods.c:195) (2 samples, 0.10%)</title><rect x="555" y="276" width="1" height="15" fill="rgb(246,49,33)"/><text x="558.00" y="286.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (2 samples, 0.10%)</title><rect x="556" y="260" width="1" height="15" fill="rgb(252,36,41)"/><text x="559.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (2 samples, 0.10%)</title><rect x="556" y="276" width="1" height="15" fill="rgb(217,196,17)"/><text x="559.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.10%)</title><rect x="556" y="292" width="1" height="15" fill="rgb(251,194,32)"/><text x="559.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (7 samples, 0.35%)</title><rect x="556" y="212" width="4" height="15" fill="rgb(236,156,32)"/><text x="559.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (7 samples, 0.35%)</title><rect x="556" y="228" width="4" height="15" fill="rgb(218,25,29)"/><text x="559.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.35%)</title><rect x="556" y="244" width="4" height="15" fill="rgb(248,127,27)"/><text x="559.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (5 samples, 0.25%)</title><rect x="557" y="260" width="3" height="15" fill="rgb(211,28,9)"/><text x="560.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (4 samples, 0.20%)</title><rect x="558" y="276" width="2" height="15" fill="rgb(248,41,7)"/><text x="561.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.20%)</title><rect x="558" y="292" width="2" height="15" fill="rgb(236,121,8)"/><text x="561.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (4 samples, 0.20%)</title><rect x="558" y="308" width="2" height="15" fill="rgb(216,128,37)"/><text x="561.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (4 samples, 0.20%)</title><rect x="558" y="324" width="2" height="15" fill="rgb(231,176,32)"/><text x="561.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (4 samples, 0.20%)</title><rect x="558" y="340" width="2" height="15" fill="rgb(214,81,23)"/><text x="561.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (3 samples, 0.15%)</title><rect x="558" y="356" width="2" height="15" fill="rgb(247,203,41)"/><text x="561.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1048) (5 samples, 0.25%)</title><rect x="560" y="356" width="3" height="15" fill="rgb(231,131,36)"/><text x="563.00" y="366.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src:1915) (5 samples, 0.25%)</title><rect x="560" y="372" width="3" height="15" fill="rgb(251,157,12)"/><text x="563.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:319) (5 samples, 0.25%)</title><rect x="560" y="388" width="3" height="15" fill="rgb(216,76,16)"/><text x="563.00" y="398.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:201) (17 samples, 0.85%)</title><rect x="564" y="388" width="10" height="15" fill="rgb(210,89,54)"/><text x="567.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (10 samples, 0.50%)</title><rect x="569" y="404" width="5" height="15" fill="rgb(249,224,15)"/><text x="572.00" y="414.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:202) (18 samples, 0.90%)</title><rect x="574" y="388" width="11" height="15" fill="rgb(221,141,12)"/><text x="577.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (10 samples, 0.50%)</title><rect x="579" y="404" width="6" height="15" fill="rgb(229,3,29)"/><text x="582.00" y="414.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (43 samples, 2.15%)</title><rect x="560" y="244" width="26" height="15" fill="rgb(246,40,28)"/><text x="563.00" y="254.50">t..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (43 samples, 2.15%)</title><rect x="560" y="260" width="26" height="15" fill="rgb(237,41,33)"/><text x="563.00" y="270.50">a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (43 samples, 2.15%)</title><rect x="560" y="276" width="26" height="15" fill="rgb(243,8,23)"/><text x="563.00" y="286.50">a..</text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (43 samples, 2.15%)</title><rect x="560" y="292" width="26" height="15" fill="rgb(221,14,18)"/><text x="563.00" y="302.50">a..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (43 samples, 2.15%)</title><rect x="560" y="308" width="26" height="15" fill="rgb(224,15,33)"/><text x="563.00" y="318.50">_..</text></g><g><title>array_argpartition (methods.c:1454) (43 samples, 2.15%)</title><rect x="560" y="324" width="26" height="15" fill="rgb(224,55,1)"/><text x="563.00" y="334.50">a..</text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (43 samples, 2.15%)</title><rect x="560" y="340" width="26" height="15" fill="rgb(251,74,30)"/><text x="563.00" y="350.50">P..</text></g><g><title>_new_argsortlike (item_selection.c:1084) (37 samples, 1.85%)</title><rect x="564" y="356" width="22" height="15" fill="rgb(228,50,32)"/><text x="567.00" y="366.50">_..</text></g><g><title>aintroselect_float (selection.c.src:380) (36 samples, 1.80%)</title><rect x="564" y="372" width="22" height="15" fill="rgb(226,101,42)"/><text x="567.00" y="382.50">a..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (5 samples, 0.25%)</title><rect x="586" y="244" width="3" height="15" fill="rgb(227,198,40)"/><text x="589.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (2 samples, 0.10%)</title><rect x="588" y="260" width="1" height="15" fill="rgb(243,68,15)"/><text x="591.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1564) (2 samples, 0.10%)</title><rect x="588" y="276" width="1" height="15" fill="rgb(241,44,43)"/><text x="591.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (514 samples, 25.71%)</title><rect x="287" y="196" width="303" height="15" fill="rgb(210,210,1)"/><text x="290.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (51 samples, 2.55%)</title><rect x="560" y="212" width="30" height="15" fill="rgb(240,74,11)"/><text x="563.00" y="222.50">_r..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (51 samples, 2.55%)</title><rect x="560" y="228" width="30" height="15" fill="rgb(250,190,44)"/><text x="563.00" y="238.50">_c..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (2 samples, 0.10%)</title><rect x="589" y="244" width="1" height="15" fill="rgb(248,4,47)"/><text x="592.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1666) (2 samples, 0.10%)</title><rect x="589" y="260" width="1" height="15" fill="rgb(240,213,44)"/><text x="592.00" y="270.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (2 samples, 0.10%)</title><rect x="593" y="356" width="1" height="15" fill="rgb(241,98,45)"/><text x="596.00" y="366.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (2 samples, 0.10%)</title><rect x="593" y="372" width="1" height="15" fill="rgb(210,101,7)"/><text x="596.00" y="382.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (2 samples, 0.10%)</title><rect x="593" y="388" width="1" height="15" fill="rgb(224,217,52)"/><text x="596.00" y="398.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (7 samples, 0.35%)</title><rect x="591" y="196" width="4" height="15" fill="rgb(239,213,19)"/><text x="594.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (7 samples, 0.35%)</title><rect x="591" y="212" width="4" height="15" fill="rgb(234,20,53)"/><text x="594.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (7 samples, 0.35%)</title><rect x="591" y="228" width="4" height="15" fill="rgb(245,34,0)"/><text x="594.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (7 samples, 0.35%)</title><rect x="591" y="244" width="4" height="15" fill="rgb(214,78,24)"/><text x="594.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.35%)</title><rect x="591" y="260" width="4" height="15" fill="rgb(206,195,48)"/><text x="594.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (7 samples, 0.35%)</title><rect x="591" y="276" width="4" height="15" fill="rgb(247,43,8)"/><text x="594.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (6 samples, 0.30%)</title><rect x="592" y="292" width="3" height="15" fill="rgb(216,69,4)"/><text x="595.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (6 samples, 0.30%)</title><rect x="592" y="308" width="3" height="15" fill="rgb(241,95,0)"/><text x="595.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.25%)</title><rect x="592" y="324" width="3" height="15" fill="rgb(237,146,1)"/><text x="595.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 0.25%)</title><rect x="592" y="340" width="3" height="15" fill="rgb(231,127,54)"/><text x="595.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (2 samples, 0.10%)</title><rect x="594" y="356" width="1" height="15" fill="rgb(212,100,6)"/><text x="597.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (2 samples, 0.10%)</title><rect x="594" y="372" width="1" height="15" fill="rgb(219,138,19)"/><text x="597.00" y="382.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:45) (713 samples, 35.67%)</title><rect x="175" y="52" width="421" height="15" fill="rgb(213,108,1)"/><text x="178.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_50..</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:44) (713 samples, 35.67%)</title><rect x="175" y="68" width="421" height="15" fill="rgb(236,171,41)"/><text x="178.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_m_cl_100..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:29) (712 samples, 35.62%)</title><rect x="175" y="84" width="421" height="15" fill="rgb(245,40,17)"/><text x="178.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_10..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:23) (526 samples, 26.31%)</title><rect x="285" y="100" width="311" height="15" fill="rgb(212,43,43)"/><text x="288.00" y="110.50">profile (bench_KNeighborsClassifier_defau..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (526 samples, 26.31%)</title><rect x="285" y="116" width="311" height="15" fill="rgb(241,205,33)"/><text x="288.00" y="126.50">time_predict (mlprodict/asv_benchmark/com..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (526 samples, 26.31%)</title><rect x="285" y="132" width="311" height="15" fill="rgb(240,84,37)"/><text x="288.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (526 samples, 26.31%)</title><rect x="285" y="148" width="311" height="15" fill="rgb(254,121,31)"/><text x="288.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:4..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (525 samples, 26.26%)</title><rect x="286" y="164" width="310" height="15" fill="rgb(252,148,30)"/><text x="289.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/o..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (523 samples, 26.16%)</title><rect x="287" y="180" width="309" height="15" fill="rgb(245,178,39)"/><text x="290.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node..</text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="600" y="436" width="2" height="15" fill="rgb(253,15,33)"/><text x="603.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.75%)</title><rect x="602" y="436" width="8" height="15" fill="rgb(218,152,43)"/><text x="605.00" y="446.50"></text></g><g><title>0x7fc53c03ed94 (libc-2.29.so) (15 samples, 0.75%)</title><rect x="602" y="452" width="8" height="15" fill="rgb(245,35,39)"/><text x="605.00" y="462.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (216 samples, 10.81%)</title><rect x="611" y="436" width="128" height="15" fill="rgb(223,92,38)"/><text x="614.00" y="446.50">onnxruntime::Red..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (201 samples, 10.06%)</title><rect x="620" y="452" width="119" height="15" fill="rgb(245,110,48)"/><text x="623.00" y="462.50">onnxruntime::P..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.50%)</title><rect x="733" y="468" width="6" height="15" fill="rgb(220,41,6)"/><text x="736.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (22 samples, 1.10%)</title><rect x="739" y="468" width="13" height="15" fill="rgb(210,161,23)"/><text x="742.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.25%)</title><rect x="749" y="484" width="3" height="15" fill="rgb(243,105,16)"/><text x="752.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (259 samples, 12.96%)</title><rect x="599" y="340" width="153" height="15" fill="rgb(220,5,14)"/><text x="602.00" y="350.50">onnxruntime::Scan&lt;9..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (259 samples, 12.96%)</title><rect x="599" y="356" width="153" height="15" fill="rgb(240,119,53)"/><text x="602.00" y="366.50">onnxruntime::ScanIm..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (259 samples, 12.96%)</title><rect x="599" y="372" width="153" height="15" fill="rgb(226,29,2)"/><text x="602.00" y="382.50">onnxruntime::scan::..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (258 samples, 12.91%)</title><rect x="600" y="388" width="152" height="15" fill="rgb(212,79,36)"/><text x="603.00" y="398.50">onnxruntime::utils:..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (258 samples, 12.91%)</title><rect x="600" y="404" width="152" height="15" fill="rgb(249,162,46)"/><text x="603.00" y="414.50">onnxruntime::utils:..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (258 samples, 12.91%)</title><rect x="600" y="420" width="152" height="15" fill="rgb(237,79,33)"/><text x="603.00" y="430.50">onnxruntime::Sequen..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 1.15%)</title><rect x="739" y="436" width="13" height="15" fill="rgb(215,5,8)"/><text x="742.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 1.15%)</title><rect x="739" y="452" width="13" height="15" fill="rgb(230,78,46)"/><text x="742.00" y="462.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.60%)</title><rect x="752" y="340" width="7" height="15" fill="rgb(222,93,0)"/><text x="755.00" y="350.50"></text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.60%)</title><rect x="752" y="356" width="7" height="15" fill="rgb(233,141,54)"/><text x="755.00" y="366.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.15%)</title><rect x="759" y="340" width="2" height="15" fill="rgb(233,138,36)"/><text x="762.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.15%)</title><rect x="759" y="356" width="2" height="15" fill="rgb(253,67,38)"/><text x="762.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (276 samples, 13.81%)</title><rect x="599" y="260" width="163" height="15" fill="rgb(250,123,34)"/><text x="602.00" y="270.50">onnxruntime::Inferenc..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (276 samples, 13.81%)</title><rect x="599" y="276" width="163" height="15" fill="rgb(217,188,5)"/><text x="602.00" y="286.50">onnxruntime::Inferenc..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (276 samples, 13.81%)</title><rect x="599" y="292" width="163" height="15" fill="rgb(211,21,11)"/><text x="602.00" y="302.50">onnxruntime::utils::E..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (276 samples, 13.81%)</title><rect x="599" y="308" width="163" height="15" fill="rgb(230,223,41)"/><text x="602.00" y="318.50">onnxruntime::utils::E..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (276 samples, 13.81%)</title><rect x="599" y="324" width="163" height="15" fill="rgb(239,13,49)"/><text x="602.00" y="334.50">onnxruntime::Sequenti..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:18) (284 samples, 14.21%)</title><rect x="596" y="100" width="167" height="15" fill="rgb(252,155,7)"/><text x="599.00" y="110.50">profile (bench_KNeigh..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (281 samples, 14.06%)</title><rect x="597" y="116" width="166" height="15" fill="rgb(232,110,26)"/><text x="600.00" y="126.50">time_predict (mlprodi..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (281 samples, 14.06%)</title><rect x="597" y="132" width="166" height="15" fill="rgb(251,162,47)"/><text x="600.00" y="142.50">&lt;lambda&gt; (mlprodict/a..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (281 samples, 14.06%)</title><rect x="597" y="148" width="166" height="15" fill="rgb(216,60,32)"/><text x="600.00" y="158.50">run (mlprodict/onnxrt..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (281 samples, 14.06%)</title><rect x="597" y="164" width="166" height="15" fill="rgb(226,222,54)"/><text x="600.00" y="174.50">_run_whole_runtime (m..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (281 samples, 14.06%)</title><rect x="597" y="180" width="166" height="15" fill="rgb(248,131,16)"/><text x="600.00" y="190.50">run (mlprodict/onnxrt..</text></g><g><title>run (onnxruntime/capi/session.py:136) (281 samples, 14.06%)</title><rect x="597" y="196" width="166" height="15" fill="rgb(211,184,6)"/><text x="600.00" y="206.50">run (onnxruntime/capi..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (280 samples, 14.01%)</title><rect x="598" y="212" width="165" height="15" fill="rgb(248,57,26)"/><text x="601.00" y="222.50">pybind11::cpp_functio..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (280 samples, 14.01%)</title><rect x="598" y="228" width="165" height="15" fill="rgb(217,97,34)"/><text x="601.00" y="238.50">void pybind11::cpp_fu..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (280 samples, 14.01%)</title><rect x="598" y="244" width="165" height="15" fill="rgb(234,111,42)"/><text x="601.00" y="254.50">onnxruntime::python::..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.15%)</title><rect x="762" y="260" width="1" height="15" fill="rgb(218,66,36)"/><text x="765.00" y="270.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="764" y="340" width="1" height="15" fill="rgb(228,134,46)"/><text x="767.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="764" y="356" width="1" height="15" fill="rgb(207,25,10)"/><text x="767.00" y="366.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="765" y="340" width="1" height="15" fill="rgb(206,106,47)"/><text x="768.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="765" y="356" width="1" height="15" fill="rgb(215,106,22)"/><text x="768.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="765" y="372" width="1" height="15" fill="rgb(240,71,46)"/><text x="768.00" y="382.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="765" y="388" width="1" height="15" fill="rgb(244,156,18)"/><text x="768.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.10%)</title><rect x="765" y="404" width="1" height="15" fill="rgb(210,149,49)"/><text x="768.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.10%)</title><rect x="765" y="420" width="1" height="15" fill="rgb(247,135,2)"/><text x="768.00" y="430.50"></text></g><g><title>0x7fc53c020028 (libc-2.29.so) (2 samples, 0.10%)</title><rect x="765" y="436" width="1" height="15" fill="rgb(243,48,37)"/><text x="768.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="768" y="436" width="1" height="15" fill="rgb(253,21,2)"/><text x="771.00" y="446.50"></text></g><g><title>onnxruntime::GraphViewer::GetNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="770" y="436" width="1" height="15" fill="rgb(253,76,51)"/><text x="773.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 1.35%)</title><rect x="772" y="436" width="16" height="15" fill="rgb(225,110,38)"/><text x="775.00" y="446.50"></text></g><g><title>0x7fc53c03ed94 (libc-2.29.so) (27 samples, 1.35%)</title><rect x="772" y="452" width="16" height="15" fill="rgb(247,119,23)"/><text x="775.00" y="462.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.15%)</title><rect x="1082" y="468" width="2" height="15" fill="rgb(211,172,37)"/><text x="1085.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (542 samples, 27.11%)</title><rect x="788" y="436" width="319" height="15" fill="rgb(250,64,14)"/><text x="791.00" y="446.50">onnxruntime::ReduceSumSquare&lt;float&gt;::Comput..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (513 samples, 25.66%)</title><rect x="805" y="452" width="302" height="15" fill="rgb(223,164,22)"/><text x="808.00" y="462.50">onnxruntime::PrepareForReduce&lt;float&gt; (on..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 1.90%)</title><rect x="1085" y="468" width="22" height="15" fill="rgb(214,127,9)"/><text x="1088.00" y="478.50">s..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (74 samples, 3.70%)</title><rect x="1107" y="468" width="44" height="15" fill="rgb(252,134,53)"/><text x="1110.00" y="478.50">onnx..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.85%)</title><rect x="1141" y="484" width="10" height="15" fill="rgb(232,225,46)"/><text x="1144.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (655 samples, 32.77%)</title><rect x="766" y="340" width="387" height="15" fill="rgb(247,105,46)"/><text x="769.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnx..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (655 samples, 32.77%)</title><rect x="766" y="356" width="387" height="15" fill="rgb(205,23,20)"/><text x="769.00" y="366.50">onnxruntime::ScanImpl::Execute (onnxruntime/capi/onn..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (654 samples, 32.72%)</title><rect x="767" y="372" width="386" height="15" fill="rgb(216,26,36)"/><text x="770.00" y="382.50">onnxruntime::scan::detail::IterateSequence (onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (653 samples, 32.67%)</title><rect x="767" y="388" width="386" height="15" fill="rgb(217,153,34)"/><text x="770.00" y="398.50">onnxruntime::utils::ExecuteSubgraph (onnxruntime/cap..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (653 samples, 32.67%)</title><rect x="767" y="404" width="386" height="15" fill="rgb(239,8,0)"/><text x="770.00" y="414.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/ca..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (653 samples, 32.67%)</title><rect x="767" y="420" width="386" height="15" fill="rgb(222,172,52)"/><text x="770.00" y="430.50">onnxruntime::SequentialExecutor::Execute (onnxruntim..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (77 samples, 3.85%)</title><rect x="1107" y="436" width="46" height="15" fill="rgb(215,130,50)"/><text x="1110.00" y="446.50">onnx..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (77 samples, 3.85%)</title><rect x="1107" y="452" width="46" height="15" fill="rgb(245,206,33)"/><text x="1110.00" y="462.50">onnx..</text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.10%)</title><rect x="1174" y="372" width="1" height="15" fill="rgb(209,127,17)"/><text x="1177.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.10%)</title><rect x="1174" y="388" width="1" height="15" fill="rgb(232,190,30)"/><text x="1177.00" y="398.50"></text></g><g><title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="1175" y="372" width="1" height="15" fill="rgb(219,204,24)"/><text x="1178.00" y="382.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (41 samples, 2.05%)</title><rect x="1153" y="340" width="24" height="15" fill="rgb(242,104,40)"/><text x="1156.00" y="350.50">o..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (41 samples, 2.05%)</title><rect x="1153" y="356" width="24" height="15" fill="rgb(217,103,15)"/><text x="1156.00" y="366.50">o..</text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.65%)</title><rect x="1177" y="340" width="8" height="15" fill="rgb(217,149,9)"/><text x="1180.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.65%)</title><rect x="1177" y="356" width="8" height="15" fill="rgb(223,179,8)"/><text x="1180.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (716 samples, 35.82%)</title><rect x="764" y="260" width="423" height="15" fill="rgb(254,117,34)"/><text x="767.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnx..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (716 samples, 35.82%)</title><rect x="764" y="276" width="423" height="15" fill="rgb(251,9,50)"/><text x="767.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnx..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (716 samples, 35.82%)</title><rect x="764" y="292" width="423" height="15" fill="rgb(225,139,17)"/><text x="767.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (716 samples, 35.82%)</title><rect x="764" y="308" width="423" height="15" fill="rgb(245,189,54)"/><text x="767.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/on..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (716 samples, 35.82%)</title><rect x="764" y="324" width="423" height="15" fill="rgb(217,14,26)"/><text x="767.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/cap..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.15%)</title><rect x="1185" y="340" width="2" height="15" fill="rgb(243,50,20)"/><text x="1188.00" y="350.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.15%)</title><rect x="1187" y="260" width="1" height="15" fill="rgb(227,143,15)"/><text x="1190.00" y="270.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:52) (1,005 samples, 50.28%)</title><rect x="596" y="52" width="593" height="15" fill="rgb(229,210,28)"/><text x="599.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:52)</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:51) (1,005 samples, 50.28%)</title><rect x="596" y="68" width="593" height="15" fill="rgb(216,80,25)"/><text x="599.00" y="78.50">profile_ort (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:51)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:29) (1,005 samples, 50.28%)</title><rect x="596" y="84" width="593" height="15" fill="rgb(242,140,41)"/><text x="599.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:29)</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py:23) (721 samples, 36.07%)</title><rect x="763" y="100" width="426" height="15" fill="rgb(251,3,6)"/><text x="766.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1000_50_1..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (720 samples, 36.02%)</title><rect x="764" y="116" width="425" height="15" fill="rgb(227,58,3)"/><text x="767.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:18..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (720 samples, 36.02%)</title><rect x="764" y="132" width="425" height="15" fill="rgb(250,174,19)"/><text x="767.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (720 samples, 36.02%)</title><rect x="764" y="148" width="425" height="15" fill="rgb(251,59,54)"/><text x="767.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (720 samples, 36.02%)</title><rect x="764" y="164" width="425" height="15" fill="rgb(241,170,24)"/><text x="767.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (720 samples, 36.02%)</title><rect x="764" y="180" width="425" height="15" fill="rgb(221,154,28)"/><text x="767.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (720 samples, 36.02%)</title><rect x="764" y="196" width="425" height="15" fill="rgb(224,187,47)"/><text x="767.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (720 samples, 36.02%)</title><rect x="764" y="212" width="425" height="15" fill="rgb(253,90,54)"/><text x="767.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxr..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (720 samples, 36.02%)</title><rect x="764" y="228" width="425" height="15" fill="rgb(219,158,54)"/><text x="767.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::pytho..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (720 samples, 36.02%)</title><rect x="764" y="244" width="425" height="15" fill="rgb(221,24,26)"/><text x="767.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::..</text></g><g><title>all (1,999 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(227,136,13)"/><text x="13.00" y="46.50"></text></g></g></svg>