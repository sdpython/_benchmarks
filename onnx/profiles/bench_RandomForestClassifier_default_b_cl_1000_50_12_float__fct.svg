<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1478" onload="init(evt)" viewBox="0 0 1200 1478" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1478" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1461.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1461.00"> </text><g id="frames"><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.17%)</title><rect x="10" y="932" width="2" height="15" fill="rgb(226,190,30)"/><text x="13.00" y="942.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.17%)</title><rect x="10" y="948" width="2" height="15" fill="rgb(211,90,50)"/><text x="13.00" y="958.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.17%)</title><rect x="10" y="964" width="2" height="15" fill="rgb(238,135,46)"/><text x="13.00" y="974.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.17%)</title><rect x="10" y="980" width="2" height="15" fill="rgb(246,72,16)"/><text x="13.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.17%)</title><rect x="10" y="996" width="2" height="15" fill="rgb(209,148,24)"/><text x="13.00" y="1006.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.35%)</title><rect x="10" y="836" width="4" height="15" fill="rgb(249,130,36)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.35%)</title><rect x="10" y="852" width="4" height="15" fill="rgb(241,163,21)"/><text x="13.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (2 samples, 0.35%)</title><rect x="10" y="868" width="4" height="15" fill="rgb(251,218,1)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (2 samples, 0.35%)</title><rect x="10" y="884" width="4" height="15" fill="rgb(227,49,8)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.35%)</title><rect x="10" y="900" width="4" height="15" fill="rgb(252,193,5)"/><text x="13.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.35%)</title><rect x="10" y="916" width="4" height="15" fill="rgb(242,138,0)"/><text x="13.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.17%)</title><rect x="12" y="932" width="2" height="15" fill="rgb(253,225,45)"/><text x="15.00" y="942.50"></text></g><g><title>isdir (genericpath.py) (1 samples, 0.17%)</title><rect x="12" y="948" width="2" height="15" fill="rgb(205,104,14)"/><text x="15.00" y="958.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.17%)</title><rect x="12" y="964" width="2" height="15" fill="rgb(232,193,36)"/><text x="15.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="196" width="6" height="15" fill="rgb(233,132,19)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="212" width="6" height="15" fill="rgb(226,97,28)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="228" width="6" height="15" fill="rgb(226,161,29)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="244" width="6" height="15" fill="rgb(239,222,16)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.52%)</title><rect x="10" y="260" width="6" height="15" fill="rgb(242,160,24)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="276" width="6" height="15" fill="rgb(223,44,4)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (3 samples, 0.52%)</title><rect x="10" y="292" width="6" height="15" fill="rgb(246,16,33)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="308" width="6" height="15" fill="rgb(247,103,54)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="324" width="6" height="15" fill="rgb(211,190,40)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="340" width="6" height="15" fill="rgb(211,202,47)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.52%)</title><rect x="10" y="356" width="6" height="15" fill="rgb(232,23,41)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="372" width="6" height="15" fill="rgb(249,115,51)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (3 samples, 0.52%)</title><rect x="10" y="388" width="6" height="15" fill="rgb(205,180,47)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="404" width="6" height="15" fill="rgb(233,178,28)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="420" width="6" height="15" fill="rgb(239,5,23)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="436" width="6" height="15" fill="rgb(230,59,15)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.52%)</title><rect x="10" y="452" width="6" height="15" fill="rgb(231,139,49)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="468" width="6" height="15" fill="rgb(240,80,27)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (3 samples, 0.52%)</title><rect x="10" y="484" width="6" height="15" fill="rgb(227,176,45)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="500" width="6" height="15" fill="rgb(226,199,19)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="516" width="6" height="15" fill="rgb(224,135,13)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="532" width="6" height="15" fill="rgb(223,28,22)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.52%)</title><rect x="10" y="548" width="6" height="15" fill="rgb(239,161,32)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="564" width="6" height="15" fill="rgb(253,6,30)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (3 samples, 0.52%)</title><rect x="10" y="580" width="6" height="15" fill="rgb(229,161,12)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="596" width="6" height="15" fill="rgb(217,194,44)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="612" width="6" height="15" fill="rgb(238,151,11)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="628" width="6" height="15" fill="rgb(244,35,39)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="644" width="6" height="15" fill="rgb(239,221,47)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="660" width="6" height="15" fill="rgb(241,201,47)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="676" width="6" height="15" fill="rgb(247,141,13)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.52%)</title><rect x="10" y="692" width="6" height="15" fill="rgb(215,36,17)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="708" width="6" height="15" fill="rgb(220,24,29)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (3 samples, 0.52%)</title><rect x="10" y="724" width="6" height="15" fill="rgb(235,169,28)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="740" width="6" height="15" fill="rgb(221,91,43)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="756" width="6" height="15" fill="rgb(246,36,48)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="772" width="6" height="15" fill="rgb(220,17,40)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.52%)</title><rect x="10" y="788" width="6" height="15" fill="rgb(237,42,3)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="10" y="804" width="6" height="15" fill="rgb(244,79,0)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (3 samples, 0.52%)</title><rect x="10" y="820" width="6" height="15" fill="rgb(252,73,8)"/><text x="13.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="836" width="2" height="15" fill="rgb(219,93,51)"/><text x="17.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="852" width="2" height="15" fill="rgb(233,63,9)"/><text x="17.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="868" width="2" height="15" fill="rgb(226,67,28)"/><text x="17.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="884" width="2" height="15" fill="rgb(218,126,18)"/><text x="17.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="900" width="2" height="15" fill="rgb(240,211,7)"/><text x="17.00" y="910.50"></text></g><g><title>&lt;module&gt; (email/parser.py) (1 samples, 0.17%)</title><rect x="14" y="916" width="2" height="15" fill="rgb(249,77,20)"/><text x="17.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="932" width="2" height="15" fill="rgb(248,6,14)"/><text x="17.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="948" width="2" height="15" fill="rgb(217,205,42)"/><text x="17.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="964" width="2" height="15" fill="rgb(242,5,8)"/><text x="17.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="980" width="2" height="15" fill="rgb(249,198,7)"/><text x="17.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="996" width="2" height="15" fill="rgb(252,179,34)"/><text x="17.00" y="1006.50"></text></g><g><title>&lt;module&gt; (email/feedparser.py) (1 samples, 0.17%)</title><rect x="14" y="1012" width="2" height="15" fill="rgb(249,102,43)"/><text x="17.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1028" width="2" height="15" fill="rgb(220,40,54)"/><text x="17.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1044" width="2" height="15" fill="rgb(254,38,11)"/><text x="17.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1060" width="2" height="15" fill="rgb(205,159,46)"/><text x="17.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="1076" width="2" height="15" fill="rgb(242,152,35)"/><text x="17.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1092" width="2" height="15" fill="rgb(207,154,29)"/><text x="17.00" y="1102.50"></text></g><g><title>&lt;module&gt; (email/_policybase.py) (1 samples, 0.17%)</title><rect x="14" y="1108" width="2" height="15" fill="rgb(225,24,3)"/><text x="17.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1124" width="2" height="15" fill="rgb(253,220,29)"/><text x="17.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1140" width="2" height="15" fill="rgb(236,163,40)"/><text x="17.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1156" width="2" height="15" fill="rgb(212,59,16)"/><text x="17.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1172" width="2" height="15" fill="rgb(218,19,6)"/><text x="17.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1188" width="2" height="15" fill="rgb(214,111,48)"/><text x="17.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="1204" width="2" height="15" fill="rgb(242,36,0)"/><text x="17.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1220" width="2" height="15" fill="rgb(211,43,12)"/><text x="17.00" y="1230.50"></text></g><g><title>&lt;module&gt; (email/header.py) (1 samples, 0.17%)</title><rect x="14" y="1236" width="2" height="15" fill="rgb(206,208,9)"/><text x="17.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1252" width="2" height="15" fill="rgb(219,228,15)"/><text x="17.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1268" width="2" height="15" fill="rgb(225,52,30)"/><text x="17.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1284" width="2" height="15" fill="rgb(240,142,25)"/><text x="17.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1300" width="2" height="15" fill="rgb(244,54,38)"/><text x="17.00" y="1310.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="14" y="1316" width="2" height="15" fill="rgb(254,7,19)"/><text x="17.00" y="1326.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="1332" width="2" height="15" fill="rgb(238,145,30)"/><text x="17.00" y="1342.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="1348" width="2" height="15" fill="rgb(218,41,53)"/><text x="17.00" y="1358.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="1364" width="2" height="15" fill="rgb(242,97,49)"/><text x="17.00" y="1374.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="1380" width="2" height="15" fill="rgb(212,160,37)"/><text x="17.00" y="1390.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="1396" width="2" height="15" fill="rgb(226,33,45)"/><text x="17.00" y="1406.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="14" y="1412" width="2" height="15" fill="rgb(205,134,31)"/><text x="17.00" y="1422.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.17%)</title><rect x="14" y="1428" width="2" height="15" fill="rgb(218,173,27)"/><text x="17.00" y="1438.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.17%)</title><rect x="16" y="340" width="2" height="15" fill="rgb(213,149,42)"/><text x="19.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="356" width="2" height="15" fill="rgb(224,125,5)"/><text x="19.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="372" width="2" height="15" fill="rgb(245,181,48)"/><text x="19.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="388" width="2" height="15" fill="rgb(211,157,19)"/><text x="19.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="404" width="2" height="15" fill="rgb(242,171,44)"/><text x="19.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="420" width="2" height="15" fill="rgb(208,208,54)"/><text x="19.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (1 samples, 0.17%)</title><rect x="16" y="436" width="2" height="15" fill="rgb(249,113,43)"/><text x="19.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="452" width="2" height="15" fill="rgb(207,151,13)"/><text x="19.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="468" width="2" height="15" fill="rgb(239,35,14)"/><text x="19.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="484" width="2" height="15" fill="rgb(208,35,53)"/><text x="19.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="500" width="2" height="15" fill="rgb(240,177,27)"/><text x="19.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="516" width="2" height="15" fill="rgb(239,147,45)"/><text x="19.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.17%)</title><rect x="16" y="532" width="2" height="15" fill="rgb(228,134,25)"/><text x="19.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="548" width="2" height="15" fill="rgb(220,17,43)"/><text x="19.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="564" width="2" height="15" fill="rgb(234,179,27)"/><text x="19.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="580" width="2" height="15" fill="rgb(227,25,48)"/><text x="19.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="596" width="2" height="15" fill="rgb(229,87,9)"/><text x="19.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="612" width="2" height="15" fill="rgb(222,59,8)"/><text x="19.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (1 samples, 0.17%)</title><rect x="16" y="628" width="2" height="15" fill="rgb(248,93,4)"/><text x="19.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="644" width="2" height="15" fill="rgb(230,15,41)"/><text x="19.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="660" width="2" height="15" fill="rgb(228,93,52)"/><text x="19.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="676" width="2" height="15" fill="rgb(239,63,46)"/><text x="19.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="692" width="2" height="15" fill="rgb(251,12,16)"/><text x="19.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="708" width="2" height="15" fill="rgb(234,8,52)"/><text x="19.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/__init__.py) (1 samples, 0.17%)</title><rect x="16" y="724" width="2" height="15" fill="rgb(254,172,6)"/><text x="19.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="740" width="2" height="15" fill="rgb(209,108,44)"/><text x="19.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="756" width="2" height="15" fill="rgb(205,227,25)"/><text x="19.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="772" width="2" height="15" fill="rgb(252,160,2)"/><text x="19.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="788" width="2" height="15" fill="rgb(217,51,45)"/><text x="19.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="804" width="2" height="15" fill="rgb(208,220,39)"/><text x="19.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/tslibs/__init__.py) (1 samples, 0.17%)</title><rect x="16" y="820" width="2" height="15" fill="rgb(214,222,7)"/><text x="19.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="836" width="2" height="15" fill="rgb(232,99,6)"/><text x="19.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="852" width="2" height="15" fill="rgb(241,27,42)"/><text x="19.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="868" width="2" height="15" fill="rgb(218,226,50)"/><text x="19.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="884" width="2" height="15" fill="rgb(239,74,31)"/><text x="19.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="900" width="2" height="15" fill="rgb(246,127,37)"/><text x="19.00" y="910.50"></text></g><g><title>0x7f367c05940e (?) (1 samples, 0.17%)</title><rect x="16" y="916" width="2" height="15" fill="rgb(254,188,47)"/><text x="19.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="932" width="2" height="15" fill="rgb(213,50,16)"/><text x="19.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="948" width="2" height="15" fill="rgb(241,99,49)"/><text x="19.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="964" width="2" height="15" fill="rgb(232,127,26)"/><text x="19.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="980" width="2" height="15" fill="rgb(211,44,5)"/><text x="19.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="996" width="2" height="15" fill="rgb(226,38,28)"/><text x="19.00" y="1006.50"></text></g><g><title>0x7f367be12bb0 (?) (1 samples, 0.17%)</title><rect x="16" y="1012" width="2" height="15" fill="rgb(214,68,30)"/><text x="19.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1028" width="2" height="15" fill="rgb(222,145,21)"/><text x="19.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1044" width="2" height="15" fill="rgb(219,62,33)"/><text x="19.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1060" width="2" height="15" fill="rgb(225,168,6)"/><text x="19.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="1076" width="2" height="15" fill="rgb(221,212,2)"/><text x="19.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1092" width="2" height="15" fill="rgb(237,201,53)"/><text x="19.00" y="1102.50"></text></g><g><title>0x7f367b799e18 (?) (1 samples, 0.17%)</title><rect x="16" y="1108" width="2" height="15" fill="rgb(223,4,11)"/><text x="19.00" y="1118.50"></text></g><g><title>0x7f367b79c28a (?) (1 samples, 0.17%)</title><rect x="16" y="1124" width="2" height="15" fill="rgb(233,25,38)"/><text x="19.00" y="1134.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1140" width="2" height="15" fill="rgb(248,53,43)"/><text x="19.00" y="1150.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1156" width="2" height="15" fill="rgb(217,153,5)"/><text x="19.00" y="1166.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1172" width="2" height="15" fill="rgb(219,216,6)"/><text x="19.00" y="1182.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="1188" width="2" height="15" fill="rgb(230,25,7)"/><text x="19.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1204" width="2" height="15" fill="rgb(209,134,1)"/><text x="19.00" y="1214.50"></text></g><g><title>&lt;module&gt; (dateutil/tz/__init__.py) (1 samples, 0.17%)</title><rect x="16" y="1220" width="2" height="15" fill="rgb(225,228,20)"/><text x="19.00" y="1230.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1236" width="2" height="15" fill="rgb(229,192,3)"/><text x="19.00" y="1246.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1252" width="2" height="15" fill="rgb(230,63,29)"/><text x="19.00" y="1262.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1268" width="2" height="15" fill="rgb(219,187,20)"/><text x="19.00" y="1278.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="16" y="1284" width="2" height="15" fill="rgb(250,52,3)"/><text x="19.00" y="1294.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1300" width="2" height="15" fill="rgb(244,92,24)"/><text x="19.00" y="1310.50"></text></g><g><title>&lt;module&gt; (dateutil/tz/tz.py) (1 samples, 0.17%)</title><rect x="16" y="1316" width="2" height="15" fill="rgb(238,65,27)"/><text x="19.00" y="1326.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="16" y="1332" width="2" height="15" fill="rgb(206,37,37)"/><text x="19.00" y="1342.50"></text></g><g><title>lock_dealloc (python3.7) (1 samples, 0.17%)</title><rect x="16" y="1348" width="2" height="15" fill="rgb(240,84,27)"/><text x="19.00" y="1358.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (2 samples, 0.35%)</title><rect x="16" y="244" width="4" height="15" fill="rgb(248,5,54)"/><text x="19.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.35%)</title><rect x="16" y="260" width="4" height="15" fill="rgb(232,39,36)"/><text x="19.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.35%)</title><rect x="16" y="276" width="4" height="15" fill="rgb(239,194,5)"/><text x="19.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.35%)</title><rect x="16" y="292" width="4" height="15" fill="rgb(244,213,1)"/><text x="19.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.35%)</title><rect x="16" y="308" width="4" height="15" fill="rgb(217,178,34)"/><text x="19.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.35%)</title><rect x="16" y="324" width="4" height="15" fill="rgb(231,103,5)"/><text x="19.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (1 samples, 0.17%)</title><rect x="18" y="340" width="2" height="15" fill="rgb(222,126,37)"/><text x="21.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="356" width="2" height="15" fill="rgb(239,54,26)"/><text x="21.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="372" width="2" height="15" fill="rgb(230,23,20)"/><text x="21.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="388" width="2" height="15" fill="rgb(218,158,3)"/><text x="21.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="404" width="2" height="15" fill="rgb(230,156,29)"/><text x="21.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="420" width="2" height="15" fill="rgb(217,1,39)"/><text x="21.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="436" width="2" height="15" fill="rgb(239,42,46)"/><text x="21.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="452" width="2" height="15" fill="rgb(237,115,11)"/><text x="21.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="468" width="2" height="15" fill="rgb(219,68,12)"/><text x="21.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (1 samples, 0.17%)</title><rect x="18" y="484" width="2" height="15" fill="rgb(231,21,29)"/><text x="21.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="500" width="2" height="15" fill="rgb(250,189,43)"/><text x="21.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="516" width="2" height="15" fill="rgb(241,185,37)"/><text x="21.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="532" width="2" height="15" fill="rgb(246,61,8)"/><text x="21.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="548" width="2" height="15" fill="rgb(207,148,26)"/><text x="21.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="564" width="2" height="15" fill="rgb(219,163,31)"/><text x="21.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py) (1 samples, 0.17%)</title><rect x="18" y="580" width="2" height="15" fill="rgb(224,124,14)"/><text x="21.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="596" width="2" height="15" fill="rgb(212,134,45)"/><text x="21.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="612" width="2" height="15" fill="rgb(209,152,41)"/><text x="21.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="628" width="2" height="15" fill="rgb(205,206,51)"/><text x="21.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="644" width="2" height="15" fill="rgb(227,190,16)"/><text x="21.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="660" width="2" height="15" fill="rgb(245,184,39)"/><text x="21.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py) (1 samples, 0.17%)</title><rect x="18" y="676" width="2" height="15" fill="rgb(213,215,21)"/><text x="21.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="692" width="2" height="15" fill="rgb(216,108,3)"/><text x="21.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="708" width="2" height="15" fill="rgb(227,130,11)"/><text x="21.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="724" width="2" height="15" fill="rgb(229,109,19)"/><text x="21.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="740" width="2" height="15" fill="rgb(216,53,47)"/><text x="21.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="756" width="2" height="15" fill="rgb(244,98,36)"/><text x="21.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py) (1 samples, 0.17%)</title><rect x="18" y="772" width="2" height="15" fill="rgb(240,210,15)"/><text x="21.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="788" width="2" height="15" fill="rgb(228,41,51)"/><text x="21.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="804" width="2" height="15" fill="rgb(207,28,12)"/><text x="21.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="820" width="2" height="15" fill="rgb(254,163,47)"/><text x="21.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="836" width="2" height="15" fill="rgb(223,202,31)"/><text x="21.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="852" width="2" height="15" fill="rgb(231,74,50)"/><text x="21.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="868" width="2" height="15" fill="rgb(246,189,27)"/><text x="21.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="884" width="2" height="15" fill="rgb(249,197,15)"/><text x="21.00" y="894.50"></text></g><g><title>&lt;module&gt; (urllib3/contrib/pyopenssl.py) (1 samples, 0.17%)</title><rect x="18" y="900" width="2" height="15" fill="rgb(222,100,45)"/><text x="21.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="916" width="2" height="15" fill="rgb(218,209,13)"/><text x="21.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="932" width="2" height="15" fill="rgb(227,223,1)"/><text x="21.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="948" width="2" height="15" fill="rgb(215,130,3)"/><text x="21.00" y="958.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="964" width="2" height="15" fill="rgb(248,38,24)"/><text x="21.00" y="974.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="980" width="2" height="15" fill="rgb(251,168,35)"/><text x="21.00" y="990.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="996" width="2" height="15" fill="rgb(215,144,33)"/><text x="21.00" y="1006.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="1012" width="2" height="15" fill="rgb(207,103,15)"/><text x="21.00" y="1022.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="1028" width="2" height="15" fill="rgb(237,6,23)"/><text x="21.00" y="1038.50"></text></g><g><title>&lt;module&gt; (OpenSSL/__init__.py) (1 samples, 0.17%)</title><rect x="18" y="1044" width="2" height="15" fill="rgb(207,204,44)"/><text x="21.00" y="1054.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="1060" width="2" height="15" fill="rgb(206,108,43)"/><text x="21.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="1076" width="2" height="15" fill="rgb(245,56,5)"/><text x="21.00" y="1086.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="1092" width="2" height="15" fill="rgb(239,164,48)"/><text x="21.00" y="1102.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="1108" width="2" height="15" fill="rgb(241,14,28)"/><text x="21.00" y="1118.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="18" y="1124" width="2" height="15" fill="rgb(205,123,1)"/><text x="21.00" y="1134.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="1140" width="2" height="15" fill="rgb(235,5,44)"/><text x="21.00" y="1150.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="1156" width="2" height="15" fill="rgb(230,141,25)"/><text x="21.00" y="1166.50"></text></g><g><title>cache_from_source (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="18" y="1172" width="2" height="15" fill="rgb(224,183,3)"/><text x="21.00" y="1182.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.04%)</title><rect x="10" y="68" width="12" height="15" fill="rgb(227,100,16)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.04%)</title><rect x="10" y="84" width="12" height="15" fill="rgb(208,24,19)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.04%)</title><rect x="10" y="100" width="12" height="15" fill="rgb(208,91,3)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.04%)</title><rect x="10" y="116" width="12" height="15" fill="rgb(228,152,27)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.04%)</title><rect x="10" y="132" width="12" height="15" fill="rgb(214,215,21)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py) (6 samples, 1.04%)</title><rect x="10" y="148" width="12" height="15" fill="rgb(224,199,16)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.04%)</title><rect x="10" y="164" width="12" height="15" fill="rgb(248,112,35)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.04%)</title><rect x="10" y="180" width="12" height="15" fill="rgb(248,86,14)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="16" y="196" width="6" height="15" fill="rgb(252,137,23)"/><text x="19.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.52%)</title><rect x="16" y="212" width="6" height="15" fill="rgb(212,140,5)"/><text x="19.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.52%)</title><rect x="16" y="228" width="6" height="15" fill="rgb(254,156,18)"/><text x="19.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (1 samples, 0.17%)</title><rect x="20" y="244" width="2" height="15" fill="rgb(252,37,23)"/><text x="23.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="260" width="2" height="15" fill="rgb(250,149,15)"/><text x="23.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="276" width="2" height="15" fill="rgb(208,87,17)"/><text x="23.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="292" width="2" height="15" fill="rgb(217,123,39)"/><text x="23.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="20" y="308" width="2" height="15" fill="rgb(243,2,12)"/><text x="23.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="324" width="2" height="15" fill="rgb(252,37,26)"/><text x="23.00" y="334.50"></text></g><g><title>&lt;module&gt; (numpy/testing/__init__.py) (1 samples, 0.17%)</title><rect x="20" y="340" width="2" height="15" fill="rgb(221,177,12)"/><text x="23.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="356" width="2" height="15" fill="rgb(250,84,27)"/><text x="23.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="372" width="2" height="15" fill="rgb(239,108,7)"/><text x="23.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="388" width="2" height="15" fill="rgb(228,156,32)"/><text x="23.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="20" y="404" width="2" height="15" fill="rgb(249,215,35)"/><text x="23.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="420" width="2" height="15" fill="rgb(215,194,3)"/><text x="23.00" y="430.50"></text></g><g><title>&lt;module&gt; (unittest/__init__.py) (1 samples, 0.17%)</title><rect x="20" y="436" width="2" height="15" fill="rgb(241,127,32)"/><text x="23.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="452" width="2" height="15" fill="rgb(247,87,42)"/><text x="23.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="468" width="2" height="15" fill="rgb(234,55,18)"/><text x="23.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="484" width="2" height="15" fill="rgb(205,3,12)"/><text x="23.00" y="494.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="500" width="2" height="15" fill="rgb(218,84,28)"/><text x="23.00" y="510.50"></text></g><g><title>_init_module_attrs (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="516" width="2" height="15" fill="rgb(254,72,49)"/><text x="23.00" y="526.50"></text></g><g><title>cached (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="20" y="532" width="2" height="15" fill="rgb(215,14,11)"/><text x="23.00" y="542.50"></text></g><g><title>_get_cached (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="20" y="548" width="2" height="15" fill="rgb(207,68,32)"/><text x="23.00" y="558.50"></text></g><g><title>cache_from_source (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="20" y="564" width="2" height="15" fill="rgb(249,4,39)"/><text x="23.00" y="574.50"></text></g><g><title>_path_join (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="20" y="580" width="2" height="15" fill="rgb(225,125,35)"/><text x="23.00" y="590.50"></text></g><g><title>&lt;listcomp&gt; (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="20" y="596" width="2" height="15" fill="rgb(240,94,19)"/><text x="23.00" y="606.50"></text></g><g><title>unicode_rstrip (python3.7) (1 samples, 0.17%)</title><rect x="20" y="612" width="2" height="15" fill="rgb(235,81,8)"/><text x="23.00" y="622.50"></text></g><g><title>0x7f3666ae6ff9 (?) (1 samples, 0.17%)</title><rect x="28" y="212" width="2" height="15" fill="rgb(245,203,41)"/><text x="31.00" y="222.50"></text></g><g><title>0x7f3666ae1ef6 (?) (1 samples, 0.17%)</title><rect x="28" y="228" width="2" height="15" fill="rgb(207,188,15)"/><text x="31.00" y="238.50"></text></g><g><title>0x7f3666ad6962 (?) (1 samples, 0.17%)</title><rect x="28" y="244" width="2" height="15" fill="rgb(210,89,18)"/><text x="31.00" y="254.50"></text></g><g><title>0x7f3666b0a7a7 (?) (1 samples, 0.17%)</title><rect x="28" y="260" width="2" height="15" fill="rgb(228,125,0)"/><text x="31.00" y="270.50"></text></g><g><title>0x7f3666b0a379 (?) (1 samples, 0.17%)</title><rect x="28" y="276" width="2" height="15" fill="rgb(226,79,48)"/><text x="31.00" y="286.50"></text></g><g><title>0x7f3666f688b8 (?) (1 samples, 0.17%)</title><rect x="28" y="292" width="2" height="15" fill="rgb(215,221,26)"/><text x="31.00" y="302.50"></text></g><g><title>0x7f3666f66c7f (?) (1 samples, 0.17%)</title><rect x="28" y="308" width="2" height="15" fill="rgb(249,172,53)"/><text x="31.00" y="318.50"></text></g><g><title>0x7f3666f7999c (?) (1 samples, 0.17%)</title><rect x="28" y="324" width="2" height="15" fill="rgb(236,56,46)"/><text x="31.00" y="334.50"></text></g><g><title>0x7f3666c9719e (?) (1 samples, 0.17%)</title><rect x="28" y="340" width="2" height="15" fill="rgb(207,70,46)"/><text x="31.00" y="350.50"></text></g><g><title>0x7f3666c93fd3 (?) (1 samples, 0.17%)</title><rect x="28" y="356" width="2" height="15" fill="rgb(245,21,25)"/><text x="31.00" y="366.50"></text></g><g><title>onnxruntime::Tensor::MutableData&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="34" y="356" width="2" height="15" fill="rgb(237,185,11)"/><text x="37.00" y="366.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (160 samples, 27.63%)</title><rect x="36" y="356" width="326" height="15" fill="rgb(229,182,42)"/><text x="39.00" y="366.50">onnxruntime::ml::TreeEnsembleClassifier&lt;floa..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (164 samples, 28.32%)</title><rect x="30" y="340" width="334" height="15" fill="rgb(216,76,32)"/><text x="33.00" y="350.50">onnxruntime::ml::TreeEnsembleClassifier&lt;float..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="362" y="356" width="2" height="15" fill="rgb(219,170,41)"/><text x="365.00" y="366.50"></text></g><g><title>0x7f36a6b2892c (libc-2.29.so) (1 samples, 0.17%)</title><rect x="362" y="372" width="2" height="15" fill="rgb(213,40,1)"/><text x="365.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 28.67%)</title><rect x="30" y="260" width="338" height="15" fill="rgb(228,66,3)"/><text x="33.00" y="270.50">onnxruntime::InferenceSession::Run (onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 28.67%)</title><rect x="30" y="276" width="338" height="15" fill="rgb(251,121,48)"/><text x="33.00" y="286.50">onnxruntime::InferenceSession::Run (onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 28.67%)</title><rect x="30" y="292" width="338" height="15" fill="rgb(236,184,53)"/><text x="33.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 28.67%)</title><rect x="30" y="308" width="338" height="15" fill="rgb(235,228,45)"/><text x="33.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 28.67%)</title><rect x="30" y="324" width="338" height="15" fill="rgb(219,190,46)"/><text x="33.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onn..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.35%)</title><rect x="364" y="340" width="4" height="15" fill="rgb(225,195,34)"/><text x="367.00" y="350.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (2 samples, 0.35%)</title><rect x="364" y="356" width="4" height="15" fill="rgb(231,104,28)"/><text x="367.00" y="366.50"></text></g><g><title>profile_ort (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (172 samples, 29.71%)</title><rect x="22" y="68" width="350" height="15" fill="rgb(249,66,15)"/><text x="25.00" y="78.50">profile_ort (bench_RandomForestClassifier_defau..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (172 samples, 29.71%)</title><rect x="22" y="84" width="350" height="15" fill="rgb(209,189,20)"/><text x="25.00" y="94.50">setup_profile (bench_RandomForestClassifier_def..</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (172 samples, 29.71%)</title><rect x="22" y="100" width="350" height="15" fill="rgb(234,138,18)"/><text x="25.00" y="110.50">profile (bench_RandomForestClassifier_default_b..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (169 samples, 29.19%)</title><rect x="28" y="116" width="344" height="15" fill="rgb(230,200,48)"/><text x="31.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_a..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (169 samples, 29.19%)</title><rect x="28" y="132" width="344" height="15" fill="rgb(240,35,52)"/><text x="31.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (169 samples, 29.19%)</title><rect x="28" y="148" width="344" height="15" fill="rgb(254,122,45)"/><text x="31.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (169 samples, 29.19%)</title><rect x="28" y="164" width="344" height="15" fill="rgb(209,176,40)"/><text x="31.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infe..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (169 samples, 29.19%)</title><rect x="28" y="180" width="344" height="15" fill="rgb(205,77,29)"/><text x="31.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (169 samples, 29.19%)</title><rect x="28" y="196" width="344" height="15" fill="rgb(224,121,31)"/><text x="31.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 29.02%)</title><rect x="30" y="212" width="342" height="15" fill="rgb(253,83,45)"/><text x="33.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntim..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 29.02%)</title><rect x="30" y="228" width="342" height="15" fill="rgb(215,44,52)"/><text x="33.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxru..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 29.02%)</title><rect x="30" y="244" width="342" height="15" fill="rgb(228,205,24)"/><text x="33.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.35%)</title><rect x="368" y="260" width="4" height="15" fill="rgb(212,107,9)"/><text x="371.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="370" y="276" width="2" height="15" fill="rgb(250,101,22)"/><text x="373.00" y="286.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.17%)</title><rect x="372" y="180" width="2" height="15" fill="rgb(217,161,22)"/><text x="375.00" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (1 samples, 0.17%)</title><rect x="376" y="212" width="2" height="15" fill="rgb(243,31,52)"/><text x="379.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (1 samples, 0.17%)</title><rect x="376" y="228" width="2" height="15" fill="rgb(251,138,54)"/><text x="379.00" y="238.50"></text></g><g><title>array_astype (methods.c) (1 samples, 0.17%)</title><rect x="376" y="244" width="2" height="15" fill="rgb(242,191,21)"/><text x="379.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.17%)</title><rect x="376" y="260" width="2" height="15" fill="rgb(237,20,36)"/><text x="379.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.17%)</title><rect x="376" y="276" width="2" height="15" fill="rgb(206,152,2)"/><text x="379.00" y="286.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="376" y="292" width="2" height="15" fill="rgb(233,148,49)"/><text x="379.00" y="302.50"></text></g><g><title>0x7f36677c6422 (?) (1 samples, 0.17%)</title><rect x="378" y="244" width="2" height="15" fill="rgb(218,141,36)"/><text x="381.00" y="254.50"></text></g><g><title>0x7f36677cc89e (?) (1 samples, 0.17%)</title><rect x="378" y="260" width="2" height="15" fill="rgb(209,9,40)"/><text x="381.00" y="270.50"></text></g><g><title>0x7f36677cc74f (?) (1 samples, 0.17%)</title><rect x="378" y="276" width="2" height="15" fill="rgb(231,226,6)"/><text x="381.00" y="286.50"></text></g><g><title>0x7f36677d2a3a (?) (1 samples, 0.17%)</title><rect x="378" y="292" width="2" height="15" fill="rgb(222,107,40)"/><text x="381.00" y="302.50"></text></g><g><title>0x7f3670ae4cff (?) (1 samples, 0.17%)</title><rect x="378" y="308" width="2" height="15" fill="rgb(207,229,15)"/><text x="381.00" y="318.50"></text></g><g><title>0x7f36677cd78c (?) (1 samples, 0.17%)</title><rect x="378" y="324" width="2" height="15" fill="rgb(221,11,21)"/><text x="381.00" y="334.50"></text></g><g><title>0x7f36677b95fa (?) (1 samples, 0.17%)</title><rect x="378" y="340" width="2" height="15" fill="rgb(252,191,32)"/><text x="381.00" y="350.50"></text></g><g><title>0x7f3670aeddaa (libgomp.so.1.0.0) (1 samples, 0.17%)</title><rect x="380" y="468" width="2" height="15" fill="rgb(245,61,35)"/><text x="383.00" y="478.50"></text></g><g><title>0x7f3670aefcfd (libgomp.so.1.0.0) (1 samples, 0.17%)</title><rect x="380" y="484" width="2" height="15" fill="rgb(220,201,44)"/><text x="383.00" y="494.50"></text></g><g><title>std::isnan (cmath) (1 samples, 0.17%)</title><rect x="425" y="500" width="2" height="15" fill="rgb(207,160,48)"/><text x="428.00" y="510.50"></text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h) (22 samples, 3.80%)</title><rect x="427" y="500" width="45" height="15" fill="rgb(222,178,49)"/><text x="430.00" y="510.50">std:..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h) (22 samples, 3.80%)</title><rect x="427" y="516" width="45" height="15" fill="rgb(215,137,24)"/><text x="430.00" y="526.50">std:..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h) (21 samples, 3.63%)</title><rect x="429" y="532" width="43" height="15" fill="rgb(244,6,54)"/><text x="432.00" y="542.50">std:..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator[] (stl_vector.h) (1 samples, 0.17%)</title><rect x="472" y="500" width="2" height="15" fill="rgb(218,132,52)"/><text x="475.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (46 samples, 7.94%)</title><rect x="382" y="484" width="94" height="15" fill="rgb(220,85,39)"/><text x="385.00" y="494.50">RuntimeTree..</text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::operator[] (stl_vector.h) (1 samples, 0.17%)</title><rect x="474" y="500" width="2" height="15" fill="rgb(253,20,46)"/><text x="477.00" y="510.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (52 samples, 8.98%)</title><rect x="372" y="100" width="106" height="15" fill="rgb(213,179,31)"/><text x="375.00" y="110.50">profile (ben..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (52 samples, 8.98%)</title><rect x="372" y="116" width="106" height="15" fill="rgb(229,4,27)"/><text x="375.00" y="126.50">time_predict..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (52 samples, 8.98%)</title><rect x="372" y="132" width="106" height="15" fill="rgb(232,150,12)"/><text x="375.00" y="142.50">&lt;lambda&gt; (ml..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (52 samples, 8.98%)</title><rect x="372" y="148" width="106" height="15" fill="rgb(211,178,16)"/><text x="375.00" y="158.50">run (mlprodi..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (52 samples, 8.98%)</title><rect x="372" y="164" width="106" height="15" fill="rgb(251,91,7)"/><text x="375.00" y="174.50">_run_sequenc..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (51 samples, 8.81%)</title><rect x="374" y="180" width="104" height="15" fill="rgb(238,185,8)"/><text x="377.00" y="190.50">run (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (50 samples, 8.64%)</title><rect x="376" y="196" width="102" height="15" fill="rgb(246,190,30)"/><text x="379.00" y="206.50">run (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (49 samples, 8.46%)</title><rect x="378" y="212" width="100" height="15" fill="rgb(246,63,12)"/><text x="381.00" y="222.50">run (mlprodi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (49 samples, 8.46%)</title><rect x="378" y="228" width="100" height="15" fill="rgb(215,213,54)"/><text x="381.00" y="238.50">_run (mlprod..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (48 samples, 8.29%)</title><rect x="380" y="244" width="98" height="15" fill="rgb(205,103,36)"/><text x="383.00" y="254.50">pybind11::c..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (48 samples, 8.29%)</title><rect x="380" y="260" width="98" height="15" fill="rgb(253,85,51)"/><text x="383.00" y="270.50">void pybind..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (48 samples, 8.29%)</title><rect x="380" y="276" width="98" height="15" fill="rgb(249,79,6)"/><text x="383.00" y="286.50">void pybind..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (48 samples, 8.29%)</title><rect x="380" y="292" width="98" height="15" fill="rgb(224,16,21)"/><text x="383.00" y="302.50">pybind11::d..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (48 samples, 8.29%)</title><rect x="380" y="308" width="98" height="15" fill="rgb(220,130,0)"/><text x="383.00" y="318.50">pybind11::d..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (48 samples, 8.29%)</title><rect x="380" y="324" width="98" height="15" fill="rgb(228,147,4)"/><text x="383.00" y="334.50">pybind11::c..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (48 samples, 8.29%)</title><rect x="380" y="340" width="98" height="15" fill="rgb(237,46,20)"/><text x="383.00" y="350.50">pybind11::a..</text></g><g><title>pybind11::array::~array (numpy.h) (48 samples, 8.29%)</title><rect x="380" y="356" width="98" height="15" fill="rgb(216,229,29)"/><text x="383.00" y="366.50">pybind11::a..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (48 samples, 8.29%)</title><rect x="380" y="372" width="98" height="15" fill="rgb(220,32,26)"/><text x="383.00" y="382.50">pybind11::b..</text></g><g><title>pybind11::object::~object (pytypes.h) (48 samples, 8.29%)</title><rect x="380" y="388" width="98" height="15" fill="rgb(233,223,44)"/><text x="383.00" y="398.50">pybind11::o..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (48 samples, 8.29%)</title><rect x="380" y="404" width="98" height="15" fill="rgb(217,197,50)"/><text x="383.00" y="414.50">pybind11::h..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (48 samples, 8.29%)</title><rect x="380" y="420" width="98" height="15" fill="rgb(242,205,37)"/><text x="383.00" y="430.50">RuntimeTree..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (48 samples, 8.29%)</title><rect x="380" y="436" width="98" height="15" fill="rgb(219,115,39)"/><text x="383.00" y="446.50">pybind11::g..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (48 samples, 8.29%)</title><rect x="380" y="452" width="98" height="15" fill="rgb(245,207,52)"/><text x="383.00" y="462.50">GOMP_parall..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (47 samples, 8.12%)</title><rect x="382" y="468" width="96" height="15" fill="rgb(246,153,6)"/><text x="385.00" y="478.50">RuntimeTree..</text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::~vector (stl_bvector.h) (1 samples, 0.17%)</title><rect x="476" y="484" width="2" height="15" fill="rgb(218,202,37)"/><text x="479.00" y="494.50"></text></g><g><title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::~_Bvector_base (stl_bvector.h) (1 samples, 0.17%)</title><rect x="476" y="500" width="2" height="15" fill="rgb(212,146,44)"/><text x="479.00" y="510.50"></text></g><g><title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::_M_deallocate (stl_bvector.h) (1 samples, 0.17%)</title><rect x="476" y="516" width="2" height="15" fill="rgb(239,86,40)"/><text x="479.00" y="526.50"></text></g><g><title>write_scores&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_common_.hpp) (1 samples, 0.17%)</title><rect x="476" y="532" width="2" height="15" fill="rgb(244,219,3)"/><text x="479.00" y="542.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.17%)</title><rect x="478" y="132" width="2" height="15" fill="rgb(253,6,27)"/><text x="481.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.17%)</title><rect x="478" y="148" width="2" height="15" fill="rgb(226,71,54)"/><text x="481.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.17%)</title><rect x="478" y="164" width="2" height="15" fill="rgb(232,133,37)"/><text x="481.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.17%)</title><rect x="478" y="180" width="2" height="15" fill="rgb(244,65,34)"/><text x="481.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (1 samples, 0.17%)</title><rect x="478" y="196" width="2" height="15" fill="rgb(245,120,12)"/><text x="481.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="212" width="2" height="15" fill="rgb(250,0,29)"/><text x="481.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="228" width="2" height="15" fill="rgb(234,52,39)"/><text x="481.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="244" width="2" height="15" fill="rgb(207,67,45)"/><text x="481.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="478" y="260" width="2" height="15" fill="rgb(233,77,19)"/><text x="481.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="276" width="2" height="15" fill="rgb(253,176,2)"/><text x="481.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (1 samples, 0.17%)</title><rect x="478" y="292" width="2" height="15" fill="rgb(221,67,54)"/><text x="481.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="308" width="2" height="15" fill="rgb(219,98,30)"/><text x="481.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="324" width="2" height="15" fill="rgb(219,145,39)"/><text x="481.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="340" width="2" height="15" fill="rgb(230,42,52)"/><text x="481.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="478" y="356" width="2" height="15" fill="rgb(209,7,42)"/><text x="481.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="372" width="2" height="15" fill="rgb(228,123,25)"/><text x="481.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (1 samples, 0.17%)</title><rect x="478" y="388" width="2" height="15" fill="rgb(213,70,25)"/><text x="481.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="404" width="2" height="15" fill="rgb(227,136,47)"/><text x="481.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="420" width="2" height="15" fill="rgb(253,61,40)"/><text x="481.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="436" width="2" height="15" fill="rgb(225,75,7)"/><text x="481.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.17%)</title><rect x="478" y="452" width="2" height="15" fill="rgb(243,0,14)"/><text x="481.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.17%)</title><rect x="478" y="468" width="2" height="15" fill="rgb(254,50,6)"/><text x="481.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.17%)</title><rect x="478" y="484" width="2" height="15" fill="rgb(251,39,23)"/><text x="481.00" y="494.50"></text></g><g><title>_get_doc_template (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.17%)</title><rect x="478" y="500" width="2" height="15" fill="rgb(240,173,54)"/><text x="481.00" y="510.50"></text></g><g><title>__new__ (jinja2/environment.py) (1 samples, 0.17%)</title><rect x="478" y="516" width="2" height="15" fill="rgb(238,215,36)"/><text x="481.00" y="526.50"></text></g><g><title>from_string (jinja2/environment.py) (1 samples, 0.17%)</title><rect x="478" y="532" width="2" height="15" fill="rgb(227,58,42)"/><text x="481.00" y="542.50"></text></g><g><title>compile (jinja2/environment.py) (1 samples, 0.17%)</title><rect x="478" y="548" width="2" height="15" fill="rgb(233,78,13)"/><text x="481.00" y="558.50"></text></g><g><title>_generate (jinja2/environment.py) (1 samples, 0.17%)</title><rect x="478" y="564" width="2" height="15" fill="rgb(214,92,26)"/><text x="481.00" y="574.50"></text></g><g><title>generate (jinja2/compiler.py) (1 samples, 0.17%)</title><rect x="478" y="580" width="2" height="15" fill="rgb(221,163,54)"/><text x="481.00" y="590.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.17%)</title><rect x="478" y="596" width="2" height="15" fill="rgb(237,104,52)"/><text x="481.00" y="606.50"></text></g><g><title>visit_Template (jinja2/compiler.py) (1 samples, 0.17%)</title><rect x="478" y="612" width="2" height="15" fill="rgb(250,191,36)"/><text x="481.00" y="622.50"></text></g><g><title>blockvisit (jinja2/compiler.py) (1 samples, 0.17%)</title><rect x="478" y="628" width="2" height="15" fill="rgb(210,204,19)"/><text x="481.00" y="638.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.17%)</title><rect x="478" y="644" width="2" height="15" fill="rgb(224,75,28)"/><text x="481.00" y="654.50"></text></g><g><title>visit_For (jinja2/compiler.py) (1 samples, 0.17%)</title><rect x="478" y="660" width="2" height="15" fill="rgb(209,130,15)"/><text x="481.00" y="670.50"></text></g><g><title>blockvisit (jinja2/compiler.py) (1 samples, 0.17%)</title><rect x="478" y="676" width="2" height="15" fill="rgb(233,117,26)"/><text x="481.00" y="686.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.17%)</title><rect x="478" y="692" width="2" height="15" fill="rgb(254,175,29)"/><text x="481.00" y="702.50"></text></g><g><title>visit_If (jinja2/compiler.py) (1 samples, 0.17%)</title><rect x="478" y="708" width="2" height="15" fill="rgb(240,101,0)"/><text x="481.00" y="718.50"></text></g><g><title>blockvisit (jinja2/compiler.py) (1 samples, 0.17%)</title><rect x="478" y="724" width="2" height="15" fill="rgb(210,183,31)"/><text x="481.00" y="734.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.17%)</title><rect x="478" y="740" width="2" height="15" fill="rgb(242,168,35)"/><text x="481.00" y="750.50"></text></g><g><title>get_visitor (jinja2/visitor.py) (1 samples, 0.17%)</title><rect x="478" y="756" width="2" height="15" fill="rgb(240,191,54)"/><text x="481.00" y="766.50"></text></g><g><title>profile_pyrt (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (54 samples, 9.33%)</title><rect x="372" y="68" width="110" height="15" fill="rgb(239,35,4)"/><text x="375.00" y="78.50">profile_pyrt ..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (54 samples, 9.33%)</title><rect x="372" y="84" width="110" height="15" fill="rgb(250,158,29)"/><text x="375.00" y="94.50">setup_profile..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.35%)</title><rect x="478" y="100" width="4" height="15" fill="rgb(240,37,16)"/><text x="481.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.35%)</title><rect x="478" y="116" width="4" height="15" fill="rgb(219,227,34)"/><text x="481.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.17%)</title><rect x="480" y="132" width="2" height="15" fill="rgb(253,26,1)"/><text x="483.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (1 samples, 0.17%)</title><rect x="480" y="148" width="2" height="15" fill="rgb(221,108,20)"/><text x="483.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (1 samples, 0.17%)</title><rect x="480" y="164" width="2" height="15" fill="rgb(244,116,15)"/><text x="483.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (1 samples, 0.17%)</title><rect x="480" y="180" width="2" height="15" fill="rgb(239,200,25)"/><text x="483.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py) (1 samples, 0.17%)</title><rect x="480" y="196" width="2" height="15" fill="rgb(206,82,54)"/><text x="483.00" y="206.50"></text></g><g><title>add_tree_to_attribute_pairs (skl2onnx/common/tree_ensemble.py) (1 samples, 0.17%)</title><rect x="480" y="212" width="2" height="15" fill="rgb(253,32,28)"/><text x="483.00" y="222.50"></text></g><g><title>add_node (skl2onnx/common/tree_ensemble.py) (1 samples, 0.17%)</title><rect x="480" y="228" width="2" height="15" fill="rgb(237,130,10)"/><text x="483.00" y="238.50"></text></g><g><title>update_wrapper (functools.py) (11 samples, 1.90%)</title><rect x="539" y="228" width="23" height="15" fill="rgb(237,130,13)"/><text x="542.00" y="238.50">u..</text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py) (17 samples, 2.94%)</title><rect x="529" y="196" width="35" height="15" fill="rgb(216,168,31)"/><text x="532.00" y="206.50">&lt;g..</text></g><g><title>delayed (joblib/parallel.py) (14 samples, 2.42%)</title><rect x="535" y="212" width="29" height="15" fill="rgb(225,151,23)"/><text x="538.00" y="222.50">de..</text></g><g><title>wraps (functools.py) (1 samples, 0.17%)</title><rect x="562" y="228" width="2" height="15" fill="rgb(244,87,41)"/><text x="565.00" y="238.50"></text></g><g><title>__init__ (joblib/parallel.py) (1 samples, 0.17%)</title><rect x="564" y="196" width="2" height="15" fill="rgb(215,95,8)"/><text x="567.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py) (3 samples, 0.52%)</title><rect x="582" y="228" width="6" height="15" fill="rgb(241,39,49)"/><text x="585.00" y="238.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (2 samples, 0.35%)</title><rect x="627" y="292" width="4" height="15" fill="rgb(225,151,9)"/><text x="630.00" y="302.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.17%)</title><rect x="629" y="308" width="2" height="15" fill="rgb(219,151,8)"/><text x="632.00" y="318.50"></text></g><g><title>0x7f368056bf55 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="654" y="324" width="2" height="15" fill="rgb(214,166,2)"/><text x="657.00" y="334.50"></text></g><g><title>0x7f368055bd33 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="654" y="340" width="2" height="15" fill="rgb(233,90,4)"/><text x="657.00" y="350.50"></text></g><g><title>PyArray_New (ctors.c) (1 samples, 0.17%)</title><rect x="654" y="356" width="2" height="15" fill="rgb(207,115,27)"/><text x="657.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.17%)</title><rect x="654" y="372" width="2" height="15" fill="rgb(227,80,10)"/><text x="657.00" y="382.50"></text></g><g><title>memcpy (libc-2.29.so) (1 samples, 0.17%)</title><rect x="654" y="388" width="2" height="15" fill="rgb(243,158,49)"/><text x="657.00" y="398.50"></text></g><g><title>PyArray_ITEMSIZE (ndarraytypes.h) (1 samples, 0.17%)</title><rect x="656" y="436" width="2" height="15" fill="rgb(217,142,20)"/><text x="659.00" y="446.50"></text></g><g><title>0x7f368055ed04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.35%)</title><rect x="656" y="372" width="4" height="15" fill="rgb(243,9,4)"/><text x="659.00" y="382.50"></text></g><g><title>0x7f368055e666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.35%)</title><rect x="656" y="388" width="4" height="15" fill="rgb(210,26,46)"/><text x="659.00" y="398.50"></text></g><g><title>0x7f36805542fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.35%)</title><rect x="656" y="404" width="4" height="15" fill="rgb(217,34,15)"/><text x="659.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c) (2 samples, 0.35%)</title><rect x="656" y="420" width="4" height="15" fill="rgb(221,209,18)"/><text x="659.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.17%)</title><rect x="658" y="436" width="2" height="15" fill="rgb(206,133,25)"/><text x="661.00" y="446.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.17%)</title><rect x="658" y="452" width="2" height="15" fill="rgb(251,167,36)"/><text x="661.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.17%)</title><rect x="658" y="468" width="2" height="15" fill="rgb(214,174,54)"/><text x="661.00" y="478.50"></text></g><g><title>0x7f368057a2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.52%)</title><rect x="656" y="356" width="6" height="15" fill="rgb(227,23,41)"/><text x="659.00" y="366.50"></text></g><g><title>0x7f368055ee72 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="660" y="372" width="2" height="15" fill="rgb(250,36,44)"/><text x="663.00" y="382.50"></text></g><g><title>0x7f3680551f22 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="660" y="388" width="2" height="15" fill="rgb(236,164,53)"/><text x="663.00" y="398.50"></text></g><g><title>0x7f368057a4b9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="662" y="356" width="2" height="15" fill="rgb(249,81,30)"/><text x="665.00" y="366.50"></text></g><g><title>0x7f368057a51d (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="664" y="356" width="2" height="15" fill="rgb(232,53,33)"/><text x="667.00" y="366.50"></text></g><g><title>0x7f36a6b3e730 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="668" y="388" width="2" height="15" fill="rgb(218,68,34)"/><text x="671.00" y="398.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (2 samples, 0.35%)</title><rect x="670" y="388" width="4" height="15" fill="rgb(210,188,50)"/><text x="673.00" y="398.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="674" y="468" width="2" height="15" fill="rgb(252,28,26)"/><text x="677.00" y="478.50"></text></g><g><title>0x7f368057a592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 1.21%)</title><rect x="666" y="356" width="14" height="15" fill="rgb(228,160,34)"/><text x="669.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c) (7 samples, 1.21%)</title><rect x="666" y="372" width="14" height="15" fill="rgb(230,228,13)"/><text x="669.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (3 samples, 0.52%)</title><rect x="674" y="388" width="6" height="15" fill="rgb(254,66,4)"/><text x="677.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c) (3 samples, 0.52%)</title><rect x="674" y="404" width="6" height="15" fill="rgb(233,196,12)"/><text x="677.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (3 samples, 0.52%)</title><rect x="674" y="420" width="6" height="15" fill="rgb(222,190,46)"/><text x="677.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c) (3 samples, 0.52%)</title><rect x="674" y="436" width="6" height="15" fill="rgb(218,208,24)"/><text x="677.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c) (3 samples, 0.52%)</title><rect x="674" y="452" width="6" height="15" fill="rgb(241,18,44)"/><text x="677.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (2 samples, 0.35%)</title><rect x="676" y="468" width="4" height="15" fill="rgb(231,214,47)"/><text x="679.00" y="478.50"></text></g><g><title>0x7f36a6b2a21c (libc-2.29.so) (1 samples, 0.17%)</title><rect x="678" y="484" width="2" height="15" fill="rgb(234,19,41)"/><text x="681.00" y="494.50"></text></g><g><title>0x7f368057a684 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="680" y="356" width="2" height="15" fill="rgb(254,170,52)"/><text x="683.00" y="366.50"></text></g><g><title>0x7f368057a693 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="682" y="356" width="2" height="15" fill="rgb(231,173,26)"/><text x="685.00" y="366.50"></text></g><g><title>0x7f368057a6a5 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="684" y="356" width="2" height="15" fill="rgb(225,224,14)"/><text x="687.00" y="366.50"></text></g><g><title>0x7f368057a6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.86%)</title><rect x="686" y="356" width="10" height="15" fill="rgb(228,213,1)"/><text x="689.00" y="366.50"></text></g><g><title>0x7f368057a6ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.35%)</title><rect x="696" y="356" width="4" height="15" fill="rgb(239,98,35)"/><text x="699.00" y="366.50"></text></g><g><title>0x7f368057a6b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.52%)</title><rect x="700" y="356" width="6" height="15" fill="rgb(215,68,19)"/><text x="703.00" y="366.50"></text></g><g><title>0x7f368057a6c9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="706" y="356" width="3" height="15" fill="rgb(244,206,16)"/><text x="709.00" y="366.50"></text></g><g><title>0x7f368057a6e2 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="709" y="356" width="2" height="15" fill="rgb(253,167,35)"/><text x="712.00" y="366.50"></text></g><g><title>0x7f368057a6e6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="711" y="356" width="2" height="15" fill="rgb(227,1,19)"/><text x="714.00" y="366.50"></text></g><g><title>0x7f368057a7a0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="713" y="356" width="2" height="15" fill="rgb(227,0,3)"/><text x="716.00" y="366.50"></text></g><g><title>0x7f368057a92f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="715" y="356" width="2" height="15" fill="rgb(252,93,36)"/><text x="718.00" y="366.50"></text></g><g><title>0x7f368054f8a1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="715" y="372" width="2" height="15" fill="rgb(219,198,19)"/><text x="718.00" y="382.50"></text></g><g><title>0x7f3680552529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="717" y="372" width="2" height="15" fill="rgb(238,113,12)"/><text x="720.00" y="382.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.17%)</title><rect x="717" y="388" width="2" height="15" fill="rgb(225,135,43)"/><text x="720.00" y="398.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.17%)</title><rect x="717" y="404" width="2" height="15" fill="rgb(234,62,45)"/><text x="720.00" y="414.50"></text></g><g><title>0x7f368057b405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (32 samples, 5.53%)</title><rect x="656" y="340" width="65" height="15" fill="rgb(228,136,15)"/><text x="659.00" y="350.50">0x7f368..</text></g><g><title>0x7f368057ac27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.35%)</title><rect x="717" y="356" width="4" height="15" fill="rgb(218,26,34)"/><text x="720.00" y="366.50"></text></g><g><title>0x7f36805525f7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="719" y="372" width="2" height="15" fill="rgb(226,157,29)"/><text x="722.00" y="382.50"></text></g><g><title>0x7f36805522bc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="719" y="388" width="2" height="15" fill="rgb(226,8,2)"/><text x="722.00" y="398.50"></text></g><g><title>0x7f3680551c6d (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="719" y="404" width="2" height="15" fill="rgb(247,125,7)"/><text x="722.00" y="414.50"></text></g><g><title>0x7f368056bfa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (33 samples, 5.70%)</title><rect x="656" y="324" width="67" height="15" fill="rgb(213,1,22)"/><text x="659.00" y="334.50">0x7f368..</text></g><g><title>0x7f368057b540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="721" y="340" width="2" height="15" fill="rgb(254,158,39)"/><text x="724.00" y="350.50"></text></g><g><title>0x7f36805502f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="721" y="356" width="2" height="15" fill="rgb(252,79,40)"/><text x="724.00" y="366.50"></text></g><g><title>0x7f368054f4f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="721" y="372" width="2" height="15" fill="rgb(216,138,41)"/><text x="724.00" y="382.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (7 samples, 1.21%)</title><rect x="723" y="372" width="14" height="15" fill="rgb(253,133,42)"/><text x="726.00" y="382.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="735" y="388" width="2" height="15" fill="rgb(233,58,32)"/><text x="738.00" y="398.50"></text></g><g><title>PyArray_CheckAxis (ctors.c) (1 samples, 0.17%)</title><rect x="737" y="372" width="2" height="15" fill="rgb(231,121,1)"/><text x="740.00" y="382.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (1 samples, 0.17%)</title><rect x="737" y="388" width="2" height="15" fill="rgb(225,13,29)"/><text x="740.00" y="398.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.17%)</title><rect x="737" y="404" width="2" height="15" fill="rgb(225,226,24)"/><text x="740.00" y="414.50"></text></g><g><title>PyArray_FromArray (ctors.c) (1 samples, 0.17%)</title><rect x="737" y="420" width="2" height="15" fill="rgb(225,168,3)"/><text x="740.00" y="430.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.17%)</title><rect x="739" y="404" width="2" height="15" fill="rgb(219,106,26)"/><text x="742.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.17%)</title><rect x="739" y="420" width="2" height="15" fill="rgb(242,51,49)"/><text x="742.00" y="430.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.17%)</title><rect x="739" y="436" width="2" height="15" fill="rgb(224,142,32)"/><text x="742.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.17%)</title><rect x="739" y="452" width="2" height="15" fill="rgb(205,123,33)"/><text x="742.00" y="462.50"></text></g><g><title>0x7f36a6b2a700 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="739" y="468" width="2" height="15" fill="rgb(231,219,40)"/><text x="742.00" y="478.50"></text></g><g><title>0x7f36a6b27ab9 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="739" y="484" width="2" height="15" fill="rgb(208,85,42)"/><text x="742.00" y="494.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (10 samples, 1.73%)</title><rect x="723" y="356" width="20" height="15" fill="rgb(220,195,47)"/><text x="726.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.35%)</title><rect x="739" y="372" width="4" height="15" fill="rgb(247,140,34)"/><text x="742.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.35%)</title><rect x="739" y="388" width="4" height="15" fill="rgb(237,11,42)"/><text x="742.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.17%)</title><rect x="741" y="404" width="2" height="15" fill="rgb(210,110,42)"/><text x="744.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.17%)</title><rect x="741" y="420" width="2" height="15" fill="rgb(224,110,3)"/><text x="744.00" y="430.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.17%)</title><rect x="743" y="356" width="2" height="15" fill="rgb(228,121,7)"/><text x="746.00" y="366.50"></text></g><g><title>0x7f36a6c06130 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="743" y="372" width="2" height="15" fill="rgb(228,24,41)"/><text x="746.00" y="382.50"></text></g><g><title>0x7f368056c05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 2.07%)</title><rect x="723" y="324" width="24" height="15" fill="rgb(250,76,0)"/><text x="726.00" y="334.50">0..</text></g><g><title>array_take (methods.c) (12 samples, 2.07%)</title><rect x="723" y="340" width="24" height="15" fill="rgb(235,95,27)"/><text x="726.00" y="350.50">a..</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.17%)</title><rect x="745" y="356" width="2" height="15" fill="rgb(219,93,43)"/><text x="748.00" y="366.50"></text></g><g><title>0x7f368056c14f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="747" y="324" width="2" height="15" fill="rgb(223,100,0)"/><text x="750.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.17%)</title><rect x="747" y="340" width="2" height="15" fill="rgb(205,129,45)"/><text x="750.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.17%)</title><rect x="747" y="356" width="2" height="15" fill="rgb(236,89,2)"/><text x="750.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.17%)</title><rect x="747" y="372" width="2" height="15" fill="rgb(209,41,5)"/><text x="750.00" y="382.50"></text></g><g><title>0x7f368056c23a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="749" y="324" width="2" height="15" fill="rgb(242,88,41)"/><text x="752.00" y="334.50"></text></g><g><title>0x7f368056cd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (49 samples, 8.46%)</title><rect x="654" y="308" width="99" height="15" fill="rgb(209,121,47)"/><text x="657.00" y="318.50">0x7f368056c..</text></g><g><title>0x7f368056c609 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="751" y="324" width="2" height="15" fill="rgb(234,66,28)"/><text x="754.00" y="334.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (2 samples, 0.35%)</title><rect x="753" y="308" width="4" height="15" fill="rgb(244,96,10)"/><text x="756.00" y="318.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.17%)</title><rect x="755" y="324" width="2" height="15" fill="rgb(206,58,45)"/><text x="758.00" y="334.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.17%)</title><rect x="757" y="340" width="2" height="15" fill="rgb(231,113,8)"/><text x="760.00" y="350.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.35%)</title><rect x="757" y="324" width="5" height="15" fill="rgb(236,114,44)"/><text x="760.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.17%)</title><rect x="759" y="340" width="3" height="15" fill="rgb(231,129,10)"/><text x="762.00" y="350.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.17%)</title><rect x="759" y="356" width="3" height="15" fill="rgb(241,76,46)"/><text x="762.00" y="366.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c) (1 samples, 0.17%)</title><rect x="762" y="324" width="2" height="15" fill="rgb(209,112,6)"/><text x="765.00" y="334.50"></text></g><g><title>count_boolean_trues (item_selection.c) (1 samples, 0.17%)</title><rect x="762" y="340" width="2" height="15" fill="rgb(205,34,38)"/><text x="765.00" y="350.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="762" y="356" width="2" height="15" fill="rgb(216,34,33)"/><text x="765.00" y="366.50"></text></g><g><title>array_assign_subscript (mapping.c) (4 samples, 0.69%)</title><rect x="757" y="308" width="9" height="15" fill="rgb(220,176,48)"/><text x="760.00" y="318.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.17%)</title><rect x="764" y="324" width="2" height="15" fill="rgb(207,164,11)"/><text x="767.00" y="334.50"></text></g><g><title>PyArray_MinScalarType_internal (convert_datatype.c) (1 samples, 0.17%)</title><rect x="772" y="388" width="2" height="15" fill="rgb(236,223,51)"/><text x="775.00" y="398.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c) (2 samples, 0.35%)</title><rect x="772" y="356" width="4" height="15" fill="rgb(241,6,35)"/><text x="775.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.35%)</title><rect x="772" y="372" width="4" height="15" fill="rgb(208,82,19)"/><text x="775.00" y="382.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (1 samples, 0.17%)</title><rect x="774" y="388" width="2" height="15" fill="rgb(214,82,16)"/><text x="777.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.17%)</title><rect x="776" y="372" width="2" height="15" fill="rgb(206,224,7)"/><text x="779.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.17%)</title><rect x="776" y="388" width="2" height="15" fill="rgb(237,56,34)"/><text x="779.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.17%)</title><rect x="776" y="404" width="2" height="15" fill="rgb(231,225,54)"/><text x="779.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.17%)</title><rect x="776" y="420" width="2" height="15" fill="rgb(238,210,26)"/><text x="779.00" y="430.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (1 samples, 0.17%)</title><rect x="778" y="372" width="2" height="15" fill="rgb(211,17,31)"/><text x="781.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.69%)</title><rect x="776" y="356" width="8" height="15" fill="rgb(216,111,23)"/><text x="779.00" y="366.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.35%)</title><rect x="780" y="372" width="4" height="15" fill="rgb(229,164,25)"/><text x="783.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.35%)</title><rect x="780" y="388" width="4" height="15" fill="rgb(237,154,33)"/><text x="783.00" y="398.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (2 samples, 0.35%)</title><rect x="784" y="388" width="4" height="15" fill="rgb(238,185,53)"/><text x="787.00" y="398.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (2 samples, 0.35%)</title><rect x="784" y="404" width="4" height="15" fill="rgb(244,37,18)"/><text x="787.00" y="414.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.17%)</title><rect x="786" y="420" width="2" height="15" fill="rgb(231,179,32)"/><text x="789.00" y="430.50"></text></g><g><title>array_richcompare (arrayobject.c) (12 samples, 2.07%)</title><rect x="766" y="308" width="24" height="15" fill="rgb(241,88,50)"/><text x="769.00" y="318.50">a..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (10 samples, 1.73%)</title><rect x="770" y="324" width="20" height="15" fill="rgb(233,10,16)"/><text x="773.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (10 samples, 1.73%)</title><rect x="770" y="340" width="20" height="15" fill="rgb(240,141,27)"/><text x="773.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.52%)</title><rect x="784" y="356" width="6" height="15" fill="rgb(231,196,22)"/><text x="787.00" y="366.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.52%)</title><rect x="784" y="372" width="6" height="15" fill="rgb(212,56,52)"/><text x="787.00" y="382.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (1 samples, 0.17%)</title><rect x="788" y="388" width="2" height="15" fill="rgb(205,134,15)"/><text x="791.00" y="398.50"></text></g><g><title>DOUBLE_setitem (arraytypes.c.src) (1 samples, 0.17%)</title><rect x="788" y="404" width="2" height="15" fill="rgb(213,203,49)"/><text x="791.00" y="414.50"></text></g><g><title>MyPyFloat_AsDouble (arraytypes.c.src) (1 samples, 0.17%)</title><rect x="788" y="420" width="2" height="15" fill="rgb(223,145,36)"/><text x="791.00" y="430.50"></text></g><g><title>get_view_from_index (mapping.c) (2 samples, 0.35%)</title><rect x="790" y="324" width="4" height="15" fill="rgb(213,23,23)"/><text x="793.00" y="334.50"></text></g><g><title>long_index (scalartypes.c.src) (2 samples, 0.35%)</title><rect x="790" y="340" width="4" height="15" fill="rgb(237,0,7)"/><text x="793.00" y="350.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.52%)</title><rect x="790" y="308" width="6" height="15" fill="rgb(217,74,29)"/><text x="793.00" y="318.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.17%)</title><rect x="794" y="324" width="2" height="15" fill="rgb(250,181,35)"/><text x="797.00" y="334.50"></text></g><g><title>unpack_indices (mapping.c) (1 samples, 0.17%)</title><rect x="794" y="340" width="2" height="15" fill="rgb(238,151,30)"/><text x="797.00" y="350.50"></text></g><g><title>unpack_tuple (mapping.c) (1 samples, 0.17%)</title><rect x="794" y="356" width="2" height="15" fill="rgb(220,69,42)"/><text x="797.00" y="366.50"></text></g><g><title>_is_basic_python_type (get_attr_string.h) (1 samples, 0.17%)</title><rect x="800" y="436" width="2" height="15" fill="rgb(235,23,33)"/><text x="803.00" y="446.50"></text></g><g><title>0x7f36a6b3ee7a (libc-2.29.so) (1 samples, 0.17%)</title><rect x="810" y="452" width="2" height="15" fill="rgb(218,162,15)"/><text x="813.00" y="462.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (8 samples, 1.38%)</title><rect x="798" y="372" width="17" height="15" fill="rgb(239,143,45)"/><text x="801.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (8 samples, 1.38%)</title><rect x="798" y="388" width="17" height="15" fill="rgb(232,202,36)"/><text x="801.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (7 samples, 1.21%)</title><rect x="800" y="404" width="15" height="15" fill="rgb(251,196,10)"/><text x="803.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (7 samples, 1.21%)</title><rect x="800" y="420" width="15" height="15" fill="rgb(253,73,23)"/><text x="803.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (6 samples, 1.04%)</title><rect x="802" y="436" width="13" height="15" fill="rgb(233,31,44)"/><text x="805.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.17%)</title><rect x="812" y="452" width="3" height="15" fill="rgb(223,93,14)"/><text x="815.00" y="462.50"></text></g><g><title>PyArray_OutputConverter (conversion_utils.c) (1 samples, 0.17%)</title><rect x="815" y="388" width="2" height="15" fill="rgb(248,117,24)"/><text x="818.00" y="398.50"></text></g><g><title>0x7f36a5d49f00 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="817" y="420" width="2" height="15" fill="rgb(245,206,22)"/><text x="820.00" y="430.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (1 samples, 0.17%)</title><rect x="819" y="436" width="2" height="15" fill="rgb(211,113,3)"/><text x="822.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.17%)</title><rect x="819" y="452" width="2" height="15" fill="rgb(239,156,7)"/><text x="822.00" y="462.50"></text></g><g><title>0x7f36a6b29e6f (libc-2.29.so) (1 samples, 0.17%)</title><rect x="819" y="468" width="2" height="15" fill="rgb(208,143,3)"/><text x="822.00" y="478.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (2 samples, 0.35%)</title><rect x="821" y="436" width="4" height="15" fill="rgb(249,158,34)"/><text x="824.00" y="446.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c) (1 samples, 0.17%)</title><rect x="825" y="436" width="2" height="15" fill="rgb(248,52,33)"/><text x="828.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.17%)</title><rect x="827" y="436" width="2" height="15" fill="rgb(247,55,25)"/><text x="830.00" y="446.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.17%)</title><rect x="829" y="436" width="2" height="15" fill="rgb(231,163,20)"/><text x="832.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (9 samples, 1.55%)</title><rect x="819" y="420" width="18" height="15" fill="rgb(246,186,42)"/><text x="822.00" y="430.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (3 samples, 0.52%)</title><rect x="831" y="436" width="6" height="15" fill="rgb(225,148,43)"/><text x="834.00" y="446.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (2 samples, 0.35%)</title><rect x="833" y="452" width="4" height="15" fill="rgb(218,68,31)"/><text x="836.00" y="462.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c) (1 samples, 0.17%)</title><rect x="835" y="468" width="2" height="15" fill="rgb(208,55,13)"/><text x="838.00" y="478.50"></text></g><g><title>0x7f36a6b2a723 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="837" y="548" width="2" height="15" fill="rgb(245,84,12)"/><text x="840.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (2 samples, 0.35%)</title><rect x="837" y="420" width="4" height="15" fill="rgb(212,205,38)"/><text x="840.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c) (2 samples, 0.35%)</title><rect x="837" y="436" width="4" height="15" fill="rgb(246,75,46)"/><text x="840.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.35%)</title><rect x="837" y="452" width="4" height="15" fill="rgb(245,90,29)"/><text x="840.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.35%)</title><rect x="837" y="468" width="4" height="15" fill="rgb(229,87,11)"/><text x="840.00" y="478.50"></text></g><g><title>npy_alloc_cache (alloc.c) (2 samples, 0.35%)</title><rect x="837" y="484" width="4" height="15" fill="rgb(252,229,42)"/><text x="840.00" y="494.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.35%)</title><rect x="837" y="500" width="4" height="15" fill="rgb(240,56,9)"/><text x="840.00" y="510.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (2 samples, 0.35%)</title><rect x="837" y="516" width="4" height="15" fill="rgb(247,197,13)"/><text x="840.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.35%)</title><rect x="837" y="532" width="4" height="15" fill="rgb(233,150,19)"/><text x="840.00" y="542.50"></text></g><g><title>0x7f36a6b2a97c (libc-2.29.so) (1 samples, 0.17%)</title><rect x="839" y="548" width="2" height="15" fill="rgb(211,214,42)"/><text x="842.00" y="558.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (4 samples, 0.69%)</title><rect x="841" y="420" width="8" height="15" fill="rgb(227,141,37)"/><text x="844.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (4 samples, 0.69%)</title><rect x="841" y="436" width="8" height="15" fill="rgb(246,143,5)"/><text x="844.00" y="446.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (3 samples, 0.52%)</title><rect x="843" y="452" width="6" height="15" fill="rgb(241,175,31)"/><text x="846.00" y="462.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (2 samples, 0.35%)</title><rect x="845" y="468" width="4" height="15" fill="rgb(226,62,14)"/><text x="848.00" y="478.50"></text></g><g><title>PyArray_RemoveAxesInPlace (shape.c) (1 samples, 0.17%)</title><rect x="849" y="420" width="2" height="15" fill="rgb(234,224,7)"/><text x="852.00" y="430.50"></text></g><g><title>_check_ufunc_fperr (extobj.c) (1 samples, 0.17%)</title><rect x="851" y="420" width="2" height="15" fill="rgb(206,18,42)"/><text x="854.00" y="430.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.17%)</title><rect x="851" y="436" width="2" height="15" fill="rgb(224,157,42)"/><text x="854.00" y="446.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.17%)</title><rect x="853" y="420" width="2" height="15" fill="rgb(215,94,52)"/><text x="856.00" y="430.50"></text></g><g><title>0x7f36a5d4bc90 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="853" y="436" width="2" height="15" fill="rgb(242,184,17)"/><text x="856.00" y="446.50"></text></g><g><title>DOUBLE_add (loops.c.src) (15 samples, 2.59%)</title><rect x="870" y="436" width="30" height="15" fill="rgb(211,186,23)"/><text x="873.00" y="446.50">DO..</text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (10 samples, 1.73%)</title><rect x="880" y="452" width="20" height="15" fill="rgb(209,6,1)"/><text x="883.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (52 samples, 8.98%)</title><rect x="817" y="404" width="106" height="15" fill="rgb(220,90,50)"/><text x="820.00" y="414.50">PyUFunc_Redu..</text></g><g><title>reduce_loop (ufunc_object.c) (33 samples, 5.70%)</title><rect x="855" y="420" width="68" height="15" fill="rgb(207,46,20)"/><text x="858.00" y="430.50">reduce_..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (11 samples, 1.90%)</title><rect x="900" y="436" width="23" height="15" fill="rgb(217,39,20)"/><text x="903.00" y="446.50">n..</text></g><g><title>array_sum (methods.c) (63 samples, 10.88%)</title><rect x="796" y="308" width="129" height="15" fill="rgb(211,11,32)"/><text x="799.00" y="318.50">array_sum (metho..</text></g><g><title>forward_ndarray_method (methods.c) (63 samples, 10.88%)</title><rect x="796" y="324" width="129" height="15" fill="rgb(222,56,52)"/><text x="799.00" y="334.50">forward_ndarray_..</text></g><g><title>_sum (numpy/core/_methods.py) (63 samples, 10.88%)</title><rect x="796" y="340" width="129" height="15" fill="rgb(205,102,17)"/><text x="799.00" y="350.50">_sum (numpy/core..</text></g><g><title>ufunc_reduce (ufunc_object.c) (62 samples, 10.71%)</title><rect x="798" y="356" width="127" height="15" fill="rgb(242,156,33)"/><text x="801.00" y="366.50">ufunc_reduce (u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (54 samples, 9.33%)</title><rect x="815" y="372" width="110" height="15" fill="rgb(206,80,34)"/><text x="818.00" y="382.50">PyUFunc_Gener..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (53 samples, 9.15%)</title><rect x="817" y="388" width="108" height="15" fill="rgb(242,225,4)"/><text x="820.00" y="398.50">PyUFunc_Reduc..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (1 samples, 0.17%)</title><rect x="923" y="404" width="2" height="15" fill="rgb(250,80,23)"/><text x="926.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.17%)</title><rect x="923" y="420" width="2" height="15" fill="rgb(246,89,25)"/><text x="926.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.17%)</title><rect x="923" y="436" width="2" height="15" fill="rgb(226,184,9)"/><text x="926.00" y="446.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (9 samples, 1.55%)</title><rect x="929" y="324" width="18" height="15" fill="rgb(217,56,19)"/><text x="932.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (3 samples, 0.52%)</title><rect x="941" y="340" width="6" height="15" fill="rgb(212,142,30)"/><text x="944.00" y="350.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (12 samples, 2.07%)</title><rect x="925" y="308" width="24" height="15" fill="rgb(223,106,37)"/><text x="928.00" y="318.50">c..</text></g><g><title>isclass (inspect.py) (1 samples, 0.17%)</title><rect x="947" y="324" width="2" height="15" fill="rgb(249,68,24)"/><text x="950.00" y="334.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (1 samples, 0.17%)</title><rect x="951" y="340" width="2" height="15" fill="rgb(244,15,52)"/><text x="954.00" y="350.50"></text></g><g><title>_find_array_method (ufunc_object.c) (1 samples, 0.17%)</title><rect x="951" y="356" width="2" height="15" fill="rgb(227,170,33)"/><text x="954.00" y="366.50"></text></g><g><title>0x7f36a5d4ab20 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="953" y="372" width="2" height="15" fill="rgb(253,175,13)"/><text x="956.00" y="382.50"></text></g><g><title>_mm_div_pd (emmintrin.h) (2 samples, 0.35%)</title><rect x="955" y="420" width="4" height="15" fill="rgb(227,147,48)"/><text x="958.00" y="430.50"></text></g><g><title>DOUBLE_divide (loops.c.src) (11 samples, 1.90%)</title><rect x="955" y="372" width="23" height="15" fill="rgb(211,5,12)"/><text x="958.00" y="382.50">D..</text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src) (11 samples, 1.90%)</title><rect x="955" y="388" width="23" height="15" fill="rgb(237,68,19)"/><text x="958.00" y="398.50">r..</text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src) (11 samples, 1.90%)</title><rect x="955" y="404" width="23" height="15" fill="rgb(240,121,30)"/><text x="958.00" y="414.50">s..</text></g><g><title>_mm_store_pd (emmintrin.h) (9 samples, 1.55%)</title><rect x="959" y="420" width="19" height="15" fill="rgb(239,99,27)"/><text x="962.00" y="430.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.17%)</title><rect x="978" y="388" width="2" height="15" fill="rgb(230,105,37)"/><text x="981.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.35%)</title><rect x="978" y="372" width="4" height="15" fill="rgb(254,43,14)"/><text x="981.00" y="382.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.17%)</title><rect x="980" y="388" width="2" height="15" fill="rgb(240,166,28)"/><text x="983.00" y="398.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (1 samples, 0.17%)</title><rect x="980" y="404" width="2" height="15" fill="rgb(208,64,27)"/><text x="983.00" y="414.50"></text></g><g><title>PyArray_BYTES (ndarraytypes.h) (1 samples, 0.17%)</title><rect x="980" y="420" width="2" height="15" fill="rgb(226,114,45)"/><text x="983.00" y="430.50"></text></g><g><title>NpyIter_GetDataPtrArray (nditer_api.c) (1 samples, 0.17%)</title><rect x="982" y="372" width="2" height="15" fill="rgb(248,24,30)"/><text x="985.00" y="382.50"></text></g><g><title>0x7f36a6b29d32 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="984" y="420" width="2" height="15" fill="rgb(219,29,11)"/><text x="987.00" y="430.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (2 samples, 0.35%)</title><rect x="984" y="388" width="4" height="15" fill="rgb(251,2,22)"/><text x="987.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.35%)</title><rect x="984" y="404" width="4" height="15" fill="rgb(228,122,39)"/><text x="987.00" y="414.50"></text></g><g><title>0x7f36a6b2a700 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="986" y="420" width="2" height="15" fill="rgb(225,33,19)"/><text x="989.00" y="430.50"></text></g><g><title>0x7f36a6b27aa4 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="986" y="436" width="2" height="15" fill="rgb(228,117,6)"/><text x="989.00" y="446.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (10 samples, 1.73%)</title><rect x="984" y="372" width="20" height="15" fill="rgb(249,24,22)"/><text x="987.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (8 samples, 1.38%)</title><rect x="988" y="388" width="16" height="15" fill="rgb(249,83,17)"/><text x="991.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (8 samples, 1.38%)</title><rect x="988" y="404" width="16" height="15" fill="rgb(239,206,31)"/><text x="991.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (5 samples, 0.86%)</title><rect x="994" y="420" width="10" height="15" fill="rgb(214,144,2)"/><text x="997.00" y="430.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="1004" y="372" width="2" height="15" fill="rgb(209,36,4)"/><text x="1007.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (27 samples, 4.66%)</title><rect x="953" y="340" width="55" height="15" fill="rgb(213,37,3)"/><text x="956.00" y="350.50">execu..</text></g><g><title>iterator_loop (ufunc_object.c) (27 samples, 4.66%)</title><rect x="953" y="356" width="55" height="15" fill="rgb(251,213,14)"/><text x="956.00" y="366.50">itera..</text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="1006" y="372" width="2" height="15" fill="rgb(206,212,19)"/><text x="1009.00" y="382.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.17%)</title><rect x="1008" y="340" width="2" height="15" fill="rgb(230,86,27)"/><text x="1011.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (32 samples, 5.53%)</title><rect x="949" y="324" width="65" height="15" fill="rgb(252,25,29)"/><text x="952.00" y="334.50">PyUFunc..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.35%)</title><rect x="1010" y="340" width="4" height="15" fill="rgb(218,214,51)"/><text x="1013.00" y="350.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (2 samples, 0.35%)</title><rect x="1010" y="356" width="4" height="15" fill="rgb(228,30,26)"/><text x="1013.00" y="366.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.17%)</title><rect x="1012" y="372" width="2" height="15" fill="rgb(246,14,10)"/><text x="1015.00" y="382.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (189 samples, 32.64%)</title><rect x="631" y="292" width="385" height="15" fill="rgb(243,18,51)"/><text x="634.00" y="302.50">predict_proba (sklearn/tree/_classes.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (33 samples, 5.70%)</title><rect x="949" y="308" width="67" height="15" fill="rgb(239,226,19)"/><text x="952.00" y="318.50">ufunc_g..</text></g><g><title>_apply_array_wrap (ufunc_object.c) (1 samples, 0.17%)</title><rect x="1014" y="324" width="2" height="15" fill="rgb(231,95,16)"/><text x="1017.00" y="334.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.17%)</title><rect x="1016" y="324" width="2" height="15" fill="rgb(233,4,43)"/><text x="1019.00" y="334.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.17%)</title><rect x="1016" y="340" width="2" height="15" fill="rgb(216,112,54)"/><text x="1019.00" y="350.50"></text></g><g><title>PyArray_MinScalarType_internal (convert_datatype.c) (1 samples, 0.17%)</title><rect x="1016" y="356" width="2" height="15" fill="rgb(249,101,35)"/><text x="1019.00" y="366.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (1 samples, 0.17%)</title><rect x="1018" y="324" width="2" height="15" fill="rgb(241,21,21)"/><text x="1021.00" y="334.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (1 samples, 0.17%)</title><rect x="1018" y="340" width="2" height="15" fill="rgb(207,223,44)"/><text x="1021.00" y="350.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.17%)</title><rect x="1020" y="372" width="2" height="15" fill="rgb(244,77,47)"/><text x="1023.00" y="382.50"></text></g><g><title>0x7f36a5d4b4f0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="1020" y="388" width="2" height="15" fill="rgb(254,11,31)"/><text x="1023.00" y="398.50"></text></g><g><title>ceildiv_128_64 (npy_extint128.h) (1 samples, 0.17%)</title><rect x="1022" y="404" width="2" height="15" fill="rgb(206,18,48)"/><text x="1025.00" y="414.50"></text></g><g><title>ceildiv_128_64 (npy_extint128.h) (1 samples, 0.17%)</title><rect x="1024" y="420" width="2" height="15" fill="rgb(216,200,24)"/><text x="1027.00" y="430.50"></text></g><g><title>divmod_128_64 (npy_extint128.h) (1 samples, 0.17%)</title><rect x="1024" y="436" width="2" height="15" fill="rgb(210,118,38)"/><text x="1027.00" y="446.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (2 samples, 0.35%)</title><rect x="1024" y="404" width="4" height="15" fill="rgb(221,229,13)"/><text x="1027.00" y="414.50"></text></g><g><title>floordiv_128_64 (npy_extint128.h) (1 samples, 0.17%)</title><rect x="1026" y="420" width="2" height="15" fill="rgb(254,45,14)"/><text x="1029.00" y="430.50"></text></g><g><title>divmod_128_64 (npy_extint128.h) (1 samples, 0.17%)</title><rect x="1026" y="436" width="2" height="15" fill="rgb(235,141,22)"/><text x="1029.00" y="446.50"></text></g><g><title>mul_64_64 (npy_extint128.h) (1 samples, 0.17%)</title><rect x="1028" y="404" width="3" height="15" fill="rgb(248,68,16)"/><text x="1031.00" y="414.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (5 samples, 0.86%)</title><rect x="1022" y="388" width="11" height="15" fill="rgb(222,116,33)"/><text x="1025.00" y="398.50"></text></g><g><title>safe_mul (npy_extint128.h) (1 samples, 0.17%)</title><rect x="1031" y="404" width="2" height="15" fill="rgb(210,103,38)"/><text x="1034.00" y="414.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (7 samples, 1.21%)</title><rect x="1020" y="340" width="15" height="15" fill="rgb(216,172,35)"/><text x="1023.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (7 samples, 1.21%)</title><rect x="1020" y="356" width="15" height="15" fill="rgb(219,105,38)"/><text x="1023.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (6 samples, 1.04%)</title><rect x="1022" y="372" width="13" height="15" fill="rgb(216,171,47)"/><text x="1025.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.17%)</title><rect x="1033" y="388" width="2" height="15" fill="rgb(221,177,43)"/><text x="1036.00" y="398.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (1 samples, 0.17%)</title><rect x="1035" y="340" width="2" height="15" fill="rgb(209,225,11)"/><text x="1038.00" y="350.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (1 samples, 0.17%)</title><rect x="1039" y="404" width="2" height="15" fill="rgb(206,190,53)"/><text x="1042.00" y="414.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (207 samples, 35.75%)</title><rect x="621" y="276" width="422" height="15" fill="rgb(251,79,18)"/><text x="624.00" y="286.50">_accumulate_prediction (sklearn/ensemble/_forest.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (13 samples, 2.25%)</title><rect x="1016" y="292" width="27" height="15" fill="rgb(223,204,8)"/><text x="1019.00" y="302.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (13 samples, 2.25%)</title><rect x="1016" y="308" width="27" height="15" fill="rgb(234,136,32)"/><text x="1019.00" y="318.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (11 samples, 1.90%)</title><rect x="1020" y="324" width="23" height="15" fill="rgb(234,188,28)"/><text x="1023.00" y="334.50">e..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (3 samples, 0.52%)</title><rect x="1037" y="340" width="6" height="15" fill="rgb(205,97,1)"/><text x="1040.00" y="350.50"></text></g><g><title>DOUBLE_add (loops.c.src) (3 samples, 0.52%)</title><rect x="1037" y="356" width="6" height="15" fill="rgb(210,102,29)"/><text x="1040.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (3 samples, 0.52%)</title><rect x="1037" y="372" width="6" height="15" fill="rgb(223,149,41)"/><text x="1040.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (3 samples, 0.52%)</title><rect x="1037" y="388" width="6" height="15" fill="rgb(212,36,38)"/><text x="1040.00" y="398.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (1 samples, 0.17%)</title><rect x="1041" y="404" width="2" height="15" fill="rgb(251,51,49)"/><text x="1044.00" y="414.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.17%)</title><rect x="1043" y="292" width="2" height="15" fill="rgb(213,21,53)"/><text x="1046.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.17%)</title><rect x="1043" y="308" width="2" height="15" fill="rgb(247,157,13)"/><text x="1046.00" y="318.50"></text></g><g><title>0x7f36a5d4af10 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="1043" y="324" width="2" height="15" fill="rgb(242,113,9)"/><text x="1046.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (212 samples, 36.61%)</title><rect x="615" y="260" width="432" height="15" fill="rgb(232,215,3)"/><text x="618.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py)</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.35%)</title><rect x="1043" y="276" width="4" height="15" fill="rgb(207,158,46)"/><text x="1046.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.17%)</title><rect x="1045" y="292" width="2" height="15" fill="rgb(240,196,17)"/><text x="1048.00" y="302.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.17%)</title><rect x="1045" y="308" width="2" height="15" fill="rgb(236,209,31)"/><text x="1048.00" y="318.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.17%)</title><rect x="1045" y="324" width="2" height="15" fill="rgb(250,54,21)"/><text x="1048.00" y="334.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.17%)</title><rect x="1045" y="340" width="2" height="15" fill="rgb(245,126,39)"/><text x="1048.00" y="350.50"></text></g><g><title>0x7f36a6b28a84 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="1045" y="356" width="2" height="15" fill="rgb(230,190,38)"/><text x="1048.00" y="366.50"></text></g><g><title>__enter__ (joblib/parallel.py) (1 samples, 0.17%)</title><rect x="1047" y="260" width="2" height="15" fill="rgb(224,29,6)"/><text x="1050.00" y="270.50"></text></g><g><title>__exit__ (joblib/parallel.py) (3 samples, 0.52%)</title><rect x="1049" y="260" width="6" height="15" fill="rgb(210,206,54)"/><text x="1052.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py) (3 samples, 0.52%)</title><rect x="1049" y="276" width="6" height="15" fill="rgb(252,131,1)"/><text x="1052.00" y="286.50"></text></g><g><title>_dispatch (joblib/parallel.py) (243 samples, 41.97%)</title><rect x="566" y="196" width="495" height="15" fill="rgb(223,144,39)"/><text x="569.00" y="206.50">_dispatch (joblib/parallel.py)</text></g><g><title>apply_async (joblib/_parallel_backends.py) (236 samples, 40.76%)</title><rect x="580" y="212" width="481" height="15" fill="rgb(219,78,50)"/><text x="583.00" y="222.50">apply_async (joblib/_parallel_backends.py)</text></g><g><title>__init__ (joblib/_parallel_backends.py) (232 samples, 40.07%)</title><rect x="588" y="228" width="473" height="15" fill="rgb(236,2,52)"/><text x="591.00" y="238.50">__init__ (joblib/_parallel_backends.py)</text></g><g><title>__call__ (joblib/parallel.py) (230 samples, 39.72%)</title><rect x="592" y="244" width="469" height="15" fill="rgb(239,37,25)"/><text x="595.00" y="254.50">__call__ (joblib/parallel.py)</text></g><g><title>__init__ (joblib/parallel.py) (3 samples, 0.52%)</title><rect x="1055" y="260" width="6" height="15" fill="rgb(251,136,48)"/><text x="1058.00" y="270.50"></text></g><g><title>compute_batch_size (joblib/_parallel_backends.py) (1 samples, 0.17%)</title><rect x="1061" y="196" width="2" height="15" fill="rgb(236,215,5)"/><text x="1064.00" y="206.50"></text></g><g><title>__enter__ (threading.py) (1 samples, 0.17%)</title><rect x="1081" y="212" width="3" height="15" fill="rgb(217,4,37)"/><text x="1084.00" y="222.50"></text></g><g><title>__exit__ (threading.py) (1 samples, 0.17%)</title><rect x="1084" y="212" width="2" height="15" fill="rgb(222,91,13)"/><text x="1087.00" y="222.50"></text></g><g><title>lock_PyThread_release_lock (python3.7) (1 samples, 0.17%)</title><rect x="1084" y="228" width="2" height="15" fill="rgb(236,20,41)"/><text x="1087.00" y="238.50"></text></g><g><title>PyThread_release_lock (python3.7) (1 samples, 0.17%)</title><rect x="1084" y="244" width="2" height="15" fill="rgb(218,47,52)"/><text x="1087.00" y="254.50"></text></g><g><title>sem_post@@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="1084" y="260" width="2" height="15" fill="rgb(226,202,47)"/><text x="1087.00" y="270.50"></text></g><g><title>_qsize (queue.py) (1 samples, 0.17%)</title><rect x="1086" y="212" width="2" height="15" fill="rgb(217,18,0)"/><text x="1089.00" y="222.50"></text></g><g><title>get (queue.py) (16 samples, 2.76%)</title><rect x="1063" y="196" width="33" height="15" fill="rgb(246,84,25)"/><text x="1066.00" y="206.50">ge..</text></g><g><title>notify (threading.py) (4 samples, 0.69%)</title><rect x="1088" y="212" width="8" height="15" fill="rgb(238,41,29)"/><text x="1091.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (1 samples, 0.17%)</title><rect x="1094" y="228" width="2" height="15" fill="rgb(206,63,49)"/><text x="1097.00" y="238.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.17%)</title><rect x="1094" y="244" width="2" height="15" fill="rgb(224,57,2)"/><text x="1097.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.69%)</title><rect x="1108" y="212" width="8" height="15" fill="rgb(230,203,43)"/><text x="1111.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (9 samples, 1.55%)</title><rect x="1116" y="212" width="18" height="15" fill="rgb(214,106,20)"/><text x="1119.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (6 samples, 1.04%)</title><rect x="1122" y="228" width="12" height="15" fill="rgb(207,83,12)"/><text x="1125.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (2 samples, 0.35%)</title><rect x="1130" y="244" width="4" height="15" fill="rgb(248,47,26)"/><text x="1133.00" y="254.50"></text></g><g><title>0x7f36a6b396d4 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="1137" y="228" width="2" height="15" fill="rgb(213,96,43)"/><text x="1140.00" y="238.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (23 samples, 3.97%)</title><rect x="1096" y="196" width="47" height="15" fill="rgb(239,186,17)"/><text x="1099.00" y="206.50">get_..</text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.69%)</title><rect x="1134" y="212" width="9" height="15" fill="rgb(227,68,19)"/><text x="1137.00" y="222.50"></text></g><g><title>unicode_dealloc (python3.7) (2 samples, 0.35%)</title><rect x="1139" y="228" width="4" height="15" fill="rgb(238,122,41)"/><text x="1142.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (324 samples, 55.96%)</title><rect x="497" y="180" width="660" height="15" fill="rgb(252,178,28)"/><text x="500.00" y="190.50">dispatch_one_batch (joblib/parallel.py)</text></g><g><title>put (queue.py) (7 samples, 1.21%)</title><rect x="1143" y="196" width="14" height="15" fill="rgb(237,48,43)"/><text x="1146.00" y="206.50"></text></g><g><title>notify (threading.py) (6 samples, 1.04%)</title><rect x="1145" y="212" width="12" height="15" fill="rgb(208,214,29)"/><text x="1148.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (2 samples, 0.35%)</title><rect x="1153" y="228" width="4" height="15" fill="rgb(234,123,27)"/><text x="1156.00" y="238.50"></text></g><g><title>retrieve (joblib/parallel.py) (5 samples, 0.86%)</title><rect x="1157" y="180" width="10" height="15" fill="rgb(213,65,12)"/><text x="1160.00" y="190.50"></text></g><g><title>get (joblib/_parallel_backends.py) (1 samples, 0.17%)</title><rect x="1165" y="196" width="2" height="15" fill="rgb(243,51,11)"/><text x="1168.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py) (337 samples, 58.20%)</title><rect x="482" y="164" width="687" height="15" fill="rgb(238,81,32)"/><text x="485.00" y="174.50">__call__ (joblib/parallel.py)</text></g><g><title>short_format_time (joblib/logger.py) (1 samples, 0.17%)</title><rect x="1167" y="180" width="2" height="15" fill="rgb(215,51,41)"/><text x="1170.00" y="190.50"></text></g><g><title>_squeeze_time (joblib/logger.py) (1 samples, 0.17%)</title><rect x="1167" y="196" width="2" height="15" fill="rgb(219,139,49)"/><text x="1170.00" y="206.50"></text></g><g><title>__init__ (queue.py) (1 samples, 0.17%)</title><rect x="1169" y="180" width="2" height="15" fill="rgb(215,105,44)"/><text x="1172.00" y="190.50"></text></g><g><title>__init__ (threading.py) (1 samples, 0.17%)</title><rect x="1169" y="196" width="2" height="15" fill="rgb(231,7,34)"/><text x="1172.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py) (2 samples, 0.35%)</title><rect x="1169" y="164" width="4" height="15" fill="rgb(215,181,43)"/><text x="1172.00" y="174.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (1 samples, 0.17%)</title><rect x="1171" y="180" width="2" height="15" fill="rgb(210,108,24)"/><text x="1174.00" y="190.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (1 samples, 0.17%)</title><rect x="1171" y="196" width="2" height="15" fill="rgb(214,189,34)"/><text x="1174.00" y="206.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (340 samples, 58.72%)</title><rect x="482" y="100" width="693" height="15" fill="rgb(234,70,0)"/><text x="485.00" y="110.50">profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (340 samples, 58.72%)</title><rect x="482" y="116" width="693" height="15" fill="rgb(222,212,51)"/><text x="485.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (340 samples, 58.72%)</title><rect x="482" y="132" width="693" height="15" fill="rgb(243,181,25)"/><text x="485.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py) (340 samples, 58.72%)</title><rect x="482" y="148" width="693" height="15" fill="rgb(250,87,13)"/><text x="485.00" y="158.50">predict_proba (sklearn/ensemble/_forest.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.17%)</title><rect x="1173" y="164" width="2" height="15" fill="rgb(236,27,9)"/><text x="1176.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.17%)</title><rect x="1173" y="180" width="2" height="15" fill="rgb(231,79,32)"/><text x="1176.00" y="190.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.17%)</title><rect x="1173" y="196" width="2" height="15" fill="rgb(210,216,24)"/><text x="1176.00" y="206.50"></text></g><g><title>&lt;listcomp&gt; (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.17%)</title><rect x="1175" y="292" width="2" height="15" fill="rgb(245,18,29)"/><text x="1178.00" y="302.50"></text></g><g><title>_to_bytes_or_false (onnx/helper.py) (1 samples, 0.17%)</title><rect x="1175" y="308" width="2" height="15" fill="rgb(249,6,48)"/><text x="1178.00" y="318.50"></text></g><g><title>profile_skl (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (342 samples, 59.07%)</title><rect x="482" y="68" width="697" height="15" fill="rgb(217,73,8)"/><text x="485.00" y="78.50">profile_skl (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (342 samples, 59.07%)</title><rect x="482" y="84" width="697" height="15" fill="rgb(216,124,49)"/><text x="485.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py)</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.35%)</title><rect x="1175" y="100" width="4" height="15" fill="rgb(222,207,32)"/><text x="1178.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.35%)</title><rect x="1175" y="116" width="4" height="15" fill="rgb(234,146,38)"/><text x="1178.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.35%)</title><rect x="1175" y="132" width="4" height="15" fill="rgb(250,175,37)"/><text x="1178.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (2 samples, 0.35%)</title><rect x="1175" y="148" width="4" height="15" fill="rgb(231,94,33)"/><text x="1178.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (2 samples, 0.35%)</title><rect x="1175" y="164" width="4" height="15" fill="rgb(230,30,43)"/><text x="1178.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (2 samples, 0.35%)</title><rect x="1175" y="180" width="4" height="15" fill="rgb(232,4,0)"/><text x="1178.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py) (2 samples, 0.35%)</title><rect x="1175" y="196" width="4" height="15" fill="rgb(227,212,16)"/><text x="1178.00" y="206.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (2 samples, 0.35%)</title><rect x="1175" y="212" width="4" height="15" fill="rgb(244,165,39)"/><text x="1178.00" y="222.50"></text></g><g><title>make_node (skl2onnx/proto/onnx_helper_modified.py) (2 samples, 0.35%)</title><rect x="1175" y="228" width="4" height="15" fill="rgb(247,75,48)"/><text x="1178.00" y="238.50"></text></g><g><title>google::protobuf::python::repeated_composite_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.35%)</title><rect x="1175" y="244" width="4" height="15" fill="rgb(251,55,14)"/><text x="1178.00" y="254.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py) (2 samples, 0.35%)</title><rect x="1175" y="260" width="4" height="15" fill="rgb(249,0,54)"/><text x="1178.00" y="270.50"></text></g><g><title>make_attribute (skl2onnx/proto/onnx_helper_modified.py) (2 samples, 0.35%)</title><rect x="1175" y="276" width="4" height="15" fill="rgb(205,102,9)"/><text x="1178.00" y="286.50"></text></g><g><title>google::protobuf::python::repeated_scalar_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="1177" y="292" width="2" height="15" fill="rgb(232,71,39)"/><text x="1180.00" y="302.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.17%)</title><rect x="1177" y="308" width="2" height="15" fill="rgb(244,44,21)"/><text x="1180.00" y="318.50"></text></g><g><title>_get_dataset (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.17%)</title><rect x="1179" y="116" width="2" height="15" fill="rgb(243,97,35)"/><text x="1182.00" y="126.50"></text></g><g><title>load_iris (sklearn/datasets/_base.py) (1 samples, 0.17%)</title><rect x="1179" y="132" width="2" height="15" fill="rgb(209,55,43)"/><text x="1182.00" y="142.50"></text></g><g><title>load_data (sklearn/datasets/_base.py) (1 samples, 0.17%)</title><rect x="1179" y="148" width="2" height="15" fill="rgb(222,69,43)"/><text x="1182.00" y="158.50"></text></g><g><title>array_assign_subscript (mapping.c) (1 samples, 0.17%)</title><rect x="1179" y="164" width="2" height="15" fill="rgb(232,99,0)"/><text x="1182.00" y="174.50"></text></g><g><title>PyArray_CopyObject (arrayobject.c) (1 samples, 0.17%)</title><rect x="1179" y="180" width="2" height="15" fill="rgb(241,122,12)"/><text x="1182.00" y="190.50"></text></g><g><title>exists (genericpath.py) (1 samples, 0.17%)</title><rect x="1181" y="116" width="2" height="15" fill="rgb(213,65,34)"/><text x="1184.00" y="126.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.17%)</title><rect x="1181" y="132" width="2" height="15" fill="rgb(241,48,39)"/><text x="1184.00" y="142.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.17%)</title><rect x="1181" y="148" width="2" height="15" fill="rgb(238,41,36)"/><text x="1184.00" y="158.50"></text></g><g><title>0x7f36a6b49124 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="1183" y="260" width="2" height="15" fill="rgb(224,70,33)"/><text x="1186.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_forest.py) (2 samples, 0.35%)</title><rect x="1183" y="132" width="4" height="15" fill="rgb(235,90,5)"/><text x="1186.00" y="142.50"></text></g><g><title>_make_estimator (sklearn/ensemble/_base.py) (2 samples, 0.35%)</title><rect x="1183" y="148" width="4" height="15" fill="rgb(227,70,18)"/><text x="1186.00" y="158.50"></text></g><g><title>set_params (sklearn/base.py) (2 samples, 0.35%)</title><rect x="1183" y="164" width="4" height="15" fill="rgb(240,49,51)"/><text x="1186.00" y="174.50"></text></g><g><title>get_params (sklearn/base.py) (2 samples, 0.35%)</title><rect x="1183" y="180" width="4" height="15" fill="rgb(231,176,3)"/><text x="1186.00" y="190.50"></text></g><g><title>_get_param_names (sklearn/base.py) (2 samples, 0.35%)</title><rect x="1183" y="196" width="4" height="15" fill="rgb(210,101,27)"/><text x="1186.00" y="206.50"></text></g><g><title>signature (inspect.py) (2 samples, 0.35%)</title><rect x="1183" y="212" width="4" height="15" fill="rgb(218,47,15)"/><text x="1186.00" y="222.50"></text></g><g><title>from_callable (inspect.py) (2 samples, 0.35%)</title><rect x="1183" y="228" width="4" height="15" fill="rgb(241,159,14)"/><text x="1186.00" y="238.50"></text></g><g><title>_signature_from_callable (inspect.py) (2 samples, 0.35%)</title><rect x="1183" y="244" width="4" height="15" fill="rgb(205,97,19)"/><text x="1186.00" y="254.50"></text></g><g><title>_signature_from_function (inspect.py) (1 samples, 0.17%)</title><rect x="1185" y="260" width="2" height="15" fill="rgb(229,42,53)"/><text x="1188.00" y="270.50"></text></g><g><title>all (579 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(254,174,10)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (579 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(239,179,29)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py)</text></g><g><title>start (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py) (5 samples, 0.86%)</title><rect x="1179" y="68" width="11" height="15" fill="rgb(250,159,22)"/><text x="1182.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py) (5 samples, 0.86%)</title><rect x="1179" y="84" width="11" height="15" fill="rgb(249,82,44)"/><text x="1182.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 0.86%)</title><rect x="1179" y="100" width="11" height="15" fill="rgb(219,222,9)"/><text x="1182.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py) (3 samples, 0.52%)</title><rect x="1183" y="116" width="7" height="15" fill="rgb(241,14,34)"/><text x="1186.00" y="126.50"></text></g><g><title>__call__ (joblib/parallel.py) (1 samples, 0.17%)</title><rect x="1187" y="132" width="3" height="15" fill="rgb(229,124,10)"/><text x="1190.00" y="142.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (1 samples, 0.17%)</title><rect x="1187" y="148" width="3" height="15" fill="rgb(227,219,19)"/><text x="1190.00" y="158.50"></text></g><g><title>_dispatch (joblib/parallel.py) (1 samples, 0.17%)</title><rect x="1187" y="164" width="3" height="15" fill="rgb(212,101,0)"/><text x="1190.00" y="174.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (1 samples, 0.17%)</title><rect x="1187" y="180" width="3" height="15" fill="rgb(230,132,38)"/><text x="1190.00" y="190.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (1 samples, 0.17%)</title><rect x="1187" y="196" width="3" height="15" fill="rgb(216,110,27)"/><text x="1190.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py) (1 samples, 0.17%)</title><rect x="1187" y="212" width="3" height="15" fill="rgb(244,127,9)"/><text x="1190.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (1 samples, 0.17%)</title><rect x="1187" y="228" width="3" height="15" fill="rgb(214,164,23)"/><text x="1190.00" y="238.50"></text></g><g><title>_parallel_build_trees (sklearn/ensemble/_forest.py) (1 samples, 0.17%)</title><rect x="1187" y="244" width="3" height="15" fill="rgb(244,208,22)"/><text x="1190.00" y="254.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (1 samples, 0.17%)</title><rect x="1187" y="260" width="3" height="15" fill="rgb(220,114,31)"/><text x="1190.00" y="270.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (1 samples, 0.17%)</title><rect x="1187" y="276" width="3" height="15" fill="rgb(218,138,27)"/><text x="1190.00" y="286.50"></text></g><g><title>0x7f3680560b11 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="1187" y="292" width="3" height="15" fill="rgb(215,198,29)"/><text x="1190.00" y="302.50"></text></g><g><title>0x7f368059210a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="1187" y="308" width="3" height="15" fill="rgb(252,139,19)"/><text x="1190.00" y="318.50"></text></g><g><title>0x7f36807bde2e (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="1187" y="324" width="3" height="15" fill="rgb(232,2,44)"/><text x="1190.00" y="334.50"></text></g><g><title>0x7f36809fa01c (sklearn/tree/_criterion.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="1187" y="340" width="3" height="15" fill="rgb(207,211,46)"/><text x="1190.00" y="350.50"></text></g></g></svg>