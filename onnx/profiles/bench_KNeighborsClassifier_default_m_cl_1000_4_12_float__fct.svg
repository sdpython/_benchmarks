<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1382" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1365.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1365.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (3 samples, 0.13%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(233,112,7)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (3 samples, 0.13%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(248,201,46)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (2 samples, 0.09%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(252,217,47)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (2 samples, 0.09%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(210,151,30)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="10" y="932" width="1" height="15" fill="rgb(242,177,13)"/><text x="13.00" y="942.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (2 samples, 0.09%)</title><rect x="12" y="900" width="1" height="15" fill="rgb(251,120,0)"/><text x="15.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (2 samples, 0.09%)</title><rect x="12" y="916" width="1" height="15" fill="rgb(245,220,28)"/><text x="15.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (2 samples, 0.09%)</title><rect x="12" y="932" width="1" height="15" fill="rgb(240,34,25)"/><text x="15.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.09%)</title><rect x="12" y="948" width="1" height="15" fill="rgb(247,24,21)"/><text x="15.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.09%)</title><rect x="12" y="964" width="1" height="15" fill="rgb(216,68,36)"/><text x="15.00" y="974.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (7 samples, 0.30%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(227,114,42)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(228,213,51)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(210,12,15)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(248,1,9)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.30%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(233,164,48)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(213,102,31)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (7 samples, 0.30%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(217,183,30)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(226,211,24)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(234,141,29)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(248,98,2)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.30%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(252,207,24)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(211,122,9)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (7 samples, 0.30%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(234,119,7)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(230,219,47)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(210,88,51)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(214,103,19)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.30%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(231,82,20)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(246,142,8)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (7 samples, 0.30%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(234,185,18)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(243,57,19)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(240,116,47)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="628" width="3" height="15" fill="rgb(251,158,11)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="644" width="3" height="15" fill="rgb(253,206,13)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="660" width="3" height="15" fill="rgb(237,77,31)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="676" width="3" height="15" fill="rgb(229,20,30)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.30%)</title><rect x="10" y="692" width="3" height="15" fill="rgb(249,105,54)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="708" width="3" height="15" fill="rgb(211,164,17)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (7 samples, 0.30%)</title><rect x="10" y="724" width="3" height="15" fill="rgb(206,170,28)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="740" width="3" height="15" fill="rgb(224,52,31)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="756" width="3" height="15" fill="rgb(226,176,32)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="772" width="3" height="15" fill="rgb(248,190,5)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.30%)</title><rect x="10" y="788" width="3" height="15" fill="rgb(238,46,48)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.30%)</title><rect x="10" y="804" width="3" height="15" fill="rgb(210,27,1)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (7 samples, 0.30%)</title><rect x="10" y="820" width="3" height="15" fill="rgb(209,225,37)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (7 samples, 0.30%)</title><rect x="10" y="836" width="3" height="15" fill="rgb(208,208,11)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (7 samples, 0.30%)</title><rect x="10" y="852" width="3" height="15" fill="rgb(214,184,12)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.13%)</title><rect x="12" y="868" width="1" height="15" fill="rgb(207,57,49)"/><text x="15.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (3 samples, 0.13%)</title><rect x="12" y="884" width="1" height="15" fill="rgb(210,160,24)"/><text x="15.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.39%)</title><rect x="10" y="196" width="4" height="15" fill="rgb(236,150,30)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.39%)</title><rect x="10" y="212" width="4" height="15" fill="rgb(253,70,12)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.39%)</title><rect x="10" y="228" width="4" height="15" fill="rgb(230,208,15)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.39%)</title><rect x="10" y="244" width="4" height="15" fill="rgb(240,150,23)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 0.39%)</title><rect x="10" y="260" width="4" height="15" fill="rgb(244,15,46)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.39%)</title><rect x="10" y="276" width="4" height="15" fill="rgb(237,1,4)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (2 samples, 0.09%)</title><rect x="13" y="292" width="1" height="15" fill="rgb(251,107,17)"/><text x="16.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="308" width="1" height="15" fill="rgb(244,82,1)"/><text x="16.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="324" width="1" height="15" fill="rgb(214,49,15)"/><text x="16.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="340" width="1" height="15" fill="rgb(225,116,34)"/><text x="16.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="13" y="356" width="1" height="15" fill="rgb(253,32,41)"/><text x="16.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="372" width="1" height="15" fill="rgb(232,133,48)"/><text x="16.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (2 samples, 0.09%)</title><rect x="13" y="388" width="1" height="15" fill="rgb(231,98,15)"/><text x="16.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="404" width="1" height="15" fill="rgb(210,18,0)"/><text x="16.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="420" width="1" height="15" fill="rgb(242,59,5)"/><text x="16.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="436" width="1" height="15" fill="rgb(253,167,27)"/><text x="16.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="13" y="452" width="1" height="15" fill="rgb(217,169,54)"/><text x="16.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="468" width="1" height="15" fill="rgb(220,70,45)"/><text x="16.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (2 samples, 0.09%)</title><rect x="13" y="484" width="1" height="15" fill="rgb(213,28,31)"/><text x="16.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="500" width="1" height="15" fill="rgb(216,213,40)"/><text x="16.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="516" width="1" height="15" fill="rgb(217,10,38)"/><text x="16.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="532" width="1" height="15" fill="rgb(245,176,39)"/><text x="16.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="13" y="548" width="1" height="15" fill="rgb(206,103,44)"/><text x="16.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="564" width="1" height="15" fill="rgb(246,151,46)"/><text x="16.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (2 samples, 0.09%)</title><rect x="13" y="580" width="1" height="15" fill="rgb(223,178,29)"/><text x="16.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="596" width="1" height="15" fill="rgb(226,161,51)"/><text x="16.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="612" width="1" height="15" fill="rgb(228,138,44)"/><text x="16.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="628" width="1" height="15" fill="rgb(229,227,47)"/><text x="16.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="13" y="644" width="1" height="15" fill="rgb(248,158,51)"/><text x="16.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="660" width="1" height="15" fill="rgb(243,78,10)"/><text x="16.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (2 samples, 0.09%)</title><rect x="13" y="676" width="1" height="15" fill="rgb(206,166,25)"/><text x="16.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="692" width="1" height="15" fill="rgb(253,228,2)"/><text x="16.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="708" width="1" height="15" fill="rgb(218,165,30)"/><text x="16.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="724" width="1" height="15" fill="rgb(244,190,15)"/><text x="16.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="13" y="740" width="1" height="15" fill="rgb(251,36,31)"/><text x="16.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="756" width="1" height="15" fill="rgb(214,217,51)"/><text x="16.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (2 samples, 0.09%)</title><rect x="13" y="772" width="1" height="15" fill="rgb(223,202,11)"/><text x="16.00" y="782.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="484" width="1" height="15" fill="rgb(208,94,14)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="500" width="1" height="15" fill="rgb(210,206,28)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="516" width="1" height="15" fill="rgb(238,86,19)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="532" width="1" height="15" fill="rgb(242,50,46)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="548" width="1" height="15" fill="rgb(252,97,31)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="564" width="1" height="15" fill="rgb(213,214,17)"/><text x="17.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (2 samples, 0.09%)</title><rect x="14" y="580" width="1" height="15" fill="rgb(254,180,19)"/><text x="17.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="596" width="1" height="15" fill="rgb(234,129,53)"/><text x="17.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="612" width="1" height="15" fill="rgb(223,23,50)"/><text x="17.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="628" width="1" height="15" fill="rgb(219,181,52)"/><text x="17.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="644" width="1" height="15" fill="rgb(236,4,32)"/><text x="17.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="660" width="1" height="15" fill="rgb(247,116,12)"/><text x="17.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (2 samples, 0.09%)</title><rect x="14" y="676" width="1" height="15" fill="rgb(249,135,45)"/><text x="17.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="692" width="1" height="15" fill="rgb(243,14,27)"/><text x="17.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="708" width="1" height="15" fill="rgb(250,205,7)"/><text x="17.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="724" width="1" height="15" fill="rgb(229,26,44)"/><text x="17.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="740" width="1" height="15" fill="rgb(225,62,18)"/><text x="17.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="756" width="1" height="15" fill="rgb(217,70,48)"/><text x="17.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (2 samples, 0.09%)</title><rect x="14" y="772" width="1" height="15" fill="rgb(215,114,12)"/><text x="17.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="788" width="1" height="15" fill="rgb(206,184,17)"/><text x="17.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="804" width="1" height="15" fill="rgb(205,48,22)"/><text x="17.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="820" width="1" height="15" fill="rgb(251,54,44)"/><text x="17.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="836" width="1" height="15" fill="rgb(243,57,38)"/><text x="17.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="852" width="1" height="15" fill="rgb(231,169,49)"/><text x="17.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (2 samples, 0.09%)</title><rect x="14" y="868" width="1" height="15" fill="rgb(209,143,20)"/><text x="17.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="884" width="1" height="15" fill="rgb(242,137,8)"/><text x="17.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="900" width="1" height="15" fill="rgb(240,117,17)"/><text x="17.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="916" width="1" height="15" fill="rgb(225,145,54)"/><text x="17.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="932" width="1" height="15" fill="rgb(222,81,5)"/><text x="17.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="948" width="1" height="15" fill="rgb(251,93,54)"/><text x="17.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="964" width="1" height="15" fill="rgb(216,184,36)"/><text x="17.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="980" width="1" height="15" fill="rgb(245,213,21)"/><text x="17.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="996" width="1" height="15" fill="rgb(229,172,40)"/><text x="17.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (2 samples, 0.09%)</title><rect x="14" y="1012" width="1" height="15" fill="rgb(237,75,2)"/><text x="17.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1028" width="1" height="15" fill="rgb(227,173,37)"/><text x="17.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1044" width="1" height="15" fill="rgb(209,176,12)"/><text x="17.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1060" width="1" height="15" fill="rgb(219,54,47)"/><text x="17.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="1076" width="1" height="15" fill="rgb(216,193,23)"/><text x="17.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1092" width="1" height="15" fill="rgb(226,97,21)"/><text x="17.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (2 samples, 0.09%)</title><rect x="14" y="1108" width="1" height="15" fill="rgb(248,42,9)"/><text x="17.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1124" width="1" height="15" fill="rgb(214,142,10)"/><text x="17.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1140" width="1" height="15" fill="rgb(212,153,21)"/><text x="17.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1156" width="1" height="15" fill="rgb(242,128,14)"/><text x="17.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1172" width="1" height="15" fill="rgb(241,34,42)"/><text x="17.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1188" width="1" height="15" fill="rgb(212,171,22)"/><text x="17.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="1204" width="1" height="15" fill="rgb(220,203,33)"/><text x="17.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1220" width="1" height="15" fill="rgb(231,140,39)"/><text x="17.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (2 samples, 0.09%)</title><rect x="14" y="1236" width="1" height="15" fill="rgb(211,159,11)"/><text x="17.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1252" width="1" height="15" fill="rgb(230,82,15)"/><text x="17.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1268" width="1" height="15" fill="rgb(223,34,23)"/><text x="17.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1284" width="1" height="15" fill="rgb(254,66,8)"/><text x="17.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1300" width="1" height="15" fill="rgb(229,196,40)"/><text x="17.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="1316" width="1" height="15" fill="rgb(216,14,35)"/><text x="17.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="1332" width="1" height="15" fill="rgb(230,40,27)"/><text x="17.00" y="1342.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.57%)</title><rect x="10" y="68" width="6" height="15" fill="rgb(249,181,18)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.57%)</title><rect x="10" y="84" width="6" height="15" fill="rgb(209,160,27)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.57%)</title><rect x="10" y="100" width="6" height="15" fill="rgb(243,93,34)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 0.57%)</title><rect x="10" y="116" width="6" height="15" fill="rgb(244,197,20)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.57%)</title><rect x="10" y="132" width="6" height="15" fill="rgb(242,99,44)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py) (13 samples, 0.57%)</title><rect x="10" y="148" width="6" height="15" fill="rgb(208,13,15)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.57%)</title><rect x="10" y="164" width="6" height="15" fill="rgb(251,41,28)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.57%)</title><rect x="10" y="180" width="6" height="15" fill="rgb(214,127,54)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="196" width="2" height="15" fill="rgb(234,23,31)"/><text x="17.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.17%)</title><rect x="14" y="212" width="2" height="15" fill="rgb(234,50,4)"/><text x="17.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="228" width="2" height="15" fill="rgb(215,211,16)"/><text x="17.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (4 samples, 0.17%)</title><rect x="14" y="244" width="2" height="15" fill="rgb(242,119,33)"/><text x="17.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="260" width="2" height="15" fill="rgb(251,30,33)"/><text x="17.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="276" width="2" height="15" fill="rgb(247,36,53)"/><text x="17.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="292" width="2" height="15" fill="rgb(229,216,37)"/><text x="17.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.17%)</title><rect x="14" y="308" width="2" height="15" fill="rgb(222,72,38)"/><text x="17.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="324" width="2" height="15" fill="rgb(249,176,40)"/><text x="17.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.17%)</title><rect x="14" y="340" width="2" height="15" fill="rgb(230,13,43)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="356" width="2" height="15" fill="rgb(223,131,21)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="372" width="2" height="15" fill="rgb(218,103,38)"/><text x="17.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="388" width="2" height="15" fill="rgb(227,135,44)"/><text x="17.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.17%)</title><rect x="14" y="404" width="2" height="15" fill="rgb(238,139,49)"/><text x="17.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="420" width="2" height="15" fill="rgb(214,96,20)"/><text x="17.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (4 samples, 0.17%)</title><rect x="14" y="436" width="2" height="15" fill="rgb(225,62,29)"/><text x="17.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="452" width="2" height="15" fill="rgb(228,42,32)"/><text x="17.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="14" y="468" width="2" height="15" fill="rgb(229,138,38)"/><text x="17.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="484" width="1" height="15" fill="rgb(239,84,42)"/><text x="18.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="15" y="500" width="1" height="15" fill="rgb(227,140,35)"/><text x="18.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="516" width="1" height="15" fill="rgb(216,135,40)"/><text x="18.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.09%)</title><rect x="15" y="532" width="1" height="15" fill="rgb(222,12,15)"/><text x="18.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="548" width="1" height="15" fill="rgb(251,110,32)"/><text x="18.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="564" width="1" height="15" fill="rgb(236,128,14)"/><text x="18.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="580" width="1" height="15" fill="rgb(242,73,28)"/><text x="18.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="15" y="596" width="1" height="15" fill="rgb(225,133,8)"/><text x="18.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="612" width="1" height="15" fill="rgb(227,112,48)"/><text x="18.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (2 samples, 0.09%)</title><rect x="15" y="628" width="1" height="15" fill="rgb(210,150,37)"/><text x="18.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="644" width="1" height="15" fill="rgb(231,229,45)"/><text x="18.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="660" width="1" height="15" fill="rgb(248,207,47)"/><text x="18.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="676" width="1" height="15" fill="rgb(209,220,33)"/><text x="18.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="15" y="692" width="1" height="15" fill="rgb(207,192,38)"/><text x="18.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="708" width="1" height="15" fill="rgb(244,50,20)"/><text x="18.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (2 samples, 0.09%)</title><rect x="15" y="724" width="1" height="15" fill="rgb(238,211,7)"/><text x="18.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="740" width="1" height="15" fill="rgb(215,183,40)"/><text x="18.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="756" width="1" height="15" fill="rgb(237,222,12)"/><text x="18.00" y="766.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="772" width="1" height="15" fill="rgb(251,99,19)"/><text x="18.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="788" width="1" height="15" fill="rgb(252,1,10)"/><text x="18.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="804" width="1" height="15" fill="rgb(208,140,5)"/><text x="18.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="820" width="1" height="15" fill="rgb(251,93,53)"/><text x="18.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="15" y="836" width="1" height="15" fill="rgb(207,107,6)"/><text x="18.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="852" width="1" height="15" fill="rgb(251,66,13)"/><text x="18.00" y="862.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/__init__.py) (2 samples, 0.09%)</title><rect x="15" y="868" width="1" height="15" fill="rgb(251,215,18)"/><text x="18.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="884" width="1" height="15" fill="rgb(205,186,15)"/><text x="18.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="900" width="1" height="15" fill="rgb(248,223,23)"/><text x="18.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="916" width="1" height="15" fill="rgb(229,90,39)"/><text x="18.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="15" y="932" width="1" height="15" fill="rgb(236,181,10)"/><text x="18.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="15" y="948" width="1" height="15" fill="rgb(251,173,24)"/><text x="18.00" y="958.50"></text></g><g><title>0x7f3c3638eeb0 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="20" y="116" width="1" height="15" fill="rgb(250,140,8)"/><text x="23.00" y="126.50"></text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="21" y="340" width="1" height="15" fill="rgb(233,213,26)"/><text x="24.00" y="350.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="22" y="340" width="2" height="15" fill="rgb(209,220,17)"/><text x="25.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="22" y="356" width="2" height="15" fill="rgb(237,223,36)"/><text x="25.00" y="366.50"></text></g><g><title>onnxruntime::Div&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="24" y="340" width="2" height="15" fill="rgb(231,131,31)"/><text x="27.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="24" y="356" width="2" height="15" fill="rgb(213,95,25)"/><text x="27.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="24" y="372" width="2" height="15" fill="rgb(234,56,10)"/><text x="27.00" y="382.50"></text></g><g><title>onnxruntime::Equal&lt;long&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="26" y="340" width="1" height="15" fill="rgb(208,46,54)"/><text x="29.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;long, bool, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, long, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, long)#2}, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="26" y="356" width="1" height="15" fill="rgb(239,169,0)"/><text x="29.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;long, long&gt;, onnxruntime::TBroadcastOutput&lt;bool&gt;, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, long, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, long)#2}, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="26" y="372" width="1" height="15" fill="rgb(248,139,42)"/><text x="29.00" y="382.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="31" y="388" width="1" height="15" fill="rgb(225,85,20)"/><text x="34.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="31" y="404" width="1" height="15" fill="rgb(217,17,45)"/><text x="34.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="34" y="452" width="1" height="15" fill="rgb(242,66,29)"/><text x="37.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="35" y="468" width="1" height="15" fill="rgb(247,222,39)"/><text x="38.00" y="478.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="35" y="484" width="1" height="15" fill="rgb(219,91,16)"/><text x="38.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="35" y="452" width="2" height="15" fill="rgb(206,3,15)"/><text x="38.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.30%)</title><rect x="34" y="436" width="3" height="15" fill="rgb(253,138,24)"/><text x="37.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="37" y="436" width="3" height="15" fill="rgb(212,178,52)"/><text x="40.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="37" y="452" width="3" height="15" fill="rgb(205,111,14)"/><text x="40.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="38" y="468" width="2" height="15" fill="rgb(225,173,10)"/><text x="41.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="39" y="484" width="1" height="15" fill="rgb(250,94,7)"/><text x="42.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="39" y="500" width="1" height="15" fill="rgb(235,178,8)"/><text x="42.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="40" y="436" width="2" height="15" fill="rgb(249,171,40)"/><text x="43.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="40" y="452" width="2" height="15" fill="rgb(248,175,42)"/><text x="43.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="41" y="468" width="1" height="15" fill="rgb(209,78,38)"/><text x="44.00" y="478.50"></text></g><g><title>0x7f3c363aed94 (libc-2.29.so) (14 samples, 0.61%)</title><rect x="43" y="452" width="7" height="15" fill="rgb(251,35,22)"/><text x="46.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.70%)</title><rect x="42" y="436" width="9" height="15" fill="rgb(221,177,29)"/><text x="45.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="516" width="1" height="15" fill="rgb(233,70,15)"/><text x="142.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="532" width="1" height="15" fill="rgb(217,180,43)"/><text x="142.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="548" width="1" height="15" fill="rgb(209,150,31)"/><text x="142.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="139" y="468" width="2" height="15" fill="rgb(207,51,29)"/><text x="142.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="139" y="484" width="2" height="15" fill="rgb(211,52,47)"/><text x="142.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="139" y="500" width="2" height="15" fill="rgb(220,163,54)"/><text x="142.00" y="510.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="141" y="468" width="2" height="15" fill="rgb(230,149,26)"/><text x="144.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.09%)</title><rect x="142" y="484" width="1" height="15" fill="rgb(241,217,29)"/><text x="145.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="142" y="500" width="1" height="15" fill="rgb(237,197,22)"/><text x="145.00" y="510.50"></text></g><g><title>0x7f3c36390028 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="142" y="516" width="1" height="15" fill="rgb(243,120,20)"/><text x="145.00" y="526.50"></text></g><g><title>0x7f3c3638db9b (libc-2.29.so) (2 samples, 0.09%)</title><rect x="142" y="532" width="1" height="15" fill="rgb(247,89,17)"/><text x="145.00" y="542.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 7.22%)</title><rect x="59" y="452" width="85" height="15" fill="rgb(237,166,22)"/><text x="62.00" y="462.50">onnxruntim..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="143" y="468" width="1" height="15" fill="rgb(247,17,42)"/><text x="146.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.09%)</title><rect x="143" y="484" width="1" height="15" fill="rgb(231,81,11)"/><text x="146.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="143" y="500" width="1" height="15" fill="rgb(231,200,51)"/><text x="146.00" y="510.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 7.92%)</title><rect x="51" y="436" width="93" height="15" fill="rgb(244,162,9)"/><text x="54.00" y="446.50">onnxruntime..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (190 samples, 8.26%)</title><rect x="145" y="468" width="98" height="15" fill="rgb(224,201,18)"/><text x="148.00" y="478.50">onnxruntime..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 2.96%)</title><rect x="208" y="484" width="35" height="15" fill="rgb(228,91,16)"/><text x="211.00" y="494.50">on..</text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="243" y="468" width="2" height="15" fill="rgb(228,168,3)"/><text x="246.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="243" y="484" width="2" height="15" fill="rgb(240,177,24)"/><text x="246.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="243" y="500" width="2" height="15" fill="rgb(213,176,52)"/><text x="246.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="243" y="516" width="2" height="15" fill="rgb(218,105,52)"/><text x="246.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="243" y="532" width="2" height="15" fill="rgb(221,166,32)"/><text x="246.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="243" y="548" width="2" height="15" fill="rgb(212,13,21)"/><text x="246.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="244" y="564" width="1" height="15" fill="rgb(225,18,34)"/><text x="247.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="244" y="580" width="1" height="15" fill="rgb(224,166,23)"/><text x="247.00" y="590.50"></text></g><g><title>onnxruntime::IExecutionProvider::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="244" y="596" width="1" height="15" fill="rgb(228,92,34)"/><text x="247.00" y="606.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="245" y="500" width="2" height="15" fill="rgb(227,155,5)"/><text x="248.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.09%)</title><rect x="246" y="516" width="1" height="15" fill="rgb(235,197,44)"/><text x="249.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="246" y="532" width="1" height="15" fill="rgb(207,213,46)"/><text x="249.00" y="542.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="245" y="468" width="3" height="15" fill="rgb(205,106,13)"/><text x="248.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="245" y="484" width="3" height="15" fill="rgb(248,197,17)"/><text x="248.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="247" y="500" width="1" height="15" fill="rgb(252,74,2)"/><text x="250.00" y="510.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (420 samples, 18.27%)</title><rect x="33" y="420" width="215" height="15" fill="rgb(222,92,43)"/><text x="36.00" y="430.50">onnxruntime::SequentialExecu..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 8.79%)</title><rect x="144" y="436" width="104" height="15" fill="rgb(247,198,16)"/><text x="147.00" y="446.50">onnxruntime:..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 8.79%)</title><rect x="144" y="452" width="104" height="15" fill="rgb(254,229,2)"/><text x="147.00" y="462.50">onnxruntime:..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (421 samples, 18.31%)</title><rect x="33" y="388" width="216" height="15" fill="rgb(246,174,10)"/><text x="36.00" y="398.50">onnxruntime::utils::ExecuteS..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (421 samples, 18.31%)</title><rect x="33" y="404" width="216" height="15" fill="rgb(241,62,44)"/><text x="36.00" y="414.50">onnxruntime::utils::ExecuteG..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (431 samples, 18.75%)</title><rect x="28" y="356" width="221" height="15" fill="rgb(235,123,35)"/><text x="31.00" y="366.50">onnxruntime::ScanImpl::Execut..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (430 samples, 18.70%)</title><rect x="28" y="372" width="221" height="15" fill="rgb(246,14,48)"/><text x="31.00" y="382.50">onnxruntime::scan::detail::It..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (433 samples, 18.83%)</title><rect x="27" y="340" width="223" height="15" fill="rgb(245,137,24)"/><text x="30.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.22%)</title><rect x="250" y="340" width="2" height="15" fill="rgb(211,56,19)"/><text x="253.00" y="350.50"></text></g><g><title>0x7f3c3638eb87 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="328" y="372" width="1" height="15" fill="rgb(208,226,50)"/><text x="331.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (14 samples, 0.61%)</title><rect x="332" y="372" width="7" height="15" fill="rgb(225,182,15)"/><text x="335.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (13 samples, 0.57%)</title><rect x="332" y="388" width="7" height="15" fill="rgb(241,109,2)"/><text x="335.00" y="398.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (176 samples, 7.66%)</title><rect x="252" y="340" width="91" height="15" fill="rgb(205,184,19)"/><text x="255.00" y="350.50">onnxruntim..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (176 samples, 7.66%)</title><rect x="252" y="356" width="91" height="15" fill="rgb(237,80,9)"/><text x="255.00" y="366.50">onnxruntim..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.22%)</title><rect x="340" y="372" width="3" height="15" fill="rgb(206,27,33)"/><text x="343.00" y="382.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 2.57%)</title><rect x="343" y="340" width="30" height="15" fill="rgb(207,187,6)"/><text x="346.00" y="350.50">on..</text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 2.57%)</title><rect x="343" y="356" width="30" height="15" fill="rgb(241,217,15)"/><text x="346.00" y="366.50">on..</text></g><g><title>operator new (libstdc++.so.6.0.28) (13 samples, 0.57%)</title><rect x="374" y="356" width="7" height="15" fill="rgb(250,49,37)"/><text x="377.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (13 samples, 0.57%)</title><rect x="374" y="372" width="7" height="15" fill="rgb(209,166,19)"/><text x="377.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (702 samples, 30.54%)</title><rect x="21" y="260" width="361" height="15" fill="rgb(211,163,24)"/><text x="24.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (702 samples, 30.54%)</title><rect x="21" y="276" width="361" height="15" fill="rgb(243,34,37)"/><text x="24.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (702 samples, 30.54%)</title><rect x="21" y="292" width="361" height="15" fill="rgb(235,115,35)"/><text x="24.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/ca..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (702 samples, 30.54%)</title><rect x="21" y="308" width="361" height="15" fill="rgb(237,223,28)"/><text x="24.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntim..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (702 samples, 30.54%)</title><rect x="21" y="324" width="361" height="15" fill="rgb(213,46,33)"/><text x="24.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxru..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.74%)</title><rect x="373" y="340" width="9" height="15" fill="rgb(220,31,10)"/><text x="376.00" y="350.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.48%)</title><rect x="383" y="260" width="5" height="15" fill="rgb(227,156,45)"/><text x="386.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="386" y="276" width="2" height="15" fill="rgb(227,41,18)"/><text x="389.00" y="286.50"></text></g><g><title>0x7f3c3638ed07 (libc-2.29.so) (3 samples, 0.13%)</title><rect x="389" y="292" width="2" height="15" fill="rgb(208,191,53)"/><text x="392.00" y="302.50"></text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (731 samples, 31.80%)</title><rect x="16" y="68" width="375" height="15" fill="rgb(243,4,21)"/><text x="19.00" y="78.50">profile_ort (bench_KNeighborsClassifier_default_m_..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (731 samples, 31.80%)</title><rect x="16" y="84" width="375" height="15" fill="rgb(248,78,29)"/><text x="19.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (731 samples, 31.80%)</title><rect x="16" y="100" width="375" height="15" fill="rgb(253,199,36)"/><text x="19.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (722 samples, 31.40%)</title><rect x="21" y="116" width="370" height="15" fill="rgb(217,72,49)"/><text x="24.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (722 samples, 31.40%)</title><rect x="21" y="132" width="370" height="15" fill="rgb(220,4,1)"/><text x="24.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.p..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (722 samples, 31.40%)</title><rect x="21" y="148" width="370" height="15" fill="rgb(215,87,21)"/><text x="24.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (722 samples, 31.40%)</title><rect x="21" y="164" width="370" height="15" fill="rgb(251,36,38)"/><text x="24.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inferenc..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (722 samples, 31.40%)</title><rect x="21" y="180" width="370" height="15" fill="rgb(229,165,29)"/><text x="24.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (722 samples, 31.40%)</title><rect x="21" y="196" width="370" height="15" fill="rgb(253,203,25)"/><text x="24.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (721 samples, 31.36%)</title><rect x="21" y="212" width="370" height="15" fill="rgb(205,51,14)"/><text x="24.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/ca..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (721 samples, 31.36%)</title><rect x="21" y="228" width="370" height="15" fill="rgb(208,147,38)"/><text x="24.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntim..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (721 samples, 31.36%)</title><rect x="21" y="244" width="370" height="15" fill="rgb(232,128,14)"/><text x="24.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::mo..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="388" y="260" width="3" height="15" fill="rgb(252,50,4)"/><text x="391.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.22%)</title><rect x="389" y="276" width="2" height="15" fill="rgb(241,159,34)"/><text x="392.00" y="286.50"></text></g><g><title>LONG_getitem (arraytypes.c.src) (3 samples, 0.13%)</title><rect x="401" y="260" width="1" height="15" fill="rgb(232,70,45)"/><text x="404.00" y="270.50"></text></g><g><title>PyArray_ToList (convert.c) (7 samples, 0.30%)</title><rect x="400" y="228" width="4" height="15" fill="rgb(235,172,13)"/><text x="403.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (7 samples, 0.30%)</title><rect x="400" y="244" width="4" height="15" fill="rgb(211,107,41)"/><text x="403.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c) (3 samples, 0.13%)</title><rect x="402" y="260" width="2" height="15" fill="rgb(245,82,12)"/><text x="405.00" y="270.50"></text></g><g><title>PyArray_GETITEM (ndarraytypes.h) (2 samples, 0.09%)</title><rect x="403" y="276" width="1" height="15" fill="rgb(252,19,36)"/><text x="406.00" y="286.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.09%)</title><rect x="404" y="244" width="1" height="15" fill="rgb(229,80,10)"/><text x="407.00" y="254.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (3 samples, 0.13%)</title><rect x="405" y="244" width="1" height="15" fill="rgb(251,124,12)"/><text x="408.00" y="254.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (9 samples, 0.39%)</title><rect x="406" y="276" width="5" height="15" fill="rgb(236,70,34)"/><text x="409.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (9 samples, 0.39%)</title><rect x="406" y="292" width="5" height="15" fill="rgb(254,35,6)"/><text x="409.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (7 samples, 0.30%)</title><rect x="407" y="308" width="4" height="15" fill="rgb(231,188,7)"/><text x="410.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (6 samples, 0.26%)</title><rect x="408" y="324" width="3" height="15" fill="rgb(239,51,23)"/><text x="411.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (3 samples, 0.13%)</title><rect x="409" y="340" width="2" height="15" fill="rgb(220,22,18)"/><text x="412.00" y="350.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (4 samples, 0.17%)</title><rect x="417" y="340" width="2" height="15" fill="rgb(254,143,9)"/><text x="420.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (26 samples, 1.13%)</title><rect x="411" y="292" width="13" height="15" fill="rgb(232,9,0)"/><text x="414.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (26 samples, 1.13%)</title><rect x="411" y="308" width="13" height="15" fill="rgb(221,3,16)"/><text x="414.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (24 samples, 1.04%)</title><rect x="412" y="324" width="12" height="15" fill="rgb(243,98,31)"/><text x="415.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (11 samples, 0.48%)</title><rect x="419" y="340" width="5" height="15" fill="rgb(251,53,21)"/><text x="422.00" y="350.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (3 samples, 0.13%)</title><rect x="423" y="356" width="1" height="15" fill="rgb(240,81,12)"/><text x="426.00" y="366.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (39 samples, 1.70%)</title><rect x="411" y="276" width="20" height="15" fill="rgb(206,218,1)"/><text x="414.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c) (13 samples, 0.57%)</title><rect x="424" y="292" width="7" height="15" fill="rgb(211,126,28)"/><text x="427.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c) (11 samples, 0.48%)</title><rect x="425" y="308" width="6" height="15" fill="rgb(211,28,10)"/><text x="428.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (61 samples, 2.65%)</title><rect x="400" y="212" width="31" height="15" fill="rgb(245,77,15)"/><text x="403.00" y="222.50">_r..</text></g><g><title>array_subscript (mapping.c) (54 samples, 2.35%)</title><rect x="404" y="228" width="27" height="15" fill="rgb(224,147,35)"/><text x="407.00" y="238.50">a..</text></g><g><title>prepare_index (mapping.c) (49 samples, 2.13%)</title><rect x="406" y="244" width="25" height="15" fill="rgb(244,225,15)"/><text x="409.00" y="254.50">p..</text></g><g><title>PyArray_FromAny (ctors.c) (49 samples, 2.13%)</title><rect x="406" y="260" width="25" height="15" fill="rgb(236,6,6)"/><text x="409.00" y="270.50">P..</text></g><g><title>PyArray_AssignArray (array_assign_array.c) (3 samples, 0.13%)</title><rect x="432" y="260" width="2" height="15" fill="rgb(237,192,5)"/><text x="435.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (3 samples, 0.13%)</title><rect x="432" y="276" width="2" height="15" fill="rgb(240,88,20)"/><text x="435.00" y="286.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src) (3 samples, 0.13%)</title><rect x="432" y="292" width="2" height="15" fill="rgb(232,15,19)"/><text x="435.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (6 samples, 0.26%)</title><rect x="431" y="212" width="3" height="15" fill="rgb(226,155,7)"/><text x="434.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (6 samples, 0.26%)</title><rect x="431" y="228" width="3" height="15" fill="rgb(205,181,16)"/><text x="434.00" y="238.50"></text></g><g><title>array_astype (methods.c) (5 samples, 0.22%)</title><rect x="432" y="244" width="2" height="15" fill="rgb(252,182,16)"/><text x="435.00" y="254.50"></text></g><g><title>LONG_equal (loops.c.src) (2 samples, 0.09%)</title><rect x="435" y="292" width="1" height="15" fill="rgb(211,86,26)"/><text x="438.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py) (4 samples, 0.17%)</title><rect x="434" y="212" width="3" height="15" fill="rgb(234,218,5)"/><text x="437.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.17%)</title><rect x="434" y="228" width="3" height="15" fill="rgb(209,206,43)"/><text x="437.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.17%)</title><rect x="434" y="244" width="3" height="15" fill="rgb(227,178,17)"/><text x="437.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.17%)</title><rect x="434" y="260" width="3" height="15" fill="rgb(220,15,8)"/><text x="437.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.13%)</title><rect x="435" y="276" width="2" height="15" fill="rgb(220,106,2)"/><text x="438.00" y="286.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.09%)</title><rect x="438" y="324" width="1" height="15" fill="rgb(210,65,10)"/><text x="441.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (6 samples, 0.26%)</title><rect x="437" y="212" width="3" height="15" fill="rgb(241,110,44)"/><text x="440.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (6 samples, 0.26%)</title><rect x="437" y="228" width="3" height="15" fill="rgb(228,137,51)"/><text x="440.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.26%)</title><rect x="437" y="244" width="3" height="15" fill="rgb(229,205,50)"/><text x="440.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (6 samples, 0.26%)</title><rect x="437" y="260" width="3" height="15" fill="rgb(226,196,31)"/><text x="440.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (6 samples, 0.26%)</title><rect x="437" y="276" width="3" height="15" fill="rgb(216,194,37)"/><text x="440.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (5 samples, 0.22%)</title><rect x="437" y="292" width="3" height="15" fill="rgb(250,94,41)"/><text x="440.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (5 samples, 0.22%)</title><rect x="437" y="308" width="3" height="15" fill="rgb(219,198,43)"/><text x="440.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (4 samples, 0.17%)</title><rect x="462" y="228" width="2" height="15" fill="rgb(224,2,45)"/><text x="465.00" y="238.50"></text></g><g><title>_common_run_shape (mlprodict/onnxrt/ops_cpu/op_scan.py) (3 samples, 0.13%)</title><rect x="464" y="228" width="1" height="15" fill="rgb(237,91,20)"/><text x="467.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (4 samples, 0.17%)</title><rect x="465" y="228" width="2" height="15" fill="rgb(213,145,6)"/><text x="468.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c) (3 samples, 0.13%)</title><rect x="466" y="244" width="1" height="15" fill="rgb(219,114,46)"/><text x="469.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c) (3 samples, 0.13%)</title><rect x="466" y="260" width="1" height="15" fill="rgb(211,35,11)"/><text x="469.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (3 samples, 0.13%)</title><rect x="466" y="276" width="1" height="15" fill="rgb(206,76,10)"/><text x="469.00" y="286.50"></text></g><g><title>get_view_from_index (mapping.c) (4 samples, 0.17%)</title><rect x="468" y="244" width="2" height="15" fill="rgb(224,226,46)"/><text x="471.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (4 samples, 0.17%)</title><rect x="468" y="260" width="2" height="15" fill="rgb(245,50,31)"/><text x="471.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.17%)</title><rect x="468" y="276" width="2" height="15" fill="rgb(215,28,46)"/><text x="471.00" y="286.50"></text></g><g><title>array_subscript (mapping.c) (8 samples, 0.35%)</title><rect x="467" y="228" width="4" height="15" fill="rgb(233,125,24)"/><text x="470.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (2 samples, 0.09%)</title><rect x="470" y="244" width="1" height="15" fill="rgb(231,5,0)"/><text x="473.00" y="254.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (5 samples, 0.22%)</title><rect x="494" y="292" width="2" height="15" fill="rgb(234,152,51)"/><text x="497.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (2 samples, 0.09%)</title><rect x="496" y="308" width="1" height="15" fill="rgb(208,47,12)"/><text x="499.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (2 samples, 0.09%)</title><rect x="496" y="324" width="1" height="15" fill="rgb(254,146,35)"/><text x="499.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (2 samples, 0.09%)</title><rect x="496" y="340" width="1" height="15" fill="rgb(244,54,23)"/><text x="499.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (4 samples, 0.17%)</title><rect x="496" y="292" width="2" height="15" fill="rgb(243,71,30)"/><text x="499.00" y="302.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (2 samples, 0.09%)</title><rect x="497" y="308" width="1" height="15" fill="rgb(228,188,44)"/><text x="500.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.09%)</title><rect x="497" y="324" width="1" height="15" fill="rgb(216,99,54)"/><text x="500.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (13 samples, 0.57%)</title><rect x="492" y="276" width="7" height="15" fill="rgb(225,29,53)"/><text x="495.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (2 samples, 0.09%)</title><rect x="498" y="292" width="1" height="15" fill="rgb(250,130,46)"/><text x="501.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (2 samples, 0.09%)</title><rect x="498" y="308" width="1" height="15" fill="rgb(229,55,33)"/><text x="501.00" y="318.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (49 samples, 2.13%)</title><rect x="478" y="260" width="25" height="15" fill="rgb(208,96,43)"/><text x="481.00" y="270.50">e..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (8 samples, 0.35%)</title><rect x="499" y="276" width="4" height="15" fill="rgb(224,34,32)"/><text x="502.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.09%)</title><rect x="502" y="292" width="1" height="15" fill="rgb(206,109,3)"/><text x="505.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (63 samples, 2.74%)</title><rect x="471" y="228" width="33" height="15" fill="rgb(225,167,28)"/><text x="474.00" y="238.50">ex..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (53 samples, 2.31%)</title><rect x="477" y="244" width="27" height="15" fill="rgb(225,92,9)"/><text x="480.00" y="254.50">a..</text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (9 samples, 0.39%)</title><rect x="545" y="260" width="4" height="15" fill="rgb(217,53,12)"/><text x="548.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (4 samples, 0.17%)</title><rect x="625" y="276" width="2" height="15" fill="rgb(208,99,20)"/><text x="628.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (4 samples, 0.17%)</title><rect x="641" y="292" width="2" height="15" fill="rgb(254,111,27)"/><text x="644.00" y="302.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (3 samples, 0.13%)</title><rect x="642" y="308" width="1" height="15" fill="rgb(250,38,44)"/><text x="645.00" y="318.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (5 samples, 0.22%)</title><rect x="657" y="356" width="2" height="15" fill="rgb(238,2,25)"/><text x="660.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (5 samples, 0.22%)</title><rect x="657" y="372" width="2" height="15" fill="rgb(241,3,23)"/><text x="660.00" y="382.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (4 samples, 0.17%)</title><rect x="657" y="388" width="2" height="15" fill="rgb(240,1,37)"/><text x="660.00" y="398.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (2 samples, 0.09%)</title><rect x="660" y="356" width="1" height="15" fill="rgb(244,72,53)"/><text x="663.00" y="366.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (2 samples, 0.09%)</title><rect x="665" y="436" width="1" height="15" fill="rgb(226,117,11)"/><text x="668.00" y="446.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h) (9 samples, 0.39%)</title><rect x="666" y="436" width="5" height="15" fill="rgb(232,2,6)"/><text x="669.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (15 samples, 0.65%)</title><rect x="664" y="388" width="8" height="15" fill="rgb(235,101,29)"/><text x="667.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (15 samples, 0.65%)</title><rect x="664" y="404" width="8" height="15" fill="rgb(243,159,17)"/><text x="667.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (14 samples, 0.61%)</title><rect x="664" y="420" width="8" height="15" fill="rgb(236,15,5)"/><text x="667.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="674" y="404" width="1" height="15" fill="rgb(209,77,11)"/><text x="677.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (6 samples, 0.26%)</title><rect x="676" y="420" width="3" height="15" fill="rgb(214,137,19)"/><text x="679.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (6 samples, 0.26%)</title><rect x="676" y="436" width="3" height="15" fill="rgb(211,14,49)"/><text x="679.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (6 samples, 0.26%)</title><rect x="676" y="452" width="3" height="15" fill="rgb(220,191,19)"/><text x="679.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="678" y="468" width="1" height="15" fill="rgb(227,128,22)"/><text x="681.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="678" y="484" width="1" height="15" fill="rgb(234,182,28)"/><text x="681.00" y="494.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (3 samples, 0.13%)</title><rect x="678" y="500" width="1" height="15" fill="rgb(216,109,4)"/><text x="681.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.13%)</title><rect x="678" y="516" width="1" height="15" fill="rgb(241,47,49)"/><text x="681.00" y="526.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (9 samples, 0.39%)</title><rect x="675" y="404" width="5" height="15" fill="rgb(243,122,30)"/><text x="678.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (2 samples, 0.09%)</title><rect x="680" y="404" width="1" height="15" fill="rgb(245,128,46)"/><text x="683.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (21 samples, 0.91%)</title><rect x="672" y="388" width="10" height="15" fill="rgb(249,1,49)"/><text x="675.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (2 samples, 0.09%)</title><rect x="681" y="404" width="1" height="15" fill="rgb(215,97,3)"/><text x="684.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (5 samples, 0.22%)</title><rect x="682" y="388" width="3" height="15" fill="rgb(231,67,14)"/><text x="685.00" y="398.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (2 samples, 0.09%)</title><rect x="687" y="404" width="1" height="15" fill="rgb(220,141,19)"/><text x="690.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="687" y="420" width="1" height="15" fill="rgb(228,117,40)"/><text x="690.00" y="430.50"></text></g><g><title>0x7f3c363aed50 (libc-2.29.so) (3 samples, 0.13%)</title><rect x="708" y="436" width="1" height="15" fill="rgb(244,217,45)"/><text x="711.00" y="446.50"></text></g><g><title>0x7f3c363aed5f (libc-2.29.so) (4 samples, 0.17%)</title><rect x="709" y="436" width="2" height="15" fill="rgb(231,66,34)"/><text x="712.00" y="446.50"></text></g><g><title>0x7f3c363aed67 (libc-2.29.so) (4 samples, 0.17%)</title><rect x="711" y="436" width="2" height="15" fill="rgb(234,89,23)"/><text x="714.00" y="446.50"></text></g><g><title>0x7f3c363aed6f (libc-2.29.so) (13 samples, 0.57%)</title><rect x="713" y="436" width="7" height="15" fill="rgb(219,106,14)"/><text x="716.00" y="446.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (70 samples, 3.04%)</title><rect x="687" y="388" width="36" height="15" fill="rgb(237,189,30)"/><text x="690.00" y="398.50">Npy..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (68 samples, 2.96%)</title><rect x="688" y="404" width="35" height="15" fill="rgb(216,226,9)"/><text x="691.00" y="414.50">np..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (66 samples, 2.87%)</title><rect x="689" y="420" width="34" height="15" fill="rgb(207,168,26)"/><text x="692.00" y="430.50">Py..</text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src) (6 samples, 0.26%)</title><rect x="720" y="436" width="3" height="15" fill="rgb(205,7,4)"/><text x="723.00" y="446.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.09%)</title><rect x="723" y="388" width="1" height="15" fill="rgb(240,127,29)"/><text x="726.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (127 samples, 5.52%)</title><rect x="661" y="356" width="66" height="15" fill="rgb(205,149,34)"/><text x="664.00" y="366.50">execute..</text></g><g><title>iterator_loop (ufunc_object.c) (125 samples, 5.44%)</title><rect x="662" y="372" width="65" height="15" fill="rgb(226,3,16)"/><text x="665.00" y="382.50">iterato..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (4 samples, 0.17%)</title><rect x="727" y="356" width="2" height="15" fill="rgb(219,227,18)"/><text x="730.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (146 samples, 6.35%)</title><rect x="656" y="340" width="75" height="15" fill="rgb(233,18,19)"/><text x="659.00" y="350.50">PyUFunc_..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (3 samples, 0.13%)</title><rect x="729" y="356" width="2" height="15" fill="rgb(221,28,21)"/><text x="732.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (3 samples, 0.13%)</title><rect x="729" y="372" width="2" height="15" fill="rgb(244,219,25)"/><text x="732.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (2 samples, 0.09%)</title><rect x="730" y="388" width="1" height="15" fill="rgb(246,193,40)"/><text x="733.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (160 samples, 6.96%)</title><rect x="650" y="308" width="82" height="15" fill="rgb(237,199,19)"/><text x="653.00" y="318.50">_run (mlp..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (151 samples, 6.57%)</title><rect x="654" y="324" width="78" height="15" fill="rgb(251,41,48)"/><text x="657.00" y="334.50">ufunc_gen..</text></g><g><title>0x7f3c363aed94 (libc-2.29.so) (11 samples, 0.48%)</title><rect x="739" y="388" width="5" height="15" fill="rgb(208,90,50)"/><text x="742.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (4 samples, 0.17%)</title><rect x="745" y="388" width="2" height="15" fill="rgb(211,167,12)"/><text x="748.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.13%)</title><rect x="746" y="404" width="1" height="15" fill="rgb(234,220,39)"/><text x="749.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (24 samples, 1.04%)</title><rect x="737" y="356" width="13" height="15" fill="rgb(227,149,38)"/><text x="740.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (22 samples, 0.96%)</title><rect x="738" y="372" width="12" height="15" fill="rgb(253,109,12)"/><text x="741.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (3 samples, 0.13%)</title><rect x="748" y="388" width="2" height="15" fill="rgb(207,99,53)"/><text x="751.00" y="398.50"></text></g><g><title>0x7f3c3638fdd6 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="752" y="484" width="1" height="15" fill="rgb(247,73,20)"/><text x="755.00" y="494.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (43 samples, 1.87%)</title><rect x="732" y="308" width="22" height="15" fill="rgb(250,179,25)"/><text x="735.00" y="318.50">_..</text></g><g><title>array_copy (methods.c) (33 samples, 1.44%)</title><rect x="737" y="324" width="17" height="15" fill="rgb(213,161,0)"/><text x="740.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c) (32 samples, 1.39%)</title><rect x="737" y="340" width="17" height="15" fill="rgb(235,174,46)"/><text x="740.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (7 samples, 0.30%)</title><rect x="750" y="356" width="4" height="15" fill="rgb(205,145,52)"/><text x="753.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (4 samples, 0.17%)</title><rect x="752" y="372" width="2" height="15" fill="rgb(245,229,34)"/><text x="755.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (4 samples, 0.17%)</title><rect x="752" y="388" width="2" height="15" fill="rgb(230,40,21)"/><text x="755.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.17%)</title><rect x="752" y="404" width="2" height="15" fill="rgb(205,187,3)"/><text x="755.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="752" y="420" width="2" height="15" fill="rgb(249,184,26)"/><text x="755.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="752" y="436" width="2" height="15" fill="rgb(231,9,46)"/><text x="755.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (3 samples, 0.13%)</title><rect x="752" y="452" width="2" height="15" fill="rgb(241,170,44)"/><text x="755.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.13%)</title><rect x="752" y="468" width="2" height="15" fill="rgb(218,91,12)"/><text x="755.00" y="478.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (4 samples, 0.17%)</title><rect x="766" y="340" width="2" height="15" fill="rgb(205,171,27)"/><text x="769.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (4 samples, 0.17%)</title><rect x="766" y="356" width="2" height="15" fill="rgb(212,90,9)"/><text x="769.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (5 samples, 0.22%)</title><rect x="766" y="324" width="2" height="15" fill="rgb(250,224,28)"/><text x="769.00" y="334.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (7 samples, 0.30%)</title><rect x="794" y="388" width="4" height="15" fill="rgb(237,211,15)"/><text x="797.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.17%)</title><rect x="798" y="404" width="2" height="15" fill="rgb(208,119,34)"/><text x="801.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (4 samples, 0.17%)</title><rect x="798" y="420" width="2" height="15" fill="rgb(240,100,15)"/><text x="801.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (4 samples, 0.17%)</title><rect x="798" y="436" width="2" height="15" fill="rgb(210,157,34)"/><text x="801.00" y="446.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (3 samples, 0.13%)</title><rect x="808" y="420" width="1" height="15" fill="rgb(207,186,1)"/><text x="811.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (3 samples, 0.13%)</title><rect x="808" y="436" width="1" height="15" fill="rgb(231,75,22)"/><text x="811.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (3 samples, 0.13%)</title><rect x="808" y="452" width="1" height="15" fill="rgb(218,123,21)"/><text x="811.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (3 samples, 0.13%)</title><rect x="814" y="468" width="2" height="15" fill="rgb(205,35,15)"/><text x="817.00" y="478.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (3 samples, 0.13%)</title><rect x="816" y="468" width="1" height="15" fill="rgb(251,203,15)"/><text x="819.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.13%)</title><rect x="816" y="484" width="1" height="15" fill="rgb(231,94,42)"/><text x="819.00" y="494.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (2 samples, 0.09%)</title><rect x="818" y="468" width="1" height="15" fill="rgb(212,35,11)"/><text x="821.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (5 samples, 0.22%)</title><rect x="819" y="468" width="3" height="15" fill="rgb(238,171,33)"/><text x="822.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (4 samples, 0.17%)</title><rect x="822" y="468" width="2" height="15" fill="rgb(222,21,14)"/><text x="825.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (27 samples, 1.17%)</title><rect x="811" y="452" width="14" height="15" fill="rgb(230,45,13)"/><text x="814.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="826" y="516" width="1" height="15" fill="rgb(228,130,52)"/><text x="829.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="826" y="532" width="1" height="15" fill="rgb(216,164,28)"/><text x="829.00" y="542.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (7 samples, 0.30%)</title><rect x="825" y="484" width="4" height="15" fill="rgb(220,72,41)"/><text x="828.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.30%)</title><rect x="825" y="500" width="4" height="15" fill="rgb(223,111,54)"/><text x="828.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (3 samples, 0.13%)</title><rect x="827" y="516" width="2" height="15" fill="rgb(231,65,51)"/><text x="830.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="827" y="532" width="2" height="15" fill="rgb(234,174,32)"/><text x="830.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.13%)</title><rect x="827" y="548" width="2" height="15" fill="rgb(218,20,16)"/><text x="830.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (10 samples, 0.43%)</title><rect x="825" y="452" width="5" height="15" fill="rgb(212,137,23)"/><text x="828.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (10 samples, 0.43%)</title><rect x="825" y="468" width="5" height="15" fill="rgb(214,27,53)"/><text x="828.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.09%)</title><rect x="829" y="484" width="1" height="15" fill="rgb(242,141,27)"/><text x="832.00" y="494.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c) (3 samples, 0.13%)</title><rect x="831" y="484" width="1" height="15" fill="rgb(205,121,47)"/><text x="834.00" y="494.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (3 samples, 0.13%)</title><rect x="832" y="484" width="2" height="15" fill="rgb(210,102,22)"/><text x="835.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (12 samples, 0.52%)</title><rect x="830" y="452" width="6" height="15" fill="rgb(249,94,30)"/><text x="833.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (12 samples, 0.52%)</title><rect x="830" y="468" width="6" height="15" fill="rgb(219,69,15)"/><text x="833.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (5 samples, 0.22%)</title><rect x="834" y="484" width="2" height="15" fill="rgb(218,2,42)"/><text x="837.00" y="494.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (3 samples, 0.13%)</title><rect x="837" y="452" width="2" height="15" fill="rgb(247,144,7)"/><text x="840.00" y="462.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (2 samples, 0.09%)</title><rect x="838" y="468" width="1" height="15" fill="rgb(206,18,28)"/><text x="841.00" y="478.50"></text></g><g><title>fetestexcept (libm-2.29.so) (2 samples, 0.09%)</title><rect x="838" y="484" width="1" height="15" fill="rgb(218,46,4)"/><text x="841.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src) (106 samples, 4.61%)</title><rect x="858" y="468" width="55" height="15" fill="rgb(214,182,4)"/><text x="861.00" y="478.50">FLOAT..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (58 samples, 2.52%)</title><rect x="883" y="484" width="30" height="15" fill="rgb(232,206,35)"/><text x="886.00" y="494.50">pa..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (246 samples, 10.70%)</title><rect x="810" y="436" width="126" height="15" fill="rgb(236,215,37)"/><text x="813.00" y="446.50">PyUFunc_ReduceW..</text></g><g><title>reduce_loop (ufunc_object.c) (189 samples, 8.22%)</title><rect x="839" y="452" width="97" height="15" fill="rgb(220,228,29)"/><text x="842.00" y="462.50">reduce_loop..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (44 samples, 1.91%)</title><rect x="913" y="468" width="23" height="15" fill="rgb(232,77,0)"/><text x="916.00" y="478.50">n..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (333 samples, 14.48%)</title><rect x="769" y="324" width="171" height="15" fill="rgb(217,147,28)"/><text x="772.00" y="334.50">sum (&lt;__array_function..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (320 samples, 13.92%)</title><rect x="775" y="340" width="165" height="15" fill="rgb(214,220,2)"/><text x="778.00" y="350.50">array_implement_array..</text></g><g><title>sum (numpy/core/fromnumeric.py) (318 samples, 13.83%)</title><rect x="776" y="356" width="164" height="15" fill="rgb(222,166,38)"/><text x="779.00" y="366.50">sum (numpy/core/fromn..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (297 samples, 12.92%)</title><rect x="787" y="372" width="153" height="15" fill="rgb(205,25,27)"/><text x="790.00" y="382.50">_wrapreduction (num..</text></g><g><title>ufunc_reduce (ufunc_object.c) (276 samples, 12.01%)</title><rect x="798" y="388" width="142" height="15" fill="rgb(244,62,39)"/><text x="801.00" y="398.50">ufunc_reduce (ufun..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (272 samples, 11.83%)</title><rect x="800" y="404" width="140" height="15" fill="rgb(223,90,42)"/><text x="803.00" y="414.50">PyUFunc_GenericRe..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (254 samples, 11.05%)</title><rect x="809" y="420" width="131" height="15" fill="rgb(240,168,41)"/><text x="812.00" y="430.50">PyUFunc_Reduce (..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (7 samples, 0.30%)</title><rect x="936" y="436" width="4" height="15" fill="rgb(213,80,18)"/><text x="939.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (7 samples, 0.30%)</title><rect x="936" y="452" width="4" height="15" fill="rgb(233,149,43)"/><text x="939.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (7 samples, 0.30%)</title><rect x="936" y="468" width="4" height="15" fill="rgb(214,187,2)"/><text x="939.00" y="478.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (2 samples, 0.09%)</title><rect x="939" y="484" width="1" height="15" fill="rgb(207,26,26)"/><text x="942.00" y="494.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (3 samples, 0.13%)</title><rect x="940" y="340" width="1" height="15" fill="rgb(241,60,35)"/><text x="943.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.13%)</title><rect x="940" y="356" width="1" height="15" fill="rgb(243,151,24)"/><text x="943.00" y="366.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (2 samples, 0.09%)</title><rect x="943" y="356" width="1" height="15" fill="rgb(226,156,18)"/><text x="946.00" y="366.50"></text></g><g><title>array_alloc (arrayobject.c) (2 samples, 0.09%)</title><rect x="944" y="404" width="1" height="15" fill="rgb(244,28,43)"/><text x="947.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (7 samples, 0.30%)</title><rect x="944" y="372" width="3" height="15" fill="rgb(216,182,23)"/><text x="947.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.30%)</title><rect x="944" y="388" width="3" height="15" fill="rgb(222,214,20)"/><text x="947.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (5 samples, 0.22%)</title><rect x="945" y="404" width="2" height="15" fill="rgb(209,132,38)"/><text x="948.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (5 samples, 0.22%)</title><rect x="945" y="420" width="2" height="15" fill="rgb(250,104,20)"/><text x="948.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.13%)</title><rect x="946" y="436" width="1" height="15" fill="rgb(207,107,14)"/><text x="949.00" y="446.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h) (8 samples, 0.35%)</title><rect x="950" y="404" width="4" height="15" fill="rgb(240,20,10)"/><text x="953.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (24 samples, 1.04%)</title><rect x="944" y="356" width="12" height="15" fill="rgb(206,123,20)"/><text x="947.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (16 samples, 0.70%)</title><rect x="948" y="372" width="8" height="15" fill="rgb(206,196,44)"/><text x="951.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (14 samples, 0.61%)</title><rect x="949" y="388" width="7" height="15" fill="rgb(216,227,40)"/><text x="952.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (4 samples, 0.17%)</title><rect x="954" y="404" width="2" height="15" fill="rgb(217,145,2)"/><text x="957.00" y="414.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.09%)</title><rect x="956" y="356" width="1" height="15" fill="rgb(226,214,3)"/><text x="959.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (33 samples, 1.44%)</title><rect x="941" y="340" width="17" height="15" fill="rgb(228,19,45)"/><text x="944.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.09%)</title><rect x="957" y="356" width="1" height="15" fill="rgb(247,191,6)"/><text x="960.00" y="366.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (872 samples, 37.93%)</title><rect x="511" y="244" width="448" height="15" fill="rgb(240,41,35)"/><text x="514.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (797 samples, 34.67%)</title><rect x="549" y="260" width="410" height="15" fill="rgb(212,4,33)"/><text x="552.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (645 samples, 28.06%)</title><rect x="627" y="276" width="332" height="15" fill="rgb(212,217,33)"/><text x="630.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (614 samples, 26.71%)</title><rect x="643" y="292" width="316" height="15" fill="rgb(232,57,18)"/><text x="646.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (399 samples, 17.36%)</title><rect x="754" y="308" width="205" height="15" fill="rgb(222,107,13)"/><text x="757.00" y="318.50">_run (mlprodict/onnxrt/ops..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (37 samples, 1.61%)</title><rect x="940" y="324" width="19" height="15" fill="rgb(224,203,3)"/><text x="943.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (887 samples, 38.58%)</title><rect x="504" y="228" width="455" height="15" fill="rgb(224,33,43)"/><text x="507.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (9 samples, 0.39%)</title><rect x="960" y="276" width="4" height="15" fill="rgb(231,40,1)"/><text x="963.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.39%)</title><rect x="960" y="292" width="4" height="15" fill="rgb(214,60,34)"/><text x="963.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (8 samples, 0.35%)</title><rect x="960" y="308" width="4" height="15" fill="rgb(243,119,0)"/><text x="963.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (4 samples, 0.17%)</title><rect x="962" y="324" width="2" height="15" fill="rgb(227,25,47)"/><text x="965.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (1,027 samples, 44.67%)</title><rect x="440" y="212" width="527" height="15" fill="rgb(237,172,19)"/><text x="443.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (15 samples, 0.65%)</title><rect x="959" y="228" width="8" height="15" fill="rgb(207,160,28)"/><text x="962.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (15 samples, 0.65%)</title><rect x="959" y="244" width="8" height="15" fill="rgb(217,191,34)"/><text x="962.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (14 samples, 0.61%)</title><rect x="960" y="260" width="7" height="15" fill="rgb(229,91,41)"/><text x="963.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (5 samples, 0.22%)</title><rect x="964" y="276" width="3" height="15" fill="rgb(230,16,12)"/><text x="967.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.22%)</title><rect x="964" y="292" width="3" height="15" fill="rgb(236,215,18)"/><text x="967.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (5 samples, 0.22%)</title><rect x="964" y="308" width="3" height="15" fill="rgb(222,77,28)"/><text x="967.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (5 samples, 0.22%)</title><rect x="964" y="324" width="3" height="15" fill="rgb(245,111,21)"/><text x="967.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (5 samples, 0.22%)</title><rect x="964" y="340" width="3" height="15" fill="rgb(207,77,47)"/><text x="967.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (4 samples, 0.17%)</title><rect x="965" y="356" width="2" height="15" fill="rgb(220,80,47)"/><text x="968.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (3 samples, 0.13%)</title><rect x="965" y="372" width="2" height="15" fill="rgb(207,216,14)"/><text x="968.00" y="382.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src) (13 samples, 0.57%)</title><rect x="975" y="372" width="7" height="15" fill="rgb(245,103,18)"/><text x="978.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (13 samples, 0.57%)</title><rect x="975" y="388" width="7" height="15" fill="rgb(222,227,3)"/><text x="978.00" y="398.50"></text></g><g><title>amedian3_swap_float (selection.c.src) (8 samples, 0.35%)</title><rect x="986" y="388" width="4" height="15" fill="rgb(222,43,39)"/><text x="989.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (4 samples, 0.17%)</title><rect x="988" y="404" width="2" height="15" fill="rgb(245,199,31)"/><text x="991.00" y="414.50"></text></g><g><title>aunguarded_partition_float (selection.c.src) (95 samples, 4.13%)</title><rect x="990" y="388" width="49" height="15" fill="rgb(239,24,0)"/><text x="993.00" y="398.50">aung..</text></g><g><title>FLOAT_LT (npysort_common.h) (57 samples, 2.48%)</title><rect x="1009" y="404" width="30" height="15" fill="rgb(242,91,1)"/><text x="1012.00" y="414.50">FL..</text></g><g><title>PyArray_ArgPartition (item_selection.c) (137 samples, 5.96%)</title><rect x="969" y="340" width="71" height="15" fill="rgb(228,76,30)"/><text x="972.00" y="350.50">PyArray_..</text></g><g><title>_new_argsortlike (item_selection.c) (137 samples, 5.96%)</title><rect x="969" y="356" width="71" height="15" fill="rgb(245,202,14)"/><text x="972.00" y="366.50">_new_arg..</text></g><g><title>aintroselect_float (selection.c.src) (112 samples, 4.87%)</title><rect x="982" y="372" width="58" height="15" fill="rgb(206,22,3)"/><text x="985.00" y="382.50">aintro..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (140 samples, 6.09%)</title><rect x="968" y="260" width="72" height="15" fill="rgb(207,173,11)"/><text x="971.00" y="270.50">argparti..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (139 samples, 6.05%)</title><rect x="969" y="276" width="71" height="15" fill="rgb(210,67,33)"/><text x="972.00" y="286.50">array_im..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (139 samples, 6.05%)</title><rect x="969" y="292" width="71" height="15" fill="rgb(247,30,39)"/><text x="972.00" y="302.50">argparti..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (139 samples, 6.05%)</title><rect x="969" y="308" width="71" height="15" fill="rgb(230,209,22)"/><text x="972.00" y="318.50">_wrapfun..</text></g><g><title>array_argpartition (methods.c) (138 samples, 6.00%)</title><rect x="969" y="324" width="71" height="15" fill="rgb(243,21,37)"/><text x="972.00" y="334.50">array_ar..</text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (4 samples, 0.17%)</title><rect x="1040" y="260" width="2" height="15" fill="rgb(209,40,1)"/><text x="1043.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.17%)</title><rect x="1040" y="276" width="2" height="15" fill="rgb(213,161,52)"/><text x="1043.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (4 samples, 0.17%)</title><rect x="1040" y="292" width="2" height="15" fill="rgb(224,130,12)"/><text x="1043.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (4 samples, 0.17%)</title><rect x="1040" y="308" width="2" height="15" fill="rgb(233,173,30)"/><text x="1043.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (4 samples, 0.17%)</title><rect x="1040" y="324" width="2" height="15" fill="rgb(221,122,14)"/><text x="1043.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (4 samples, 0.17%)</title><rect x="1040" y="340" width="2" height="15" fill="rgb(224,25,15)"/><text x="1043.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (4 samples, 0.17%)</title><rect x="1040" y="356" width="2" height="15" fill="rgb(221,19,16)"/><text x="1043.00" y="366.50"></text></g><g><title>aquicksort_float (quicksort.c.src) (2 samples, 0.09%)</title><rect x="1041" y="372" width="1" height="15" fill="rgb(216,40,18)"/><text x="1044.00" y="382.50"></text></g><g><title>array_arange (multiarraymodule.c) (2 samples, 0.09%)</title><rect x="1042" y="260" width="1" height="15" fill="rgb(219,108,23)"/><text x="1045.00" y="270.50"></text></g><g><title>PyArray_ArangeObj (ctors.c) (2 samples, 0.09%)</title><rect x="1042" y="276" width="1" height="15" fill="rgb(250,210,32)"/><text x="1045.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h) (2 samples, 0.09%)</title><rect x="1044" y="292" width="1" height="15" fill="rgb(210,146,21)"/><text x="1047.00" y="302.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (4 samples, 0.17%)</title><rect x="1043" y="276" width="2" height="15" fill="rgb(241,110,46)"/><text x="1046.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (3 samples, 0.13%)</title><rect x="1045" y="292" width="2" height="15" fill="rgb(207,71,6)"/><text x="1048.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (3 samples, 0.13%)</title><rect x="1045" y="308" width="2" height="15" fill="rgb(210,182,20)"/><text x="1048.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (3 samples, 0.13%)</title><rect x="1045" y="324" width="2" height="15" fill="rgb(217,72,46)"/><text x="1048.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (3 samples, 0.13%)</title><rect x="1045" y="340" width="2" height="15" fill="rgb(226,159,54)"/><text x="1048.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (2 samples, 0.09%)</title><rect x="1046" y="356" width="1" height="15" fill="rgb(226,77,22)"/><text x="1049.00" y="366.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.17%)</title><rect x="1045" y="276" width="2" height="15" fill="rgb(219,110,27)"/><text x="1048.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (9 samples, 0.39%)</title><rect x="1047" y="276" width="5" height="15" fill="rgb(207,117,32)"/><text x="1050.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (167 samples, 7.26%)</title><rect x="967" y="212" width="85" height="15" fill="rgb(223,27,5)"/><text x="970.00" y="222.50">_run (mlpr..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (167 samples, 7.26%)</title><rect x="967" y="228" width="85" height="15" fill="rgb(218,39,54)"/><text x="970.00" y="238.50">_common_ru..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (165 samples, 7.18%)</title><rect x="968" y="244" width="84" height="15" fill="rgb(218,220,8)"/><text x="971.00" y="254.50">topk_sort..</text></g><g><title>array_subscript (mapping.c) (18 samples, 0.78%)</title><rect x="1043" y="260" width="9" height="15" fill="rgb(215,222,30)"/><text x="1046.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (2 samples, 0.09%)</title><rect x="1053" y="228" width="2" height="15" fill="rgb(242,193,5)"/><text x="1056.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (2 samples, 0.09%)</title><rect x="1053" y="244" width="2" height="15" fill="rgb(225,80,12)"/><text x="1056.00" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (2 samples, 0.09%)</title><rect x="1053" y="260" width="2" height="15" fill="rgb(227,82,52)"/><text x="1056.00" y="270.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;) (2 samples, 0.09%)</title><rect x="1053" y="276" width="2" height="15" fill="rgb(215,83,40)"/><text x="1056.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.09%)</title><rect x="1053" y="292" width="2" height="15" fill="rgb(213,125,42)"/><text x="1056.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py) (2 samples, 0.09%)</title><rect x="1053" y="308" width="2" height="15" fill="rgb(219,107,36)"/><text x="1056.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py) (6 samples, 0.26%)</title><rect x="1055" y="228" width="3" height="15" fill="rgb(215,177,22)"/><text x="1058.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (5 samples, 0.22%)</title><rect x="1055" y="244" width="3" height="15" fill="rgb(250,19,19)"/><text x="1058.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.22%)</title><rect x="1055" y="260" width="3" height="15" fill="rgb(217,202,4)"/><text x="1058.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1056" y="276" width="2" height="15" fill="rgb(207,39,35)"/><text x="1059.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1056" y="292" width="2" height="15" fill="rgb(208,166,34)"/><text x="1059.00" y="302.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1056" y="308" width="2" height="15" fill="rgb(220,76,40)"/><text x="1059.00" y="318.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (2 samples, 0.09%)</title><rect x="1057" y="324" width="1" height="15" fill="rgb(230,113,29)"/><text x="1060.00" y="334.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (2 samples, 0.09%)</title><rect x="1061" y="372" width="1" height="15" fill="rgb(237,0,5)"/><text x="1064.00" y="382.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (2 samples, 0.09%)</title><rect x="1061" y="388" width="1" height="15" fill="rgb(213,58,23)"/><text x="1064.00" y="398.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c) (2 samples, 0.09%)</title><rect x="1061" y="404" width="1" height="15" fill="rgb(238,110,34)"/><text x="1064.00" y="414.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (2 samples, 0.09%)</title><rect x="1061" y="420" width="1" height="15" fill="rgb(225,60,43)"/><text x="1064.00" y="430.50"></text></g><g><title>FLOAT_add (loops.c.src) (2 samples, 0.09%)</title><rect x="1062" y="388" width="1" height="15" fill="rgb(220,0,47)"/><text x="1065.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (13 samples, 0.57%)</title><rect x="1058" y="228" width="6" height="15" fill="rgb(232,198,16)"/><text x="1061.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (12 samples, 0.52%)</title><rect x="1058" y="244" width="6" height="15" fill="rgb(213,190,49)"/><text x="1061.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (11 samples, 0.48%)</title><rect x="1059" y="260" width="5" height="15" fill="rgb(225,196,39)"/><text x="1062.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (11 samples, 0.48%)</title><rect x="1059" y="276" width="5" height="15" fill="rgb(227,197,43)"/><text x="1062.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (11 samples, 0.48%)</title><rect x="1059" y="292" width="5" height="15" fill="rgb(235,74,35)"/><text x="1062.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (10 samples, 0.43%)</title><rect x="1059" y="308" width="5" height="15" fill="rgb(239,102,36)"/><text x="1062.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (10 samples, 0.43%)</title><rect x="1059" y="324" width="5" height="15" fill="rgb(237,26,30)"/><text x="1062.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (8 samples, 0.35%)</title><rect x="1060" y="340" width="4" height="15" fill="rgb(238,189,36)"/><text x="1063.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (8 samples, 0.35%)</title><rect x="1060" y="356" width="4" height="15" fill="rgb(211,29,15)"/><text x="1063.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c) (5 samples, 0.22%)</title><rect x="1062" y="372" width="2" height="15" fill="rgb(220,104,10)"/><text x="1065.00" y="382.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (2 samples, 0.09%)</title><rect x="1063" y="388" width="1" height="15" fill="rgb(230,192,33)"/><text x="1066.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (12 samples, 0.52%)</title><rect x="1064" y="228" width="6" height="15" fill="rgb(233,72,8)"/><text x="1067.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (12 samples, 0.52%)</title><rect x="1064" y="244" width="6" height="15" fill="rgb(247,193,32)"/><text x="1067.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (12 samples, 0.52%)</title><rect x="1064" y="260" width="6" height="15" fill="rgb(252,132,8)"/><text x="1067.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (11 samples, 0.48%)</title><rect x="1065" y="276" width="5" height="15" fill="rgb(226,8,35)"/><text x="1068.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (11 samples, 0.48%)</title><rect x="1065" y="292" width="5" height="15" fill="rgb(246,77,17)"/><text x="1068.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src) (11 samples, 0.48%)</title><rect x="1065" y="308" width="5" height="15" fill="rgb(248,111,47)"/><text x="1068.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src) (11 samples, 0.48%)</title><rect x="1065" y="324" width="5" height="15" fill="rgb(236,156,28)"/><text x="1068.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src) (11 samples, 0.48%)</title><rect x="1065" y="340" width="5" height="15" fill="rgb(212,36,2)"/><text x="1068.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (11 samples, 0.48%)</title><rect x="1065" y="356" width="5" height="15" fill="rgb(252,82,40)"/><text x="1068.00" y="366.50"></text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (1,324 samples, 57.59%)</title><rect x="391" y="68" width="680" height="15" fill="rgb(253,50,25)"/><text x="394.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (1,324 samples, 57.59%)</title><rect x="391" y="84" width="680" height="15" fill="rgb(219,219,13)"/><text x="394.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py)</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (1,324 samples, 57.59%)</title><rect x="391" y="100" width="680" height="15" fill="rgb(245,200,8)"/><text x="394.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (1,324 samples, 57.59%)</title><rect x="391" y="116" width="680" height="15" fill="rgb(231,177,46)"/><text x="394.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1,324 samples, 57.59%)</title><rect x="391" y="132" width="680" height="15" fill="rgb(220,35,22)"/><text x="394.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,324 samples, 57.59%)</title><rect x="391" y="148" width="680" height="15" fill="rgb(224,41,11)"/><text x="394.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,323 samples, 57.55%)</title><rect x="392" y="164" width="679" height="15" fill="rgb(235,64,8)"/><text x="395.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,321 samples, 57.46%)</title><rect x="393" y="180" width="678" height="15" fill="rgb(240,126,54)"/><text x="396.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,313 samples, 57.11%)</title><rect x="397" y="196" width="674" height="15" fill="rgb(234,116,23)"/><text x="400.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (35 samples, 1.52%)</title><rect x="1053" y="212" width="18" height="15" fill="rgb(224,87,4)"/><text x="1056.00" y="222.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (4 samples, 0.17%)</title><rect x="1075" y="180" width="2" height="15" fill="rgb(245,101,37)"/><text x="1078.00" y="190.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.09%)</title><rect x="1077" y="180" width="1" height="15" fill="rgb(216,220,30)"/><text x="1080.00" y="190.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.09%)</title><rect x="1077" y="196" width="1" height="15" fill="rgb(234,216,1)"/><text x="1080.00" y="206.50"></text></g><g><title>array_assign_subscript (mapping.c) (11 samples, 0.48%)</title><rect x="1074" y="164" width="6" height="15" fill="rgb(224,201,32)"/><text x="1077.00" y="174.50"></text></g><g><title>mapiter_set (lowlevel_strided_loops.c.src) (3 samples, 0.13%)</title><rect x="1078" y="180" width="2" height="15" fill="rgb(242,145,40)"/><text x="1081.00" y="190.50"></text></g><g><title>array_dealloc (arrayobject.c) (4 samples, 0.17%)</title><rect x="1080" y="164" width="2" height="15" fill="rgb(248,169,41)"/><text x="1083.00" y="174.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (4 samples, 0.17%)</title><rect x="1080" y="180" width="2" height="15" fill="rgb(253,160,20)"/><text x="1083.00" y="190.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.09%)</title><rect x="1081" y="196" width="1" height="15" fill="rgb(243,72,1)"/><text x="1084.00" y="206.50"></text></g><g><title>array_item (mapping.c) (2 samples, 0.09%)</title><rect x="1082" y="164" width="1" height="15" fill="rgb(232,166,39)"/><text x="1085.00" y="174.50"></text></g><g><title>array_item_asarray (mapping.c) (2 samples, 0.09%)</title><rect x="1082" y="180" width="1" height="15" fill="rgb(218,160,2)"/><text x="1085.00" y="190.50"></text></g><g><title>get_view_from_index (mapping.c) (2 samples, 0.09%)</title><rect x="1082" y="196" width="1" height="15" fill="rgb(234,189,0)"/><text x="1085.00" y="206.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (3 samples, 0.13%)</title><rect x="1084" y="180" width="2" height="15" fill="rgb(220,183,18)"/><text x="1087.00" y="190.50"></text></g><g><title>array_subscript (mapping.c) (6 samples, 0.26%)</title><rect x="1083" y="164" width="3" height="15" fill="rgb(206,40,24)"/><text x="1086.00" y="174.50"></text></g><g><title>array_sum (methods.c) (3 samples, 0.13%)</title><rect x="1086" y="164" width="2" height="15" fill="rgb(220,197,32)"/><text x="1089.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c) (3 samples, 0.13%)</title><rect x="1086" y="180" width="2" height="15" fill="rgb(230,80,23)"/><text x="1089.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py) (3 samples, 0.13%)</title><rect x="1086" y="196" width="2" height="15" fill="rgb(212,150,4)"/><text x="1089.00" y="206.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.13%)</title><rect x="1086" y="212" width="2" height="15" fill="rgb(247,97,12)"/><text x="1089.00" y="222.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (2 samples, 0.09%)</title><rect x="1087" y="228" width="1" height="15" fill="rgb(240,6,22)"/><text x="1090.00" y="238.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (2 samples, 0.09%)</title><rect x="1087" y="244" width="1" height="15" fill="rgb(248,141,46)"/><text x="1090.00" y="254.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (2 samples, 0.09%)</title><rect x="1087" y="260" width="1" height="15" fill="rgb(253,166,47)"/><text x="1090.00" y="270.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (6 samples, 0.26%)</title><rect x="1088" y="164" width="3" height="15" fill="rgb(230,100,26)"/><text x="1091.00" y="174.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (2 samples, 0.09%)</title><rect x="1090" y="180" width="1" height="15" fill="rgb(226,14,48)"/><text x="1093.00" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (5 samples, 0.22%)</title><rect x="1096" y="372" width="2" height="15" fill="rgb(231,17,38)"/><text x="1099.00" y="382.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="1097" y="388" width="1" height="15" fill="rgb(247,195,37)"/><text x="1100.00" y="398.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.09%)</title><rect x="1098" y="372" width="1" height="15" fill="rgb(216,216,26)"/><text x="1101.00" y="382.50"></text></g><g><title>0x7f3c107a232c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.39%)</title><rect x="1096" y="324" width="4" height="15" fill="rgb(249,51,52)"/><text x="1099.00" y="334.50"></text></g><g><title>0x7f3c1076d5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.39%)</title><rect x="1096" y="340" width="4" height="15" fill="rgb(214,62,15)"/><text x="1099.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (9 samples, 0.39%)</title><rect x="1096" y="356" width="4" height="15" fill="rgb(244,104,51)"/><text x="1099.00" y="366.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (2 samples, 0.09%)</title><rect x="1099" y="372" width="1" height="15" fill="rgb(244,83,50)"/><text x="1102.00" y="382.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.09%)</title><rect x="1099" y="388" width="1" height="15" fill="rgb(241,200,6)"/><text x="1102.00" y="398.50"></text></g><g><title>0x7f3c10782b7d (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1102" y="372" width="1" height="15" fill="rgb(223,43,32)"/><text x="1105.00" y="382.50"></text></g><g><title>0x7f3c107a2a72 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1102" y="324" width="1" height="15" fill="rgb(233,168,23)"/><text x="1105.00" y="334.50"></text></g><g><title>0x7f3c1076d5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1102" y="340" width="1" height="15" fill="rgb(212,137,44)"/><text x="1105.00" y="350.50"></text></g><g><title>0x7f3c1077985a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1102" y="356" width="1" height="15" fill="rgb(205,62,1)"/><text x="1105.00" y="366.50"></text></g><g><title>0x7f3c107a40dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.22%)</title><rect x="1104" y="324" width="3" height="15" fill="rgb(253,160,50)"/><text x="1107.00" y="334.50"></text></g><g><title>0x7f3c1077b426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.22%)</title><rect x="1107" y="340" width="3" height="15" fill="rgb(230,228,31)"/><text x="1110.00" y="350.50"></text></g><g><title>0x7f3c10778fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1108" y="356" width="2" height="15" fill="rgb(229,137,31)"/><text x="1111.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (4 samples, 0.17%)</title><rect x="1108" y="372" width="2" height="15" fill="rgb(243,42,50)"/><text x="1111.00" y="382.50"></text></g><g><title>0x7f3c364f8cf4 (libm-2.29.so) (2 samples, 0.09%)</title><rect x="1113" y="388" width="1" height="15" fill="rgb(231,160,50)"/><text x="1116.00" y="398.50"></text></g><g><title>0x7f3c364f8d2b (libm-2.29.so) (2 samples, 0.09%)</title><rect x="1115" y="388" width="1" height="15" fill="rgb(207,150,29)"/><text x="1118.00" y="398.50"></text></g><g><title>0x7f3c1077b454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.57%)</title><rect x="1110" y="340" width="7" height="15" fill="rgb(217,100,50)"/><text x="1113.00" y="350.50"></text></g><g><title>0x7f3c10778fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.52%)</title><rect x="1110" y="356" width="7" height="15" fill="rgb(210,221,19)"/><text x="1113.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (12 samples, 0.52%)</title><rect x="1110" y="372" width="7" height="15" fill="rgb(234,191,44)"/><text x="1113.00" y="382.50"></text></g><g><title>0x7f3c1077b267 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1117" y="356" width="1" height="15" fill="rgb(215,155,51)"/><text x="1120.00" y="366.50"></text></g><g><title>0x7f3c1077b27d (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1118" y="356" width="2" height="15" fill="rgb(214,201,21)"/><text x="1121.00" y="366.50"></text></g><g><title>0x7f3c1077b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1122" y="356" width="1" height="15" fill="rgb(236,176,31)"/><text x="1125.00" y="366.50"></text></g><g><title>0x7f3c1077b2b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1123" y="356" width="2" height="15" fill="rgb(239,179,14)"/><text x="1126.00" y="366.50"></text></g><g><title>0x7f3c1077b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.26%)</title><rect x="1125" y="356" width="3" height="15" fill="rgb(215,69,16)"/><text x="1128.00" y="366.50"></text></g><g><title>0x7f3c1077b2ed (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1128" y="356" width="1" height="15" fill="rgb(238,50,28)"/><text x="1131.00" y="366.50"></text></g><g><title>0x7f3c1077b320 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1130" y="356" width="1" height="15" fill="rgb(226,210,21)"/><text x="1133.00" y="366.50"></text></g><g><title>0x7f3c10779a50 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1134" y="372" width="1" height="15" fill="rgb(214,6,35)"/><text x="1137.00" y="382.50"></text></g><g><title>0x7f3c10779aa3 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1135" y="372" width="1" height="15" fill="rgb(231,182,31)"/><text x="1138.00" y="382.50"></text></g><g><title>0x7f3c1077b323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.52%)</title><rect x="1131" y="356" width="6" height="15" fill="rgb(229,177,27)"/><text x="1134.00" y="366.50"></text></g><g><title>0x7f3c1077b341 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1138" y="356" width="1" height="15" fill="rgb(209,10,49)"/><text x="1141.00" y="366.50"></text></g><g><title>0x7f3c1077b494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (46 samples, 2.00%)</title><rect x="1117" y="340" width="23" height="15" fill="rgb(207,225,14)"/><text x="1120.00" y="350.50">0..</text></g><g><title>0x7f3c1077b615 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1139" y="356" width="1" height="15" fill="rgb(242,104,2)"/><text x="1142.00" y="366.50"></text></g><g><title>0x7f3c1077b4bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1140" y="340" width="2" height="15" fill="rgb(211,126,23)"/><text x="1143.00" y="350.50"></text></g><g><title>0x7f3c1077b26f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1142" y="356" width="1" height="15" fill="rgb(249,107,40)"/><text x="1145.00" y="366.50"></text></g><g><title>0x7f3c1077b27d (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1143" y="356" width="2" height="15" fill="rgb(223,160,3)"/><text x="1146.00" y="366.50"></text></g><g><title>0x7f3c1077b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.26%)</title><rect x="1145" y="356" width="3" height="15" fill="rgb(228,152,17)"/><text x="1148.00" y="366.50"></text></g><g><title>0x7f3c1077b2b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1148" y="356" width="2" height="15" fill="rgb(237,89,36)"/><text x="1151.00" y="366.50"></text></g><g><title>0x7f3c1077b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.57%)</title><rect x="1150" y="356" width="7" height="15" fill="rgb(224,11,26)"/><text x="1153.00" y="366.50"></text></g><g><title>0x7f3c1077b2ed (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1159" y="356" width="1" height="15" fill="rgb(212,37,47)"/><text x="1162.00" y="366.50"></text></g><g><title>0x7f3c1077b2f3 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1160" y="356" width="1" height="15" fill="rgb(227,194,13)"/><text x="1163.00" y="366.50"></text></g><g><title>0x7f3c1077b2fb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1161" y="356" width="2" height="15" fill="rgb(218,92,39)"/><text x="1164.00" y="366.50"></text></g><g><title>0x7f3c10779a9d (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1167" y="372" width="1" height="15" fill="rgb(240,167,36)"/><text x="1170.00" y="382.50"></text></g><g><title>0x7f3c1077b323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.48%)</title><rect x="1164" y="356" width="5" height="15" fill="rgb(233,102,30)"/><text x="1167.00" y="366.50"></text></g><g><title>0x7f3c1077b332 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1169" y="356" width="2" height="15" fill="rgb(208,154,32)"/><text x="1172.00" y="366.50"></text></g><g><title>0x7f3c1077b50f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (59 samples, 2.57%)</title><rect x="1142" y="340" width="30" height="15" fill="rgb(240,144,21)"/><text x="1145.00" y="350.50">0x..</text></g><g><title>0x7f3c1077b2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1173" y="356" width="2" height="15" fill="rgb(245,121,5)"/><text x="1176.00" y="366.50"></text></g><g><title>0x7f3c1077b2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1175" y="356" width="1" height="15" fill="rgb(253,0,37)"/><text x="1178.00" y="366.50"></text></g><g><title>0x7f3c107a4100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (138 samples, 6.00%)</title><rect x="1107" y="324" width="71" height="15" fill="rgb(239,22,3)"/><text x="1110.00" y="334.50">0x7f3c10..</text></g><g><title>0x7f3c1077b538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.48%)</title><rect x="1172" y="340" width="6" height="15" fill="rgb(233,191,34)"/><text x="1175.00" y="350.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (165 samples, 7.18%)</title><rect x="1095" y="276" width="85" height="15" fill="rgb(231,219,39)"/><text x="1098.00" y="286.50">&lt;listcomp&gt;..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py) (165 samples, 7.18%)</title><rect x="1095" y="292" width="85" height="15" fill="rgb(227,44,35)"/><text x="1098.00" y="302.50">_tree_quer..</text></g><g><title>0x7f3c107a6e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (164 samples, 7.13%)</title><rect x="1096" y="308" width="84" height="15" fill="rgb(222,221,42)"/><text x="1099.00" y="318.50">0x7f3c107..</text></g><g><title>0x7f3c107a58cc (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1178" y="324" width="2" height="15" fill="rgb(245,204,5)"/><text x="1181.00" y="334.50"></text></g><g><title>0x7f3c1076ed53 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1178" y="340" width="2" height="15" fill="rgb(253,182,43)"/><text x="1181.00" y="350.50"></text></g><g><title>0x7f3c10c05e62 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1178" y="356" width="2" height="15" fill="rgb(207,7,13)"/><text x="1181.00" y="366.50"></text></g><g><title>0x7f3c10be7654 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1178" y="372" width="2" height="15" fill="rgb(216,136,41)"/><text x="1181.00" y="382.50"></text></g><g><title>0x7f3c10beeeaf (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1178" y="388" width="2" height="15" fill="rgb(232,40,0)"/><text x="1181.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1178" y="404" width="2" height="15" fill="rgb(229,65,28)"/><text x="1181.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1178" y="420" width="2" height="15" fill="rgb(216,116,37)"/><text x="1181.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1178" y="436" width="2" height="15" fill="rgb(214,88,43)"/><text x="1181.00" y="446.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1178" y="452" width="2" height="15" fill="rgb(236,107,33)"/><text x="1181.00" y="462.50"></text></g><g><title>DOUBLE_sqrt (loops.c.src) (4 samples, 0.17%)</title><rect x="1178" y="468" width="2" height="15" fill="rgb(249,219,37)"/><text x="1181.00" y="478.50"></text></g><g><title>run_unary_simd_sqrt_DOUBLE (simd.inc.src) (4 samples, 0.17%)</title><rect x="1178" y="484" width="2" height="15" fill="rgb(227,93,41)"/><text x="1181.00" y="494.50"></text></g><g><title>sse2_sqrt_DOUBLE (simd.inc.src) (4 samples, 0.17%)</title><rect x="1178" y="500" width="2" height="15" fill="rgb(214,207,45)"/><text x="1181.00" y="510.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (4 samples, 0.17%)</title><rect x="1178" y="516" width="2" height="15" fill="rgb(205,153,4)"/><text x="1181.00" y="526.50"></text></g><g><title>_dispatch (joblib/parallel.py) (166 samples, 7.22%)</title><rect x="1095" y="212" width="85" height="15" fill="rgb(209,228,8)"/><text x="1098.00" y="222.50">_dispatch ..</text></g><g><title>apply_async (joblib/_parallel_backends.py) (166 samples, 7.22%)</title><rect x="1095" y="228" width="85" height="15" fill="rgb(209,209,47)"/><text x="1098.00" y="238.50">apply_asyn..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (166 samples, 7.22%)</title><rect x="1095" y="244" width="85" height="15" fill="rgb(245,187,16)"/><text x="1098.00" y="254.50">__init__ (..</text></g><g><title>__call__ (joblib/parallel.py) (166 samples, 7.22%)</title><rect x="1095" y="260" width="85" height="15" fill="rgb(217,127,46)"/><text x="1098.00" y="270.50">__call__ (..</text></g><g><title>__call__ (joblib/parallel.py) (175 samples, 7.61%)</title><rect x="1092" y="180" width="90" height="15" fill="rgb(254,165,7)"/><text x="1095.00" y="190.50">__call__ (..</text></g><g><title>dispatch_one_batch (joblib/parallel.py) (172 samples, 7.48%)</title><rect x="1094" y="196" width="88" height="15" fill="rgb(207,137,8)"/><text x="1097.00" y="206.50">dispatch_o..</text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (2 samples, 0.09%)</title><rect x="1181" y="212" width="1" height="15" fill="rgb(218,15,37)"/><text x="1184.00" y="222.50"></text></g><g><title>__init__ (distutils/version.py) (4 samples, 0.17%)</title><rect x="1182" y="180" width="2" height="15" fill="rgb(236,62,49)"/><text x="1185.00" y="190.50"></text></g><g><title>parse (distutils/version.py) (4 samples, 0.17%)</title><rect x="1182" y="196" width="2" height="15" fill="rgb(218,197,12)"/><text x="1185.00" y="206.50"></text></g><g><title>_sre_SRE_Pattern_split (python3.7) (2 samples, 0.09%)</title><rect x="1183" y="212" width="1" height="15" fill="rgb(205,26,30)"/><text x="1186.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py) (4 samples, 0.17%)</title><rect x="1184" y="180" width="2" height="15" fill="rgb(245,37,52)"/><text x="1187.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (2 samples, 0.09%)</title><rect x="1186" y="180" width="1" height="15" fill="rgb(236,31,51)"/><text x="1189.00" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (2 samples, 0.09%)</title><rect x="1186" y="196" width="1" height="15" fill="rgb(212,61,27)"/><text x="1189.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (187 samples, 8.13%)</title><rect x="1091" y="164" width="96" height="15" fill="rgb(247,107,25)"/><text x="1094.00" y="174.50">kneighbors ..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (230 samples, 10.00%)</title><rect x="1071" y="100" width="118" height="15" fill="rgb(237,96,11)"/><text x="1074.00" y="110.50">profile (bench..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (230 samples, 10.00%)</title><rect x="1071" y="116" width="118" height="15" fill="rgb(245,45,52)"/><text x="1074.00" y="126.50">time_predict (..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (230 samples, 10.00%)</title><rect x="1071" y="132" width="118" height="15" fill="rgb(241,224,33)"/><text x="1074.00" y="142.50">&lt;lambda&gt; (mlpr..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py) (229 samples, 9.96%)</title><rect x="1071" y="148" width="118" height="15" fill="rgb(226,130,49)"/><text x="1074.00" y="158.50">predict_proba ..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.09%)</title><rect x="1188" y="164" width="1" height="15" fill="rgb(242,26,29)"/><text x="1191.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.09%)</title><rect x="1188" y="180" width="1" height="15" fill="rgb(213,52,41)"/><text x="1191.00" y="190.50"></text></g><g><title>all (2,299 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(231,132,35)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (2,299 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(221,189,7)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (231 samples, 10.05%)</title><rect x="1071" y="68" width="119" height="15" fill="rgb(230,187,51)"/><text x="1074.00" y="78.50">profile_skl (b..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py) (231 samples, 10.05%)</title><rect x="1071" y="84" width="119" height="15" fill="rgb(244,225,25)"/><text x="1074.00" y="94.50">setup_profile ..</text></g></g></svg>