<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 2.04%)</title><rect x="0.0000%" y="68" width="2.0408%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 2.04%)</title><rect x="0.0000%" y="84" width="2.0408%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 2.04%)</title><rect x="0.0000%" y="100" width="2.0408%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (19 samples, 2.04%)</title><rect x="0.0000%" y="116" width="2.0408%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (19 samples, 2.04%)</title><rect x="0.0000%" y="132" width="2.0408%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="142.50">_..</text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_m_cl.py) (19 samples, 2.04%)</title><rect x="0.0000%" y="148" width="2.0408%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 2.04%)</title><rect x="0.0000%" y="164" width="2.0408%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 2.04%)</title><rect x="0.0000%" y="180" width="2.0408%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.18%)</title><rect x="0.8593%" y="196" width="1.1815%" height="15" fill="rgb(218,30,26)"/><text x="1.1093%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 1.18%)</title><rect x="0.8593%" y="212" width="1.1815%" height="15" fill="rgb(220,122,19)"/><text x="1.1093%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.18%)</title><rect x="0.8593%" y="228" width="1.1815%" height="15" fill="rgb(250,228,42)"/><text x="1.1093%" y="238.50"></text></g><g><title>mkl_blas_avx_sgemm_kernel_0 (onnxruntime/capi/libmklml_intel.so) (11 samples, 1.18%)</title><rect x="5.3706%" y="212" width="1.1815%" height="15" fill="rgb(240,193,28)"/><text x="5.6206%" y="222.50"></text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (39 samples, 4.19%)</title><rect x="7.7336%" y="372" width="4.1890%" height="15" fill="rgb(216,20,37)"/><text x="7.9836%" y="382.50">dnnl_..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (39 samples, 4.19%)</title><rect x="7.7336%" y="388" width="4.1890%" height="15" fill="rgb(206,188,39)"/><text x="7.9836%" y="398.50">dnnl_..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (39 samples, 4.19%)</title><rect x="7.7336%" y="404" width="4.1890%" height="15" fill="rgb(217,207,13)"/><text x="7.9836%" y="414.50">dnnl:..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute_forward (onnxruntime/capi/libdnnl.so.1) (39 samples, 4.19%)</title><rect x="7.7336%" y="420" width="4.1890%" height="15" fill="rgb(231,73,38)"/><text x="7.9836%" y="430.50">dnnl:..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (39 samples, 4.19%)</title><rect x="7.7336%" y="436" width="4.1890%" height="15" fill="rgb(225,20,46)"/><text x="7.9836%" y="446.50">GOMP_..</text></g><g><title>__kmp_join_call (libiomp5.so) (38 samples, 4.08%)</title><rect x="7.8410%" y="452" width="4.0816%" height="15" fill="rgb(210,31,41)"/><text x="8.0910%" y="462.50">__km..</text></g><g><title>__kmp_internal_join (libiomp5.so) (38 samples, 4.08%)</title><rect x="7.8410%" y="468" width="4.0816%" height="15" fill="rgb(221,200,47)"/><text x="8.0910%" y="478.50">__km..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (38 samples, 4.08%)</title><rect x="7.8410%" y="484" width="4.0816%" height="15" fill="rgb(226,26,5)"/><text x="8.0910%" y="494.50">__km..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (38 samples, 4.08%)</title><rect x="7.8410%" y="500" width="4.0816%" height="15" fill="rgb(249,33,26)"/><text x="8.0910%" y="510.50">_INT..</text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (41 samples, 4.40%)</title><rect x="7.6262%" y="324" width="4.4039%" height="15" fill="rgb(235,183,28)"/><text x="7.8762%" y="334.50">onnxr..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (41 samples, 4.40%)</title><rect x="7.6262%" y="340" width="4.4039%" height="15" fill="rgb(221,5,38)"/><text x="7.8762%" y="350.50">std::..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (41 samples, 4.40%)</title><rect x="7.6262%" y="356" width="4.4039%" height="15" fill="rgb(247,18,42)"/><text x="7.8762%" y="366.50">onnxr..</text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (45 samples, 4.83%)</title><rect x="12.8894%" y="452" width="4.8335%" height="15" fill="rgb(241,131,45)"/><text x="13.1394%" y="462.50">mkl_bl..</text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (63 samples, 6.77%)</title><rect x="12.0301%" y="324" width="6.7669%" height="15" fill="rgb(249,31,29)"/><text x="12.2801%" y="334.50">onnxrunti..</text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (55 samples, 5.91%)</title><rect x="12.8894%" y="340" width="5.9076%" height="15" fill="rgb(225,111,53)"/><text x="13.1394%" y="350.50">onnxrunt..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (55 samples, 5.91%)</title><rect x="12.8894%" y="356" width="5.9076%" height="15" fill="rgb(238,160,17)"/><text x="13.1394%" y="366.50">cblas_sg..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (55 samples, 5.91%)</title><rect x="12.8894%" y="372" width="5.9076%" height="15" fill="rgb(214,148,48)"/><text x="13.1394%" y="382.50">sgemm_ (..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (55 samples, 5.91%)</title><rect x="12.8894%" y="388" width="5.9076%" height="15" fill="rgb(232,36,49)"/><text x="13.1394%" y="398.50">mkl_blas..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (55 samples, 5.91%)</title><rect x="12.8894%" y="404" width="5.9076%" height="15" fill="rgb(209,103,24)"/><text x="13.1394%" y="414.50">mkl_blas..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (55 samples, 5.91%)</title><rect x="12.8894%" y="420" width="5.9076%" height="15" fill="rgb(229,88,8)"/><text x="13.1394%" y="430.50">mkl_blas..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (55 samples, 5.91%)</title><rect x="12.8894%" y="436" width="5.9076%" height="15" fill="rgb(213,181,19)"/><text x="13.1394%" y="446.50">mkl_blas..</text></g><g><title>mkl_blas_avx_xsgemm_par (onnxruntime/capi/libmklml_intel.so) (10 samples, 1.07%)</title><rect x="17.7229%" y="452" width="1.0741%" height="15" fill="rgb(254,191,54)"/><text x="17.9729%" y="462.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.07%)</title><rect x="19.1192%" y="356" width="1.0741%" height="15" fill="rgb(241,83,37)"/><text x="19.3692%" y="366.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.07%)</title><rect x="19.1192%" y="372" width="1.0741%" height="15" fill="rgb(233,36,39)"/><text x="19.3692%" y="382.50"></text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 2.90%)</title><rect x="19.1192%" y="340" width="2.9001%" height="15" fill="rgb(226,3,54)"/><text x="19.3692%" y="350.50">on..</text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 3.01%)</title><rect x="19.1192%" y="324" width="3.0075%" height="15" fill="rgb(245,192,40)"/><text x="19.3692%" y="334.50">onn..</text></g><g><title>operator new (libstdc++.so.6.0.28) (47 samples, 5.05%)</title><rect x="23.0934%" y="340" width="5.0483%" height="15" fill="rgb(238,167,29)"/><text x="23.3434%" y="350.50">operat..</text></g><g><title>malloc (libc-2.29.so) (45 samples, 4.83%)</title><rect x="23.3083%" y="356" width="4.8335%" height="15" fill="rgb(232,182,51)"/><text x="23.5583%" y="366.50">malloc..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (212 samples, 22.77%)</title><rect x="6.6595%" y="244" width="22.7712%" height="15" fill="rgb(231,60,39)"/><text x="6.9095%" y="254.50">onnxruntime::InferenceSession::Run (..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (212 samples, 22.77%)</title><rect x="6.6595%" y="260" width="22.7712%" height="15" fill="rgb(208,69,12)"/><text x="6.9095%" y="270.50">onnxruntime::InferenceSession::Run (..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (211 samples, 22.66%)</title><rect x="6.7669%" y="276" width="22.6638%" height="15" fill="rgb(235,93,37)"/><text x="7.0169%" y="286.50">onnxruntime::utils::ExecuteGraph (on..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (211 samples, 22.66%)</title><rect x="6.7669%" y="292" width="22.6638%" height="15" fill="rgb(213,116,39)"/><text x="7.0169%" y="302.50">onnxruntime::utils::ExecuteGraphImpl..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (211 samples, 22.66%)</title><rect x="6.7669%" y="308" width="22.6638%" height="15" fill="rgb(222,207,29)"/><text x="7.0169%" y="318.50">onnxruntime::SequentialExecutor::Exe..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (67 samples, 7.20%)</title><rect x="22.2342%" y="324" width="7.1966%" height="15" fill="rgb(206,96,30)"/><text x="22.4842%" y="334.50">onnxruntim..</text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 2.90%)</title><rect x="29.4307%" y="244" width="2.9001%" height="15" fill="rgb(218,138,4)"/><text x="29.6807%" y="254.50">on..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 1.40%)</title><rect x="30.9345%" y="260" width="1.3963%" height="15" fill="rgb(250,191,14)"/><text x="31.1845%" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 1.83%)</title><rect x="36.7347%" y="292" width="1.8260%" height="15" fill="rgb(239,60,40)"/><text x="36.9847%" y="302.50">p..</text></g><g><title>profile_ort (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (345 samples, 37.06%)</title><rect x="2.1482%" y="68" width="37.0569%" height="15" fill="rgb(206,27,48)"/><text x="2.3982%" y="78.50">profile_ort (bench_MLPClassifier_default_m_cl_1000_4_12_floa..</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (345 samples, 37.06%)</title><rect x="2.1482%" y="84" width="37.0569%" height="15" fill="rgb(225,35,8)"/><text x="2.3982%" y="94.50">setup_profile (bench_MLPClassifier_default_m_cl_1000_4_12_fl..</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (345 samples, 37.06%)</title><rect x="2.1482%" y="100" width="37.0569%" height="15" fill="rgb(250,213,24)"/><text x="2.3982%" y="110.50">profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.p..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (326 samples, 35.02%)</title><rect x="4.1890%" y="116" width="35.0161%" height="15" fill="rgb(247,123,22)"/><text x="4.4390%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (325 samples, 34.91%)</title><rect x="4.2965%" y="132" width="34.9087%" height="15" fill="rgb(231,138,38)"/><text x="4.5465%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (324 samples, 34.80%)</title><rect x="4.4039%" y="148" width="34.8013%" height="15" fill="rgb(231,145,46)"/><text x="4.6539%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (322 samples, 34.59%)</title><rect x="4.6187%" y="164" width="34.5865%" height="15" fill="rgb(251,118,11)"/><text x="4.8687%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (322 samples, 34.59%)</title><rect x="4.6187%" y="180" width="34.5865%" height="15" fill="rgb(217,147,25)"/><text x="4.8687%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (321 samples, 34.48%)</title><rect x="4.7261%" y="196" width="34.4791%" height="15" fill="rgb(247,81,37)"/><text x="4.9761%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (304 samples, 32.65%)</title><rect x="6.5521%" y="212" width="32.6531%" height="15" fill="rgb(209,12,38)"/><text x="6.8021%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (304 samples, 32.65%)</title><rect x="6.5521%" y="228" width="32.6531%" height="15" fill="rgb(227,1,9)"/><text x="6.8021%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::..</text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (64 samples, 6.87%)</title><rect x="32.3308%" y="244" width="6.8743%" height="15" fill="rgb(248,47,43)"/><text x="32.5808%" y="254.50">onnxrunti..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (64 samples, 6.87%)</title><rect x="32.3308%" y="260" width="6.8743%" height="15" fill="rgb(221,10,30)"/><text x="32.5808%" y="270.50">onnxrunti..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (62 samples, 6.66%)</title><rect x="32.5456%" y="276" width="6.6595%" height="15" fill="rgb(210,229,1)"/><text x="32.7956%" y="286.50">pybind11:..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (11 samples, 1.18%)</title><rect x="40.1719%" y="196" width="1.1815%" height="15" fill="rgb(222,148,37)"/><text x="40.4219%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (11 samples, 1.18%)</title><rect x="40.1719%" y="212" width="1.1815%" height="15" fill="rgb(234,67,33)"/><text x="40.4219%" y="222.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (11 samples, 1.18%)</title><rect x="40.1719%" y="228" width="1.1815%" height="15" fill="rgb(247,98,35)"/><text x="40.4219%" y="238.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (16 samples, 1.72%)</title><rect x="42.6423%" y="292" width="1.7186%" height="15" fill="rgb(247,138,52)"/><text x="42.8923%" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (16 samples, 1.72%)</title><rect x="42.6423%" y="308" width="1.7186%" height="15" fill="rgb(213,79,30)"/><text x="42.8923%" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (16 samples, 1.72%)</title><rect x="42.6423%" y="324" width="1.7186%" height="15" fill="rgb(246,177,23)"/><text x="42.8923%" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (10 samples, 1.07%)</title><rect x="43.2868%" y="340" width="1.0741%" height="15" fill="rgb(230,62,27)"/><text x="43.5368%" y="350.50"></text></g><g><title>PyArray_FromAny (ctors.c) (28 samples, 3.01%)</title><rect x="41.9979%" y="260" width="3.0075%" height="15" fill="rgb(216,154,8)"/><text x="42.2479%" y="270.50">PyA..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (22 samples, 2.36%)</title><rect x="42.6423%" y="276" width="2.3631%" height="15" fill="rgb(244,35,45)"/><text x="42.8923%" y="286.50">Py..</text></g><g><title>_array_feature_extrator (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (35 samples, 3.76%)</title><rect x="41.3534%" y="212" width="3.7594%" height="15" fill="rgb(251,115,12)"/><text x="41.6034%" y="222.50">_arr..</text></g><g><title>array_subscript (mapping.c) (33 samples, 3.54%)</title><rect x="41.5682%" y="228" width="3.5446%" height="15" fill="rgb(240,54,50)"/><text x="41.8182%" y="238.50">arra..</text></g><g><title>prepare_index (mapping.c) (29 samples, 3.11%)</title><rect x="41.9979%" y="244" width="3.1149%" height="15" fill="rgb(233,84,52)"/><text x="42.2479%" y="254.50">pre..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (36 samples, 3.87%)</title><rect x="41.3534%" y="196" width="3.8668%" height="15" fill="rgb(207,117,47)"/><text x="41.6034%" y="206.50">_run..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (42 samples, 4.51%)</title><rect x="47.0462%" y="388" width="4.5113%" height="15" fill="rgb(249,43,39)"/><text x="47.2962%" y="398.50">exec_..</text></g><g><title>sched_yield (libc-2.29.so) (42 samples, 4.51%)</title><rect x="47.0462%" y="404" width="4.5113%" height="15" fill="rgb(209,38,44)"/><text x="47.2962%" y="414.50">sched..</text></g><g><title>gemm (cblasfuncs.c) (49 samples, 5.26%)</title><rect x="47.0462%" y="308" width="5.2632%" height="15" fill="rgb(236,212,23)"/><text x="47.2962%" y="318.50">gemm (..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (49 samples, 5.26%)</title><rect x="47.0462%" y="324" width="5.2632%" height="15" fill="rgb(242,79,21)"/><text x="47.2962%" y="334.50">cblas_..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (49 samples, 5.26%)</title><rect x="47.0462%" y="340" width="5.2632%" height="15" fill="rgb(211,96,35)"/><text x="47.2962%" y="350.50">sgemm_..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (49 samples, 5.26%)</title><rect x="47.0462%" y="356" width="5.2632%" height="15" fill="rgb(253,215,40)"/><text x="47.2962%" y="366.50">gemm_d..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (49 samples, 5.26%)</title><rect x="47.0462%" y="372" width="5.2632%" height="15" fill="rgb(211,81,21)"/><text x="47.2962%" y="382.50">exec_b..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (54 samples, 5.80%)</title><rect x="46.6165%" y="244" width="5.8002%" height="15" fill="rgb(208,190,38)"/><text x="46.8665%" y="254.50">array_i..</text></g><g><title>array_matrixproduct (multiarraymodule.c) (54 samples, 5.80%)</title><rect x="46.6165%" y="260" width="5.8002%" height="15" fill="rgb(235,213,38)"/><text x="46.8665%" y="270.50">array_m..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (54 samples, 5.80%)</title><rect x="46.6165%" y="276" width="5.8002%" height="15" fill="rgb(237,122,38)"/><text x="46.8665%" y="286.50">PyArray..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (54 samples, 5.80%)</title><rect x="46.6165%" y="292" width="5.8002%" height="15" fill="rgb(244,218,35)"/><text x="46.8665%" y="302.50">cblas_m..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py) (85 samples, 9.13%)</title><rect x="46.1869%" y="196" width="9.1300%" height="15" fill="rgb(240,68,47)"/><text x="46.4369%" y="206.50">_run (mlprodi..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (85 samples, 9.13%)</title><rect x="46.1869%" y="212" width="9.1300%" height="15" fill="rgb(210,16,53)"/><text x="46.4369%" y="222.50">numpy_dot_inp..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (82 samples, 8.81%)</title><rect x="46.5091%" y="228" width="8.8077%" height="15" fill="rgb(235,124,12)"/><text x="46.7591%" y="238.50">dot (&lt;__arra..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (19 samples, 2.04%)</title><rect x="53.2760%" y="244" width="2.0408%" height="15" fill="rgb(224,169,11)"/><text x="53.5260%" y="254.50">s..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (78 samples, 8.38%)</title><rect x="55.4243%" y="244" width="8.3781%" height="15" fill="rgb(250,166,2)"/><text x="55.6743%" y="254.50">execute_lega..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (78 samples, 8.38%)</title><rect x="55.4243%" y="260" width="8.3781%" height="15" fill="rgb(242,216,29)"/><text x="55.6743%" y="270.50">trivial_thre..</text></g><g><title>FLOAT_maximum (loops.c.src) (78 samples, 8.38%)</title><rect x="55.4243%" y="276" width="8.3781%" height="15" fill="rgb(230,116,27)"/><text x="55.6743%" y="286.50">FLOAT_maximu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (79 samples, 8.49%)</title><rect x="55.4243%" y="228" width="8.4855%" height="15" fill="rgb(228,99,48)"/><text x="55.6743%" y="238.50">PyUFunc_Gene..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py) (81 samples, 8.70%)</title><rect x="55.3169%" y="196" width="8.7003%" height="15" fill="rgb(253,11,6)"/><text x="55.5669%" y="206.50">_run (mlprod..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (80 samples, 8.59%)</title><rect x="55.4243%" y="212" width="8.5929%" height="15" fill="rgb(247,143,39)"/><text x="55.6743%" y="222.50">ufunc_generi..</text></g><g><title>array_sum (methods.c) (18 samples, 1.93%)</title><rect x="65.3061%" y="212" width="1.9334%" height="15" fill="rgb(236,97,10)"/><text x="65.5561%" y="222.50">a..</text></g><g><title>forward_ndarray_method (methods.c) (18 samples, 1.93%)</title><rect x="65.3061%" y="228" width="1.9334%" height="15" fill="rgb(233,208,19)"/><text x="65.5561%" y="238.50">f..</text></g><g><title>_sum (numpy/core/_methods.py) (15 samples, 1.61%)</title><rect x="65.6284%" y="244" width="1.6112%" height="15" fill="rgb(216,164,2)"/><text x="65.8784%" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (15 samples, 1.61%)</title><rect x="65.6284%" y="260" width="1.6112%" height="15" fill="rgb(220,129,5)"/><text x="65.8784%" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (14 samples, 1.50%)</title><rect x="65.7358%" y="276" width="1.5038%" height="15" fill="rgb(242,17,10)"/><text x="65.9858%" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (14 samples, 1.50%)</title><rect x="65.7358%" y="292" width="1.5038%" height="15" fill="rgb(242,107,0)"/><text x="65.9858%" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (14 samples, 1.50%)</title><rect x="65.7358%" y="308" width="1.5038%" height="15" fill="rgb(251,28,31)"/><text x="65.9858%" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c) (13 samples, 1.40%)</title><rect x="65.8432%" y="324" width="1.3963%" height="15" fill="rgb(233,223,10)"/><text x="66.0932%" y="334.50"></text></g><g><title>expf (libm-2.29.so) (16 samples, 1.72%)</title><rect x="68.3136%" y="292" width="1.7186%" height="15" fill="rgb(215,21,27)"/><text x="68.5636%" y="302.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (285 samples, 30.61%)</title><rect x="39.5274%" y="132" width="30.6122%" height="15" fill="rgb(232,23,21)"/><text x="39.7774%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl...</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (285 samples, 30.61%)</title><rect x="39.5274%" y="148" width="30.6122%" height="15" fill="rgb(244,5,23)"/><text x="39.7774%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (285 samples, 30.61%)</title><rect x="39.5274%" y="164" width="30.6122%" height="15" fill="rgb(226,81,46)"/><text x="39.7774%" y="174.50">_run_sequence_runtime_compiled (mlprodict/onnxrt/..</text></g><g><title>compiled_run (&lt;string&gt;) (283 samples, 30.40%)</title><rect x="39.7422%" y="180" width="30.3974%" height="15" fill="rgb(247,70,30)"/><text x="39.9922%" y="190.50">compiled_run (&lt;string&gt;)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py) (57 samples, 6.12%)</title><rect x="64.0172%" y="196" width="6.1224%" height="15" fill="rgb(212,68,19)"/><text x="64.2672%" y="206.50">_run (ml..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (27 samples, 2.90%)</title><rect x="67.2395%" y="212" width="2.9001%" height="15" fill="rgb(240,187,13)"/><text x="67.4895%" y="222.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (27 samples, 2.90%)</title><rect x="67.2395%" y="228" width="2.9001%" height="15" fill="rgb(223,113,26)"/><text x="67.4895%" y="238.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (27 samples, 2.90%)</title><rect x="67.2395%" y="244" width="2.9001%" height="15" fill="rgb(206,192,2)"/><text x="67.4895%" y="254.50">ex..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (19 samples, 2.04%)</title><rect x="68.0988%" y="260" width="2.0408%" height="15" fill="rgb(241,108,4)"/><text x="68.3488%" y="270.50">t..</text></g><g><title>FLOAT_exp (loops.c.src) (19 samples, 2.04%)</title><rect x="68.0988%" y="276" width="2.0408%" height="15" fill="rgb(247,173,49)"/><text x="68.3488%" y="286.50">F..</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (289 samples, 31.04%)</title><rect x="39.2052%" y="100" width="31.0419%" height="15" fill="rgb(224,114,35)"/><text x="39.4552%" y="110.50">profile (bench_MLPClassifier_default_m_cl_1000_4_1..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (286 samples, 30.72%)</title><rect x="39.5274%" y="116" width="30.7197%" height="15" fill="rgb(245,159,27)"/><text x="39.7774%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>profile_pyrtc (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (290 samples, 31.15%)</title><rect x="39.2052%" y="68" width="31.1493%" height="15" fill="rgb(245,172,44)"/><text x="39.4552%" y="78.50">profile_pyrtc (bench_MLPClassifier_default_m_cl_10..</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (290 samples, 31.15%)</title><rect x="39.2052%" y="84" width="31.1493%" height="15" fill="rgb(236,23,11)"/><text x="39.4552%" y="94.50">setup_profile (bench_MLPClassifier_default_m_cl_10..</text></g><g><title>DOUBLE_clip (clip.c.src) (61 samples, 6.55%)</title><rect x="71.4286%" y="404" width="6.5521%" height="15" fill="rgb(205,117,38)"/><text x="71.6786%" y="414.50">DOUBLE_cl..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (63 samples, 6.77%)</title><rect x="71.4286%" y="372" width="6.7669%" height="15" fill="rgb(237,72,25)"/><text x="71.6786%" y="382.50">execute_l..</text></g><g><title>iterator_loop (ufunc_object.c) (63 samples, 6.77%)</title><rect x="71.4286%" y="388" width="6.7669%" height="15" fill="rgb(244,70,9)"/><text x="71.6786%" y="398.50">iterator_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (64 samples, 6.87%)</title><rect x="71.4286%" y="356" width="6.8743%" height="15" fill="rgb(217,125,39)"/><text x="71.6786%" y="366.50">PyUFunc_G..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (65 samples, 6.98%)</title><rect x="71.4286%" y="324" width="6.9817%" height="15" fill="rgb(235,36,10)"/><text x="71.6786%" y="334.50">_clip_dep..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (65 samples, 6.98%)</title><rect x="71.4286%" y="340" width="6.9817%" height="15" fill="rgb(251,123,47)"/><text x="71.6786%" y="350.50">ufunc_gen..</text></g><g><title>clip (numpy/core/fromnumeric.py) (83 samples, 8.92%)</title><rect x="71.1063%" y="244" width="8.9151%" height="15" fill="rgb(221,13,13)"/><text x="71.3563%" y="254.50">clip (numpy/c..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (83 samples, 8.92%)</title><rect x="71.1063%" y="260" width="8.9151%" height="15" fill="rgb(238,131,9)"/><text x="71.3563%" y="270.50">_wrapfunc (nu..</text></g><g><title>array_clip (methods.c) (83 samples, 8.92%)</title><rect x="71.1063%" y="276" width="8.9151%" height="15" fill="rgb(211,50,8)"/><text x="71.3563%" y="286.50">array_clip (m..</text></g><g><title>forward_ndarray_method (methods.c) (83 samples, 8.92%)</title><rect x="71.1063%" y="292" width="8.9151%" height="15" fill="rgb(245,182,24)"/><text x="71.3563%" y="302.50">forward_ndarr..</text></g><g><title>_clip (numpy/core/_methods.py) (82 samples, 8.81%)</title><rect x="71.2137%" y="308" width="8.8077%" height="15" fill="rgb(242,14,37)"/><text x="71.4637%" y="318.50">_clip (numpy..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (14 samples, 1.50%)</title><rect x="78.5177%" y="324" width="1.5038%" height="15" fill="rgb(246,228,12)"/><text x="78.7677%" y="334.50"></text></g><g><title>relu (sklearn/neural_network/_base.py) (87 samples, 9.34%)</title><rect x="70.9989%" y="196" width="9.3448%" height="15" fill="rgb(213,55,15)"/><text x="71.2489%" y="206.50">relu (sklearn..</text></g><g><title>clip (&lt;__array_function__ internals&gt;) (86 samples, 9.24%)</title><rect x="71.1063%" y="212" width="9.2374%" height="15" fill="rgb(209,9,3)"/><text x="71.3563%" y="222.50">clip (&lt;__arra..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (86 samples, 9.24%)</title><rect x="71.1063%" y="228" width="9.2374%" height="15" fill="rgb(230,59,30)"/><text x="71.3563%" y="238.50">array_impleme..</text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 3.01%)</title><rect x="81.0956%" y="212" width="3.0075%" height="15" fill="rgb(209,121,21)"/><text x="81.3456%" y="222.50">dge..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (54 samples, 5.80%)</title><rect x="84.4253%" y="340" width="5.8002%" height="15" fill="rgb(220,109,13)"/><text x="84.6753%" y="350.50">exec_bl..</text></g><g><title>sched_yield (libc-2.29.so) (54 samples, 5.80%)</title><rect x="84.4253%" y="356" width="5.8002%" height="15" fill="rgb(232,18,1)"/><text x="84.6753%" y="366.50">sched_y..</text></g><g><title>DOUBLE_matmul (matmul.c.src) (69 samples, 7.41%)</title><rect x="84.1031%" y="260" width="7.4114%" height="15" fill="rgb(215,41,42)"/><text x="84.3531%" y="270.50">DOUBLE_mat..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (69 samples, 7.41%)</title><rect x="84.1031%" y="276" width="7.4114%" height="15" fill="rgb(224,123,36)"/><text x="84.3531%" y="286.50">cblas_dgem..</text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (69 samples, 7.41%)</title><rect x="84.1031%" y="292" width="7.4114%" height="15" fill="rgb(240,125,3)"/><text x="84.3531%" y="302.50">dgemm_thre..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (69 samples, 7.41%)</title><rect x="84.1031%" y="308" width="7.4114%" height="15" fill="rgb(205,98,50)"/><text x="84.3531%" y="318.50">gemm_drive..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (69 samples, 7.41%)</title><rect x="84.1031%" y="324" width="7.4114%" height="15" fill="rgb(205,185,37)"/><text x="84.3531%" y="334.50">exec_blas ..</text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (12 samples, 1.29%)</title><rect x="90.2256%" y="340" width="1.2889%" height="15" fill="rgb(238,207,15)"/><text x="90.4756%" y="350.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (108 samples, 11.60%)</title><rect x="80.3437%" y="196" width="11.6004%" height="15" fill="rgb(213,199,42)"/><text x="80.5937%" y="206.50">safe_sparse_dot (..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (73 samples, 7.84%)</title><rect x="84.1031%" y="212" width="7.8410%" height="15" fill="rgb(235,201,11)"/><text x="84.3531%" y="222.50">ufunc_gener..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (73 samples, 7.84%)</title><rect x="84.1031%" y="228" width="7.8410%" height="15" fill="rgb(207,46,11)"/><text x="84.3531%" y="238.50">PyUFunc_Gen..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (73 samples, 7.84%)</title><rect x="84.1031%" y="244" width="7.8410%" height="15" fill="rgb(241,35,35)"/><text x="84.3531%" y="254.50">PyUFunc_Gen..</text></g><g><title>exp (libm-2.29.so) (10 samples, 1.07%)</title><rect x="93.7701%" y="292" width="1.0741%" height="15" fill="rgb(243,32,47)"/><text x="94.0201%" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (16 samples, 1.72%)</title><rect x="93.2331%" y="228" width="1.7186%" height="15" fill="rgb(247,202,23)"/><text x="93.4831%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (16 samples, 1.72%)</title><rect x="93.2331%" y="244" width="1.7186%" height="15" fill="rgb(219,102,11)"/><text x="93.4831%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (12 samples, 1.29%)</title><rect x="93.6627%" y="260" width="1.2889%" height="15" fill="rgb(243,110,44)"/><text x="93.9127%" y="270.50"></text></g><g><title>PyUFunc_d_d (loops.c.src) (12 samples, 1.29%)</title><rect x="93.6627%" y="276" width="1.2889%" height="15" fill="rgb(222,74,54)"/><text x="93.9127%" y="286.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py) (29 samples, 3.11%)</title><rect x="91.9441%" y="196" width="3.1149%" height="15" fill="rgb(216,99,12)"/><text x="92.1941%" y="206.50">sof..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (17 samples, 1.83%)</title><rect x="93.2331%" y="212" width="1.8260%" height="15" fill="rgb(226,22,26)"/><text x="93.4831%" y="222.50">u..</text></g><g><title>DOUBLE_add (loops.c.src) (19 samples, 2.04%)</title><rect x="95.0591%" y="260" width="2.0408%" height="15" fill="rgb(217,163,10)"/><text x="95.3091%" y="270.50">D..</text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (19 samples, 2.04%)</title><rect x="95.0591%" y="276" width="2.0408%" height="15" fill="rgb(213,25,53)"/><text x="95.3091%" y="286.50">r..</text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (19 samples, 2.04%)</title><rect x="95.0591%" y="292" width="2.0408%" height="15" fill="rgb(252,105,26)"/><text x="95.3091%" y="302.50">s..</text></g><g><title>_mm_store_pd (emmintrin.h) (11 samples, 1.18%)</title><rect x="95.9184%" y="308" width="1.1815%" height="15" fill="rgb(220,39,43)"/><text x="96.1684%" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (21 samples, 2.26%)</title><rect x="95.0591%" y="212" width="2.2556%" height="15" fill="rgb(229,68,48)"/><text x="95.3091%" y="222.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (21 samples, 2.26%)</title><rect x="95.0591%" y="228" width="2.2556%" height="15" fill="rgb(252,8,32)"/><text x="95.3091%" y="238.50">e..</text></g><g><title>iterator_loop (ufunc_object.c) (21 samples, 2.26%)</title><rect x="95.0591%" y="244" width="2.2556%" height="15" fill="rgb(223,20,43)"/><text x="95.3091%" y="254.50">i..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py) (248 samples, 26.64%)</title><rect x="70.7841%" y="180" width="26.6380%" height="15" fill="rgb(229,81,49)"/><text x="71.0341%" y="190.50">_forward_pass (sklearn/neural_network/_mult..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (22 samples, 2.36%)</title><rect x="95.0591%" y="196" width="2.3631%" height="15" fill="rgb(236,28,36)"/><text x="95.3091%" y="206.50">uf..</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py) (267 samples, 28.68%)</title><rect x="70.4619%" y="164" width="28.6788%" height="15" fill="rgb(249,185,26)"/><text x="70.7119%" y="174.50">_predict (sklearn/neural_network/_multilayer_p..</text></g><g><title>check_array (sklearn/utils/validation.py) (16 samples, 1.72%)</title><rect x="97.4221%" y="180" width="1.7186%" height="15" fill="rgb(249,174,33)"/><text x="97.6721%" y="190.50"></text></g><g><title>profile_skl (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (271 samples, 29.11%)</title><rect x="70.3545%" y="68" width="29.1085%" height="15" fill="rgb(233,201,37)"/><text x="70.6045%" y="78.50">profile_skl (bench_MLPClassifier_default_m_cl_1..</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (271 samples, 29.11%)</title><rect x="70.3545%" y="84" width="29.1085%" height="15" fill="rgb(221,78,26)"/><text x="70.6045%" y="94.50">setup_profile (bench_MLPClassifier_default_m_cl..</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (271 samples, 29.11%)</title><rect x="70.3545%" y="100" width="29.1085%" height="15" fill="rgb(250,127,30)"/><text x="70.6045%" y="110.50">profile (bench_MLPClassifier_default_m_cl_1000_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (271 samples, 29.11%)</title><rect x="70.3545%" y="116" width="29.1085%" height="15" fill="rgb(230,49,44)"/><text x="70.6045%" y="126.50">time_predict (mlprodict/asv_benchmark/common_as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (271 samples, 29.11%)</title><rect x="70.3545%" y="132" width="29.1085%" height="15" fill="rgb(229,67,23)"/><text x="70.6045%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py) (271 samples, 29.11%)</title><rect x="70.3545%" y="148" width="29.1085%" height="15" fill="rgb(249,83,47)"/><text x="70.6045%" y="158.50">predict_proba (sklearn/neural_network/_multilay..</text></g><g><title>all (931 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py) (931 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py)</text></g></svg></svg>