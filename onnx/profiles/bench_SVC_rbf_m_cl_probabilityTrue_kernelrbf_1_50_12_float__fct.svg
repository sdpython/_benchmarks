<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1398" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1381.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1381.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (onnx/__init__.py) (4 samples, 1.83%)</title><rect x="0.0000%" y="292" width="1.8349%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="302.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="308" width="1.8349%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="318.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="324" width="1.8349%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="334.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="340" width="1.8349%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="350.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="356" width="1.8349%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="366.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="372" width="1.8349%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="382.50">_..</text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (4 samples, 1.83%)</title><rect x="0.0000%" y="388" width="1.8349%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="398.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="404" width="1.8349%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="414.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="420" width="1.8349%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="430.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="436" width="1.8349%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="446.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="452" width="1.8349%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="462.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="468" width="1.8349%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="478.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (4 samples, 1.83%)</title><rect x="0.0000%" y="484" width="1.8349%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="494.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="500" width="1.8349%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="510.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="516" width="1.8349%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="526.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="532" width="1.8349%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="542.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="548" width="1.8349%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="558.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="564" width="1.8349%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="574.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (4 samples, 1.83%)</title><rect x="0.0000%" y="580" width="1.8349%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="590.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="596" width="1.8349%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="606.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="612" width="1.8349%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="622.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="628" width="1.8349%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="638.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="644" width="1.8349%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="654.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="660" width="1.8349%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="670.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="676" width="1.8349%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="686.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="692" width="1.8349%" height="15" fill="rgb(249,31,29)"/><text x="0.2500%" y="702.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="708" width="1.8349%" height="15" fill="rgb(225,111,53)"/><text x="0.2500%" y="718.50">_..</text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (4 samples, 1.83%)</title><rect x="0.0000%" y="724" width="1.8349%" height="15" fill="rgb(238,160,17)"/><text x="0.2500%" y="734.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="740" width="1.8349%" height="15" fill="rgb(214,148,48)"/><text x="0.2500%" y="750.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="756" width="1.8349%" height="15" fill="rgb(232,36,49)"/><text x="0.2500%" y="766.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="772" width="1.8349%" height="15" fill="rgb(209,103,24)"/><text x="0.2500%" y="782.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="788" width="1.8349%" height="15" fill="rgb(229,88,8)"/><text x="0.2500%" y="798.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="0.0000%" y="804" width="1.8349%" height="15" fill="rgb(213,181,19)"/><text x="0.2500%" y="814.50">_..</text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (4 samples, 1.83%)</title><rect x="0.0000%" y="820" width="1.8349%" height="15" fill="rgb(254,191,54)"/><text x="0.2500%" y="830.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="0.4587%" y="836" width="1.3761%" height="15" fill="rgb(241,83,37)"/><text x="0.7087%" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="0.4587%" y="852" width="1.3761%" height="15" fill="rgb(233,36,39)"/><text x="0.7087%" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="0.4587%" y="868" width="1.3761%" height="15" fill="rgb(226,3,54)"/><text x="0.7087%" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.38%)</title><rect x="0.4587%" y="884" width="1.3761%" height="15" fill="rgb(245,192,40)"/><text x="0.7087%" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="0.4587%" y="900" width="1.3761%" height="15" fill="rgb(238,167,29)"/><text x="0.7087%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="0.0000%" y="196" width="3.2110%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="206.50">_ca..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="0.0000%" y="212" width="3.2110%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="222.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="0.0000%" y="228" width="3.2110%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="238.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="0.0000%" y="244" width="3.2110%" height="15" fill="rgb(235,93,37)"/><text x="0.2500%" y="254.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 3.21%)</title><rect x="0.0000%" y="260" width="3.2110%" height="15" fill="rgb(213,116,39)"/><text x="0.2500%" y="270.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="0.0000%" y="276" width="3.2110%" height="15" fill="rgb(222,207,29)"/><text x="0.2500%" y="286.50">_ca..</text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (3 samples, 1.38%)</title><rect x="1.8349%" y="292" width="1.3761%" height="15" fill="rgb(206,96,30)"/><text x="2.0849%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="308" width="1.3761%" height="15" fill="rgb(218,138,4)"/><text x="2.0849%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="324" width="1.3761%" height="15" fill="rgb(250,191,14)"/><text x="2.0849%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="340" width="1.3761%" height="15" fill="rgb(239,60,40)"/><text x="2.0849%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="356" width="1.3761%" height="15" fill="rgb(206,27,48)"/><text x="2.0849%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="372" width="1.3761%" height="15" fill="rgb(225,35,8)"/><text x="2.0849%" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (3 samples, 1.38%)</title><rect x="1.8349%" y="388" width="1.3761%" height="15" fill="rgb(250,213,24)"/><text x="2.0849%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="404" width="1.3761%" height="15" fill="rgb(247,123,22)"/><text x="2.0849%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="420" width="1.3761%" height="15" fill="rgb(231,138,38)"/><text x="2.0849%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="436" width="1.3761%" height="15" fill="rgb(231,145,46)"/><text x="2.0849%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="452" width="1.3761%" height="15" fill="rgb(251,118,11)"/><text x="2.0849%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="1.8349%" y="468" width="1.3761%" height="15" fill="rgb(217,147,25)"/><text x="2.0849%" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (3 samples, 1.38%)</title><rect x="1.8349%" y="484" width="1.3761%" height="15" fill="rgb(247,81,37)"/><text x="2.0849%" y="494.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="484" width="2.7523%" height="15" fill="rgb(209,12,38)"/><text x="3.4610%" y="494.50">_c..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="500" width="2.7523%" height="15" fill="rgb(227,1,9)"/><text x="3.4610%" y="510.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="516" width="2.7523%" height="15" fill="rgb(248,47,43)"/><text x="3.4610%" y="526.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="532" width="2.7523%" height="15" fill="rgb(221,10,30)"/><text x="3.4610%" y="542.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="548" width="2.7523%" height="15" fill="rgb(210,229,1)"/><text x="3.4610%" y="558.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="564" width="2.7523%" height="15" fill="rgb(222,148,37)"/><text x="3.4610%" y="574.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (6 samples, 2.75%)</title><rect x="3.2110%" y="580" width="2.7523%" height="15" fill="rgb(234,67,33)"/><text x="3.4610%" y="590.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="596" width="2.7523%" height="15" fill="rgb(247,98,35)"/><text x="3.4610%" y="606.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="612" width="2.7523%" height="15" fill="rgb(247,138,52)"/><text x="3.4610%" y="622.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="628" width="2.7523%" height="15" fill="rgb(213,79,30)"/><text x="3.4610%" y="638.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="644" width="2.7523%" height="15" fill="rgb(246,177,23)"/><text x="3.4610%" y="654.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="660" width="2.7523%" height="15" fill="rgb(230,62,27)"/><text x="3.4610%" y="670.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (6 samples, 2.75%)</title><rect x="3.2110%" y="676" width="2.7523%" height="15" fill="rgb(216,154,8)"/><text x="3.4610%" y="686.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="692" width="2.7523%" height="15" fill="rgb(244,35,45)"/><text x="3.4610%" y="702.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="708" width="2.7523%" height="15" fill="rgb(251,115,12)"/><text x="3.4610%" y="718.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="724" width="2.7523%" height="15" fill="rgb(240,54,50)"/><text x="3.4610%" y="734.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="740" width="2.7523%" height="15" fill="rgb(233,84,52)"/><text x="3.4610%" y="750.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="756" width="2.7523%" height="15" fill="rgb(207,117,47)"/><text x="3.4610%" y="766.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (6 samples, 2.75%)</title><rect x="3.2110%" y="772" width="2.7523%" height="15" fill="rgb(249,43,39)"/><text x="3.4610%" y="782.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="788" width="2.7523%" height="15" fill="rgb(209,38,44)"/><text x="3.4610%" y="798.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="804" width="2.7523%" height="15" fill="rgb(236,212,23)"/><text x="3.4610%" y="814.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="820" width="2.7523%" height="15" fill="rgb(242,79,21)"/><text x="3.4610%" y="830.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="836" width="2.7523%" height="15" fill="rgb(211,96,35)"/><text x="3.4610%" y="846.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="852" width="2.7523%" height="15" fill="rgb(253,215,40)"/><text x="3.4610%" y="862.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (6 samples, 2.75%)</title><rect x="3.2110%" y="868" width="2.7523%" height="15" fill="rgb(211,81,21)"/><text x="3.4610%" y="878.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="884" width="2.7523%" height="15" fill="rgb(208,190,38)"/><text x="3.4610%" y="894.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="900" width="2.7523%" height="15" fill="rgb(235,213,38)"/><text x="3.4610%" y="910.50">_f..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="916" width="2.7523%" height="15" fill="rgb(237,122,38)"/><text x="3.4610%" y="926.50">_c..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="932" width="2.7523%" height="15" fill="rgb(244,218,35)"/><text x="3.4610%" y="942.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="948" width="2.7523%" height="15" fill="rgb(240,68,47)"/><text x="3.4610%" y="958.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="964" width="2.7523%" height="15" fill="rgb(210,16,53)"/><text x="3.4610%" y="974.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="980" width="2.7523%" height="15" fill="rgb(235,124,12)"/><text x="3.4610%" y="990.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="996" width="2.7523%" height="15" fill="rgb(224,169,11)"/><text x="3.4610%" y="1006.50">_c..</text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (6 samples, 2.75%)</title><rect x="3.2110%" y="1012" width="2.7523%" height="15" fill="rgb(250,166,2)"/><text x="3.4610%" y="1022.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="1028" width="2.7523%" height="15" fill="rgb(242,216,29)"/><text x="3.4610%" y="1038.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="1044" width="2.7523%" height="15" fill="rgb(230,116,27)"/><text x="3.4610%" y="1054.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="1060" width="2.7523%" height="15" fill="rgb(228,99,48)"/><text x="3.4610%" y="1070.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="1076" width="2.7523%" height="15" fill="rgb(253,11,6)"/><text x="3.4610%" y="1086.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 2.75%)</title><rect x="3.2110%" y="1092" width="2.7523%" height="15" fill="rgb(247,143,39)"/><text x="3.4610%" y="1102.50">_c..</text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (6 samples, 2.75%)</title><rect x="3.2110%" y="1108" width="2.7523%" height="15" fill="rgb(236,97,10)"/><text x="3.4610%" y="1118.50">&lt;m..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1124" width="1.8349%" height="15" fill="rgb(233,208,19)"/><text x="4.3784%" y="1134.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1140" width="1.8349%" height="15" fill="rgb(216,164,2)"/><text x="4.3784%" y="1150.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1156" width="1.8349%" height="15" fill="rgb(220,129,5)"/><text x="4.3784%" y="1166.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1172" width="1.8349%" height="15" fill="rgb(242,17,10)"/><text x="4.3784%" y="1182.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1188" width="1.8349%" height="15" fill="rgb(242,107,0)"/><text x="4.3784%" y="1198.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1204" width="1.8349%" height="15" fill="rgb(251,28,31)"/><text x="4.3784%" y="1214.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1220" width="1.8349%" height="15" fill="rgb(233,223,10)"/><text x="4.3784%" y="1230.50">_..</text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (4 samples, 1.83%)</title><rect x="4.1284%" y="1236" width="1.8349%" height="15" fill="rgb(215,21,27)"/><text x="4.3784%" y="1246.50">&lt;..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1252" width="1.8349%" height="15" fill="rgb(232,23,21)"/><text x="4.3784%" y="1262.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1268" width="1.8349%" height="15" fill="rgb(244,5,23)"/><text x="4.3784%" y="1278.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1284" width="1.8349%" height="15" fill="rgb(226,81,46)"/><text x="4.3784%" y="1294.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1300" width="1.8349%" height="15" fill="rgb(247,70,30)"/><text x="4.3784%" y="1310.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1316" width="1.8349%" height="15" fill="rgb(212,68,19)"/><text x="4.3784%" y="1326.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1332" width="1.8349%" height="15" fill="rgb(240,187,13)"/><text x="4.3784%" y="1342.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.83%)</title><rect x="4.1284%" y="1348" width="1.8349%" height="15" fill="rgb(223,113,26)"/><text x="4.3784%" y="1358.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (7 samples, 3.21%)</title><rect x="3.2110%" y="244" width="3.2110%" height="15" fill="rgb(206,192,2)"/><text x="3.4610%" y="254.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="260" width="3.2110%" height="15" fill="rgb(241,108,4)"/><text x="3.4610%" y="270.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="276" width="3.2110%" height="15" fill="rgb(247,173,49)"/><text x="3.4610%" y="286.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="292" width="3.2110%" height="15" fill="rgb(224,114,35)"/><text x="3.4610%" y="302.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="308" width="3.2110%" height="15" fill="rgb(245,159,27)"/><text x="3.4610%" y="318.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="324" width="3.2110%" height="15" fill="rgb(245,172,44)"/><text x="3.4610%" y="334.50">_ca..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (7 samples, 3.21%)</title><rect x="3.2110%" y="340" width="3.2110%" height="15" fill="rgb(236,23,11)"/><text x="3.4610%" y="350.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="356" width="3.2110%" height="15" fill="rgb(205,117,38)"/><text x="3.4610%" y="366.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="372" width="3.2110%" height="15" fill="rgb(237,72,25)"/><text x="3.4610%" y="382.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="388" width="3.2110%" height="15" fill="rgb(244,70,9)"/><text x="3.4610%" y="398.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="404" width="3.2110%" height="15" fill="rgb(217,125,39)"/><text x="3.4610%" y="414.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="420" width="3.2110%" height="15" fill="rgb(235,36,10)"/><text x="3.4610%" y="430.50">_ca..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (7 samples, 3.21%)</title><rect x="3.2110%" y="436" width="3.2110%" height="15" fill="rgb(251,123,47)"/><text x="3.4610%" y="446.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="452" width="3.2110%" height="15" fill="rgb(221,13,13)"/><text x="3.4610%" y="462.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 3.21%)</title><rect x="3.2110%" y="468" width="3.2110%" height="15" fill="rgb(238,131,9)"/><text x="3.4610%" y="478.50">_fi..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (15 samples, 6.88%)</title><rect x="0.0000%" y="68" width="6.8807%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="78.50">_find_and..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 6.88%)</title><rect x="0.0000%" y="84" width="6.8807%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="94.50">_find_and..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 6.88%)</title><rect x="0.0000%" y="100" width="6.8807%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="110.50">_load_unl..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (15 samples, 6.88%)</title><rect x="0.0000%" y="116" width="6.8807%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="126.50">exec_modu..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (15 samples, 6.88%)</title><rect x="0.0000%" y="132" width="6.8807%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="142.50">_call_wit..</text></g><g><title>&lt;module&gt; (profiles/benches/svm/SVC/bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf.py) (15 samples, 6.88%)</title><rect x="0.0000%" y="148" width="6.8807%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="158.50">&lt;module&gt; ..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (15 samples, 6.88%)</title><rect x="0.0000%" y="164" width="6.8807%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="174.50">_find_and..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 6.88%)</title><rect x="0.0000%" y="180" width="6.8807%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="190.50">_find_and..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 3.67%)</title><rect x="3.2110%" y="196" width="3.6697%" height="15" fill="rgb(220,109,13)"/><text x="3.4610%" y="206.50">_loa..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 3.67%)</title><rect x="3.2110%" y="212" width="3.6697%" height="15" fill="rgb(232,18,1)"/><text x="3.4610%" y="222.50">exec..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 3.67%)</title><rect x="3.2110%" y="228" width="3.6697%" height="15" fill="rgb(215,41,42)"/><text x="3.4610%" y="238.50">_cal..</text></g><g><title>onnxruntime::FeedsFetchesInfo::FeedsFetchesInfo (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.38%)</title><rect x="16.5138%" y="276" width="1.3761%" height="15" fill="rgb(224,123,36)"/><text x="16.7638%" y="286.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.38%)</title><rect x="20.1835%" y="324" width="1.3761%" height="15" fill="rgb(240,125,3)"/><text x="20.4335%" y="334.50"></text></g><g><title>expf32x (libm-2.29.so) (4 samples, 1.83%)</title><rect x="24.7706%" y="340" width="1.8349%" height="15" fill="rgb(205,98,50)"/><text x="25.0206%" y="350.50">e..</text></g><g><title>onnxruntime::ml::SVMClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 5.50%)</title><rect x="22.4771%" y="324" width="5.5046%" height="15" fill="rgb(205,185,37)"/><text x="22.7271%" y="334.50">onnxrun..</text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.38%)</title><rect x="26.6055%" y="340" width="1.3761%" height="15" fill="rgb(238,207,15)"/><text x="26.8555%" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.38%)</title><rect x="26.6055%" y="356" width="1.3761%" height="15" fill="rgb(213,199,42)"/><text x="26.8555%" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.38%)</title><rect x="26.6055%" y="372" width="1.3761%" height="15" fill="rgb(235,201,11)"/><text x="26.8555%" y="382.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 9.17%)</title><rect x="19.2661%" y="308" width="9.1743%" height="15" fill="rgb(207,46,11)"/><text x="19.5161%" y="318.50">onnxruntime::..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 9.63%)</title><rect x="19.2661%" y="292" width="9.6330%" height="15" fill="rgb(241,35,35)"/><text x="19.5161%" y="302.50">onnxruntime::u..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 13.30%)</title><rect x="16.5138%" y="244" width="13.3028%" height="15" fill="rgb(243,32,47)"/><text x="16.7638%" y="254.50">onnxruntime::Inferen..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 13.30%)</title><rect x="16.5138%" y="260" width="13.3028%" height="15" fill="rgb(247,202,23)"/><text x="16.7638%" y="270.50">onnxruntime::Inferen..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 10.55%)</title><rect x="19.2661%" y="276" width="10.5505%" height="15" fill="rgb(219,102,11)"/><text x="19.5161%" y="286.50">onnxruntime::ut..</text></g><g><title>onnxruntime::python::AddTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.38%)</title><rect x="30.2752%" y="244" width="1.3761%" height="15" fill="rgb(243,110,44)"/><text x="30.5252%" y="254.50"></text></g><g><title>onnxruntime::python::GetPyObjFromTensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.38%)</title><rect x="30.2752%" y="260" width="1.3761%" height="15" fill="rgb(222,74,54)"/><text x="30.5252%" y="270.50"></text></g><g><title>profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (56 samples, 25.69%)</title><rect x="6.8807%" y="100" width="25.6881%" height="15" fill="rgb(216,99,12)"/><text x="7.1307%" y="110.50">profile (bench_SVC_rbf_m_cl_probabilityTr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (54 samples, 24.77%)</title><rect x="7.7982%" y="116" width="24.7706%" height="15" fill="rgb(226,22,26)"/><text x="8.0482%" y="126.50">time_predict (mlprodict/asv_benchmark/c..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (52 samples, 23.85%)</title><rect x="8.7156%" y="132" width="23.8532%" height="15" fill="rgb(217,163,10)"/><text x="8.9656%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/comm..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (49 samples, 22.48%)</title><rect x="10.0917%" y="148" width="22.4771%" height="15" fill="rgb(213,25,53)"/><text x="10.3417%" y="158.50">run (mlprodict/onnxrt/onnx_inference..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (48 samples, 22.02%)</title><rect x="10.5505%" y="164" width="22.0183%" height="15" fill="rgb(252,105,26)"/><text x="10.8005%" y="174.50">_run_whole_runtime (mlprodict/onnxr..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (47 samples, 21.56%)</title><rect x="11.0092%" y="180" width="21.5596%" height="15" fill="rgb(220,39,43)"/><text x="11.2592%" y="190.50">run (mlprodict/onnxrt/ops_whole/se..</text></g><g><title>run (onnxruntime/capi/session.py) (46 samples, 21.10%)</title><rect x="11.4679%" y="196" width="21.1009%" height="15" fill="rgb(229,68,48)"/><text x="11.7179%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 17.43%)</title><rect x="15.1376%" y="212" width="17.4312%" height="15" fill="rgb(252,8,32)"/><text x="15.3876%" y="222.50">pybind11::cpp_function::dis..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (37 samples, 16.97%)</title><rect x="15.5963%" y="228" width="16.9725%" height="15" fill="rgb(223,20,43)"/><text x="15.8463%" y="238.50">void pybind11::cpp_functio..</text></g><g><title>profile_ort (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (59 samples, 27.06%)</title><rect x="6.8807%" y="68" width="27.0642%" height="15" fill="rgb(229,81,49)"/><text x="7.1307%" y="78.50">profile_ort (bench_SVC_rbf_m_cl_probability..</text></g><g><title>setup_profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (59 samples, 27.06%)</title><rect x="6.8807%" y="84" width="27.0642%" height="15" fill="rgb(236,28,36)"/><text x="7.1307%" y="94.50">setup_profile (bench_SVC_rbf_m_cl_probabili..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 1.38%)</title><rect x="32.5688%" y="100" width="1.3761%" height="15" fill="rgb(249,185,26)"/><text x="32.8188%" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 1.38%)</title><rect x="32.5688%" y="116" width="1.3761%" height="15" fill="rgb(249,174,33)"/><text x="32.8188%" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 1.38%)</title><rect x="32.5688%" y="132" width="1.3761%" height="15" fill="rgb(233,201,37)"/><text x="32.8188%" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (3 samples, 1.38%)</title><rect x="32.5688%" y="148" width="1.3761%" height="15" fill="rgb(221,78,26)"/><text x="32.8188%" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (3 samples, 1.38%)</title><rect x="32.5688%" y="164" width="1.3761%" height="15" fill="rgb(250,127,30)"/><text x="32.8188%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="180" width="1.3761%" height="15" fill="rgb(230,49,44)"/><text x="32.8188%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="196" width="1.3761%" height="15" fill="rgb(229,67,23)"/><text x="32.8188%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="212" width="1.3761%" height="15" fill="rgb(249,83,47)"/><text x="32.8188%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="228" width="1.3761%" height="15" fill="rgb(215,43,3)"/><text x="32.8188%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="244" width="1.3761%" height="15" fill="rgb(238,154,13)"/><text x="32.8188%" y="254.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_whole/session.py) (3 samples, 1.38%)</title><rect x="32.5688%" y="260" width="1.3761%" height="15" fill="rgb(219,56,2)"/><text x="32.8188%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="276" width="1.3761%" height="15" fill="rgb(233,0,4)"/><text x="32.8188%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="292" width="1.3761%" height="15" fill="rgb(235,30,7)"/><text x="32.8188%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="308" width="1.3761%" height="15" fill="rgb(250,79,13)"/><text x="32.8188%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="324" width="1.3761%" height="15" fill="rgb(211,146,34)"/><text x="32.8188%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="340" width="1.3761%" height="15" fill="rgb(228,22,38)"/><text x="32.8188%" y="350.50"></text></g><g><title>&lt;module&gt; (onnxruntime/__init__.py) (3 samples, 1.38%)</title><rect x="32.5688%" y="356" width="1.3761%" height="15" fill="rgb(235,168,5)"/><text x="32.8188%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="372" width="1.3761%" height="15" fill="rgb(221,155,16)"/><text x="32.8188%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="388" width="1.3761%" height="15" fill="rgb(215,215,53)"/><text x="32.8188%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="404" width="1.3761%" height="15" fill="rgb(223,4,10)"/><text x="32.8188%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="420" width="1.3761%" height="15" fill="rgb(234,103,6)"/><text x="32.8188%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="436" width="1.3761%" height="15" fill="rgb(227,97,0)"/><text x="32.8188%" y="446.50"></text></g><g><title>&lt;module&gt; (onnxruntime/capi/_pybind_state.py) (3 samples, 1.38%)</title><rect x="32.5688%" y="452" width="1.3761%" height="15" fill="rgb(234,150,53)"/><text x="32.8188%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="468" width="1.3761%" height="15" fill="rgb(228,201,54)"/><text x="32.8188%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="484" width="1.3761%" height="15" fill="rgb(222,22,37)"/><text x="32.8188%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="500" width="1.3761%" height="15" fill="rgb(237,53,32)"/><text x="32.8188%" y="510.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="516" width="1.3761%" height="15" fill="rgb(233,25,53)"/><text x="32.8188%" y="526.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="532" width="1.3761%" height="15" fill="rgb(210,40,34)"/><text x="32.8188%" y="542.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="32.5688%" y="548" width="1.3761%" height="15" fill="rgb(241,220,44)"/><text x="32.8188%" y="558.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp) (9 samples, 4.13%)</title><rect x="40.8257%" y="436" width="4.1284%" height="15" fill="rgb(235,28,35)"/><text x="41.0757%" y="446.50">Runt..</text></g><g><title>expf32x (libm-2.29.so) (4 samples, 1.83%)</title><rect x="43.1193%" y="452" width="1.8349%" height="15" fill="rgb(210,56,17)"/><text x="43.3693%" y="462.50">e..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp) (12 samples, 5.50%)</title><rect x="40.8257%" y="420" width="5.5046%" height="15" fill="rgb(224,130,29)"/><text x="41.0757%" y="430.50">Runtime..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (13 samples, 5.96%)</title><rect x="40.8257%" y="404" width="5.9633%" height="15" fill="rgb(235,212,8)"/><text x="41.0757%" y="414.50">pybind11..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_svm_classifier.py) (20 samples, 9.17%)</title><rect x="38.0734%" y="196" width="9.1743%" height="15" fill="rgb(223,33,50)"/><text x="38.3234%" y="206.50">_run (mlprodi..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="212" width="6.8807%" height="15" fill="rgb(219,149,13)"/><text x="40.6170%" y="222.50">pybind11:..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="228" width="6.8807%" height="15" fill="rgb(250,156,29)"/><text x="40.6170%" y="238.50">void pybi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="244" width="6.8807%" height="15" fill="rgb(216,193,19)"/><text x="40.6170%" y="254.50">void pybi..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="260" width="6.8807%" height="15" fill="rgb(216,135,14)"/><text x="40.6170%" y="270.50">pybind11:..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="276" width="6.8807%" height="15" fill="rgb(241,47,5)"/><text x="40.6170%" y="286.50">pybind11:..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="292" width="6.8807%" height="15" fill="rgb(233,42,35)"/><text x="40.6170%" y="302.50">pybind11:..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="308" width="6.8807%" height="15" fill="rgb(231,13,6)"/><text x="40.6170%" y="318.50">pybind11:..</text></g><g><title>pybind11::array::~array (numpy.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="324" width="6.8807%" height="15" fill="rgb(207,181,40)"/><text x="40.6170%" y="334.50">pybind11:..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="340" width="6.8807%" height="15" fill="rgb(254,173,49)"/><text x="40.6170%" y="350.50">pybind11:..</text></g><g><title>pybind11::object::~object (pytypes.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="356" width="6.8807%" height="15" fill="rgb(221,1,38)"/><text x="40.6170%" y="366.50">pybind11:..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (15 samples, 6.88%)</title><rect x="40.3670%" y="372" width="6.8807%" height="15" fill="rgb(206,124,46)"/><text x="40.6170%" y="382.50">pybind11:..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp) (15 samples, 6.88%)</title><rect x="40.3670%" y="388" width="6.8807%" height="15" fill="rgb(249,21,11)"/><text x="40.6170%" y="398.50">RuntimeSV..</text></g><g><title>compiled_run (&lt;string&gt;) (25 samples, 11.47%)</title><rect x="36.6972%" y="180" width="11.4679%" height="15" fill="rgb(222,201,40)"/><text x="36.9472%" y="190.50">compiled_run (&lt;st..</text></g><g><title>profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (32 samples, 14.68%)</title><rect x="33.9450%" y="100" width="14.6789%" height="15" fill="rgb(235,61,29)"/><text x="34.1950%" y="110.50">profile (bench_SVC_rbf..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (31 samples, 14.22%)</title><rect x="34.4037%" y="116" width="14.2202%" height="15" fill="rgb(219,207,3)"/><text x="34.6537%" y="126.50">time_predict (mlprodic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (29 samples, 13.30%)</title><rect x="35.3211%" y="132" width="13.3028%" height="15" fill="rgb(222,56,46)"/><text x="35.5711%" y="142.50">&lt;lambda&gt; (mlprodict/..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (28 samples, 12.84%)</title><rect x="35.7798%" y="148" width="12.8440%" height="15" fill="rgb(239,76,54)"/><text x="36.0298%" y="158.50">run (mlprodict/onnx..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (27 samples, 12.39%)</title><rect x="36.2385%" y="164" width="12.3853%" height="15" fill="rgb(231,124,27)"/><text x="36.4885%" y="174.50">_run_sequence_runt..</text></g><g><title>profile_pyrtc (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (33 samples, 15.14%)</title><rect x="33.9450%" y="68" width="15.1376%" height="15" fill="rgb(249,195,6)"/><text x="34.1950%" y="78.50">profile_pyrtc (bench_SV..</text></g><g><title>setup_profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (33 samples, 15.14%)</title><rect x="33.9450%" y="84" width="15.1376%" height="15" fill="rgb(237,174,47)"/><text x="34.1950%" y="94.50">setup_profile (bench_SV..</text></g><g><title>0x7fe7ede5946c (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (5 samples, 2.29%)</title><rect x="57.3394%" y="196" width="2.2936%" height="15" fill="rgb(206,201,31)"/><text x="57.5894%" y="206.50">0..</text></g><g><title>array_empty (multiarraymodule.c) (5 samples, 2.29%)</title><rect x="57.3394%" y="212" width="2.2936%" height="15" fill="rgb(231,57,52)"/><text x="57.5894%" y="222.50">a..</text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (3 samples, 1.38%)</title><rect x="58.2569%" y="228" width="1.3761%" height="15" fill="rgb(248,177,22)"/><text x="58.5069%" y="238.50"></text></g><g><title>exp (libm-2.29.so) (3 samples, 1.38%)</title><rect x="60.5505%" y="260" width="1.3761%" height="15" fill="rgb(215,211,37)"/><text x="60.8005%" y="270.50"></text></g><g><title>0x7fe7ede59553 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (16 samples, 7.34%)</title><rect x="59.6330%" y="196" width="7.3394%" height="15" fill="rgb(241,128,51)"/><text x="59.8830%" y="206.50">0x7fe7ede5..</text></g><g><title>copy_predict_proba (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (16 samples, 7.34%)</title><rect x="59.6330%" y="212" width="7.3394%" height="15" fill="rgb(227,165,31)"/><text x="59.8830%" y="222.50">copy_predi..</text></g><g><title>svm_predict_probability (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (16 samples, 7.34%)</title><rect x="59.6330%" y="228" width="7.3394%" height="15" fill="rgb(228,167,24)"/><text x="59.8830%" y="238.50">svm_predic..</text></g><g><title>svm_predict_values (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (15 samples, 6.88%)</title><rect x="60.0917%" y="244" width="6.8807%" height="15" fill="rgb(228,143,12)"/><text x="60.3417%" y="254.50">svm_predi..</text></g><g><title>svm::Kernel::k_function (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (11 samples, 5.05%)</title><rect x="61.9266%" y="260" width="5.0459%" height="15" fill="rgb(249,149,8)"/><text x="62.1766%" y="270.50">svm::K..</text></g><g><title>0x7fe7ede5b3fd (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (36 samples, 16.51%)</title><rect x="53.2110%" y="180" width="16.5138%" height="15" fill="rgb(243,35,44)"/><text x="53.4610%" y="190.50">0x7fe7ede5b3fd (sklearn/s..</text></g><g><title>_dense_predict_proba (sklearn/svm/_base.py) (41 samples, 18.81%)</title><rect x="51.3761%" y="164" width="18.8073%" height="15" fill="rgb(246,89,9)"/><text x="51.6261%" y="174.50">_dense_predict_proba (sklearn..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.38%)</title><rect x="80.2752%" y="212" width="1.3761%" height="15" fill="rgb(233,213,13)"/><text x="80.5252%" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (8 samples, 3.67%)</title><rect x="78.8991%" y="196" width="3.6697%" height="15" fill="rgb(233,141,41)"/><text x="79.1491%" y="206.50">_ass..</text></g><g><title>_num_samples (sklearn/utils/validation.py) (3 samples, 1.38%)</title><rect x="83.0275%" y="196" width="1.3761%" height="15" fill="rgb(239,167,4)"/><text x="83.2775%" y="206.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (6 samples, 2.75%)</title><rect x="85.3211%" y="276" width="2.7523%" height="15" fill="rgb(209,217,16)"/><text x="85.5711%" y="286.50">Py..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (4 samples, 1.83%)</title><rect x="86.2385%" y="292" width="1.8349%" height="15" fill="rgb(219,88,35)"/><text x="86.4885%" y="302.50">r..</text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (3 samples, 1.38%)</title><rect x="86.6972%" y="308" width="1.3761%" height="15" fill="rgb(220,193,23)"/><text x="86.9472%" y="318.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (8 samples, 3.67%)</title><rect x="84.8624%" y="196" width="3.6697%" height="15" fill="rgb(230,90,52)"/><text x="85.1124%" y="206.50">asar..</text></g><g><title>_array_fromobject (multiarraymodule.c) (8 samples, 3.67%)</title><rect x="84.8624%" y="212" width="3.6697%" height="15" fill="rgb(252,106,19)"/><text x="85.1124%" y="222.50">_arr..</text></g><g><title>PyArray_CheckFromAny (ctors.c) (7 samples, 3.21%)</title><rect x="85.3211%" y="228" width="3.2110%" height="15" fill="rgb(206,74,20)"/><text x="85.5711%" y="238.50">PyA..</text></g><g><title>PyArray_FromAny (ctors.c) (7 samples, 3.21%)</title><rect x="85.3211%" y="244" width="3.2110%" height="15" fill="rgb(230,138,44)"/><text x="85.5711%" y="254.50">PyA..</text></g><g><title>PyArray_FromArray (ctors.c) (7 samples, 3.21%)</title><rect x="85.3211%" y="260" width="3.2110%" height="15" fill="rgb(235,182,43)"/><text x="85.5711%" y="270.50">PyA..</text></g><g><title>check_array (sklearn/utils/validation.py) (40 samples, 18.35%)</title><rect x="72.0183%" y="180" width="18.3486%" height="15" fill="rgb(242,16,51)"/><text x="72.2683%" y="190.50">check_array (sklearn/utils/va..</text></g><g><title>simplefilter (warnings.py) (4 samples, 1.83%)</title><rect x="88.5321%" y="196" width="1.8349%" height="15" fill="rgb(248,9,4)"/><text x="88.7821%" y="206.50">s..</text></g><g><title>_add_filter (warnings.py) (4 samples, 1.83%)</title><rect x="88.5321%" y="212" width="1.8349%" height="15" fill="rgb(210,31,22)"/><text x="88.7821%" y="222.50">_..</text></g><g><title>unicode_endswith (python3.7) (3 samples, 1.38%)</title><rect x="95.4128%" y="212" width="1.3761%" height="15" fill="rgb(239,54,39)"/><text x="95.6628%" y="222.50"></text></g><g><title>_predict_proba (sklearn/svm/_base.py) (102 samples, 46.79%)</title><rect x="50.9174%" y="148" width="46.7890%" height="15" fill="rgb(230,99,41)"/><text x="51.1674%" y="158.50">_predict_proba (sklearn/svm/_base.py)</text></g><g><title>_validate_for_predict (sklearn/svm/_base.py) (60 samples, 27.52%)</title><rect x="70.1835%" y="164" width="27.5229%" height="15" fill="rgb(253,106,12)"/><text x="70.4335%" y="174.50">_validate_for_predict (sklearn/svm/_base.py)</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (16 samples, 7.34%)</title><rect x="90.3670%" y="180" width="7.3394%" height="15" fill="rgb(213,46,41)"/><text x="90.6170%" y="190.50">check_is_f..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (10 samples, 4.59%)</title><rect x="93.1193%" y="196" width="4.5872%" height="15" fill="rgb(215,133,35)"/><text x="93.3693%" y="206.50">&lt;list..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (106 samples, 48.62%)</title><rect x="50.9174%" y="132" width="48.6239%" height="15" fill="rgb(213,28,5)"/><text x="51.1674%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>all (218 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(215,77,49)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (218 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(248,100,22)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py)</text></g><g><title>profile_skl (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (111 samples, 50.92%)</title><rect x="49.0826%" y="68" width="50.9174%" height="15" fill="rgb(208,67,9)"/><text x="49.3326%" y="78.50">profile_skl (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (111 samples, 50.92%)</title><rect x="49.0826%" y="84" width="50.9174%" height="15" fill="rgb(219,133,21)"/><text x="49.3326%" y="94.50">setup_profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py)</text></g><g><title>profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py) (111 samples, 50.92%)</title><rect x="49.0826%" y="100" width="50.9174%" height="15" fill="rgb(246,46,29)"/><text x="49.3326%" y="110.50">profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (109 samples, 50.00%)</title><rect x="50.0000%" y="116" width="50.0000%" height="15" fill="rgb(246,185,52)"/><text x="50.2500%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g></svg></svg>