<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:4) (21 samples, 2.08%)</title><rect x="0.0000%" y="52" width="2.0772%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (21 samples, 2.08%)</title><rect x="0.0000%" y="68" width="2.0772%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (21 samples, 2.08%)</title><rect x="0.0000%" y="84" width="2.0772%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (21 samples, 2.08%)</title><rect x="0.0000%" y="100" width="2.0772%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (21 samples, 2.08%)</title><rect x="0.0000%" y="116" width="2.0772%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (21 samples, 2.08%)</title><rect x="0.0000%" y="132" width="2.0772%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50">_..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:268) (30 samples, 2.97%)</title><rect x="4.3521%" y="180" width="2.9674%" height="15" fill="rgb(207,160,47)"/><text x="4.6021%" y="190.50">dec..</text></g><g><title>check_array (sklearn/utils/validation.py:565) (12 samples, 1.19%)</title><rect x="6.1325%" y="196" width="1.1869%" height="15" fill="rgb(228,23,34)"/><text x="6.3825%" y="206.50"></text></g><g><title>array_add (number.c:330) (13 samples, 1.29%)</title><rect x="7.8140%" y="196" width="1.2859%" height="15" fill="rgb(218,30,26)"/><text x="8.0640%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 1.19%)</title><rect x="7.9130%" y="212" width="1.1869%" height="15" fill="rgb(220,122,19)"/><text x="8.1630%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 1.19%)</title><rect x="7.9130%" y="228" width="1.1869%" height="15" fill="rgb(250,228,42)"/><text x="8.1630%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (12 samples, 1.19%)</title><rect x="7.9130%" y="244" width="1.1869%" height="15" fill="rgb(240,193,28)"/><text x="8.1630%" y="254.50"></text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:307) (85 samples, 8.41%)</title><rect x="3.5608%" y="164" width="8.4075%" height="15" fill="rgb(216,20,37)"/><text x="3.8108%" y="174.50">_predict_pro..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:276) (45 samples, 4.45%)</title><rect x="7.5173%" y="180" width="4.4510%" height="15" fill="rgb(206,188,39)"/><text x="7.7673%" y="190.50">decis..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (28 samples, 2.77%)</title><rect x="9.1988%" y="196" width="2.7695%" height="15" fill="rgb(217,207,13)"/><text x="9.4488%" y="206.50">sa..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (21 samples, 2.08%)</title><rect x="9.8912%" y="212" width="2.0772%" height="15" fill="rgb(231,73,38)"/><text x="10.1412%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (21 samples, 2.08%)</title><rect x="9.8912%" y="228" width="2.0772%" height="15" fill="rgb(225,20,46)"/><text x="10.1412%" y="238.50">P..</text></g><g><title>0x7f46ab554265 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (25 samples, 2.47%)</title><rect x="12.5618%" y="260" width="2.4728%" height="15" fill="rgb(210,31,41)"/><text x="12.8118%" y="270.50">0x..</text></g><g><title>exp (libm-2.29.so) (22 samples, 2.18%)</title><rect x="12.8586%" y="276" width="2.1761%" height="15" fill="rgb(221,200,47)"/><text x="13.1086%" y="286.50">e..</text></g><g><title>0x7f46ab5339dd (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (43 samples, 4.25%)</title><rect x="12.5618%" y="244" width="4.2532%" height="15" fill="rgb(226,26,5)"/><text x="12.8118%" y="254.50">0x7f4..</text></g><g><title>0x7f46ab554279 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (17 samples, 1.68%)</title><rect x="15.1335%" y="260" width="1.6815%" height="15" fill="rgb(249,33,26)"/><text x="15.3835%" y="270.50"></text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:308) (52 samples, 5.14%)</title><rect x="11.9683%" y="164" width="5.1434%" height="15" fill="rgb(235,183,28)"/><text x="12.2183%" y="174.50">_predi..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (49 samples, 4.85%)</title><rect x="12.2651%" y="180" width="4.8467%" height="15" fill="rgb(221,5,38)"/><text x="12.5151%" y="190.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (49 samples, 4.85%)</title><rect x="12.2651%" y="196" width="4.8467%" height="15" fill="rgb(247,18,42)"/><text x="12.5151%" y="206.50">PyUFun..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (49 samples, 4.85%)</title><rect x="12.2651%" y="212" width="4.8467%" height="15" fill="rgb(241,131,45)"/><text x="12.5151%" y="222.50">execut..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (48 samples, 4.75%)</title><rect x="12.3640%" y="228" width="4.7478%" height="15" fill="rgb(249,31,29)"/><text x="12.6140%" y="238.50">trivia..</text></g><g><title>array_sum (methods.c:2215) (37 samples, 3.66%)</title><rect x="17.9031%" y="180" width="3.6597%" height="15" fill="rgb(225,111,53)"/><text x="18.1531%" y="190.50">arra..</text></g><g><title>forward_ndarray_method (methods.c:108) (37 samples, 3.66%)</title><rect x="17.9031%" y="196" width="3.6597%" height="15" fill="rgb(238,160,17)"/><text x="18.1531%" y="206.50">forw..</text></g><g><title>_sum (numpy/core/_methods.py:38) (37 samples, 3.66%)</title><rect x="17.9031%" y="212" width="3.6597%" height="15" fill="rgb(214,148,48)"/><text x="18.1531%" y="222.50">_sum..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (34 samples, 3.36%)</title><rect x="18.1998%" y="228" width="3.3630%" height="15" fill="rgb(232,36,49)"/><text x="18.4498%" y="238.50">ufu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (34 samples, 3.36%)</title><rect x="18.1998%" y="244" width="3.3630%" height="15" fill="rgb(209,103,24)"/><text x="18.4498%" y="254.50">PyU..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (34 samples, 3.36%)</title><rect x="18.1998%" y="260" width="3.3630%" height="15" fill="rgb(229,88,8)"/><text x="18.4498%" y="270.50">PyU..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (26 samples, 2.57%)</title><rect x="18.9911%" y="276" width="2.5717%" height="15" fill="rgb(213,181,19)"/><text x="19.2411%" y="286.50">Py..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (21 samples, 2.08%)</title><rect x="19.4857%" y="292" width="2.0772%" height="15" fill="rgb(254,191,54)"/><text x="19.7357%" y="302.50">r..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (14 samples, 1.38%)</title><rect x="21.5628%" y="180" width="1.3848%" height="15" fill="rgb(241,83,37)"/><text x="21.8128%" y="190.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 1.29%)</title><rect x="21.6617%" y="196" width="1.2859%" height="15" fill="rgb(233,36,39)"/><text x="21.9117%" y="206.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (13 samples, 1.29%)</title><rect x="21.6617%" y="212" width="1.2859%" height="15" fill="rgb(226,3,54)"/><text x="21.9117%" y="222.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:54) (212 samples, 20.97%)</title><rect x="2.0772%" y="52" width="20.9693%" height="15" fill="rgb(245,192,40)"/><text x="2.3272%" y="62.50">&lt;module&gt; (bench_LogisticRegressio..</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:53) (212 samples, 20.97%)</title><rect x="2.0772%" y="68" width="20.9693%" height="15" fill="rgb(238,167,29)"/><text x="2.3272%" y="78.50">profile_skl (bench_LogisticRegres..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (211 samples, 20.87%)</title><rect x="2.1761%" y="84" width="20.8704%" height="15" fill="rgb(232,182,51)"/><text x="2.4261%" y="94.50">setup_profile (bench_LogisticRegr..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (211 samples, 20.87%)</title><rect x="2.1761%" y="100" width="20.8704%" height="15" fill="rgb(231,60,39)"/><text x="2.4261%" y="110.50">profile (bench_LogisticRegression..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (209 samples, 20.67%)</title><rect x="2.3739%" y="116" width="20.6726%" height="15" fill="rgb(208,69,12)"/><text x="2.6239%" y="126.50">time_predict (mlprodict/asv_bench..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (208 samples, 20.57%)</title><rect x="2.4728%" y="132" width="20.5737%" height="15" fill="rgb(235,93,37)"/><text x="2.7228%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmar..</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1649) (198 samples, 19.58%)</title><rect x="3.4619%" y="148" width="19.5846%" height="15" fill="rgb(213,116,39)"/><text x="3.7119%" y="158.50">predict_proba (sklearn/linear_m..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:313) (59 samples, 5.84%)</title><rect x="17.2107%" y="164" width="5.8358%" height="15" fill="rgb(222,207,29)"/><text x="17.4607%" y="174.50">_predic..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:39) (19 samples, 1.88%)</title><rect x="23.7389%" y="196" width="1.8793%" height="15" fill="rgb(206,96,30)"/><text x="23.9889%" y="206.50">_..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (18 samples, 1.78%)</title><rect x="23.8378%" y="212" width="1.7804%" height="15" fill="rgb(218,138,4)"/><text x="24.0878%" y="222.50">n..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (17 samples, 1.68%)</title><rect x="23.9367%" y="228" width="1.6815%" height="15" fill="rgb(250,191,14)"/><text x="24.1867%" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:41) (12 samples, 1.19%)</title><rect x="25.7171%" y="196" width="1.1869%" height="15" fill="rgb(239,60,40)"/><text x="25.9671%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 1.19%)</title><rect x="25.7171%" y="212" width="1.1869%" height="15" fill="rgb(206,27,48)"/><text x="25.9671%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (11 samples, 1.09%)</title><rect x="25.8160%" y="228" width="1.0880%" height="15" fill="rgb(225,35,8)"/><text x="26.0660%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (11 samples, 1.09%)</title><rect x="25.8160%" y="244" width="1.0880%" height="15" fill="rgb(250,213,24)"/><text x="26.0660%" y="254.50"></text></g><g><title>0x7f46ab554214 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (24 samples, 2.37%)</title><rect x="27.4975%" y="292" width="2.3739%" height="15" fill="rgb(247,123,22)"/><text x="27.7475%" y="302.50">0x..</text></g><g><title>expf (libm-2.29.so) (23 samples, 2.27%)</title><rect x="27.5964%" y="308" width="2.2750%" height="15" fill="rgb(231,138,38)"/><text x="27.8464%" y="318.50">e..</text></g><g><title>0x7f46ab53233d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (32 samples, 3.17%)</title><rect x="27.3986%" y="276" width="3.1652%" height="15" fill="rgb(231,145,46)"/><text x="27.6486%" y="286.50">0x7..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (36 samples, 3.56%)</title><rect x="27.1019%" y="228" width="3.5608%" height="15" fill="rgb(251,118,11)"/><text x="27.3519%" y="238.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (34 samples, 3.36%)</title><rect x="27.2997%" y="244" width="3.3630%" height="15" fill="rgb(217,147,25)"/><text x="27.5497%" y="254.50">exe..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (34 samples, 3.36%)</title><rect x="27.2997%" y="260" width="3.3630%" height="15" fill="rgb(247,81,37)"/><text x="27.5497%" y="270.50">tri..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:46) (39 samples, 3.86%)</title><rect x="26.9041%" y="196" width="3.8576%" height="15" fill="rgb(209,12,38)"/><text x="27.1541%" y="206.50">_run..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (38 samples, 3.76%)</title><rect x="27.0030%" y="212" width="3.7587%" height="15" fill="rgb(227,1,9)"/><text x="27.2530%" y="222.50">ufun..</text></g><g><title>compiled_run (&lt;string&gt;:4) (83 samples, 8.21%)</title><rect x="23.6400%" y="180" width="8.2097%" height="15" fill="rgb(248,47,43)"/><text x="23.8900%" y="190.50">compiled_ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:60) (11 samples, 1.09%)</title><rect x="30.7616%" y="196" width="1.0880%" height="15" fill="rgb(221,10,30)"/><text x="31.0116%" y="206.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (19 samples, 1.88%)</title><rect x="33.9268%" y="324" width="1.8793%" height="15" fill="rgb(210,229,1)"/><text x="34.1768%" y="334.50">P..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (19 samples, 1.88%)</title><rect x="33.9268%" y="340" width="1.8793%" height="15" fill="rgb(222,148,37)"/><text x="34.1768%" y="350.50">r..</text></g><g><title>array_sum (methods.c:2215) (32 samples, 3.17%)</title><rect x="32.7399%" y="228" width="3.1652%" height="15" fill="rgb(234,67,33)"/><text x="32.9899%" y="238.50">arr..</text></g><g><title>forward_ndarray_method (methods.c:108) (32 samples, 3.17%)</title><rect x="32.7399%" y="244" width="3.1652%" height="15" fill="rgb(247,98,35)"/><text x="32.9899%" y="254.50">for..</text></g><g><title>_sum (numpy/core/_methods.py:38) (32 samples, 3.17%)</title><rect x="32.7399%" y="260" width="3.1652%" height="15" fill="rgb(247,138,52)"/><text x="32.9899%" y="270.50">_su..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (30 samples, 2.97%)</title><rect x="32.9377%" y="276" width="2.9674%" height="15" fill="rgb(213,79,30)"/><text x="33.1877%" y="286.50">ufu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (28 samples, 2.77%)</title><rect x="33.1355%" y="292" width="2.7695%" height="15" fill="rgb(246,177,23)"/><text x="33.3855%" y="302.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (26 samples, 2.57%)</title><rect x="33.3333%" y="308" width="2.5717%" height="15" fill="rgb(230,62,27)"/><text x="33.5833%" y="318.50">Py..</text></g><g><title>compiled_run (&lt;string&gt;:5) (62 samples, 6.13%)</title><rect x="31.8497%" y="180" width="6.1325%" height="15" fill="rgb(216,154,8)"/><text x="32.0997%" y="190.50">compiled..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py:67) (61 samples, 6.03%)</title><rect x="31.9486%" y="196" width="6.0336%" height="15" fill="rgb(244,35,45)"/><text x="32.1986%" y="206.50">_run (ml..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py:47) (60 samples, 5.93%)</title><rect x="32.0475%" y="212" width="5.9347%" height="15" fill="rgb(251,115,12)"/><text x="32.2975%" y="222.50">norm_l1 ..</text></g><g><title>array_true_divide (number.c:826) (21 samples, 2.08%)</title><rect x="35.9050%" y="228" width="2.0772%" height="15" fill="rgb(240,54,50)"/><text x="36.1550%" y="238.50">a..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (21 samples, 2.08%)</title><rect x="35.9050%" y="244" width="2.0772%" height="15" fill="rgb(233,84,52)"/><text x="36.1550%" y="254.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (21 samples, 2.08%)</title><rect x="35.9050%" y="260" width="2.0772%" height="15" fill="rgb(207,117,47)"/><text x="36.1550%" y="270.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (21 samples, 2.08%)</title><rect x="35.9050%" y="276" width="2.0772%" height="15" fill="rgb(249,43,39)"/><text x="36.1550%" y="286.50">e..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:61) (159 samples, 15.73%)</title><rect x="23.0465%" y="52" width="15.7270%" height="15" fill="rgb(209,38,44)"/><text x="23.2965%" y="62.50">&lt;module&gt; (bench_Logistic..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:60) (159 samples, 15.73%)</title><rect x="23.0465%" y="68" width="15.7270%" height="15" fill="rgb(236,212,23)"/><text x="23.2965%" y="78.50">profile_pyrtc (bench_Log..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (158 samples, 15.63%)</title><rect x="23.1454%" y="84" width="15.6281%" height="15" fill="rgb(242,79,21)"/><text x="23.3954%" y="94.50">setup_profile (bench_Log..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (158 samples, 15.63%)</title><rect x="23.1454%" y="100" width="15.6281%" height="15" fill="rgb(211,96,35)"/><text x="23.3954%" y="110.50">profile (bench_LogisticR..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (157 samples, 15.53%)</title><rect x="23.2443%" y="116" width="15.5292%" height="15" fill="rgb(253,215,40)"/><text x="23.4943%" y="126.50">time_predict (mlprodict/..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (157 samples, 15.53%)</title><rect x="23.2443%" y="132" width="15.5292%" height="15" fill="rgb(211,81,21)"/><text x="23.4943%" y="142.50">&lt;lambda&gt; (mlprodict/asv_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (154 samples, 15.23%)</title><rect x="23.5410%" y="148" width="15.2324%" height="15" fill="rgb(208,190,38)"/><text x="23.7910%" y="158.50">run (mlprodict/onnxrt/o..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (153 samples, 15.13%)</title><rect x="23.6400%" y="164" width="15.1335%" height="15" fill="rgb(235,213,38)"/><text x="23.8900%" y="174.50">_run_sequence_runtime_c..</text></g><g><title>0x7f46c912deb0 (libc-2.29.so) (25 samples, 2.47%)</title><rect x="43.7191%" y="116" width="2.4728%" height="15" fill="rgb(237,122,38)"/><text x="43.9691%" y="126.50">0x..</text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (82 samples, 8.11%)</title><rect x="48.6647%" y="324" width="8.1108%" height="15" fill="rgb(244,218,35)"/><text x="48.9147%" y="334.50">onnxruntime..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (50 samples, 4.95%)</title><rect x="51.8299%" y="340" width="4.9456%" height="15" fill="rgb(240,68,47)"/><text x="52.0799%" y="350.50">onnxru..</text></g><g><title>onnxruntime::ml::Normalizer::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 2.67%)</title><rect x="56.7755%" y="324" width="2.6706%" height="15" fill="rgb(210,16,53)"/><text x="57.0255%" y="334.50">on..</text></g><g><title>onnxruntime::ml::Normalizer::Normalize&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 2.67%)</title><rect x="56.7755%" y="340" width="2.6706%" height="15" fill="rgb(235,124,12)"/><text x="57.0255%" y="350.50">on..</text></g><g><title>operator new (libstdc++.so.6.0.28) (110 samples, 10.88%)</title><rect x="62.2156%" y="340" width="10.8803%" height="15" fill="rgb(224,169,11)"/><text x="62.4656%" y="350.50">operator new (li..</text></g><g><title>malloc (libc-2.29.so) (107 samples, 10.58%)</title><rect x="62.5124%" y="356" width="10.5836%" height="15" fill="rgb(250,166,2)"/><text x="62.7624%" y="366.50">malloc (libc-2...</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (278 samples, 27.50%)</title><rect x="47.6756%" y="244" width="27.4975%" height="15" fill="rgb(242,216,29)"/><text x="47.9256%" y="254.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (278 samples, 27.50%)</title><rect x="47.6756%" y="260" width="27.4975%" height="15" fill="rgb(230,116,27)"/><text x="47.9256%" y="270.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (277 samples, 27.40%)</title><rect x="47.7745%" y="276" width="27.3986%" height="15" fill="rgb(228,99,48)"/><text x="48.0245%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (277 samples, 27.40%)</title><rect x="47.7745%" y="292" width="27.3986%" height="15" fill="rgb(253,11,6)"/><text x="48.0245%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (277 samples, 27.40%)</title><rect x="47.7745%" y="308" width="27.3986%" height="15" fill="rgb(247,143,39)"/><text x="48.0245%" y="318.50">onnxruntime::SequentialExecutor::Execute (on..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (159 samples, 15.73%)</title><rect x="59.4461%" y="324" width="15.7270%" height="15" fill="rgb(236,97,10)"/><text x="59.6961%" y="334.50">onnxruntime::ml::ZipMapO..</text></g><g><title>0x7f46c912dd07 (libc-2.29.so) (11 samples, 1.09%)</title><rect x="77.3492%" y="260" width="1.0880%" height="15" fill="rgb(233,208,19)"/><text x="77.5992%" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 6.03%)</title><rect x="75.1731%" y="244" width="6.0336%" height="15" fill="rgb(216,164,2)"/><text x="75.4231%" y="254.50">onnxrunt..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 2.37%)</title><rect x="78.8328%" y="260" width="2.3739%" height="15" fill="rgb(220,129,5)"/><text x="79.0828%" y="270.50">st..</text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (40 samples, 3.96%)</title><rect x="93.8675%" y="292" width="3.9565%" height="15" fill="rgb(242,17,10)"/><text x="94.1175%" y="302.50">pybi..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (179 samples, 17.71%)</title><rect x="81.2067%" y="260" width="17.7052%" height="15" fill="rgb(242,107,0)"/><text x="81.4567%" y="270.50">onnxruntime::python::AddNonT..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (176 samples, 17.41%)</title><rect x="81.5035%" y="276" width="17.4085%" height="15" fill="rgb(251,28,31)"/><text x="81.7535%" y="286.50">pybind11::detail::map_caste..</text></g><g><title>std::_Rb_tree_increment (libstdc++.so.6.0.28) (11 samples, 1.09%)</title><rect x="97.8239%" y="292" width="1.0880%" height="15" fill="rgb(233,223,10)"/><text x="98.0739%" y="302.50"></text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 17.80%)</title><rect x="81.2067%" y="244" width="17.8042%" height="15" fill="rgb(215,21,27)"/><text x="81.4567%" y="254.50">onnxruntime::python::AddNonT..</text></g><g><title>run (onnxruntime/capi/session.py:140) (531 samples, 52.52%)</title><rect x="47.0821%" y="196" width="52.5223%" height="15" fill="rgb(232,23,21)"/><text x="47.3321%" y="206.50">run (onnxruntime/capi/session.py:140)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (530 samples, 52.42%)</title><rect x="47.1810%" y="212" width="52.4233%" height="15" fill="rgb(244,5,23)"/><text x="47.4310%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (529 samples, 52.32%)</title><rect x="47.2799%" y="228" width="52.3244%" height="15" fill="rgb(226,81,46)"/><text x="47.5299%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (539 samples, 53.31%)</title><rect x="46.3897%" y="164" width="53.3136%" height="15" fill="rgb(247,70,30)"/><text x="46.6397%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (539 samples, 53.31%)</title><rect x="46.3897%" y="180" width="53.3136%" height="15" fill="rgb(212,68,19)"/><text x="46.6397%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>all (1,011 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:68) (619 samples, 61.23%)</title><rect x="38.7735%" y="52" width="61.2265%" height="15" fill="rgb(223,113,26)"/><text x="39.0235%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:68)</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:67) (619 samples, 61.23%)</title><rect x="38.7735%" y="68" width="61.2265%" height="15" fill="rgb(206,192,2)"/><text x="39.0235%" y="78.50">profile_ort (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:67)</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (619 samples, 61.23%)</title><rect x="38.7735%" y="84" width="61.2265%" height="15" fill="rgb(241,108,4)"/><text x="39.0235%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:37)</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (619 samples, 61.23%)</title><rect x="38.7735%" y="100" width="61.2265%" height="15" fill="rgb(247,173,49)"/><text x="39.0235%" y="110.50">profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (544 samples, 53.81%)</title><rect x="46.1919%" y="116" width="53.8081%" height="15" fill="rgb(224,114,35)"/><text x="46.4419%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (544 samples, 53.81%)</title><rect x="46.1919%" y="132" width="53.8081%" height="15" fill="rgb(245,159,27)"/><text x="46.4419%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (543 samples, 53.71%)</title><rect x="46.2908%" y="148" width="53.7092%" height="15" fill="rgb(245,172,44)"/><text x="46.5408%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g></svg></svg>