<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx.py:2) (8 samples, 1.03%)</title><rect x="0.1282%" y="148" width="1.0256%" height="15" fill="rgb(227,0,7)"/><text x="0.3782%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.03%)</title><rect x="0.1282%" y="164" width="1.0256%" height="15" fill="rgb(217,0,24)"/><text x="0.3782%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 1.03%)</title><rect x="0.1282%" y="180" width="1.0256%" height="15" fill="rgb(221,193,54)"/><text x="0.3782%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.03%)</title><rect x="0.1282%" y="196" width="1.0256%" height="15" fill="rgb(248,212,6)"/><text x="0.3782%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.03%)</title><rect x="0.1282%" y="212" width="1.0256%" height="15" fill="rgb(208,68,35)"/><text x="0.3782%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.03%)</title><rect x="0.1282%" y="228" width="1.0256%" height="15" fill="rgb(232,128,0)"/><text x="0.3782%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.03%)</title><rect x="0.1282%" y="244" width="1.0256%" height="15" fill="rgb(207,160,47)"/><text x="0.3782%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.03%)</title><rect x="0.1282%" y="260" width="1.0256%" height="15" fill="rgb(228,23,34)"/><text x="0.3782%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.03%)</title><rect x="0.1282%" y="276" width="1.0256%" height="15" fill="rgb(218,30,26)"/><text x="0.3782%" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (8 samples, 1.03%)</title><rect x="0.1282%" y="292" width="1.0256%" height="15" fill="rgb(220,122,19)"/><text x="0.3782%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.03%)</title><rect x="0.1282%" y="308" width="1.0256%" height="15" fill="rgb(250,228,42)"/><text x="0.3782%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.03%)</title><rect x="0.1282%" y="324" width="1.0256%" height="15" fill="rgb(240,193,28)"/><text x="0.3782%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.03%)</title><rect x="0.1282%" y="340" width="1.0256%" height="15" fill="rgb(216,20,37)"/><text x="0.3782%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.03%)</title><rect x="0.1282%" y="356" width="1.0256%" height="15" fill="rgb(206,188,39)"/><text x="0.3782%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.03%)</title><rect x="0.1282%" y="372" width="1.0256%" height="15" fill="rgb(217,207,13)"/><text x="0.3782%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (8 samples, 1.03%)</title><rect x="0.1282%" y="388" width="1.0256%" height="15" fill="rgb(231,73,38)"/><text x="0.3782%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.03%)</title><rect x="0.1282%" y="404" width="1.0256%" height="15" fill="rgb(225,20,46)"/><text x="0.3782%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.03%)</title><rect x="0.1282%" y="420" width="1.0256%" height="15" fill="rgb(210,31,41)"/><text x="0.3782%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.03%)</title><rect x="0.1282%" y="436" width="1.0256%" height="15" fill="rgb(221,200,47)"/><text x="0.3782%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.03%)</title><rect x="0.1282%" y="452" width="1.0256%" height="15" fill="rgb(226,26,5)"/><text x="0.3782%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.03%)</title><rect x="0.1282%" y="468" width="1.0256%" height="15" fill="rgb(249,33,26)"/><text x="0.3782%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (8 samples, 1.03%)</title><rect x="0.1282%" y="484" width="1.0256%" height="15" fill="rgb(235,183,28)"/><text x="0.3782%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.03%)</title><rect x="0.1282%" y="500" width="1.0256%" height="15" fill="rgb(221,5,38)"/><text x="0.3782%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.03%)</title><rect x="0.1282%" y="516" width="1.0256%" height="15" fill="rgb(247,18,42)"/><text x="0.3782%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.03%)</title><rect x="0.1282%" y="532" width="1.0256%" height="15" fill="rgb(241,131,45)"/><text x="0.3782%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.03%)</title><rect x="0.1282%" y="548" width="1.0256%" height="15" fill="rgb(249,31,29)"/><text x="0.3782%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.03%)</title><rect x="0.1282%" y="564" width="1.0256%" height="15" fill="rgb(225,111,53)"/><text x="0.3782%" y="574.50"></text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx.py:4) (9 samples, 1.15%)</title><rect x="1.1538%" y="148" width="1.1538%" height="15" fill="rgb(238,160,17)"/><text x="1.4038%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 1.15%)</title><rect x="1.1538%" y="164" width="1.1538%" height="15" fill="rgb(214,148,48)"/><text x="1.4038%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (9 samples, 1.15%)</title><rect x="1.1538%" y="180" width="1.1538%" height="15" fill="rgb(232,36,49)"/><text x="1.4038%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 1.15%)</title><rect x="1.1538%" y="196" width="1.1538%" height="15" fill="rgb(209,103,24)"/><text x="1.4038%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 1.15%)</title><rect x="1.1538%" y="212" width="1.1538%" height="15" fill="rgb(229,88,8)"/><text x="1.4038%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 1.15%)</title><rect x="1.1538%" y="228" width="1.1538%" height="15" fill="rgb(213,181,19)"/><text x="1.4038%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 1.15%)</title><rect x="1.1538%" y="244" width="1.1538%" height="15" fill="rgb(254,191,54)"/><text x="1.4038%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 1.15%)</title><rect x="1.1538%" y="260" width="1.1538%" height="15" fill="rgb(241,83,37)"/><text x="1.4038%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 1.15%)</title><rect x="1.1538%" y="276" width="1.1538%" height="15" fill="rgb(233,36,39)"/><text x="1.4038%" y="286.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:4) (20 samples, 2.56%)</title><rect x="0.0000%" y="52" width="2.5641%" height="15" fill="rgb(226,3,54)"/><text x="0.2500%" y="62.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (20 samples, 2.56%)</title><rect x="0.0000%" y="68" width="2.5641%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (20 samples, 2.56%)</title><rect x="0.0000%" y="84" width="2.5641%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (20 samples, 2.56%)</title><rect x="0.0000%" y="100" width="2.5641%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (20 samples, 2.56%)</title><rect x="0.0000%" y="116" width="2.5641%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (20 samples, 2.56%)</title><rect x="0.0000%" y="132" width="2.5641%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="142.50">_c..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:266) (9 samples, 1.15%)</title><rect x="3.9744%" y="180" width="1.1538%" height="15" fill="rgb(235,93,37)"/><text x="4.2244%" y="190.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:268) (22 samples, 2.82%)</title><rect x="5.1282%" y="180" width="2.8205%" height="15" fill="rgb(213,116,39)"/><text x="5.3782%" y="190.50">de..</text></g><g><title>array_add (number.c:330) (13 samples, 1.67%)</title><rect x="8.2051%" y="196" width="1.6667%" height="15" fill="rgb(222,207,29)"/><text x="8.4551%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 1.54%)</title><rect x="8.3333%" y="212" width="1.5385%" height="15" fill="rgb(206,96,30)"/><text x="8.5833%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 1.54%)</title><rect x="8.3333%" y="228" width="1.5385%" height="15" fill="rgb(218,138,4)"/><text x="8.5833%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (11 samples, 1.41%)</title><rect x="8.4615%" y="244" width="1.4103%" height="15" fill="rgb(250,191,14)"/><text x="8.7115%" y="254.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (8 samples, 1.03%)</title><rect x="11.1538%" y="244" width="1.0256%" height="15" fill="rgb(239,60,40)"/><text x="11.4038%" y="254.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (23 samples, 2.95%)</title><rect x="10.0000%" y="196" width="2.9487%" height="15" fill="rgb(206,27,48)"/><text x="10.2500%" y="206.50">sa..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (15 samples, 1.92%)</title><rect x="11.0256%" y="212" width="1.9231%" height="15" fill="rgb(225,35,8)"/><text x="11.2756%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (15 samples, 1.92%)</title><rect x="11.0256%" y="228" width="1.9231%" height="15" fill="rgb(250,213,24)"/><text x="11.2756%" y="238.50">P..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:276) (41 samples, 5.26%)</title><rect x="8.0769%" y="180" width="5.2564%" height="15" fill="rgb(247,123,22)"/><text x="8.3269%" y="190.50">decisi..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:307) (74 samples, 9.49%)</title><rect x="3.9744%" y="164" width="9.4872%" height="15" fill="rgb(231,138,38)"/><text x="4.2244%" y="174.50">_predict_proba..</text></g><g><title>0x7fb711e46225 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (26 samples, 3.33%)</title><rect x="14.8718%" y="260" width="3.3333%" height="15" fill="rgb(231,145,46)"/><text x="15.1218%" y="270.50">0x7..</text></g><g><title>exp (libm-2.29.so) (20 samples, 2.56%)</title><rect x="15.6410%" y="276" width="2.5641%" height="15" fill="rgb(251,118,11)"/><text x="15.8910%" y="286.50">ex..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (51 samples, 6.54%)</title><rect x="13.9744%" y="196" width="6.5385%" height="15" fill="rgb(217,147,25)"/><text x="14.2244%" y="206.50">PyUFunc_G..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (47 samples, 6.03%)</title><rect x="14.4872%" y="212" width="6.0256%" height="15" fill="rgb(247,81,37)"/><text x="14.7372%" y="222.50">execute_..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (47 samples, 6.03%)</title><rect x="14.4872%" y="228" width="6.0256%" height="15" fill="rgb(209,12,38)"/><text x="14.7372%" y="238.50">trivial_..</text></g><g><title>0x7fb711e2563d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (46 samples, 5.90%)</title><rect x="14.6154%" y="244" width="5.8974%" height="15" fill="rgb(227,1,9)"/><text x="14.8654%" y="254.50">0x7fb71..</text></g><g><title>0x7fb711e46239 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (17 samples, 2.18%)</title><rect x="18.3333%" y="260" width="2.1795%" height="15" fill="rgb(248,47,43)"/><text x="18.5833%" y="270.50">0..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:308) (56 samples, 7.18%)</title><rect x="13.4615%" y="164" width="7.1795%" height="15" fill="rgb(221,10,30)"/><text x="13.7115%" y="174.50">_predict_p..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (56 samples, 7.18%)</title><rect x="13.4615%" y="180" width="7.1795%" height="15" fill="rgb(210,229,1)"/><text x="13.7115%" y="190.50">ufunc_gene..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (11 samples, 1.41%)</title><rect x="21.7949%" y="292" width="1.4103%" height="15" fill="rgb(222,148,37)"/><text x="22.0449%" y="302.50"></text></g><g><title>array_sum (methods.c:2215) (20 samples, 2.56%)</title><rect x="20.7692%" y="180" width="2.5641%" height="15" fill="rgb(234,67,33)"/><text x="21.0192%" y="190.50">ar..</text></g><g><title>forward_ndarray_method (methods.c:108) (20 samples, 2.56%)</title><rect x="20.7692%" y="196" width="2.5641%" height="15" fill="rgb(247,98,35)"/><text x="21.0192%" y="206.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py:38) (20 samples, 2.56%)</title><rect x="20.7692%" y="212" width="2.5641%" height="15" fill="rgb(247,138,52)"/><text x="21.0192%" y="222.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (17 samples, 2.18%)</title><rect x="21.1538%" y="228" width="2.1795%" height="15" fill="rgb(213,79,30)"/><text x="21.4038%" y="238.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (17 samples, 2.18%)</title><rect x="21.1538%" y="244" width="2.1795%" height="15" fill="rgb(246,177,23)"/><text x="21.4038%" y="254.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (15 samples, 1.92%)</title><rect x="21.4103%" y="260" width="1.9231%" height="15" fill="rgb(230,62,27)"/><text x="21.6603%" y="270.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (15 samples, 1.92%)</title><rect x="21.4103%" y="276" width="1.9231%" height="15" fill="rgb(216,154,8)"/><text x="21.6603%" y="286.50">P..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:313) (34 samples, 4.36%)</title><rect x="20.7692%" y="164" width="4.3590%" height="15" fill="rgb(244,35,45)"/><text x="21.0192%" y="174.50">_pred..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (14 samples, 1.79%)</title><rect x="23.3333%" y="180" width="1.7949%" height="15" fill="rgb(251,115,12)"/><text x="23.5833%" y="190.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (14 samples, 1.79%)</title><rect x="23.3333%" y="196" width="1.7949%" height="15" fill="rgb(240,54,50)"/><text x="23.5833%" y="206.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (14 samples, 1.79%)</title><rect x="23.3333%" y="212" width="1.7949%" height="15" fill="rgb(233,84,52)"/><text x="23.5833%" y="222.50">e..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (10 samples, 1.28%)</title><rect x="23.8462%" y="228" width="1.2821%" height="15" fill="rgb(207,117,47)"/><text x="24.0962%" y="238.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1760) (10 samples, 1.28%)</title><rect x="23.8462%" y="244" width="1.2821%" height="15" fill="rgb(249,43,39)"/><text x="24.0962%" y="254.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (10 samples, 1.28%)</title><rect x="23.8462%" y="260" width="1.2821%" height="15" fill="rgb(209,38,44)"/><text x="24.0962%" y="270.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (9 samples, 1.15%)</title><rect x="23.9744%" y="276" width="1.1538%" height="15" fill="rgb(236,212,23)"/><text x="24.2244%" y="286.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (9 samples, 1.15%)</title><rect x="23.9744%" y="292" width="1.1538%" height="15" fill="rgb(242,79,21)"/><text x="24.2244%" y="302.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:54) (176 samples, 22.56%)</title><rect x="2.6923%" y="52" width="22.5641%" height="15" fill="rgb(211,96,35)"/><text x="2.9423%" y="62.50">&lt;module&gt; (bench_LogisticRegression_l..</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:53) (176 samples, 22.56%)</title><rect x="2.6923%" y="68" width="22.5641%" height="15" fill="rgb(253,215,40)"/><text x="2.9423%" y="78.50">profile_skl (bench_LogisticRegressio..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (176 samples, 22.56%)</title><rect x="2.6923%" y="84" width="22.5641%" height="15" fill="rgb(211,81,21)"/><text x="2.9423%" y="94.50">setup_profile (bench_LogisticRegress..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (176 samples, 22.56%)</title><rect x="2.6923%" y="100" width="22.5641%" height="15" fill="rgb(208,190,38)"/><text x="2.9423%" y="110.50">profile (bench_LogisticRegression_li..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (175 samples, 22.44%)</title><rect x="2.8205%" y="116" width="22.4359%" height="15" fill="rgb(235,213,38)"/><text x="3.0705%" y="126.50">time_predict (mlprodict/asv_benchmar..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (175 samples, 22.44%)</title><rect x="2.8205%" y="132" width="22.4359%" height="15" fill="rgb(237,122,38)"/><text x="3.0705%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/co..</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1651) (167 samples, 21.41%)</title><rect x="3.8462%" y="148" width="21.4103%" height="15" fill="rgb(244,218,35)"/><text x="4.0962%" y="158.50">predict_proba (sklearn/linear_mode..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:39) (14 samples, 1.79%)</title><rect x="25.7692%" y="196" width="1.7949%" height="15" fill="rgb(240,68,47)"/><text x="26.0192%" y="206.50">_..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (14 samples, 1.79%)</title><rect x="25.7692%" y="212" width="1.7949%" height="15" fill="rgb(210,16,53)"/><text x="26.0192%" y="222.50">n..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (14 samples, 1.79%)</title><rect x="25.7692%" y="228" width="1.7949%" height="15" fill="rgb(235,124,12)"/><text x="26.0192%" y="238.50">d..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 1.28%)</title><rect x="26.2821%" y="244" width="1.2821%" height="15" fill="rgb(224,169,11)"/><text x="26.5321%" y="254.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (9 samples, 1.15%)</title><rect x="27.6923%" y="260" width="1.1538%" height="15" fill="rgb(250,166,2)"/><text x="27.9423%" y="270.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (9 samples, 1.15%)</title><rect x="27.6923%" y="276" width="1.1538%" height="15" fill="rgb(242,216,29)"/><text x="27.9423%" y="286.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (9 samples, 1.15%)</title><rect x="27.6923%" y="292" width="1.1538%" height="15" fill="rgb(230,116,27)"/><text x="27.9423%" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 1.54%)</title><rect x="27.5641%" y="228" width="1.5385%" height="15" fill="rgb(228,99,48)"/><text x="27.8141%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (12 samples, 1.54%)</title><rect x="27.5641%" y="244" width="1.5385%" height="15" fill="rgb(253,11,6)"/><text x="27.8141%" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:41) (13 samples, 1.67%)</title><rect x="27.5641%" y="196" width="1.6667%" height="15" fill="rgb(247,143,39)"/><text x="27.8141%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (13 samples, 1.67%)</title><rect x="27.5641%" y="212" width="1.6667%" height="15" fill="rgb(236,97,10)"/><text x="27.8141%" y="222.50"></text></g><g><title>0x7fb711e461d4 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (17 samples, 2.18%)</title><rect x="30.2564%" y="292" width="2.1795%" height="15" fill="rgb(233,208,19)"/><text x="30.5064%" y="302.50">0..</text></g><g><title>expf (libm-2.29.so) (12 samples, 1.54%)</title><rect x="30.8974%" y="308" width="1.5385%" height="15" fill="rgb(216,164,2)"/><text x="31.1474%" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:46) (29 samples, 3.72%)</title><rect x="29.3590%" y="196" width="3.7179%" height="15" fill="rgb(220,129,5)"/><text x="29.6090%" y="206.50">_run..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (27 samples, 3.46%)</title><rect x="29.6154%" y="212" width="3.4615%" height="15" fill="rgb(242,17,10)"/><text x="29.8654%" y="222.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (24 samples, 3.08%)</title><rect x="30.0000%" y="228" width="3.0769%" height="15" fill="rgb(242,107,0)"/><text x="30.2500%" y="238.50">PyU..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (23 samples, 2.95%)</title><rect x="30.1282%" y="244" width="2.9487%" height="15" fill="rgb(251,28,31)"/><text x="30.3782%" y="254.50">ex..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (23 samples, 2.95%)</title><rect x="30.1282%" y="260" width="2.9487%" height="15" fill="rgb(233,223,10)"/><text x="30.3782%" y="270.50">tr..</text></g><g><title>0x7fb711e23f9d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (23 samples, 2.95%)</title><rect x="30.1282%" y="276" width="2.9487%" height="15" fill="rgb(215,21,27)"/><text x="30.3782%" y="286.50">0x..</text></g><g><title>compiled_run (&lt;string&gt;:4) (67 samples, 8.59%)</title><rect x="25.6410%" y="180" width="8.5897%" height="15" fill="rgb(232,23,21)"/><text x="25.8910%" y="190.50">compiled_run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:60) (8 samples, 1.03%)</title><rect x="33.2051%" y="196" width="1.0256%" height="15" fill="rgb(244,5,23)"/><text x="33.4551%" y="206.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (11 samples, 1.41%)</title><rect x="35.6410%" y="324" width="1.4103%" height="15" fill="rgb(226,81,46)"/><text x="35.8910%" y="334.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (10 samples, 1.28%)</title><rect x="35.7692%" y="340" width="1.2821%" height="15" fill="rgb(247,70,30)"/><text x="36.0192%" y="350.50"></text></g><g><title>array_sum (methods.c:2215) (16 samples, 2.05%)</title><rect x="35.1282%" y="228" width="2.0513%" height="15" fill="rgb(212,68,19)"/><text x="35.3782%" y="238.50">a..</text></g><g><title>forward_ndarray_method (methods.c:108) (16 samples, 2.05%)</title><rect x="35.1282%" y="244" width="2.0513%" height="15" fill="rgb(240,187,13)"/><text x="35.3782%" y="254.50">f..</text></g><g><title>_sum (numpy/core/_methods.py:38) (16 samples, 2.05%)</title><rect x="35.1282%" y="260" width="2.0513%" height="15" fill="rgb(223,113,26)"/><text x="35.3782%" y="270.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (16 samples, 2.05%)</title><rect x="35.1282%" y="276" width="2.0513%" height="15" fill="rgb(206,192,2)"/><text x="35.3782%" y="286.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (15 samples, 1.92%)</title><rect x="35.2564%" y="292" width="1.9231%" height="15" fill="rgb(241,108,4)"/><text x="35.5064%" y="302.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (15 samples, 1.92%)</title><rect x="35.2564%" y="308" width="1.9231%" height="15" fill="rgb(247,173,49)"/><text x="35.5064%" y="318.50">P..</text></g><g><title>array_true_divide (number.c:826) (8 samples, 1.03%)</title><rect x="37.1795%" y="228" width="1.0256%" height="15" fill="rgb(224,114,35)"/><text x="37.4295%" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 1.03%)</title><rect x="37.1795%" y="244" width="1.0256%" height="15" fill="rgb(245,159,27)"/><text x="37.4295%" y="254.50"></text></g><g><title>compiled_run (&lt;string&gt;:5) (32 samples, 4.10%)</title><rect x="34.2308%" y="180" width="4.1026%" height="15" fill="rgb(245,172,44)"/><text x="34.4808%" y="190.50">comp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py:67) (30 samples, 3.85%)</title><rect x="34.4872%" y="196" width="3.8462%" height="15" fill="rgb(236,23,11)"/><text x="34.7372%" y="206.50">_run..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py:47) (29 samples, 3.72%)</title><rect x="34.6154%" y="212" width="3.7179%" height="15" fill="rgb(205,117,38)"/><text x="34.8654%" y="222.50">norm..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (107 samples, 13.72%)</title><rect x="25.3846%" y="132" width="13.7179%" height="15" fill="rgb(237,72,25)"/><text x="25.6346%" y="142.50">&lt;lambda&gt; (mlprodict/a..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (106 samples, 13.59%)</title><rect x="25.5128%" y="148" width="13.5897%" height="15" fill="rgb(244,70,9)"/><text x="25.7628%" y="158.50">run (mlprodict/onnxrt..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (106 samples, 13.59%)</title><rect x="25.5128%" y="164" width="13.5897%" height="15" fill="rgb(217,125,39)"/><text x="25.7628%" y="174.50">_run_sequence_runtime..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:61) (110 samples, 14.10%)</title><rect x="25.2564%" y="52" width="14.1026%" height="15" fill="rgb(235,36,10)"/><text x="25.5064%" y="62.50">&lt;module&gt; (bench_Logis..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:60) (110 samples, 14.10%)</title><rect x="25.2564%" y="68" width="14.1026%" height="15" fill="rgb(251,123,47)"/><text x="25.5064%" y="78.50">profile_pyrtc (bench_..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (110 samples, 14.10%)</title><rect x="25.2564%" y="84" width="14.1026%" height="15" fill="rgb(221,13,13)"/><text x="25.5064%" y="94.50">setup_profile (bench_..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (110 samples, 14.10%)</title><rect x="25.2564%" y="100" width="14.1026%" height="15" fill="rgb(238,131,9)"/><text x="25.5064%" y="110.50">profile (bench_Logist..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (109 samples, 13.97%)</title><rect x="25.3846%" y="116" width="13.9744%" height="15" fill="rgb(211,50,8)"/><text x="25.6346%" y="126.50">time_predict (mlprodi..</text></g><g><title>0x7fb7324b1ec0 (libc-2.29.so) (23 samples, 2.95%)</title><rect x="43.5897%" y="116" width="2.9487%" height="15" fill="rgb(245,182,24)"/><text x="43.8397%" y="126.50">0x..</text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (70 samples, 8.97%)</title><rect x="49.4872%" y="324" width="8.9744%" height="15" fill="rgb(242,14,37)"/><text x="49.7372%" y="334.50">onnxruntime::..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (40 samples, 5.13%)</title><rect x="53.3333%" y="340" width="5.1282%" height="15" fill="rgb(246,228,12)"/><text x="53.5833%" y="350.50">onnxru..</text></g><g><title>onnxruntime::ml::Normalizer::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 1.79%)</title><rect x="58.4615%" y="324" width="1.7949%" height="15" fill="rgb(213,55,15)"/><text x="58.7115%" y="334.50">o..</text></g><g><title>onnxruntime::ml::Normalizer::Normalize&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 1.79%)</title><rect x="58.4615%" y="340" width="1.7949%" height="15" fill="rgb(209,9,3)"/><text x="58.7115%" y="350.50">o..</text></g><g><title>operator new (libstdc++.so.6.0.28) (94 samples, 12.05%)</title><rect x="63.2051%" y="340" width="12.0513%" height="15" fill="rgb(230,59,30)"/><text x="63.4551%" y="350.50">operator new (libs..</text></g><g><title>malloc (libc-2.29.so) (94 samples, 12.05%)</title><rect x="63.2051%" y="356" width="12.0513%" height="15" fill="rgb(209,121,21)"/><text x="63.4551%" y="366.50">malloc (libc-2.29...</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (231 samples, 29.62%)</title><rect x="47.9487%" y="260" width="29.6154%" height="15" fill="rgb(220,109,13)"/><text x="48.1987%" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (229 samples, 29.36%)</title><rect x="48.2051%" y="276" width="29.3590%" height="15" fill="rgb(232,18,1)"/><text x="48.4551%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntime/c..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (229 samples, 29.36%)</title><rect x="48.2051%" y="292" width="29.3590%" height="15" fill="rgb(215,41,42)"/><text x="48.4551%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxrunti..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (229 samples, 29.36%)</title><rect x="48.2051%" y="308" width="29.3590%" height="15" fill="rgb(224,123,36)"/><text x="48.4551%" y="318.50">onnxruntime::SequentialExecutor::Execute (onnxr..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (135 samples, 17.31%)</title><rect x="60.2564%" y="324" width="17.3077%" height="15" fill="rgb(240,125,3)"/><text x="60.5064%" y="334.50">onnxruntime::ml::ZipMapOp::..</text></g><g><title>std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 1.03%)</title><rect x="76.5385%" y="340" width="1.0256%" height="15" fill="rgb(205,98,50)"/><text x="76.7885%" y="350.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (232 samples, 29.74%)</title><rect x="47.9487%" y="244" width="29.7436%" height="15" fill="rgb(205,185,37)"/><text x="48.1987%" y="254.50">onnxruntime::InferenceSession::Run (onnxruntime/..</text></g><g><title>0x7fb7324b1d17 (libc-2.29.so) (10 samples, 1.28%)</title><rect x="79.2308%" y="260" width="1.2821%" height="15" fill="rgb(238,207,15)"/><text x="79.4808%" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (45 samples, 5.77%)</title><rect x="77.6923%" y="244" width="5.7692%" height="15" fill="rgb(213,199,42)"/><text x="77.9423%" y="254.50">onnxrun..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 2.69%)</title><rect x="80.7692%" y="260" width="2.6923%" height="15" fill="rgb(235,201,11)"/><text x="81.0192%" y="270.50">st..</text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 3.72%)</title><rect x="94.8718%" y="292" width="3.7179%" height="15" fill="rgb(207,46,11)"/><text x="95.1218%" y="302.50">pybi..</text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (122 samples, 15.64%)</title><rect x="83.4615%" y="244" width="15.6410%" height="15" fill="rgb(241,35,35)"/><text x="83.7115%" y="254.50">onnxruntime::python::Add..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (122 samples, 15.64%)</title><rect x="83.4615%" y="260" width="15.6410%" height="15" fill="rgb(243,32,47)"/><text x="83.7115%" y="270.50">onnxruntime::python::Add..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (121 samples, 15.51%)</title><rect x="83.5897%" y="276" width="15.5128%" height="15" fill="rgb(247,202,23)"/><text x="83.8397%" y="286.50">pybind11::detail::map_ca..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (408 samples, 52.31%)</title><rect x="47.1795%" y="164" width="52.3077%" height="15" fill="rgb(219,102,11)"/><text x="47.4295%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (407 samples, 52.18%)</title><rect x="47.3077%" y="180" width="52.1795%" height="15" fill="rgb(243,110,44)"/><text x="47.5577%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:142) (407 samples, 52.18%)</title><rect x="47.3077%" y="196" width="52.1795%" height="15" fill="rgb(222,74,54)"/><text x="47.5577%" y="206.50">run (onnxruntime/capi/session.py:142)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (405 samples, 51.92%)</title><rect x="47.5641%" y="212" width="51.9231%" height="15" fill="rgb(216,99,12)"/><text x="47.8141%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (405 samples, 51.92%)</title><rect x="47.5641%" y="228" width="51.9231%" height="15" fill="rgb(226,22,26)"/><text x="47.8141%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (410 samples, 52.56%)</title><rect x="47.1795%" y="132" width="52.5641%" height="15" fill="rgb(217,163,10)"/><text x="47.4295%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (410 samples, 52.56%)</title><rect x="47.1795%" y="148" width="52.5641%" height="15" fill="rgb(213,25,53)"/><text x="47.4295%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>all (780 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:68) (473 samples, 60.64%)</title><rect x="39.3590%" y="52" width="60.6410%" height="15" fill="rgb(220,39,43)"/><text x="39.6090%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:68)</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:67) (473 samples, 60.64%)</title><rect x="39.3590%" y="68" width="60.6410%" height="15" fill="rgb(229,68,48)"/><text x="39.6090%" y="78.50">profile_ort (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:67)</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (473 samples, 60.64%)</title><rect x="39.3590%" y="84" width="60.6410%" height="15" fill="rgb(252,8,32)"/><text x="39.6090%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:37)</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (473 samples, 60.64%)</title><rect x="39.3590%" y="100" width="60.6410%" height="15" fill="rgb(223,20,43)"/><text x="39.6090%" y="110.50">profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_onnx_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (415 samples, 53.21%)</title><rect x="46.7949%" y="116" width="53.2051%" height="15" fill="rgb(229,81,49)"/><text x="47.0449%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g></svg></svg>