<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1286" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1269.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1269.00"> </text><g id="frames"><g><title>0x7f9ddf358454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="13" y="340" width="1" height="15" fill="rgb(244,181,52)"/><text x="16.00" y="350.50"></text></g><g><title>0x7f9ddf355fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="13" y="356" width="1" height="15" fill="rgb(241,28,5)"/><text x="16.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (3 samples, 0.14%)</title><rect x="13" y="372" width="1" height="15" fill="rgb(225,110,45)"/><text x="16.00" y="382.50"></text></g><g><title>0x7f9ddf358494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="14" y="340" width="2" height="15" fill="rgb(215,80,2)"/><text x="17.00" y="350.50"></text></g><g><title>0x7f9ddf3582bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="18" y="356" width="1" height="15" fill="rgb(252,110,29)"/><text x="21.00" y="366.50"></text></g><g><title>0x7f9ddf3582c1 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="19" y="356" width="1" height="15" fill="rgb(254,22,22)"/><text x="22.00" y="366.50"></text></g><g><title>0x7f9ddf35850f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.46%)</title><rect x="17" y="340" width="5" height="15" fill="rgb(234,96,9)"/><text x="20.00" y="350.50"></text></g><g><title>0x7f9ddf358323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="21" y="356" width="1" height="15" fill="rgb(240,108,19)"/><text x="24.00" y="366.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (26 samples, 1.19%)</title><rect x="10" y="164" width="14" height="15" fill="rgb(222,137,7)"/><text x="13.00" y="174.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (26 samples, 1.19%)</title><rect x="10" y="180" width="14" height="15" fill="rgb(214,159,30)"/><text x="13.00" y="190.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (25 samples, 1.15%)</title><rect x="10" y="196" width="14" height="15" fill="rgb(210,65,30)"/><text x="13.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (25 samples, 1.15%)</title><rect x="10" y="212" width="14" height="15" fill="rgb(253,181,45)"/><text x="13.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (25 samples, 1.15%)</title><rect x="10" y="228" width="14" height="15" fill="rgb(238,123,41)"/><text x="13.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (25 samples, 1.15%)</title><rect x="10" y="244" width="14" height="15" fill="rgb(239,86,11)"/><text x="13.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (25 samples, 1.15%)</title><rect x="10" y="260" width="14" height="15" fill="rgb(228,6,47)"/><text x="13.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (25 samples, 1.15%)</title><rect x="10" y="276" width="14" height="15" fill="rgb(224,111,6)"/><text x="13.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (25 samples, 1.15%)</title><rect x="10" y="292" width="14" height="15" fill="rgb(235,37,32)"/><text x="13.00" y="302.50"></text></g><g><title>0x7f9ddf383e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (25 samples, 1.15%)</title><rect x="10" y="308" width="14" height="15" fill="rgb(214,107,6)"/><text x="13.00" y="318.50"></text></g><g><title>0x7f9ddf381100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (21 samples, 0.96%)</title><rect x="12" y="324" width="12" height="15" fill="rgb(219,159,54)"/><text x="15.00" y="334.50"></text></g><g><title>0x7f9ddf358538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="22" y="340" width="2" height="15" fill="rgb(211,85,1)"/><text x="25.00" y="350.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (27 samples, 1.24%)</title><rect x="10" y="148" width="14" height="15" fill="rgb(246,159,29)"/><text x="13.00" y="158.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.09%)</title><rect x="25" y="164" width="1" height="15" fill="rgb(213,188,2)"/><text x="28.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (2 samples, 0.09%)</title><rect x="25" y="180" width="1" height="15" fill="rgb(215,201,41)"/><text x="28.00" y="190.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c:1313) (2 samples, 0.09%)</title><rect x="25" y="196" width="1" height="15" fill="rgb(208,223,7)"/><text x="28.00" y="206.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c:65) (2 samples, 0.09%)</title><rect x="25" y="212" width="1" height="15" fill="rgb(229,83,20)"/><text x="28.00" y="222.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:18) (32 samples, 1.47%)</title><rect x="10" y="100" width="17" height="15" fill="rgb(237,59,51)"/><text x="13.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (32 samples, 1.47%)</title><rect x="10" y="116" width="17" height="15" fill="rgb(231,148,35)"/><text x="13.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (32 samples, 1.47%)</title><rect x="10" y="132" width="17" height="15" fill="rgb(241,172,14)"/><text x="13.00" y="142.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (4 samples, 0.18%)</title><rect x="25" y="148" width="2" height="15" fill="rgb(212,99,54)"/><text x="28.00" y="158.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:215) (4 samples, 0.18%)</title><rect x="27" y="148" width="2" height="15" fill="rgb(221,169,2)"/><text x="30.00" y="158.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (2 samples, 0.09%)</title><rect x="28" y="164" width="1" height="15" fill="rgb(235,208,49)"/><text x="31.00" y="174.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (2 samples, 0.09%)</title><rect x="28" y="180" width="1" height="15" fill="rgb(224,160,43)"/><text x="31.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (4 samples, 0.18%)</title><rect x="30" y="164" width="2" height="15" fill="rgb(251,125,30)"/><text x="33.00" y="174.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:650) (2 samples, 0.09%)</title><rect x="32" y="164" width="1" height="15" fill="rgb(237,79,4)"/><text x="35.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (2 samples, 0.09%)</title><rect x="35" y="196" width="1" height="15" fill="rgb(217,69,46)"/><text x="38.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/neighbors/_base.py:663) (2 samples, 0.09%)</title><rect x="35" y="212" width="1" height="15" fill="rgb(208,163,39)"/><text x="38.00" y="222.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:208) (2 samples, 0.09%)</title><rect x="36" y="212" width="1" height="15" fill="rgb(210,3,52)"/><text x="39.00" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (2 samples, 0.09%)</title><rect x="36" y="228" width="1" height="15" fill="rgb(226,7,47)"/><text x="39.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (3 samples, 0.14%)</title><rect x="36" y="196" width="2" height="15" fill="rgb(250,145,13)"/><text x="39.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (2 samples, 0.09%)</title><rect x="38" y="196" width="1" height="15" fill="rgb(228,178,27)"/><text x="41.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:254) (2 samples, 0.09%)</title><rect x="39" y="260" width="1" height="15" fill="rgb(236,107,23)"/><text x="42.00" y="270.50"></text></g><g><title>0x7f9ddf37f32c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="40" y="324" width="1" height="15" fill="rgb(205,157,20)"/><text x="43.00" y="334.50"></text></g><g><title>0x7f9ddf34a5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="40" y="340" width="1" height="15" fill="rgb(233,4,39)"/><text x="43.00" y="350.50"></text></g><g><title>0x7f9ddf37f708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="41" y="324" width="2" height="15" fill="rgb(245,169,53)"/><text x="44.00" y="334.50"></text></g><g><title>0x7f9ddf34a5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="41" y="340" width="2" height="15" fill="rgb(236,205,19)"/><text x="44.00" y="350.50"></text></g><g><title>0x7f9ddf37b73a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="42" y="356" width="1" height="15" fill="rgb(231,19,13)"/><text x="45.00" y="366.50"></text></g><g><title>0x7f9ddf37fa72 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="43" y="324" width="1" height="15" fill="rgb(210,3,22)"/><text x="46.00" y="334.50"></text></g><g><title>0x7f9ddf34a5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="43" y="340" width="1" height="15" fill="rgb(243,121,5)"/><text x="46.00" y="350.50"></text></g><g><title>0x7f9ddf35685a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="43" y="356" width="1" height="15" fill="rgb(228,135,13)"/><text x="46.00" y="366.50"></text></g><g><title>0x7f9ddf3810dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.37%)</title><rect x="45" y="324" width="4" height="15" fill="rgb(210,55,49)"/><text x="48.00" y="334.50"></text></g><g><title>0x7f9ddf355fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.23%)</title><rect x="46" y="340" width="3" height="15" fill="rgb(241,210,33)"/><text x="49.00" y="350.50"></text></g><g><title>pow (libm-2.29.so) (5 samples, 0.23%)</title><rect x="46" y="356" width="3" height="15" fill="rgb(245,82,32)"/><text x="49.00" y="366.50"></text></g><g><title>0x7f9ddf355fa3 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="50" y="356" width="1" height="15" fill="rgb(241,156,30)"/><text x="53.00" y="366.50"></text></g><g><title>0x7f9ddf355fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.41%)</title><rect x="52" y="356" width="5" height="15" fill="rgb(235,229,31)"/><text x="55.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (9 samples, 0.41%)</title><rect x="52" y="372" width="5" height="15" fill="rgb(218,33,25)"/><text x="55.00" y="382.50"></text></g><g><title>0x7f9e050d5e1e (libm-2.29.so) (2 samples, 0.09%)</title><rect x="55" y="388" width="2" height="15" fill="rgb(242,67,12)"/><text x="58.00" y="398.50"></text></g><g><title>0x7f9ddf358426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (15 samples, 0.69%)</title><rect x="49" y="340" width="8" height="15" fill="rgb(235,223,30)"/><text x="52.00" y="350.50"></text></g><g><title>0x7f9ddf358454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.60%)</title><rect x="57" y="340" width="7" height="15" fill="rgb(218,127,50)"/><text x="60.00" y="350.50"></text></g><g><title>0x7f9ddf355fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.46%)</title><rect x="59" y="356" width="5" height="15" fill="rgb(245,94,4)"/><text x="62.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (10 samples, 0.46%)</title><rect x="59" y="372" width="5" height="15" fill="rgb(230,38,32)"/><text x="62.00" y="382.50"></text></g><g><title>0x7f9e050d5dc4 (libm-2.29.so) (2 samples, 0.09%)</title><rect x="63" y="388" width="1" height="15" fill="rgb(253,73,38)"/><text x="66.00" y="398.50"></text></g><g><title>0x7f9ddf35827d (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="66" y="356" width="1" height="15" fill="rgb(235,74,42)"/><text x="69.00" y="366.50"></text></g><g><title>0x7f9ddf3582ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.28%)</title><rect x="68" y="356" width="4" height="15" fill="rgb(241,49,34)"/><text x="71.00" y="366.50"></text></g><g><title>0x7f9ddf3582b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="72" y="356" width="1" height="15" fill="rgb(239,1,50)"/><text x="75.00" y="366.50"></text></g><g><title>0x7f9ddf3582bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.46%)</title><rect x="73" y="356" width="6" height="15" fill="rgb(244,180,48)"/><text x="76.00" y="366.50"></text></g><g><title>0x7f9ddf3582c1 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="79" y="356" width="1" height="15" fill="rgb(247,170,18)"/><text x="82.00" y="366.50"></text></g><g><title>0x7f9ddf358323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.55%)</title><rect x="80" y="356" width="7" height="15" fill="rgb(221,116,52)"/><text x="83.00" y="366.50"></text></g><g><title>0x7f9ddf358494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (45 samples, 2.06%)</title><rect x="64" y="340" width="24" height="15" fill="rgb(251,83,31)"/><text x="67.00" y="350.50">0..</text></g><g><title>0x7f9ddf358615 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="87" y="356" width="1" height="15" fill="rgb(233,155,14)"/><text x="90.00" y="366.50"></text></g><g><title>0x7f9ddf3584bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="88" y="340" width="2" height="15" fill="rgb(243,72,15)"/><text x="91.00" y="350.50"></text></g><g><title>0x7f9ddf35827d (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="91" y="356" width="1" height="15" fill="rgb(215,207,40)"/><text x="94.00" y="366.50"></text></g><g><title>0x7f9ddf35829b (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="92" y="356" width="1" height="15" fill="rgb(236,92,2)"/><text x="95.00" y="366.50"></text></g><g><title>0x7f9ddf3582ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.18%)</title><rect x="93" y="356" width="2" height="15" fill="rgb(239,76,46)"/><text x="96.00" y="366.50"></text></g><g><title>0x7f9ddf3582b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.23%)</title><rect x="95" y="356" width="3" height="15" fill="rgb(225,115,11)"/><text x="98.00" y="366.50"></text></g><g><title>0x7f9ddf3582bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.46%)</title><rect x="98" y="356" width="5" height="15" fill="rgb(234,79,18)"/><text x="101.00" y="366.50"></text></g><g><title>0x7f9ddf3582fb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="105" y="356" width="1" height="15" fill="rgb(231,195,17)"/><text x="108.00" y="366.50"></text></g><g><title>0x7f9ddf358323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.23%)</title><rect x="106" y="356" width="3" height="15" fill="rgb(225,143,4)"/><text x="109.00" y="366.50"></text></g><g><title>0x7f9ddf35850f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (36 samples, 1.65%)</title><rect x="90" y="340" width="20" height="15" fill="rgb(231,57,14)"/><text x="93.00" y="350.50"></text></g><g><title>0x7f9ddf3582bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="111" y="356" width="1" height="15" fill="rgb(233,132,22)"/><text x="114.00" y="366.50"></text></g><g><title>0x7f9ddf381100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (117 samples, 5.36%)</title><rect x="49" y="324" width="63" height="15" fill="rgb(234,146,39)"/><text x="52.00" y="334.50">0x7f9d..</text></g><g><title>0x7f9ddf358538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.23%)</title><rect x="110" y="340" width="2" height="15" fill="rgb(240,103,15)"/><text x="113.00" y="350.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (2 samples, 0.09%)</title><rect x="113" y="452" width="1" height="15" fill="rgb(240,98,13)"/><text x="116.00" y="462.50"></text></g><g><title>DOUBLE_sqrt (loops.c.src:1584) (2 samples, 0.09%)</title><rect x="113" y="468" width="1" height="15" fill="rgb(210,141,54)"/><text x="116.00" y="478.50"></text></g><g><title>run_unary_simd_sqrt_DOUBLE (simd.inc.src:195) (2 samples, 0.09%)</title><rect x="113" y="484" width="1" height="15" fill="rgb(223,193,27)"/><text x="116.00" y="494.50"></text></g><g><title>sse2_sqrt_DOUBLE (simd.inc.src:1005) (2 samples, 0.09%)</title><rect x="113" y="500" width="1" height="15" fill="rgb(240,202,43)"/><text x="116.00" y="510.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (2 samples, 0.09%)</title><rect x="113" y="516" width="1" height="15" fill="rgb(227,73,20)"/><text x="116.00" y="526.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (139 samples, 6.37%)</title><rect x="40" y="276" width="75" height="15" fill="rgb(226,40,54)"/><text x="43.00" y="286.50">&lt;listcom..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (139 samples, 6.37%)</title><rect x="40" y="292" width="75" height="15" fill="rgb(228,11,48)"/><text x="43.00" y="302.50">_tree_qu..</text></g><g><title>0x7f9ddf383e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (139 samples, 6.37%)</title><rect x="40" y="308" width="75" height="15" fill="rgb(228,5,26)"/><text x="43.00" y="318.50">0x7f9ddf..</text></g><g><title>0x7f9ddf3828cc (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.18%)</title><rect x="113" y="324" width="2" height="15" fill="rgb(222,66,1)"/><text x="116.00" y="334.50"></text></g><g><title>0x7f9ddf34bd53 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.18%)</title><rect x="113" y="340" width="2" height="15" fill="rgb(253,165,20)"/><text x="116.00" y="350.50"></text></g><g><title>0x7f9ddf7e2e62 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.18%)</title><rect x="113" y="356" width="2" height="15" fill="rgb(254,193,46)"/><text x="116.00" y="366.50"></text></g><g><title>0x7f9ddf7c4654 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.18%)</title><rect x="113" y="372" width="2" height="15" fill="rgb(229,133,13)"/><text x="116.00" y="382.50"></text></g><g><title>0x7f9ddf7cbeaf (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.18%)</title><rect x="113" y="388" width="2" height="15" fill="rgb(218,180,53)"/><text x="116.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.18%)</title><rect x="113" y="404" width="2" height="15" fill="rgb(249,163,53)"/><text x="116.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.18%)</title><rect x="113" y="420" width="2" height="15" fill="rgb(217,131,17)"/><text x="116.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (3 samples, 0.14%)</title><rect x="113" y="436" width="2" height="15" fill="rgb(224,164,47)"/><text x="116.00" y="446.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (142 samples, 6.51%)</title><rect x="39" y="212" width="77" height="15" fill="rgb(239,74,7)"/><text x="42.00" y="222.50">_dispatc..</text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (142 samples, 6.51%)</title><rect x="39" y="228" width="77" height="15" fill="rgb(219,25,52)"/><text x="42.00" y="238.50">apply_as..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (142 samples, 6.51%)</title><rect x="39" y="244" width="77" height="15" fill="rgb(205,213,25)"/><text x="42.00" y="254.50">__init__..</text></g><g><title>__call__ (joblib/parallel.py:256) (140 samples, 6.42%)</title><rect x="40" y="260" width="76" height="15" fill="rgb(254,25,21)"/><text x="43.00" y="270.50">__call__..</text></g><g><title>__call__ (joblib/parallel.py:1003) (151 samples, 6.92%)</title><rect x="34" y="180" width="82" height="15" fill="rgb(247,214,36)"/><text x="37.00" y="190.50">__call__ ..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (143 samples, 6.56%)</title><rect x="39" y="196" width="77" height="15" fill="rgb(230,189,5)"/><text x="42.00" y="206.50">dispatch..</text></g><g><title>__call__ (joblib/parallel.py:1015) (2 samples, 0.09%)</title><rect x="116" y="180" width="1" height="15" fill="rgb(207,176,42)"/><text x="119.00" y="190.50"></text></g><g><title>__call__ (joblib/parallel.py:1016) (2 samples, 0.09%)</title><rect x="117" y="180" width="1" height="15" fill="rgb(223,25,4)"/><text x="120.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (156 samples, 7.15%)</title><rect x="34" y="164" width="85" height="15" fill="rgb(206,121,11)"/><text x="37.00" y="174.50">kneighbors..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (172 samples, 7.89%)</title><rect x="29" y="148" width="93" height="15" fill="rgb(231,139,47)"/><text x="32.00" y="158.50">predict_pro..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:671) (5 samples, 0.23%)</title><rect x="119" y="164" width="3" height="15" fill="rgb(240,203,11)"/><text x="122.00" y="174.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (5 samples, 0.23%)</title><rect x="119" y="180" width="3" height="15" fill="rgb(248,127,50)"/><text x="122.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.23%)</title><rect x="119" y="196" width="3" height="15" fill="rgb(225,5,19)"/><text x="122.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (4 samples, 0.18%)</title><rect x="120" y="212" width="2" height="15" fill="rgb(218,204,18)"/><text x="123.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (3 samples, 0.14%)</title><rect x="120" y="228" width="2" height="15" fill="rgb(240,68,14)"/><text x="123.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.14%)</title><rect x="120" y="244" width="2" height="15" fill="rgb(230,40,16)"/><text x="123.00" y="254.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (2 samples, 0.09%)</title><rect x="121" y="260" width="1" height="15" fill="rgb(210,175,16)"/><text x="124.00" y="270.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (2 samples, 0.09%)</title><rect x="121" y="276" width="1" height="15" fill="rgb(240,169,54)"/><text x="124.00" y="286.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (2 samples, 0.09%)</title><rect x="121" y="292" width="1" height="15" fill="rgb(250,117,21)"/><text x="124.00" y="302.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (2 samples, 0.09%)</title><rect x="121" y="308" width="1" height="15" fill="rgb(247,15,16)"/><text x="124.00" y="318.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:234) (2 samples, 0.09%)</title><rect x="123" y="148" width="1" height="15" fill="rgb(231,219,20)"/><text x="126.00" y="158.50"></text></g><g><title>array_subscript (mapping.c:1521) (2 samples, 0.09%)</title><rect x="123" y="164" width="1" height="15" fill="rgb(223,212,4)"/><text x="126.00" y="174.50"></text></g><g><title>array_assign_subscript (mapping.c:2037) (3 samples, 0.14%)</title><rect x="124" y="164" width="2" height="15" fill="rgb(214,145,38)"/><text x="127.00" y="174.50"></text></g><g><title>array_assign_subscript (mapping.c:2046) (2 samples, 0.09%)</title><rect x="126" y="164" width="1" height="15" fill="rgb(238,176,27)"/><text x="129.00" y="174.50"></text></g><g><title>mapiter_set (lowlevel_strided_loops.c.src:1609) (2 samples, 0.09%)</title><rect x="126" y="180" width="1" height="15" fill="rgb(244,187,5)"/><text x="129.00" y="190.50"></text></g><g><title>array_subscript (mapping.c:1656) (2 samples, 0.09%)</title><rect x="127" y="164" width="1" height="15" fill="rgb(238,167,27)"/><text x="130.00" y="174.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.14%)</title><rect x="129" y="164" width="2" height="15" fill="rgb(214,33,23)"/><text x="132.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (14 samples, 0.64%)</title><rect x="124" y="148" width="7" height="15" fill="rgb(229,178,52)"/><text x="127.00" y="158.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:242) (4 samples, 0.18%)</title><rect x="131" y="148" width="2" height="15" fill="rgb(208,26,31)"/><text x="134.00" y="158.50"></text></g><g><title>array_sum (methods.c:2215) (4 samples, 0.18%)</title><rect x="131" y="164" width="2" height="15" fill="rgb(246,114,51)"/><text x="134.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (4 samples, 0.18%)</title><rect x="131" y="180" width="2" height="15" fill="rgb(206,148,33)"/><text x="134.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (4 samples, 0.18%)</title><rect x="131" y="196" width="2" height="15" fill="rgb(248,220,26)"/><text x="134.00" y="206.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.18%)</title><rect x="131" y="212" width="2" height="15" fill="rgb(224,212,32)"/><text x="134.00" y="222.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (3 samples, 0.14%)</title><rect x="132" y="228" width="1" height="15" fill="rgb(245,217,5)"/><text x="135.00" y="238.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.14%)</title><rect x="132" y="244" width="1" height="15" fill="rgb(242,87,22)"/><text x="135.00" y="254.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (2 samples, 0.09%)</title><rect x="132" y="260" width="1" height="15" fill="rgb(234,200,30)"/><text x="135.00" y="270.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:38) (233 samples, 10.68%)</title><rect x="10" y="52" width="126" height="15" fill="rgb(210,17,1)"/><text x="13.00" y="62.50">&lt;module&gt; (bench..</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:37) (233 samples, 10.68%)</title><rect x="10" y="68" width="126" height="15" fill="rgb(247,153,7)"/><text x="13.00" y="78.50">profile_skl (be..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:29) (233 samples, 10.68%)</title><rect x="10" y="84" width="126" height="15" fill="rgb(245,33,38)"/><text x="13.00" y="94.50">setup_profile (..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:23) (201 samples, 9.22%)</title><rect x="27" y="100" width="109" height="15" fill="rgb(225,125,8)"/><text x="30.00" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (201 samples, 9.22%)</title><rect x="27" y="116" width="109" height="15" fill="rgb(224,73,23)"/><text x="30.00" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (201 samples, 9.22%)</title><rect x="27" y="132" width="109" height="15" fill="rgb(223,22,26)"/><text x="30.00" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:244) (3 samples, 0.14%)</title><rect x="134" y="148" width="2" height="15" fill="rgb(231,205,51)"/><text x="137.00" y="158.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.14%)</title><rect x="134" y="164" width="2" height="15" fill="rgb(215,105,54)"/><text x="137.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.14%)</title><rect x="134" y="180" width="2" height="15" fill="rgb(252,60,39)"/><text x="137.00" y="190.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.14%)</title><rect x="134" y="196" width="2" height="15" fill="rgb(219,41,27)"/><text x="137.00" y="206.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (2 samples, 0.09%)</title><rect x="134" y="212" width="2" height="15" fill="rgb(213,54,8)"/><text x="137.00" y="222.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1755) (2 samples, 0.09%)</title><rect x="134" y="228" width="2" height="15" fill="rgb(240,201,38)"/><text x="137.00" y="238.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (2 samples, 0.09%)</title><rect x="134" y="244" width="2" height="15" fill="rgb(249,2,31)"/><text x="137.00" y="254.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (2 samples, 0.09%)</title><rect x="134" y="260" width="2" height="15" fill="rgb(214,77,41)"/><text x="137.00" y="270.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (2 samples, 0.09%)</title><rect x="134" y="276" width="2" height="15" fill="rgb(210,44,33)"/><text x="137.00" y="286.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (3 samples, 0.14%)</title><rect x="136" y="852" width="2" height="15" fill="rgb(214,159,54)"/><text x="139.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (3 samples, 0.14%)</title><rect x="136" y="868" width="2" height="15" fill="rgb(223,170,1)"/><text x="139.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (3 samples, 0.14%)</title><rect x="136" y="884" width="2" height="15" fill="rgb(246,152,40)"/><text x="139.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (3 samples, 0.14%)</title><rect x="136" y="900" width="2" height="15" fill="rgb(226,131,13)"/><text x="139.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (2 samples, 0.09%)</title><rect x="137" y="916" width="1" height="15" fill="rgb(252,17,11)"/><text x="140.00" y="926.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3279) (2 samples, 0.09%)</title><rect x="138" y="852" width="1" height="15" fill="rgb(206,216,32)"/><text x="141.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py:3279) (2 samples, 0.09%)</title><rect x="138" y="868" width="1" height="15" fill="rgb(212,10,47)"/><text x="141.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py:2782) (2 samples, 0.09%)</title><rect x="138" y="884" width="1" height="15" fill="rgb(220,27,4)"/><text x="141.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py:2295) (2 samples, 0.09%)</title><rect x="138" y="900" width="1" height="15" fill="rgb(229,132,8)"/><text x="141.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py:2201) (2 samples, 0.09%)</title><rect x="138" y="916" width="1" height="15" fill="rgb(248,34,10)"/><text x="141.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;:431) (2 samples, 0.09%)</title><rect x="138" y="932" width="1" height="15" fill="rgb(231,202,22)"/><text x="141.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;:1346) (2 samples, 0.09%)</title><rect x="138" y="948" width="1" height="15" fill="rgb(215,45,53)"/><text x="141.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1364) (2 samples, 0.09%)</title><rect x="138" y="964" width="1" height="15" fill="rgb(230,55,49)"/><text x="141.00" y="974.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (9 samples, 0.41%)</title><rect x="136" y="820" width="5" height="15" fill="rgb(217,135,1)"/><text x="139.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (9 samples, 0.41%)</title><rect x="136" y="836" width="5" height="15" fill="rgb(207,31,16)"/><text x="139.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (4 samples, 0.18%)</title><rect x="139" y="852" width="2" height="15" fill="rgb(227,178,49)"/><text x="142.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (4 samples, 0.18%)</title><rect x="139" y="868" width="2" height="15" fill="rgb(234,107,35)"/><text x="142.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (2 samples, 0.09%)</title><rect x="140" y="884" width="1" height="15" fill="rgb(225,43,53)"/><text x="143.00" y="894.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:2) (11 samples, 0.50%)</title><rect x="136" y="148" width="6" height="15" fill="rgb(226,45,45)"/><text x="139.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.50%)</title><rect x="136" y="164" width="6" height="15" fill="rgb(230,163,44)"/><text x="139.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (11 samples, 0.50%)</title><rect x="136" y="180" width="6" height="15" fill="rgb(225,124,31)"/><text x="139.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.50%)</title><rect x="136" y="196" width="6" height="15" fill="rgb(205,130,15)"/><text x="139.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.50%)</title><rect x="136" y="212" width="6" height="15" fill="rgb(209,24,53)"/><text x="139.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.50%)</title><rect x="136" y="228" width="6" height="15" fill="rgb(249,15,32)"/><text x="139.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.50%)</title><rect x="136" y="244" width="6" height="15" fill="rgb(250,106,37)"/><text x="139.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.50%)</title><rect x="136" y="260" width="6" height="15" fill="rgb(208,14,20)"/><text x="139.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.50%)</title><rect x="136" y="276" width="6" height="15" fill="rgb(243,89,21)"/><text x="139.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (11 samples, 0.50%)</title><rect x="136" y="292" width="6" height="15" fill="rgb(250,85,36)"/><text x="139.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.50%)</title><rect x="136" y="308" width="6" height="15" fill="rgb(250,41,16)"/><text x="139.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.50%)</title><rect x="136" y="324" width="6" height="15" fill="rgb(219,180,52)"/><text x="139.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.50%)</title><rect x="136" y="340" width="6" height="15" fill="rgb(227,187,16)"/><text x="139.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.50%)</title><rect x="136" y="356" width="6" height="15" fill="rgb(252,112,47)"/><text x="139.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.50%)</title><rect x="136" y="372" width="6" height="15" fill="rgb(212,35,33)"/><text x="139.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (11 samples, 0.50%)</title><rect x="136" y="388" width="6" height="15" fill="rgb(247,200,6)"/><text x="139.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.50%)</title><rect x="136" y="404" width="6" height="15" fill="rgb(236,36,7)"/><text x="139.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.50%)</title><rect x="136" y="420" width="6" height="15" fill="rgb(246,5,25)"/><text x="139.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.50%)</title><rect x="136" y="436" width="6" height="15" fill="rgb(254,165,5)"/><text x="139.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.50%)</title><rect x="136" y="452" width="6" height="15" fill="rgb(221,177,52)"/><text x="139.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.50%)</title><rect x="136" y="468" width="6" height="15" fill="rgb(223,31,19)"/><text x="139.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (11 samples, 0.50%)</title><rect x="136" y="484" width="6" height="15" fill="rgb(227,190,37)"/><text x="139.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.50%)</title><rect x="136" y="500" width="6" height="15" fill="rgb(227,89,3)"/><text x="139.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.50%)</title><rect x="136" y="516" width="6" height="15" fill="rgb(245,3,5)"/><text x="139.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.50%)</title><rect x="136" y="532" width="6" height="15" fill="rgb(217,168,28)"/><text x="139.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.50%)</title><rect x="136" y="548" width="6" height="15" fill="rgb(210,170,34)"/><text x="139.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.50%)</title><rect x="136" y="564" width="6" height="15" fill="rgb(239,223,27)"/><text x="139.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (11 samples, 0.50%)</title><rect x="136" y="580" width="6" height="15" fill="rgb(214,160,47)"/><text x="139.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.50%)</title><rect x="136" y="596" width="6" height="15" fill="rgb(246,123,34)"/><text x="139.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (11 samples, 0.50%)</title><rect x="136" y="612" width="6" height="15" fill="rgb(241,82,36)"/><text x="139.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.50%)</title><rect x="136" y="628" width="6" height="15" fill="rgb(218,171,37)"/><text x="139.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.50%)</title><rect x="136" y="644" width="6" height="15" fill="rgb(220,45,30)"/><text x="139.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.50%)</title><rect x="136" y="660" width="6" height="15" fill="rgb(232,72,37)"/><text x="139.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.50%)</title><rect x="136" y="676" width="6" height="15" fill="rgb(219,126,47)"/><text x="139.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.50%)</title><rect x="136" y="692" width="6" height="15" fill="rgb(233,75,0)"/><text x="139.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.50%)</title><rect x="136" y="708" width="6" height="15" fill="rgb(227,52,24)"/><text x="139.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (11 samples, 0.50%)</title><rect x="136" y="724" width="6" height="15" fill="rgb(252,122,28)"/><text x="139.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.50%)</title><rect x="136" y="740" width="6" height="15" fill="rgb(215,221,36)"/><text x="139.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.50%)</title><rect x="136" y="756" width="6" height="15" fill="rgb(253,215,34)"/><text x="139.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.50%)</title><rect x="136" y="772" width="6" height="15" fill="rgb(209,103,48)"/><text x="139.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.50%)</title><rect x="136" y="788" width="6" height="15" fill="rgb(225,227,47)"/><text x="139.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.50%)</title><rect x="136" y="804" width="6" height="15" fill="rgb(237,152,1)"/><text x="139.00" y="814.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:4) (17 samples, 0.78%)</title><rect x="136" y="52" width="9" height="15" fill="rgb(237,151,15)"/><text x="139.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (17 samples, 0.78%)</title><rect x="136" y="68" width="9" height="15" fill="rgb(250,186,30)"/><text x="139.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (17 samples, 0.78%)</title><rect x="136" y="84" width="9" height="15" fill="rgb(216,57,38)"/><text x="139.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (17 samples, 0.78%)</title><rect x="136" y="100" width="9" height="15" fill="rgb(244,177,0)"/><text x="139.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (17 samples, 0.78%)</title><rect x="136" y="116" width="9" height="15" fill="rgb(243,221,18)"/><text x="139.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 0.78%)</title><rect x="136" y="132" width="9" height="15" fill="rgb(225,92,8)"/><text x="139.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:7) (4 samples, 0.18%)</title><rect x="143" y="148" width="2" height="15" fill="rgb(220,126,31)"/><text x="146.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="164" width="2" height="15" fill="rgb(208,79,48)"/><text x="146.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="180" width="2" height="15" fill="rgb(218,113,9)"/><text x="146.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="196" width="2" height="15" fill="rgb(231,197,17)"/><text x="146.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="212" width="2" height="15" fill="rgb(242,41,50)"/><text x="146.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="228" width="2" height="15" fill="rgb(252,222,11)"/><text x="146.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (4 samples, 0.18%)</title><rect x="143" y="244" width="2" height="15" fill="rgb(223,184,17)"/><text x="146.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="260" width="2" height="15" fill="rgb(246,8,2)"/><text x="146.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="276" width="2" height="15" fill="rgb(228,149,26)"/><text x="146.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="292" width="2" height="15" fill="rgb(253,169,19)"/><text x="146.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="308" width="2" height="15" fill="rgb(252,208,34)"/><text x="146.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="324" width="2" height="15" fill="rgb(238,17,52)"/><text x="146.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (4 samples, 0.18%)</title><rect x="143" y="340" width="2" height="15" fill="rgb(205,30,42)"/><text x="146.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="356" width="2" height="15" fill="rgb(238,218,44)"/><text x="146.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="372" width="2" height="15" fill="rgb(226,132,14)"/><text x="146.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="388" width="2" height="15" fill="rgb(254,133,6)"/><text x="146.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="404" width="2" height="15" fill="rgb(238,58,7)"/><text x="146.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="420" width="2" height="15" fill="rgb(237,9,38)"/><text x="146.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (4 samples, 0.18%)</title><rect x="143" y="436" width="2" height="15" fill="rgb(234,107,25)"/><text x="146.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="452" width="2" height="15" fill="rgb(223,113,11)"/><text x="146.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.18%)</title><rect x="143" y="468" width="2" height="15" fill="rgb(208,1,29)"/><text x="146.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="484" width="2" height="15" fill="rgb(223,224,0)"/><text x="146.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="500" width="2" height="15" fill="rgb(234,143,3)"/><text x="146.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="516" width="2" height="15" fill="rgb(236,149,39)"/><text x="146.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="532" width="2" height="15" fill="rgb(231,19,38)"/><text x="146.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="548" width="2" height="15" fill="rgb(235,62,54)"/><text x="146.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="564" width="2" height="15" fill="rgb(226,145,40)"/><text x="146.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (4 samples, 0.18%)</title><rect x="143" y="580" width="2" height="15" fill="rgb(216,73,31)"/><text x="146.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="596" width="2" height="15" fill="rgb(229,31,31)"/><text x="146.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="612" width="2" height="15" fill="rgb(222,5,33)"/><text x="146.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="628" width="2" height="15" fill="rgb(213,192,5)"/><text x="146.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="644" width="2" height="15" fill="rgb(212,94,44)"/><text x="146.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="660" width="2" height="15" fill="rgb(237,19,46)"/><text x="146.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (4 samples, 0.18%)</title><rect x="143" y="676" width="2" height="15" fill="rgb(234,78,4)"/><text x="146.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="692" width="2" height="15" fill="rgb(244,77,9)"/><text x="146.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="708" width="2" height="15" fill="rgb(235,180,46)"/><text x="146.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="724" width="2" height="15" fill="rgb(248,41,6)"/><text x="146.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="740" width="2" height="15" fill="rgb(246,3,48)"/><text x="146.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="756" width="2" height="15" fill="rgb(229,54,43)"/><text x="146.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (4 samples, 0.18%)</title><rect x="143" y="772" width="2" height="15" fill="rgb(246,197,24)"/><text x="146.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="788" width="2" height="15" fill="rgb(207,14,35)"/><text x="146.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="804" width="2" height="15" fill="rgb(217,197,4)"/><text x="146.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="820" width="2" height="15" fill="rgb(254,171,53)"/><text x="146.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="836" width="2" height="15" fill="rgb(219,156,54)"/><text x="146.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="852" width="2" height="15" fill="rgb(249,108,19)"/><text x="146.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (4 samples, 0.18%)</title><rect x="143" y="868" width="2" height="15" fill="rgb(207,205,51)"/><text x="146.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="884" width="2" height="15" fill="rgb(234,119,47)"/><text x="146.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.18%)</title><rect x="143" y="900" width="2" height="15" fill="rgb(211,29,37)"/><text x="146.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="916" width="2" height="15" fill="rgb(248,194,18)"/><text x="146.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="932" width="2" height="15" fill="rgb(205,179,46)"/><text x="146.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="948" width="2" height="15" fill="rgb(242,98,19)"/><text x="146.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="964" width="2" height="15" fill="rgb(229,77,32)"/><text x="146.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="980" width="2" height="15" fill="rgb(241,40,27)"/><text x="146.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="996" width="2" height="15" fill="rgb(244,34,11)"/><text x="146.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (4 samples, 0.18%)</title><rect x="143" y="1012" width="2" height="15" fill="rgb(219,227,28)"/><text x="146.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="143" y="1028" width="2" height="15" fill="rgb(252,149,9)"/><text x="146.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="143" y="1044" width="2" height="15" fill="rgb(213,22,5)"/><text x="146.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="143" y="1060" width="2" height="15" fill="rgb(229,210,20)"/><text x="146.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="143" y="1076" width="2" height="15" fill="rgb(249,144,31)"/><text x="146.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="143" y="1092" width="2" height="15" fill="rgb(240,161,47)"/><text x="146.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (3 samples, 0.14%)</title><rect x="143" y="1108" width="2" height="15" fill="rgb(217,98,48)"/><text x="146.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 0.14%)</title><rect x="143" y="1124" width="2" height="15" fill="rgb(254,4,50)"/><text x="146.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="143" y="1140" width="2" height="15" fill="rgb(250,88,11)"/><text x="146.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="143" y="1156" width="2" height="15" fill="rgb(216,127,8)"/><text x="146.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="143" y="1172" width="2" height="15" fill="rgb(228,97,45)"/><text x="146.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="143" y="1188" width="2" height="15" fill="rgb(213,173,2)"/><text x="146.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="143" y="1204" width="2" height="15" fill="rgb(242,203,48)"/><text x="146.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="143" y="1220" width="2" height="15" fill="rgb(252,65,5)"/><text x="146.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:37) (2 samples, 0.09%)</title><rect x="144" y="1236" width="1" height="15" fill="rgb(231,1,22)"/><text x="147.00" y="1246.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (3 samples, 0.14%)</title><rect x="146" y="260" width="2" height="15" fill="rgb(234,25,52)"/><text x="149.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (2 samples, 0.09%)</title><rect x="147" y="276" width="1" height="15" fill="rgb(228,185,31)"/><text x="150.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c:884) (2 samples, 0.09%)</title><rect x="147" y="292" width="1" height="15" fill="rgb(249,113,12)"/><text x="150.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:703) (2 samples, 0.09%)</title><rect x="147" y="308" width="1" height="15" fill="rgb(250,24,9)"/><text x="150.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (5 samples, 0.23%)</title><rect x="146" y="212" width="3" height="15" fill="rgb(223,176,15)"/><text x="149.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (5 samples, 0.23%)</title><rect x="146" y="228" width="3" height="15" fill="rgb(250,185,54)"/><text x="149.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (5 samples, 0.23%)</title><rect x="146" y="244" width="3" height="15" fill="rgb(233,200,44)"/><text x="149.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (2 samples, 0.09%)</title><rect x="148" y="260" width="1" height="15" fill="rgb(234,116,37)"/><text x="151.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (2 samples, 0.09%)</title><rect x="148" y="276" width="1" height="15" fill="rgb(233,5,26)"/><text x="151.00" y="286.50"></text></g><g><title>array_subscript (mapping.c:1539) (2 samples, 0.09%)</title><rect x="151" y="228" width="1" height="15" fill="rgb(246,190,14)"/><text x="154.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:398) (2 samples, 0.09%)</title><rect x="151" y="244" width="1" height="15" fill="rgb(208,129,51)"/><text x="154.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (3 samples, 0.14%)</title><rect x="151" y="212" width="1" height="15" fill="rgb(240,212,15)"/><text x="154.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (2 samples, 0.09%)</title><rect x="152" y="228" width="1" height="15" fill="rgb(220,54,23)"/><text x="155.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (3 samples, 0.14%)</title><rect x="155" y="260" width="2" height="15" fill="rgb(216,219,42)"/><text x="158.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (2 samples, 0.09%)</title><rect x="158" y="308" width="1" height="15" fill="rgb(242,156,12)"/><text x="161.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (5 samples, 0.23%)</title><rect x="159" y="308" width="3" height="15" fill="rgb(209,25,20)"/><text x="162.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.23%)</title><rect x="159" y="324" width="3" height="15" fill="rgb(215,38,46)"/><text x="162.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.18%)</title><rect x="160" y="340" width="2" height="15" fill="rgb(237,83,15)"/><text x="163.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (3 samples, 0.14%)</title><rect x="160" y="356" width="2" height="15" fill="rgb(225,159,29)"/><text x="163.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1349) (2 samples, 0.09%)</title><rect x="161" y="372" width="1" height="15" fill="rgb(216,136,34)"/><text x="164.00" y="382.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (2 samples, 0.09%)</title><rect x="161" y="388" width="1" height="15" fill="rgb(207,189,37)"/><text x="164.00" y="398.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (2 samples, 0.09%)</title><rect x="164" y="356" width="1" height="15" fill="rgb(208,198,14)"/><text x="167.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (3 samples, 0.14%)</title><rect x="165" y="372" width="2" height="15" fill="rgb(211,130,9)"/><text x="168.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (2 samples, 0.09%)</title><rect x="166" y="388" width="1" height="15" fill="rgb(249,156,19)"/><text x="169.00" y="398.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1667) (4 samples, 0.18%)</title><rect x="172" y="484" width="3" height="15" fill="rgb(244,106,7)"/><text x="175.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (7 samples, 0.32%)</title><rect x="171" y="468" width="4" height="15" fill="rgb(241,73,11)"/><text x="174.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:235) (2 samples, 0.09%)</title><rect x="175" y="468" width="1" height="15" fill="rgb(233,178,46)"/><text x="178.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (2 samples, 0.09%)</title><rect x="176" y="468" width="1" height="15" fill="rgb(253,69,53)"/><text x="179.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (16 samples, 0.73%)</title><rect x="170" y="436" width="8" height="15" fill="rgb(245,174,16)"/><text x="173.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (14 samples, 0.64%)</title><rect x="171" y="452" width="7" height="15" fill="rgb(242,20,41)"/><text x="174.00" y="462.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (40 samples, 1.83%)</title><rect x="158" y="276" width="21" height="15" fill="rgb(217,154,49)"/><text x="161.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (40 samples, 1.83%)</title><rect x="158" y="292" width="21" height="15" fill="rgb(207,79,29)"/><text x="161.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (32 samples, 1.47%)</title><rect x="162" y="308" width="17" height="15" fill="rgb(218,181,27)"/><text x="165.00" y="318.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (30 samples, 1.38%)</title><rect x="163" y="324" width="16" height="15" fill="rgb(244,47,39)"/><text x="166.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (29 samples, 1.33%)</title><rect x="164" y="340" width="15" height="15" fill="rgb(249,195,35)"/><text x="167.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (27 samples, 1.24%)</title><rect x="165" y="356" width="14" height="15" fill="rgb(219,162,39)"/><text x="168.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (23 samples, 1.05%)</title><rect x="167" y="372" width="12" height="15" fill="rgb(245,161,5)"/><text x="170.00" y="382.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (22 samples, 1.01%)</title><rect x="167" y="388" width="12" height="15" fill="rgb(226,198,16)"/><text x="170.00" y="398.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (21 samples, 0.96%)</title><rect x="168" y="404" width="11" height="15" fill="rgb(209,126,36)"/><text x="171.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (20 samples, 0.92%)</title><rect x="169" y="420" width="10" height="15" fill="rgb(234,63,5)"/><text x="172.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (2 samples, 0.09%)</title><rect x="180" y="372" width="2" height="15" fill="rgb(249,183,13)"/><text x="183.00" y="382.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (2 samples, 0.09%)</title><rect x="182" y="420" width="1" height="15" fill="rgb(229,215,27)"/><text x="185.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (6 samples, 0.28%)</title><rect x="182" y="372" width="3" height="15" fill="rgb(217,95,42)"/><text x="185.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (6 samples, 0.28%)</title><rect x="182" y="388" width="3" height="15" fill="rgb(245,63,52)"/><text x="185.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (5 samples, 0.23%)</title><rect x="182" y="404" width="3" height="15" fill="rgb(236,91,16)"/><text x="185.00" y="414.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (53 samples, 2.43%)</title><rect x="157" y="260" width="28" height="15" fill="rgb(227,166,6)"/><text x="160.00" y="270.50">r..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (10 samples, 0.46%)</title><rect x="180" y="276" width="5" height="15" fill="rgb(236,20,23)"/><text x="183.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (10 samples, 0.46%)</title><rect x="180" y="292" width="5" height="15" fill="rgb(247,77,37)"/><text x="183.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (10 samples, 0.46%)</title><rect x="180" y="308" width="5" height="15" fill="rgb(211,150,46)"/><text x="183.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 0.46%)</title><rect x="180" y="324" width="5" height="15" fill="rgb(226,101,6)"/><text x="183.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 0.41%)</title><rect x="180" y="340" width="5" height="15" fill="rgb(210,202,15)"/><text x="183.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (9 samples, 0.41%)</title><rect x="180" y="356" width="5" height="15" fill="rgb(232,205,21)"/><text x="183.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (4 samples, 0.18%)</title><rect x="185" y="260" width="3" height="15" fill="rgb(235,159,42)"/><text x="188.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (3 samples, 0.14%)</title><rect x="188" y="260" width="1" height="15" fill="rgb(235,116,34)"/><text x="191.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (66 samples, 3.03%)</title><rect x="154" y="244" width="36" height="15" fill="rgb(227,79,25)"/><text x="157.00" y="254.50">_ru..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (4 samples, 0.18%)</title><rect x="190" y="244" width="2" height="15" fill="rgb(234,103,2)"/><text x="193.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (3 samples, 0.14%)</title><rect x="190" y="260" width="2" height="15" fill="rgb(233,144,46)"/><text x="193.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (74 samples, 3.39%)</title><rect x="152" y="212" width="40" height="15" fill="rgb(208,22,25)"/><text x="155.00" y="222.50">_ru..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (72 samples, 3.30%)</title><rect x="153" y="228" width="39" height="15" fill="rgb(233,191,42)"/><text x="156.00" y="238.50">run..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (2 samples, 0.09%)</title><rect x="194" y="260" width="1" height="15" fill="rgb(247,119,37)"/><text x="197.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (7 samples, 0.32%)</title><rect x="192" y="212" width="4" height="15" fill="rgb(231,175,50)"/><text x="195.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (6 samples, 0.28%)</title><rect x="193" y="228" width="3" height="15" fill="rgb(209,67,24)"/><text x="196.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.28%)</title><rect x="193" y="244" width="3" height="15" fill="rgb(230,52,16)"/><text x="196.00" y="254.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:201) (3 samples, 0.14%)</title><rect x="198" y="388" width="1" height="15" fill="rgb(247,52,44)"/><text x="201.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (2 samples, 0.09%)</title><rect x="198" y="404" width="1" height="15" fill="rgb(210,87,44)"/><text x="201.00" y="414.50"></text></g><g><title>aintroselect_float (selection.c.src:380) (10 samples, 0.46%)</title><rect x="198" y="372" width="5" height="15" fill="rgb(242,10,33)"/><text x="201.00" y="382.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:202) (7 samples, 0.32%)</title><rect x="199" y="388" width="4" height="15" fill="rgb(228,180,11)"/><text x="202.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (4 samples, 0.18%)</title><rect x="201" y="404" width="2" height="15" fill="rgb(209,80,13)"/><text x="204.00" y="414.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (107 samples, 4.91%)</title><rect x="146" y="196" width="58" height="15" fill="rgb(211,79,27)"/><text x="149.00" y="206.50">run (m..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (14 samples, 0.64%)</title><rect x="197" y="212" width="7" height="15" fill="rgb(249,181,1)"/><text x="200.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (14 samples, 0.64%)</title><rect x="197" y="228" width="7" height="15" fill="rgb(233,107,15)"/><text x="200.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (14 samples, 0.64%)</title><rect x="197" y="244" width="7" height="15" fill="rgb(251,80,9)"/><text x="200.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (14 samples, 0.64%)</title><rect x="197" y="260" width="7" height="15" fill="rgb(235,101,31)"/><text x="200.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (14 samples, 0.64%)</title><rect x="197" y="276" width="7" height="15" fill="rgb(220,218,33)"/><text x="200.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (14 samples, 0.64%)</title><rect x="197" y="292" width="7" height="15" fill="rgb(251,76,48)"/><text x="200.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (14 samples, 0.64%)</title><rect x="197" y="308" width="7" height="15" fill="rgb(205,65,33)"/><text x="200.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (14 samples, 0.64%)</title><rect x="197" y="324" width="7" height="15" fill="rgb(235,2,43)"/><text x="200.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (14 samples, 0.64%)</title><rect x="197" y="340" width="7" height="15" fill="rgb(241,70,54)"/><text x="200.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (13 samples, 0.60%)</title><rect x="197" y="356" width="7" height="15" fill="rgb(218,108,47)"/><text x="200.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py:18) (2 samples, 0.09%)</title><rect x="204" y="228" width="1" height="15" fill="rgb(230,159,33)"/><text x="207.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (2 samples, 0.09%)</title><rect x="204" y="244" width="1" height="15" fill="rgb(240,16,31)"/><text x="207.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.09%)</title><rect x="204" y="260" width="1" height="15" fill="rgb(250,183,23)"/><text x="207.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.09%)</title><rect x="204" y="276" width="1" height="15" fill="rgb(221,55,52)"/><text x="207.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (2 samples, 0.09%)</title><rect x="204" y="292" width="1" height="15" fill="rgb(234,58,52)"/><text x="207.00" y="302.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:18) (112 samples, 5.14%)</title><rect x="145" y="100" width="61" height="15" fill="rgb(232,71,40)"/><text x="148.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (112 samples, 5.14%)</title><rect x="145" y="116" width="61" height="15" fill="rgb(241,213,7)"/><text x="148.00" y="126.50">time_p..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (112 samples, 5.14%)</title><rect x="145" y="132" width="61" height="15" fill="rgb(238,207,33)"/><text x="148.00" y="142.50">&lt;lambd..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (112 samples, 5.14%)</title><rect x="145" y="148" width="61" height="15" fill="rgb(240,76,20)"/><text x="148.00" y="158.50">run (m..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (112 samples, 5.14%)</title><rect x="145" y="164" width="61" height="15" fill="rgb(210,189,37)"/><text x="148.00" y="174.50">_run_s..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (111 samples, 5.09%)</title><rect x="146" y="180" width="60" height="15" fill="rgb(247,146,24)"/><text x="149.00" y="190.50">run (m..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (3 samples, 0.14%)</title><rect x="204" y="196" width="2" height="15" fill="rgb(233,165,9)"/><text x="207.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (3 samples, 0.14%)</title><rect x="204" y="212" width="2" height="15" fill="rgb(225,207,16)"/><text x="207.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (2 samples, 0.09%)</title><rect x="206" y="180" width="1" height="15" fill="rgb(207,70,31)"/><text x="209.00" y="190.50"></text></g><g><title>LONG_getitem (arraytypes.c.src:204) (2 samples, 0.09%)</title><rect x="211" y="260" width="1" height="15" fill="rgb(211,3,44)"/><text x="214.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:39) (4 samples, 0.18%)</title><rect x="211" y="212" width="2" height="15" fill="rgb(249,7,18)"/><text x="214.00" y="222.50"></text></g><g><title>PyArray_ToList (convert.c:120) (4 samples, 0.18%)</title><rect x="211" y="228" width="2" height="15" fill="rgb(225,1,9)"/><text x="214.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c:102) (4 samples, 0.18%)</title><rect x="211" y="244" width="2" height="15" fill="rgb(233,98,24)"/><text x="214.00" y="254.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:458) (2 samples, 0.09%)</title><rect x="213" y="308" width="1" height="15" fill="rgb(230,152,48)"/><text x="216.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:478) (2 samples, 0.09%)</title><rect x="214" y="308" width="1" height="15" fill="rgb(254,186,44)"/><text x="217.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:154) (8 samples, 0.37%)</title><rect x="216" y="324" width="5" height="15" fill="rgb(250,215,48)"/><text x="219.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:47) (2 samples, 0.09%)</title><rect x="221" y="340" width="1" height="15" fill="rgb(206,51,23)"/><text x="224.00" y="350.50"></text></g><g><title>_array_find_python_scalar_type (common.c:53) (2 samples, 0.09%)</title><rect x="222" y="340" width="1" height="15" fill="rgb(205,190,38)"/><text x="225.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (6 samples, 0.28%)</title><rect x="221" y="324" width="3" height="15" fill="rgb(249,89,21)"/><text x="224.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:512) (2 samples, 0.09%)</title><rect x="224" y="324" width="1" height="15" fill="rgb(223,155,47)"/><text x="227.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:528) (2 samples, 0.09%)</title><rect x="225" y="324" width="1" height="15" fill="rgb(239,173,23)"/><text x="228.00" y="334.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (27 samples, 1.24%)</title><rect x="213" y="276" width="15" height="15" fill="rgb(216,189,36)"/><text x="216.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (27 samples, 1.24%)</title><rect x="213" y="292" width="15" height="15" fill="rgb(241,43,19)"/><text x="216.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (23 samples, 1.05%)</title><rect x="215" y="308" width="13" height="15" fill="rgb(239,112,21)"/><text x="218.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:537) (2 samples, 0.09%)</title><rect x="226" y="324" width="2" height="15" fill="rgb(231,217,25)"/><text x="229.00" y="334.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (30 samples, 1.38%)</title><rect x="213" y="260" width="16" height="15" fill="rgb(237,135,8)"/><text x="216.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (3 samples, 0.14%)</title><rect x="228" y="276" width="1" height="15" fill="rgb(205,208,34)"/><text x="231.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c:884) (2 samples, 0.09%)</title><rect x="228" y="292" width="1" height="15" fill="rgb(217,93,17)"/><text x="231.00" y="302.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:212) (2 samples, 0.09%)</title><rect x="231" y="324" width="1" height="15" fill="rgb(205,203,37)"/><text x="234.00" y="334.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (5 samples, 0.23%)</title><rect x="232" y="324" width="3" height="15" fill="rgb(243,118,53)"/><text x="235.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:123) (3 samples, 0.14%)</title><rect x="233" y="340" width="2" height="15" fill="rgb(216,71,0)"/><text x="236.00" y="350.50"></text></g><g><title>array_subscript (mapping.c:1539) (43 samples, 1.97%)</title><rect x="213" y="228" width="23" height="15" fill="rgb(219,99,1)"/><text x="216.00" y="238.50">a..</text></g><g><title>prepare_index (mapping.c:516) (43 samples, 1.97%)</title><rect x="213" y="244" width="23" height="15" fill="rgb(217,186,10)"/><text x="216.00" y="254.50">p..</text></g><g><title>PyArray_FromAny (ctors.c:1938) (12 samples, 0.55%)</title><rect x="230" y="260" width="6" height="15" fill="rgb(209,32,22)"/><text x="233.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (12 samples, 0.55%)</title><rect x="230" y="276" width="6" height="15" fill="rgb(213,86,18)"/><text x="233.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:550) (12 samples, 0.55%)</title><rect x="230" y="292" width="6" height="15" fill="rgb(227,132,47)"/><text x="233.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (12 samples, 0.55%)</title><rect x="230" y="308" width="6" height="15" fill="rgb(244,75,52)"/><text x="233.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (44 samples, 2.02%)</title><rect x="213" y="212" width="24" height="15" fill="rgb(241,186,44)"/><text x="216.00" y="222.50">_..</text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src:816) (2 samples, 0.09%)</title><rect x="237" y="292" width="1" height="15" fill="rgb(244,209,31)"/><text x="240.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (4 samples, 0.18%)</title><rect x="237" y="212" width="2" height="15" fill="rgb(238,169,51)"/><text x="240.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (4 samples, 0.18%)</title><rect x="237" y="228" width="2" height="15" fill="rgb(216,50,24)"/><text x="240.00" y="238.50"></text></g><g><title>array_astype (methods.c:845) (3 samples, 0.14%)</title><rect x="237" y="244" width="2" height="15" fill="rgb(206,157,32)"/><text x="240.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (3 samples, 0.14%)</title><rect x="237" y="260" width="2" height="15" fill="rgb(210,226,34)"/><text x="240.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (3 samples, 0.14%)</title><rect x="237" y="276" width="2" height="15" fill="rgb(228,45,11)"/><text x="240.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 0.14%)</title><rect x="241" y="228" width="1" height="15" fill="rgb(220,82,37)"/><text x="244.00" y="238.50"></text></g><g><title>0x7f9e04f6bb16 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="243" y="292" width="1" height="15" fill="rgb(231,9,48)"/><text x="246.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (12 samples, 0.55%)</title><rect x="239" y="212" width="7" height="15" fill="rgb(241,48,1)"/><text x="242.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (6 samples, 0.28%)</title><rect x="243" y="228" width="3" height="15" fill="rgb(226,21,17)"/><text x="246.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c:147) (6 samples, 0.28%)</title><rect x="243" y="244" width="3" height="15" fill="rgb(242,142,35)"/><text x="246.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (6 samples, 0.28%)</title><rect x="243" y="260" width="3" height="15" fill="rgb(227,54,15)"/><text x="246.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c:274) (6 samples, 0.28%)</title><rect x="243" y="276" width="3" height="15" fill="rgb(253,43,2)"/><text x="246.00" y="286.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.14%)</title><rect x="244" y="292" width="2" height="15" fill="rgb(250,131,19)"/><text x="247.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (6 samples, 0.28%)</title><rect x="246" y="212" width="3" height="15" fill="rgb(233,4,49)"/><text x="249.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (3 samples, 0.14%)</title><rect x="249" y="212" width="2" height="15" fill="rgb(223,82,32)"/><text x="252.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (3 samples, 0.14%)</title><rect x="251" y="212" width="1" height="15" fill="rgb(247,50,27)"/><text x="254.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (2 samples, 0.09%)</title><rect x="254" y="228" width="1" height="15" fill="rgb(220,159,51)"/><text x="257.00" y="238.50"></text></g><g><title>array_subscript (mapping.c:1584) (2 samples, 0.09%)</title><rect x="255" y="228" width="1" height="15" fill="rgb(224,65,19)"/><text x="258.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (2 samples, 0.09%)</title><rect x="255" y="244" width="1" height="15" fill="rgb(220,110,37)"/><text x="258.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (8 samples, 0.37%)</title><rect x="252" y="212" width="5" height="15" fill="rgb(253,180,46)"/><text x="255.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (2 samples, 0.09%)</title><rect x="261" y="228" width="1" height="15" fill="rgb(238,193,39)"/><text x="264.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (7 samples, 0.32%)</title><rect x="262" y="228" width="4" height="15" fill="rgb(209,123,40)"/><text x="265.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (3 samples, 0.14%)</title><rect x="271" y="244" width="1" height="15" fill="rgb(246,98,54)"/><text x="274.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (3 samples, 0.14%)</title><rect x="272" y="244" width="2" height="15" fill="rgb(216,186,43)"/><text x="275.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (4 samples, 0.18%)</title><rect x="274" y="244" width="2" height="15" fill="rgb(242,154,31)"/><text x="277.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (53 samples, 2.43%)</title><rect x="290" y="260" width="28" height="15" fill="rgb(231,32,2)"/><text x="293.00" y="270.50">r..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (6 samples, 0.28%)</title><rect x="315" y="276" width="3" height="15" fill="rgb(210,108,46)"/><text x="318.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:268) (2 samples, 0.09%)</title><rect x="339" y="292" width="1" height="15" fill="rgb(223,163,24)"/><text x="342.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (3 samples, 0.14%)</title><rect x="343" y="308" width="1" height="15" fill="rgb(237,165,7)"/><text x="346.00" y="318.50"></text></g><g><title>array_copy (methods.c:1127) (3 samples, 0.14%)</title><rect x="345" y="324" width="2" height="15" fill="rgb(214,38,44)"/><text x="348.00" y="334.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (6 samples, 0.28%)</title><rect x="349" y="436" width="3" height="15" fill="rgb(244,127,35)"/><text x="352.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (6 samples, 0.28%)</title><rect x="349" y="452" width="3" height="15" fill="rgb(221,48,44)"/><text x="352.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.28%)</title><rect x="349" y="468" width="3" height="15" fill="rgb(207,17,10)"/><text x="352.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (7 samples, 0.32%)</title><rect x="349" y="404" width="4" height="15" fill="rgb(254,83,0)"/><text x="352.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (7 samples, 0.32%)</title><rect x="349" y="420" width="4" height="15" fill="rgb(239,146,25)"/><text x="352.00" y="430.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (10 samples, 0.46%)</title><rect x="348" y="340" width="5" height="15" fill="rgb(228,139,13)"/><text x="351.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (9 samples, 0.41%)</title><rect x="348" y="356" width="5" height="15" fill="rgb(218,137,40)"/><text x="351.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (9 samples, 0.41%)</title><rect x="348" y="372" width="5" height="15" fill="rgb(217,126,43)"/><text x="351.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (9 samples, 0.41%)</title><rect x="348" y="388" width="5" height="15" fill="rgb(237,226,3)"/><text x="351.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (2 samples, 0.09%)</title><rect x="354" y="372" width="1" height="15" fill="rgb(213,48,33)"/><text x="357.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (4 samples, 0.18%)</title><rect x="355" y="372" width="2" height="15" fill="rgb(250,63,19)"/><text x="358.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (6 samples, 0.28%)</title><rect x="357" y="372" width="4" height="15" fill="rgb(239,208,39)"/><text x="360.00" y="382.50"></text></g><g><title>0x7f9e04f8bd94 (libc-2.29.so) (6 samples, 0.28%)</title><rect x="357" y="388" width="4" height="15" fill="rgb(251,224,3)"/><text x="360.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (4 samples, 0.18%)</title><rect x="361" y="372" width="2" height="15" fill="rgb(244,172,2)"/><text x="364.00" y="382.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (3 samples, 0.14%)</title><rect x="361" y="388" width="2" height="15" fill="rgb(239,53,20)"/><text x="364.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (37 samples, 1.70%)</title><rect x="344" y="308" width="20" height="15" fill="rgb(254,152,15)"/><text x="347.00" y="318.50"></text></g><g><title>array_copy (methods.c:1133) (31 samples, 1.42%)</title><rect x="348" y="324" width="16" height="15" fill="rgb(241,113,16)"/><text x="351.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (21 samples, 0.96%)</title><rect x="353" y="340" width="11" height="15" fill="rgb(215,43,53)"/><text x="356.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (19 samples, 0.87%)</title><rect x="354" y="356" width="10" height="15" fill="rgb(252,126,11)"/><text x="357.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (3 samples, 0.14%)</title><rect x="363" y="372" width="1" height="15" fill="rgb(242,68,46)"/><text x="366.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (3 samples, 0.14%)</title><rect x="363" y="388" width="1" height="15" fill="rgb(246,47,9)"/><text x="366.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.14%)</title><rect x="363" y="404" width="1" height="15" fill="rgb(220,46,10)"/><text x="366.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c:35) (3 samples, 0.14%)</title><rect x="370" y="356" width="2" height="15" fill="rgb(237,137,44)"/><text x="373.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (5 samples, 0.23%)</title><rect x="370" y="324" width="3" height="15" fill="rgb(230,98,30)"/><text x="373.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (5 samples, 0.23%)</title><rect x="370" y="340" width="3" height="15" fill="rgb(214,159,28)"/><text x="373.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (4 samples, 0.18%)</title><rect x="375" y="356" width="2" height="15" fill="rgb(250,160,22)"/><text x="378.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (7 samples, 0.32%)</title><rect x="374" y="340" width="4" height="15" fill="rgb(208,219,10)"/><text x="377.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (2 samples, 0.09%)</title><rect x="379" y="388" width="1" height="15" fill="rgb(216,181,42)"/><text x="382.00" y="398.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (2 samples, 0.09%)</title><rect x="379" y="404" width="1" height="15" fill="rgb(215,30,19)"/><text x="382.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (5 samples, 0.23%)</title><rect x="380" y="388" width="3" height="15" fill="rgb(209,203,36)"/><text x="383.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (5 samples, 0.23%)</title><rect x="380" y="404" width="3" height="15" fill="rgb(235,98,26)"/><text x="383.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (5 samples, 0.23%)</title><rect x="380" y="420" width="3" height="15" fill="rgb(214,144,23)"/><text x="383.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.23%)</title><rect x="380" y="436" width="3" height="15" fill="rgb(230,98,43)"/><text x="383.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (9 samples, 0.41%)</title><rect x="379" y="356" width="5" height="15" fill="rgb(225,86,16)"/><text x="382.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (9 samples, 0.41%)</title><rect x="379" y="372" width="5" height="15" fill="rgb(211,101,14)"/><text x="382.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (8 samples, 0.37%)</title><rect x="384" y="388" width="4" height="15" fill="rgb(217,8,19)"/><text x="387.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (8 samples, 0.37%)</title><rect x="384" y="404" width="4" height="15" fill="rgb(225,123,29)"/><text x="387.00" y="414.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (10 samples, 0.46%)</title><rect x="384" y="372" width="5" height="15" fill="rgb(226,170,53)"/><text x="387.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (2 samples, 0.09%)</title><rect x="388" y="388" width="1" height="15" fill="rgb(212,25,32)"/><text x="391.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (2 samples, 0.09%)</title><rect x="388" y="404" width="1" height="15" fill="rgb(228,97,18)"/><text x="391.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (22 samples, 1.01%)</title><rect x="378" y="340" width="12" height="15" fill="rgb(238,126,30)"/><text x="381.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (11 samples, 0.50%)</title><rect x="384" y="356" width="6" height="15" fill="rgb(205,92,13)"/><text x="387.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (32 samples, 1.47%)</title><rect x="373" y="324" width="17" height="15" fill="rgb(229,209,13)"/><text x="376.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (49 samples, 2.25%)</title><rect x="364" y="308" width="27" height="15" fill="rgb(224,24,2)"/><text x="367.00" y="318.50">_..</text></g><g><title>_buffer_clear_info (buffer.c:724) (3 samples, 0.14%)</title><rect x="398" y="356" width="2" height="15" fill="rgb(218,131,34)"/><text x="401.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (5 samples, 0.23%)</title><rect x="397" y="324" width="3" height="15" fill="rgb(214,12,21)"/><text x="400.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (4 samples, 0.18%)</title><rect x="398" y="340" width="2" height="15" fill="rgb(215,17,22)"/><text x="401.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (2 samples, 0.09%)</title><rect x="400" y="324" width="1" height="15" fill="rgb(222,48,50)"/><text x="403.00" y="334.50"></text></g><g><title>npy_free_cache (alloc.c:147) (2 samples, 0.09%)</title><rect x="400" y="340" width="1" height="15" fill="rgb(227,164,40)"/><text x="403.00" y="350.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (2 samples, 0.09%)</title><rect x="400" y="356" width="1" height="15" fill="rgb(227,148,4)"/><text x="403.00" y="366.50"></text></g><g><title>PyDataMem_FREE (alloc.c:273) (2 samples, 0.09%)</title><rect x="400" y="372" width="1" height="15" fill="rgb(222,9,25)"/><text x="403.00" y="382.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (5 samples, 0.23%)</title><rect x="401" y="324" width="3" height="15" fill="rgb(252,106,28)"/><text x="404.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:225) (2 samples, 0.09%)</title><rect x="408" y="340" width="1" height="15" fill="rgb(228,28,35)"/><text x="411.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (4 samples, 0.18%)</title><rect x="409" y="340" width="2" height="15" fill="rgb(208,69,36)"/><text x="412.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (3 samples, 0.14%)</title><rect x="411" y="340" width="2" height="15" fill="rgb(218,10,28)"/><text x="414.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (4 samples, 0.18%)</title><rect x="414" y="356" width="2" height="15" fill="rgb(227,209,42)"/><text x="417.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (4 samples, 0.18%)</title><rect x="426" y="388" width="2" height="15" fill="rgb(216,218,7)"/><text x="429.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (14 samples, 0.64%)</title><rect x="422" y="372" width="7" height="15" fill="rgb(210,92,45)"/><text x="425.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (3 samples, 0.14%)</title><rect x="428" y="388" width="1" height="15" fill="rgb(230,106,9)"/><text x="431.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (5 samples, 0.23%)</title><rect x="429" y="372" width="3" height="15" fill="rgb(214,224,34)"/><text x="432.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (2 samples, 0.09%)</title><rect x="436" y="436" width="1" height="15" fill="rgb(218,9,17)"/><text x="439.00" y="446.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (3 samples, 0.14%)</title><rect x="436" y="420" width="1" height="15" fill="rgb(236,183,3)"/><text x="439.00" y="430.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (5 samples, 0.23%)</title><rect x="436" y="388" width="3" height="15" fill="rgb(233,212,21)"/><text x="439.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (5 samples, 0.23%)</title><rect x="436" y="404" width="3" height="15" fill="rgb(230,144,3)"/><text x="439.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (2 samples, 0.09%)</title><rect x="437" y="420" width="2" height="15" fill="rgb(240,111,22)"/><text x="440.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (11 samples, 0.50%)</title><rect x="439" y="404" width="5" height="15" fill="rgb(206,148,4)"/><text x="442.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (2 samples, 0.09%)</title><rect x="444" y="404" width="2" height="15" fill="rgb(251,148,19)"/><text x="447.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (2 samples, 0.09%)</title><rect x="444" y="420" width="2" height="15" fill="rgb(214,13,33)"/><text x="447.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (2 samples, 0.09%)</title><rect x="444" y="436" width="2" height="15" fill="rgb(216,179,37)"/><text x="447.00" y="446.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (4 samples, 0.18%)</title><rect x="446" y="420" width="2" height="15" fill="rgb(234,176,2)"/><text x="449.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (3 samples, 0.14%)</title><rect x="447" y="436" width="1" height="15" fill="rgb(208,88,7)"/><text x="450.00" y="446.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (4 samples, 0.18%)</title><rect x="448" y="468" width="2" height="15" fill="rgb(238,98,45)"/><text x="451.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.14%)</title><rect x="449" y="484" width="1" height="15" fill="rgb(240,106,47)"/><text x="452.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (4 samples, 0.18%)</title><rect x="450" y="500" width="3" height="15" fill="rgb(215,190,44)"/><text x="453.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (4 samples, 0.18%)</title><rect x="450" y="516" width="3" height="15" fill="rgb(239,138,33)"/><text x="453.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (4 samples, 0.18%)</title><rect x="450" y="532" width="3" height="15" fill="rgb(215,67,1)"/><text x="453.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (4 samples, 0.18%)</title><rect x="450" y="548" width="3" height="15" fill="rgb(208,159,7)"/><text x="453.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.18%)</title><rect x="450" y="564" width="3" height="15" fill="rgb(247,34,50)"/><text x="453.00" y="574.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (9 samples, 0.41%)</title><rect x="448" y="436" width="5" height="15" fill="rgb(248,12,49)"/><text x="451.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (9 samples, 0.41%)</title><rect x="448" y="452" width="5" height="15" fill="rgb(230,21,0)"/><text x="451.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (5 samples, 0.23%)</title><rect x="450" y="468" width="3" height="15" fill="rgb(235,187,15)"/><text x="453.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (5 samples, 0.23%)</title><rect x="450" y="484" width="3" height="15" fill="rgb(243,23,23)"/><text x="453.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:204) (2 samples, 0.09%)</title><rect x="454" y="468" width="1" height="15" fill="rgb(231,51,50)"/><text x="457.00" y="478.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:255) (3 samples, 0.14%)</title><rect x="455" y="468" width="1" height="15" fill="rgb(205,221,39)"/><text x="458.00" y="478.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c:3793) (2 samples, 0.09%)</title><rect x="455" y="484" width="1" height="15" fill="rgb(206,113,13)"/><text x="458.00" y="494.50"></text></g><g><title>npy_uint_alignment (common.h:216) (2 samples, 0.09%)</title><rect x="455" y="500" width="1" height="15" fill="rgb(247,219,33)"/><text x="458.00" y="510.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:49) (2 samples, 0.09%)</title><rect x="457" y="484" width="1" height="15" fill="rgb(239,203,35)"/><text x="460.00" y="494.50"></text></g><g><title>npy_uint_alignment (common.h:216) (2 samples, 0.09%)</title><rect x="457" y="500" width="1" height="15" fill="rgb(241,40,12)"/><text x="460.00" y="510.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (2 samples, 0.09%)</title><rect x="458" y="484" width="1" height="15" fill="rgb(237,167,34)"/><text x="461.00" y="494.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:80) (2 samples, 0.09%)</title><rect x="459" y="484" width="1" height="15" fill="rgb(223,42,22)"/><text x="462.00" y="494.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:87) (4 samples, 0.18%)</title><rect x="461" y="484" width="2" height="15" fill="rgb(250,23,22)"/><text x="464.00" y="494.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src:228) (4 samples, 0.18%)</title><rect x="461" y="500" width="2" height="15" fill="rgb(246,0,9)"/><text x="464.00" y="510.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:90) (2 samples, 0.09%)</title><rect x="463" y="484" width="1" height="15" fill="rgb(220,146,7)"/><text x="466.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (23 samples, 1.05%)</title><rect x="453" y="436" width="13" height="15" fill="rgb(205,161,30)"/><text x="456.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (22 samples, 1.01%)</title><rect x="454" y="452" width="12" height="15" fill="rgb(226,138,38)"/><text x="457.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (17 samples, 0.78%)</title><rect x="456" y="468" width="10" height="15" fill="rgb(244,57,46)"/><text x="459.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:92) (3 samples, 0.14%)</title><rect x="464" y="484" width="2" height="15" fill="rgb(230,42,13)"/><text x="467.00" y="494.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (2 samples, 0.09%)</title><rect x="465" y="500" width="1" height="15" fill="rgb(254,2,1)"/><text x="468.00" y="510.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (2 samples, 0.09%)</title><rect x="467" y="452" width="1" height="15" fill="rgb(254,22,44)"/><text x="470.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (3 samples, 0.14%)</title><rect x="468" y="452" width="2" height="15" fill="rgb(251,143,5)"/><text x="471.00" y="462.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c:1637) (2 samples, 0.09%)</title><rect x="469" y="468" width="1" height="15" fill="rgb(239,26,10)"/><text x="472.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:471) (2 samples, 0.09%)</title><rect x="470" y="452" width="1" height="15" fill="rgb(209,200,12)"/><text x="473.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (14 samples, 0.64%)</title><rect x="466" y="436" width="7" height="15" fill="rgb(249,136,36)"/><text x="469.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (4 samples, 0.18%)</title><rect x="471" y="452" width="2" height="15" fill="rgb(209,133,32)"/><text x="474.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (3 samples, 0.14%)</title><rect x="473" y="436" width="2" height="15" fill="rgb(209,193,28)"/><text x="476.00" y="446.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (2 samples, 0.09%)</title><rect x="474" y="452" width="1" height="15" fill="rgb(236,215,6)"/><text x="477.00" y="462.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (2 samples, 0.09%)</title><rect x="474" y="468" width="1" height="15" fill="rgb(214,194,30)"/><text x="477.00" y="478.50"></text></g><g><title>fetestexcept (libm-2.29.so) (2 samples, 0.09%)</title><rect x="474" y="484" width="1" height="15" fill="rgb(246,135,34)"/><text x="477.00" y="494.50"></text></g><g><title>reduce_loop (ufunc_object.c:3533) (3 samples, 0.14%)</title><rect x="476" y="452" width="1" height="15" fill="rgb(217,44,3)"/><text x="479.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3536) (8 samples, 0.37%)</title><rect x="478" y="452" width="4" height="15" fill="rgb(233,105,28)"/><text x="481.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3540) (7 samples, 0.32%)</title><rect x="482" y="452" width="4" height="15" fill="rgb(206,13,1)"/><text x="485.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (5 samples, 0.23%)</title><rect x="486" y="452" width="3" height="15" fill="rgb(214,185,20)"/><text x="489.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (16 samples, 0.73%)</title><rect x="490" y="468" width="9" height="15" fill="rgb(248,72,52)"/><text x="493.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (6 samples, 0.28%)</title><rect x="499" y="468" width="3" height="15" fill="rgb(212,44,15)"/><text x="502.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1662) (9 samples, 0.41%)</title><rect x="510" y="484" width="5" height="15" fill="rgb(245,101,18)"/><text x="513.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1667) (31 samples, 1.42%)</title><rect x="515" y="484" width="17" height="15" fill="rgb(222,194,33)"/><text x="518.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (57 samples, 2.61%)</title><rect x="502" y="468" width="31" height="15" fill="rgb(232,154,0)"/><text x="505.00" y="478.50">FL..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (15 samples, 0.69%)</title><rect x="534" y="468" width="8" height="15" fill="rgb(216,108,13)"/><text x="537.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (6 samples, 0.28%)</title><rect x="542" y="468" width="3" height="15" fill="rgb(224,69,41)"/><text x="545.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:235) (7 samples, 0.32%)</title><rect x="545" y="468" width="4" height="15" fill="rgb(215,187,21)"/><text x="548.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (5 samples, 0.23%)</title><rect x="549" y="468" width="3" height="15" fill="rgb(208,30,44)"/><text x="552.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:240) (3 samples, 0.14%)</title><rect x="552" y="468" width="1" height="15" fill="rgb(213,30,47)"/><text x="555.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (3 samples, 0.14%)</title><rect x="553" y="468" width="2" height="15" fill="rgb(222,174,50)"/><text x="556.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:243) (3 samples, 0.14%)</title><rect x="555" y="468" width="1" height="15" fill="rgb(208,224,15)"/><text x="558.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:244) (4 samples, 0.18%)</title><rect x="556" y="468" width="3" height="15" fill="rgb(238,189,6)"/><text x="559.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (2 samples, 0.09%)</title><rect x="559" y="468" width="1" height="15" fill="rgb(236,60,21)"/><text x="562.00" y="478.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (135 samples, 6.19%)</title><rect x="489" y="452" width="73" height="15" fill="rgb(214,86,7)"/><text x="492.00" y="462.50">reduce_l..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:268) (4 samples, 0.18%)</title><rect x="560" y="468" width="2" height="15" fill="rgb(241,219,27)"/><text x="563.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (161 samples, 7.38%)</title><rect x="475" y="436" width="87" height="15" fill="rgb(242,15,46)"/><text x="478.00" y="446.50">PyUFunc_Re..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:583) (3 samples, 0.14%)</title><rect x="562" y="436" width="2" height="15" fill="rgb(231,120,42)"/><text x="565.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (2 samples, 0.09%)</title><rect x="564" y="436" width="1" height="15" fill="rgb(221,5,16)"/><text x="567.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (2 samples, 0.09%)</title><rect x="564" y="452" width="1" height="15" fill="rgb(226,203,47)"/><text x="567.00" y="462.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (428 samples, 19.62%)</title><rect x="334" y="276" width="232" height="15" fill="rgb(251,117,11)"/><text x="337.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (417 samples, 19.12%)</title><rect x="340" y="292" width="226" height="15" fill="rgb(213,80,35)"/><text x="343.00" y="302.50">run (mlprodict/onnxrt/ops_cpu..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (323 samples, 14.81%)</title><rect x="391" y="308" width="175" height="15" fill="rgb(226,175,11)"/><text x="394.00" y="318.50">_run (mlprodict/onnxrt..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (299 samples, 13.71%)</title><rect x="404" y="324" width="162" height="15" fill="rgb(220,95,38)"/><text x="407.00" y="334.50">sum (&lt;__array_functi..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (283 samples, 12.98%)</title><rect x="413" y="340" width="153" height="15" fill="rgb(212,118,54)"/><text x="416.00" y="350.50">array_implement_arr..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (276 samples, 12.65%)</title><rect x="416" y="356" width="150" height="15" fill="rgb(231,76,38)"/><text x="419.00" y="366.50">sum (numpy/core/fro..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (247 samples, 11.33%)</title><rect x="432" y="372" width="134" height="15" fill="rgb(249,78,49)"/><text x="435.00" y="382.50">_wrapreduction (..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (235 samples, 10.77%)</title><rect x="439" y="388" width="127" height="15" fill="rgb(229,82,4)"/><text x="442.00" y="398.50">ufunc_reduce (u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (222 samples, 10.18%)</title><rect x="446" y="404" width="120" height="15" fill="rgb(230,158,54)"/><text x="449.00" y="414.50">PyUFunc_Generi..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (217 samples, 9.95%)</title><rect x="448" y="420" width="118" height="15" fill="rgb(216,180,9)"/><text x="451.00" y="430.50">PyUFunc_Reduce..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (16 samples, 0.73%)</title><rect x="566" y="276" width="8" height="15" fill="rgb(225,138,28)"/><text x="569.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:353) (3 samples, 0.14%)</title><rect x="574" y="276" width="2" height="15" fill="rgb(246,84,10)"/><text x="577.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (3 samples, 0.14%)</title><rect x="577" y="292" width="1" height="15" fill="rgb(241,23,48)"/><text x="580.00" y="302.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1848) (2 samples, 0.09%)</title><rect x="585" y="388" width="1" height="15" fill="rgb(234,44,32)"/><text x="588.00" y="398.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (5 samples, 0.23%)</title><rect x="585" y="372" width="3" height="15" fill="rgb(242,66,46)"/><text x="588.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (6 samples, 0.28%)</title><rect x="585" y="340" width="3" height="15" fill="rgb(216,41,48)"/><text x="588.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (6 samples, 0.28%)</title><rect x="585" y="356" width="3" height="15" fill="rgb(218,14,42)"/><text x="588.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (2 samples, 0.09%)</title><rect x="589" y="388" width="2" height="15" fill="rgb(211,185,15)"/><text x="592.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (2 samples, 0.09%)</title><rect x="592" y="388" width="1" height="15" fill="rgb(231,191,40)"/><text x="595.00" y="398.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c:1544) (2 samples, 0.09%)</title><rect x="592" y="404" width="1" height="15" fill="rgb(221,156,38)"/><text x="595.00" y="414.50"></text></g><g><title>0x7f9e0418e1c0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="592" y="420" width="1" height="15" fill="rgb(248,51,26)"/><text x="595.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (2 samples, 0.09%)</title><rect x="595" y="452" width="1" height="15" fill="rgb(223,194,49)"/><text x="598.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (2 samples, 0.09%)</title><rect x="595" y="468" width="1" height="15" fill="rgb(235,88,47)"/><text x="598.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.09%)</title><rect x="595" y="484" width="1" height="15" fill="rgb(234,87,21)"/><text x="598.00" y="494.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.09%)</title><rect x="595" y="500" width="1" height="15" fill="rgb(213,214,21)"/><text x="598.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="595" y="516" width="1" height="15" fill="rgb(213,113,10)"/><text x="598.00" y="526.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (6 samples, 0.28%)</title><rect x="594" y="404" width="3" height="15" fill="rgb(246,114,1)"/><text x="597.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (4 samples, 0.18%)</title><rect x="595" y="420" width="2" height="15" fill="rgb(219,54,32)"/><text x="598.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (4 samples, 0.18%)</title><rect x="595" y="436" width="2" height="15" fill="rgb(254,144,8)"/><text x="598.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (10 samples, 0.46%)</title><rect x="593" y="388" width="6" height="15" fill="rgb(235,200,21)"/><text x="596.00" y="398.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2995) (2 samples, 0.09%)</title><rect x="598" y="404" width="1" height="15" fill="rgb(218,136,15)"/><text x="601.00" y="414.50"></text></g><g><title>IsUintAligned (array_assign.c:148) (2 samples, 0.09%)</title><rect x="598" y="420" width="1" height="15" fill="rgb(220,136,5)"/><text x="601.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (19 samples, 0.87%)</title><rect x="589" y="372" width="11" height="15" fill="rgb(211,186,0)"/><text x="592.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (2 samples, 0.09%)</title><rect x="599" y="388" width="1" height="15" fill="rgb(207,46,18)"/><text x="602.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:306) (2 samples, 0.09%)</title><rect x="600" y="388" width="1" height="15" fill="rgb(245,106,18)"/><text x="603.00" y="398.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (2 samples, 0.09%)</title><rect x="600" y="404" width="1" height="15" fill="rgb(216,192,50)"/><text x="603.00" y="414.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2066) (2 samples, 0.09%)</title><rect x="602" y="404" width="2" height="15" fill="rgb(223,58,43)"/><text x="605.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (15 samples, 0.69%)</title><rect x="606" y="420" width="8" height="15" fill="rgb(248,199,37)"/><text x="609.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (2 samples, 0.09%)</title><rect x="614" y="420" width="1" height="15" fill="rgb(253,39,12)"/><text x="617.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (7 samples, 0.32%)</title><rect x="615" y="420" width="4" height="15" fill="rgb(233,129,13)"/><text x="618.00" y="430.50"></text></g><g><title>0x7f9e04f8bd50 (libc-2.29.so) (9 samples, 0.41%)</title><rect x="619" y="436" width="5" height="15" fill="rgb(252,229,3)"/><text x="622.00" y="446.50"></text></g><g><title>0x7f9e04f8bd67 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="624" y="436" width="1" height="15" fill="rgb(236,36,14)"/><text x="627.00" y="446.50"></text></g><g><title>0x7f9e04f8bd6f (libc-2.29.so) (6 samples, 0.28%)</title><rect x="625" y="436" width="3" height="15" fill="rgb(237,32,6)"/><text x="628.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (22 samples, 1.01%)</title><rect x="619" y="420" width="12" height="15" fill="rgb(231,166,44)"/><text x="622.00" y="430.50"></text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src:330) (4 samples, 0.18%)</title><rect x="628" y="436" width="3" height="15" fill="rgb(217,162,42)"/><text x="631.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1025) (2 samples, 0.09%)</title><rect x="631" y="420" width="1" height="15" fill="rgb(229,198,37)"/><text x="634.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (63 samples, 2.89%)</title><rect x="600" y="372" width="34" height="15" fill="rgb(228,211,34)"/><text x="603.00" y="382.50">it..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (60 samples, 2.75%)</title><rect x="602" y="388" width="32" height="15" fill="rgb(249,194,20)"/><text x="605.00" y="398.50">Np..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (54 samples, 2.48%)</title><rect x="605" y="404" width="29" height="15" fill="rgb(248,207,28)"/><text x="608.00" y="414.50">np..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:996) (2 samples, 0.09%)</title><rect x="633" y="420" width="1" height="15" fill="rgb(217,191,36)"/><text x="636.00" y="430.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (5 samples, 0.23%)</title><rect x="637" y="420" width="2" height="15" fill="rgb(239,0,47)"/><text x="640.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (5 samples, 0.23%)</title><rect x="637" y="436" width="2" height="15" fill="rgb(231,150,21)"/><text x="640.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (12 samples, 0.55%)</title><rect x="635" y="388" width="7" height="15" fill="rgb(209,207,28)"/><text x="638.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (12 samples, 0.55%)</title><rect x="635" y="404" width="7" height="15" fill="rgb(217,109,34)"/><text x="638.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (5 samples, 0.23%)</title><rect x="639" y="420" width="3" height="15" fill="rgb(234,150,20)"/><text x="642.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 0.23%)</title><rect x="639" y="436" width="3" height="15" fill="rgb(248,166,42)"/><text x="642.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (16 samples, 0.73%)</title><rect x="635" y="372" width="9" height="15" fill="rgb(224,17,23)"/><text x="638.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:309) (3 samples, 0.14%)</title><rect x="643" y="388" width="1" height="15" fill="rgb(218,4,33)"/><text x="646.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (4 samples, 0.18%)</title><rect x="645" y="388" width="2" height="15" fill="rgb(222,214,22)"/><text x="648.00" y="398.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (2 samples, 0.09%)</title><rect x="647" y="388" width="1" height="15" fill="rgb(234,7,6)"/><text x="650.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (110 samples, 5.04%)</title><rect x="589" y="356" width="60" height="15" fill="rgb(210,61,22)"/><text x="592.00" y="366.50">execut..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (9 samples, 0.41%)</title><rect x="644" y="372" width="5" height="15" fill="rgb(243,57,54)"/><text x="647.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (112 samples, 5.14%)</title><rect x="589" y="340" width="61" height="15" fill="rgb(229,2,42)"/><text x="592.00" y="350.50">PyUFun..</text></g><g><title>_check_ufunc_fperr (extobj.c:276) (2 samples, 0.09%)</title><rect x="650" y="356" width="1" height="15" fill="rgb(244,124,45)"/><text x="653.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (126 samples, 5.78%)</title><rect x="584" y="324" width="68" height="15" fill="rgb(252,89,40)"/><text x="587.00" y="334.50">ufunc_g..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (3 samples, 0.14%)</title><rect x="650" y="340" width="2" height="15" fill="rgb(242,88,15)"/><text x="653.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (141 samples, 6.46%)</title><rect x="576" y="276" width="76" height="15" fill="rgb(216,111,30)"/><text x="579.00" y="286.50">run (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (137 samples, 6.28%)</title><rect x="578" y="292" width="74" height="15" fill="rgb(206,43,38)"/><text x="581.00" y="302.50">run (mlp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (134 samples, 6.14%)</title><rect x="580" y="308" width="72" height="15" fill="rgb(239,207,35)"/><text x="583.00" y="318.50">_run (ml..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (619 samples, 28.38%)</title><rect x="318" y="260" width="335" height="15" fill="rgb(212,225,35)"/><text x="321.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (2 samples, 0.09%)</title><rect x="652" y="276" width="1" height="15" fill="rgb(245,25,51)"/><text x="655.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (10 samples, 0.46%)</title><rect x="653" y="260" width="6" height="15" fill="rgb(208,26,5)"/><text x="656.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (15 samples, 0.69%)</title><rect x="659" y="260" width="8" height="15" fill="rgb(218,37,40)"/><text x="662.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (10 samples, 0.46%)</title><rect x="667" y="260" width="5" height="15" fill="rgb(208,4,51)"/><text x="670.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (33 samples, 1.51%)</title><rect x="672" y="260" width="18" height="15" fill="rgb(233,71,43)"/><text x="675.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (773 samples, 35.44%)</title><rect x="276" y="244" width="418" height="15" fill="rgb(211,111,7)"/><text x="279.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (8 samples, 0.37%)</title><rect x="690" y="260" width="4" height="15" fill="rgb(218,57,11)"/><text x="693.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (12 samples, 0.55%)</title><rect x="694" y="244" width="7" height="15" fill="rgb(209,139,46)"/><text x="697.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (8 samples, 0.37%)</title><rect x="697" y="260" width="4" height="15" fill="rgb(206,182,29)"/><text x="700.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (824 samples, 37.78%)</title><rect x="257" y="212" width="446" height="15" fill="rgb(212,180,34)"/><text x="260.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (806 samples, 36.96%)</title><rect x="266" y="228" width="437" height="15" fill="rgb(221,109,20)"/><text x="269.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (8 samples, 0.37%)</title><rect x="703" y="212" width="4" height="15" fill="rgb(243,0,9)"/><text x="706.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (2 samples, 0.09%)</title><rect x="706" y="228" width="1" height="15" fill="rgb(252,169,47)"/><text x="709.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (5 samples, 0.23%)</title><rect x="707" y="212" width="3" height="15" fill="rgb(252,141,31)"/><text x="710.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (4 samples, 0.18%)</title><rect x="715" y="228" width="2" height="15" fill="rgb(253,175,10)"/><text x="718.00" y="238.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:5) (2 samples, 0.09%)</title><rect x="717" y="228" width="1" height="15" fill="rgb(233,217,28)"/><text x="720.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (2 samples, 0.09%)</title><rect x="722" y="244" width="1" height="15" fill="rgb(231,153,35)"/><text x="725.00" y="254.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1579) (2 samples, 0.09%)</title><rect x="730" y="292" width="1" height="15" fill="rgb(221,71,37)"/><text x="733.00" y="302.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (10 samples, 0.46%)</title><rect x="727" y="276" width="5" height="15" fill="rgb(213,16,42)"/><text x="730.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1610) (2 samples, 0.09%)</title><rect x="731" y="292" width="1" height="15" fill="rgb(245,203,40)"/><text x="734.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (11 samples, 0.50%)</title><rect x="727" y="260" width="6" height="15" fill="rgb(212,222,2)"/><text x="730.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (7 samples, 0.32%)</title><rect x="733" y="260" width="4" height="15" fill="rgb(214,14,3)"/><text x="736.00" y="270.50"></text></g><g><title>array_reshape (methods.c:195) (4 samples, 0.18%)</title><rect x="746" y="276" width="2" height="15" fill="rgb(215,132,36)"/><text x="749.00" y="286.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (5 samples, 0.23%)</title><rect x="748" y="308" width="3" height="15" fill="rgb(248,214,42)"/><text x="751.00" y="318.50"></text></g><g><title>array_reshape (methods.c:210) (6 samples, 0.28%)</title><rect x="748" y="276" width="3" height="15" fill="rgb(215,144,38)"/><text x="751.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (6 samples, 0.28%)</title><rect x="748" y="292" width="3" height="15" fill="rgb(226,136,3)"/><text x="751.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (79 samples, 3.62%)</title><rect x="710" y="212" width="42" height="15" fill="rgb(242,201,50)"/><text x="713.00" y="222.50">_ru..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (63 samples, 2.89%)</title><rect x="718" y="228" width="34" height="15" fill="rgb(218,219,1)"/><text x="721.00" y="238.50">ex..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (54 samples, 2.48%)</title><rect x="723" y="244" width="29" height="15" fill="rgb(242,147,23)"/><text x="726.00" y="254.50">ar..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (29 samples, 1.33%)</title><rect x="737" y="260" width="15" height="15" fill="rgb(227,164,42)"/><text x="740.00" y="270.50"></text></g><g><title>array_reshape (methods.c:211) (2 samples, 0.09%)</title><rect x="751" y="276" width="1" height="15" fill="rgb(235,9,33)"/><text x="754.00" y="286.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (2 samples, 0.09%)</title><rect x="752" y="260" width="1" height="15" fill="rgb(209,169,50)"/><text x="755.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (2 samples, 0.09%)</title><rect x="752" y="276" width="1" height="15" fill="rgb(247,133,48)"/><text x="755.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.09%)</title><rect x="752" y="292" width="1" height="15" fill="rgb(254,107,18)"/><text x="755.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (2 samples, 0.09%)</title><rect x="752" y="308" width="1" height="15" fill="rgb(243,157,35)"/><text x="755.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (7 samples, 0.32%)</title><rect x="752" y="212" width="4" height="15" fill="rgb(206,195,7)"/><text x="755.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (7 samples, 0.32%)</title><rect x="752" y="228" width="4" height="15" fill="rgb(216,150,1)"/><text x="755.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.32%)</title><rect x="752" y="244" width="4" height="15" fill="rgb(205,66,19)"/><text x="755.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (5 samples, 0.23%)</title><rect x="753" y="260" width="3" height="15" fill="rgb(222,19,20)"/><text x="756.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (5 samples, 0.23%)</title><rect x="753" y="276" width="3" height="15" fill="rgb(218,21,38)"/><text x="756.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.18%)</title><rect x="754" y="292" width="2" height="15" fill="rgb(216,205,46)"/><text x="757.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (4 samples, 0.18%)</title><rect x="754" y="308" width="2" height="15" fill="rgb(207,100,12)"/><text x="757.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (4 samples, 0.18%)</title><rect x="754" y="324" width="2" height="15" fill="rgb(222,183,49)"/><text x="757.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (4 samples, 0.18%)</title><rect x="754" y="340" width="2" height="15" fill="rgb(222,30,14)"/><text x="757.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (4 samples, 0.18%)</title><rect x="754" y="356" width="2" height="15" fill="rgb(239,49,25)"/><text x="757.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (4 samples, 0.18%)</title><rect x="754" y="372" width="2" height="15" fill="rgb(205,101,44)"/><text x="757.00" y="382.50"></text></g><g><title>0x7f9e04f8bd94 (libc-2.29.so) (4 samples, 0.18%)</title><rect x="754" y="388" width="2" height="15" fill="rgb(230,49,52)"/><text x="757.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c:1048) (4 samples, 0.18%)</title><rect x="758" y="356" width="2" height="15" fill="rgb(237,106,13)"/><text x="761.00" y="366.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src:1915) (4 samples, 0.18%)</title><rect x="758" y="372" width="2" height="15" fill="rgb(211,173,18)"/><text x="761.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:319) (4 samples, 0.18%)</title><rect x="758" y="388" width="2" height="15" fill="rgb(239,79,34)"/><text x="761.00" y="398.50"></text></g><g><title>amedian3_swap_float (selection.c.src:137) (2 samples, 0.09%)</title><rect x="763" y="388" width="1" height="15" fill="rgb(239,185,5)"/><text x="766.00" y="398.50"></text></g><g><title>aintroselect_float (selection.c.src:357) (7 samples, 0.32%)</title><rect x="762" y="372" width="3" height="15" fill="rgb(239,59,36)"/><text x="765.00" y="382.50"></text></g><g><title>amedian3_swap_float (selection.c.src:140) (2 samples, 0.09%)</title><rect x="764" y="388" width="1" height="15" fill="rgb(243,151,16)"/><text x="767.00" y="398.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:201) (51 samples, 2.34%)</title><rect x="766" y="388" width="27" height="15" fill="rgb(214,190,1)"/><text x="769.00" y="398.50">a..</text></g><g><title>FLOAT_LT (npysort_common.h:123) (34 samples, 1.56%)</title><rect x="775" y="404" width="18" height="15" fill="rgb(213,193,7)"/><text x="778.00" y="414.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:202) (37 samples, 1.70%)</title><rect x="793" y="388" width="20" height="15" fill="rgb(242,139,0)"/><text x="796.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (15 samples, 0.69%)</title><rect x="805" y="404" width="8" height="15" fill="rgb(220,73,37)"/><text x="808.00" y="414.50"></text></g><g><title>aintroselect_float (selection.c.src:380) (94 samples, 4.31%)</title><rect x="765" y="372" width="51" height="15" fill="rgb(245,116,33)"/><text x="768.00" y="382.50">aintr..</text></g><g><title>aunguarded_partition_float (selection.c.src:207) (4 samples, 0.18%)</title><rect x="814" y="388" width="2" height="15" fill="rgb(242,139,27)"/><text x="817.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (106 samples, 4.86%)</title><rect x="760" y="356" width="57" height="15" fill="rgb(245,181,25)"/><text x="763.00" y="366.50">_new_a..</text></g><g><title>_new_argsortlike (item_selection.c:1101) (2 samples, 0.09%)</title><rect x="817" y="356" width="1" height="15" fill="rgb(251,92,42)"/><text x="820.00" y="366.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (113 samples, 5.18%)</title><rect x="758" y="244" width="61" height="15" fill="rgb(211,117,44)"/><text x="761.00" y="254.50">topk_s..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (113 samples, 5.18%)</title><rect x="758" y="260" width="61" height="15" fill="rgb(229,219,37)"/><text x="761.00" y="270.50">argpar..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (113 samples, 5.18%)</title><rect x="758" y="276" width="61" height="15" fill="rgb(241,108,15)"/><text x="761.00" y="286.50">array_..</text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (113 samples, 5.18%)</title><rect x="758" y="292" width="61" height="15" fill="rgb(239,35,13)"/><text x="761.00" y="302.50">argpar..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (113 samples, 5.18%)</title><rect x="758" y="308" width="61" height="15" fill="rgb(222,203,46)"/><text x="761.00" y="318.50">_wrapf..</text></g><g><title>array_argpartition (methods.c:1454) (113 samples, 5.18%)</title><rect x="758" y="324" width="61" height="15" fill="rgb(225,208,39)"/><text x="761.00" y="334.50">array_..</text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (113 samples, 5.18%)</title><rect x="758" y="340" width="61" height="15" fill="rgb(243,39,43)"/><text x="761.00" y="350.50">PyArra..</text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (2 samples, 0.09%)</title><rect x="819" y="260" width="2" height="15" fill="rgb(215,164,16)"/><text x="822.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.09%)</title><rect x="819" y="276" width="2" height="15" fill="rgb(206,157,17)"/><text x="822.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (2 samples, 0.09%)</title><rect x="819" y="292" width="2" height="15" fill="rgb(231,51,19)"/><text x="822.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (2 samples, 0.09%)</title><rect x="819" y="308" width="2" height="15" fill="rgb(248,151,4)"/><text x="822.00" y="318.50"></text></g><g><title>array_argsort (methods.c:1395) (2 samples, 0.09%)</title><rect x="819" y="324" width="2" height="15" fill="rgb(237,107,41)"/><text x="822.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c:1322) (2 samples, 0.09%)</title><rect x="819" y="340" width="2" height="15" fill="rgb(215,194,23)"/><text x="822.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1064) (2 samples, 0.09%)</title><rect x="819" y="356" width="2" height="15" fill="rgb(241,158,30)"/><text x="822.00" y="366.50"></text></g><g><title>aquicksort_float (quicksort.c.src:222) (2 samples, 0.09%)</title><rect x="819" y="372" width="2" height="15" fill="rgb(227,173,28)"/><text x="822.00" y="382.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1564) (4 samples, 0.18%)</title><rect x="821" y="276" width="2" height="15" fill="rgb(247,61,6)"/><text x="824.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1566) (3 samples, 0.14%)</title><rect x="823" y="276" width="2" height="15" fill="rgb(220,186,47)"/><text x="826.00" y="286.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (13 samples, 0.60%)</title><rect x="819" y="244" width="7" height="15" fill="rgb(237,195,12)"/><text x="822.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (9 samples, 0.41%)</title><rect x="821" y="260" width="5" height="15" fill="rgb(221,199,1)"/><text x="824.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1581) (2 samples, 0.09%)</title><rect x="825" y="276" width="1" height="15" fill="rgb(227,103,41)"/><text x="828.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (132 samples, 6.05%)</title><rect x="757" y="212" width="71" height="15" fill="rgb(210,86,29)"/><text x="760.00" y="222.50">_run (ml..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (131 samples, 6.01%)</title><rect x="757" y="228" width="71" height="15" fill="rgb(225,42,30)"/><text x="760.00" y="238.50">_common_..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (4 samples, 0.18%)</title><rect x="826" y="244" width="2" height="15" fill="rgb(239,214,50)"/><text x="829.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (1,147 samples, 52.59%)</title><rect x="209" y="196" width="620" height="15" fill="rgb(222,162,32)"/><text x="212.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (2 samples, 0.09%)</title><rect x="829" y="196" width="1" height="15" fill="rgb(235,220,8)"/><text x="832.00" y="206.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (2 samples, 0.09%)</title><rect x="831" y="356" width="1" height="15" fill="rgb(251,193,13)"/><text x="834.00" y="366.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (2 samples, 0.09%)</title><rect x="831" y="372" width="1" height="15" fill="rgb(229,142,53)"/><text x="834.00" y="382.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (2 samples, 0.09%)</title><rect x="832" y="356" width="1" height="15" fill="rgb(236,60,40)"/><text x="835.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (2 samples, 0.09%)</title><rect x="832" y="372" width="1" height="15" fill="rgb(212,150,23)"/><text x="835.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (7 samples, 0.32%)</title><rect x="830" y="228" width="4" height="15" fill="rgb(215,123,23)"/><text x="833.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (7 samples, 0.32%)</title><rect x="830" y="244" width="4" height="15" fill="rgb(254,85,8)"/><text x="833.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.32%)</title><rect x="830" y="260" width="4" height="15" fill="rgb(225,141,10)"/><text x="833.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (6 samples, 0.28%)</title><rect x="831" y="276" width="3" height="15" fill="rgb(253,125,12)"/><text x="834.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (6 samples, 0.28%)</title><rect x="831" y="292" width="3" height="15" fill="rgb(209,84,34)"/><text x="834.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (6 samples, 0.28%)</title><rect x="831" y="308" width="3" height="15" fill="rgb(247,14,47)"/><text x="834.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (6 samples, 0.28%)</title><rect x="831" y="324" width="3" height="15" fill="rgb(208,27,30)"/><text x="834.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (6 samples, 0.28%)</title><rect x="831" y="340" width="3" height="15" fill="rgb(245,166,25)"/><text x="834.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (15 samples, 0.69%)</title><rect x="830" y="196" width="8" height="15" fill="rgb(232,174,23)"/><text x="833.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (15 samples, 0.69%)</title><rect x="830" y="212" width="8" height="15" fill="rgb(218,159,26)"/><text x="833.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (8 samples, 0.37%)</title><rect x="834" y="228" width="4" height="15" fill="rgb(232,111,30)"/><text x="837.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 0.37%)</title><rect x="834" y="244" width="4" height="15" fill="rgb(244,116,7)"/><text x="837.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (8 samples, 0.37%)</title><rect x="834" y="260" width="4" height="15" fill="rgb(230,21,53)"/><text x="837.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (7 samples, 0.32%)</title><rect x="835" y="276" width="3" height="15" fill="rgb(236,142,29)"/><text x="838.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (7 samples, 0.32%)</title><rect x="835" y="292" width="3" height="15" fill="rgb(207,172,2)"/><text x="838.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src:1584) (7 samples, 0.32%)</title><rect x="835" y="308" width="3" height="15" fill="rgb(220,85,5)"/><text x="838.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src:195) (7 samples, 0.32%)</title><rect x="835" y="324" width="3" height="15" fill="rgb(237,133,35)"/><text x="838.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src:1005) (7 samples, 0.32%)</title><rect x="835" y="340" width="3" height="15" fill="rgb(227,205,30)"/><text x="838.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (7 samples, 0.32%)</title><rect x="835" y="356" width="3" height="15" fill="rgb(240,13,15)"/><text x="838.00" y="366.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (2 samples, 0.09%)</title><rect x="839" y="276" width="1" height="15" fill="rgb(224,99,7)"/><text x="842.00" y="286.50"></text></g><g><title>LONG_equal (loops.c.src:814) (2 samples, 0.09%)</title><rect x="839" y="292" width="1" height="15" fill="rgb(219,226,50)"/><text x="842.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (4 samples, 0.18%)</title><rect x="838" y="196" width="3" height="15" fill="rgb(247,13,32)"/><text x="841.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py:17) (4 samples, 0.18%)</title><rect x="838" y="212" width="3" height="15" fill="rgb(240,172,35)"/><text x="841.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.18%)</title><rect x="838" y="228" width="3" height="15" fill="rgb(206,188,46)"/><text x="841.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.14%)</title><rect x="839" y="244" width="2" height="15" fill="rgb(248,193,50)"/><text x="842.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.14%)</title><rect x="839" y="260" width="2" height="15" fill="rgb(215,139,31)"/><text x="842.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,173 samples, 53.78%)</title><rect x="207" y="180" width="635" height="15" fill="rgb(243,146,48)"/><text x="210.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (2 samples, 0.09%)</title><rect x="841" y="196" width="1" height="15" fill="rgb(237,91,48)"/><text x="844.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (2 samples, 0.09%)</title><rect x="841" y="212" width="1" height="15" fill="rgb(233,215,51)"/><text x="844.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py:18) (2 samples, 0.09%)</title><rect x="841" y="228" width="1" height="15" fill="rgb(207,160,44)"/><text x="844.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (2 samples, 0.09%)</title><rect x="841" y="244" width="1" height="15" fill="rgb(222,53,31)"/><text x="844.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.09%)</title><rect x="841" y="260" width="1" height="15" fill="rgb(214,54,32)"/><text x="844.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.09%)</title><rect x="841" y="276" width="1" height="15" fill="rgb(206,120,20)"/><text x="844.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (2 samples, 0.09%)</title><rect x="841" y="292" width="1" height="15" fill="rgb(254,67,50)"/><text x="844.00" y="302.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,178 samples, 54.01%)</title><rect x="206" y="164" width="637" height="15" fill="rgb(226,10,30)"/><text x="209.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:45) (1,292 samples, 59.24%)</title><rect x="145" y="52" width="699" height="15" fill="rgb(224,174,47)"/><text x="148.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:45)</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:44) (1,292 samples, 59.24%)</title><rect x="145" y="68" width="699" height="15" fill="rgb(237,135,8)"/><text x="148.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:44)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:29) (1,291 samples, 59.19%)</title><rect x="145" y="84" width="699" height="15" fill="rgb(206,20,14)"/><text x="148.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:29)</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:23) (1,179 samples, 54.06%)</title><rect x="206" y="100" width="638" height="15" fill="rgb(220,111,6)"/><text x="209.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:23)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (1,179 samples, 54.06%)</title><rect x="206" y="116" width="638" height="15" fill="rgb(218,101,50)"/><text x="209.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (1,179 samples, 54.06%)</title><rect x="206" y="132" width="638" height="15" fill="rgb(253,10,51)"/><text x="209.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,179 samples, 54.06%)</title><rect x="206" y="148" width="638" height="15" fill="rgb(249,201,7)"/><text x="209.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="845" y="436" width="1" height="15" fill="rgb(219,184,41)"/><text x="848.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="468" width="1" height="15" fill="rgb(220,26,39)"/><text x="860.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="484" width="1" height="15" fill="rgb(243,57,2)"/><text x="860.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="500" width="1" height="15" fill="rgb(254,17,5)"/><text x="860.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="516" width="1" height="15" fill="rgb(246,139,20)"/><text x="860.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="532" width="1" height="15" fill="rgb(215,174,28)"/><text x="860.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="548" width="1" height="15" fill="rgb(232,95,19)"/><text x="860.00" y="558.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 0.96%)</title><rect x="848" y="436" width="11" height="15" fill="rgb(235,224,26)"/><text x="851.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.78%)</title><rect x="850" y="452" width="9" height="15" fill="rgb(228,227,22)"/><text x="853.00" y="462.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.60%)</title><rect x="845" y="340" width="19" height="15" fill="rgb(251,153,4)"/><text x="848.00" y="350.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.60%)</title><rect x="845" y="356" width="19" height="15" fill="rgb(253,84,33)"/><text x="848.00" y="366.50"></text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.60%)</title><rect x="845" y="372" width="19" height="15" fill="rgb(221,67,41)"/><text x="848.00" y="382.50"></text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.60%)</title><rect x="845" y="388" width="19" height="15" fill="rgb(238,219,22)"/><text x="848.00" y="398.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.60%)</title><rect x="845" y="404" width="19" height="15" fill="rgb(225,122,13)"/><text x="848.00" y="414.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.60%)</title><rect x="845" y="420" width="19" height="15" fill="rgb(242,67,24)"/><text x="848.00" y="430.50"></text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.41%)</title><rect x="859" y="436" width="5" height="15" fill="rgb(244,24,24)"/><text x="862.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.41%)</title><rect x="859" y="452" width="5" height="15" fill="rgb(221,26,37)"/><text x="862.00" y="462.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.41%)</title><rect x="859" y="468" width="5" height="15" fill="rgb(218,72,16)"/><text x="862.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.18%)</title><rect x="862" y="484" width="2" height="15" fill="rgb(243,223,29)"/><text x="865.00" y="494.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.55%)</title><rect x="864" y="340" width="7" height="15" fill="rgb(216,14,4)"/><text x="867.00" y="350.50"></text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.55%)</title><rect x="864" y="356" width="7" height="15" fill="rgb(224,191,48)"/><text x="867.00" y="366.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.32%)</title><rect x="871" y="340" width="4" height="15" fill="rgb(244,67,5)"/><text x="874.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.32%)</title><rect x="871" y="356" width="4" height="15" fill="rgb(222,184,34)"/><text x="874.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 2.71%)</title><rect x="844" y="276" width="32" height="15" fill="rgb(235,165,53)"/><text x="847.00" y="286.50">on..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 2.71%)</title><rect x="844" y="292" width="32" height="15" fill="rgb(240,200,7)"/><text x="847.00" y="302.50">on..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 2.71%)</title><rect x="844" y="308" width="32" height="15" fill="rgb(216,146,41)"/><text x="847.00" y="318.50">on..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 2.71%)</title><rect x="844" y="324" width="32" height="15" fill="rgb(251,174,40)"/><text x="847.00" y="334.50">on..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="875" y="340" width="1" height="15" fill="rgb(234,184,36)"/><text x="878.00" y="350.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (60 samples, 2.75%)</title><rect x="844" y="260" width="33" height="15" fill="rgb(236,32,35)"/><text x="847.00" y="270.50">on..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:18) (62 samples, 2.84%)</title><rect x="844" y="100" width="33" height="15" fill="rgb(241,63,7)"/><text x="847.00" y="110.50">pr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (62 samples, 2.84%)</title><rect x="844" y="116" width="33" height="15" fill="rgb(208,63,43)"/><text x="847.00" y="126.50">ti..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (62 samples, 2.84%)</title><rect x="844" y="132" width="33" height="15" fill="rgb(211,225,18)"/><text x="847.00" y="142.50">&lt;l..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (62 samples, 2.84%)</title><rect x="844" y="148" width="33" height="15" fill="rgb(220,146,4)"/><text x="847.00" y="158.50">ru..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (62 samples, 2.84%)</title><rect x="844" y="164" width="33" height="15" fill="rgb(242,73,38)"/><text x="847.00" y="174.50">_r..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (62 samples, 2.84%)</title><rect x="844" y="180" width="33" height="15" fill="rgb(233,188,2)"/><text x="847.00" y="190.50">ru..</text></g><g><title>run (onnxruntime/capi/session.py:136) (62 samples, 2.84%)</title><rect x="844" y="196" width="33" height="15" fill="rgb(228,145,48)"/><text x="847.00" y="206.50">ru..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 2.80%)</title><rect x="844" y="212" width="33" height="15" fill="rgb(223,67,54)"/><text x="847.00" y="222.50">py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 2.80%)</title><rect x="844" y="228" width="33" height="15" fill="rgb(241,3,14)"/><text x="847.00" y="238.50">vo..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 2.80%)</title><rect x="844" y="244" width="33" height="15" fill="rgb(232,31,32)"/><text x="847.00" y="254.50">on..</text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="882" y="340" width="1" height="15" fill="rgb(233,148,33)"/><text x="885.00" y="350.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="885" y="340" width="2" height="15" fill="rgb(245,42,48)"/><text x="888.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="885" y="356" width="2" height="15" fill="rgb(239,224,47)"/><text x="888.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="885" y="372" width="2" height="15" fill="rgb(227,228,37)"/><text x="888.00" y="382.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="885" y="388" width="2" height="15" fill="rgb(225,53,2)"/><text x="888.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.14%)</title><rect x="885" y="404" width="2" height="15" fill="rgb(206,111,13)"/><text x="888.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.14%)</title><rect x="885" y="420" width="2" height="15" fill="rgb(237,219,29)"/><text x="888.00" y="430.50"></text></g><g><title>0x7f9e04f6d028 (libc-2.29.so) (3 samples, 0.14%)</title><rect x="885" y="436" width="2" height="15" fill="rgb(215,10,28)"/><text x="888.00" y="446.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.18%)</title><rect x="891" y="388" width="2" height="15" fill="rgb(248,169,47)"/><text x="894.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.18%)</title><rect x="891" y="404" width="2" height="15" fill="rgb(213,104,18)"/><text x="894.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="896" y="452" width="1" height="15" fill="rgb(224,219,23)"/><text x="899.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="897" y="452" width="1" height="15" fill="rgb(228,52,41)"/><text x="900.00" y="462.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="897" y="468" width="1" height="15" fill="rgb(235,215,15)"/><text x="900.00" y="478.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="897" y="484" width="1" height="15" fill="rgb(253,141,42)"/><text x="900.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.50%)</title><rect x="895" y="436" width="6" height="15" fill="rgb(230,71,29)"/><text x="898.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.23%)</title><rect x="901" y="436" width="3" height="15" fill="rgb(241,135,29)"/><text x="904.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.23%)</title><rect x="901" y="452" width="3" height="15" fill="rgb(229,22,36)"/><text x="904.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.23%)</title><rect x="901" y="468" width="3" height="15" fill="rgb(238,214,20)"/><text x="904.00" y="478.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="903" y="484" width="1" height="15" fill="rgb(233,22,18)"/><text x="906.00" y="494.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="903" y="500" width="1" height="15" fill="rgb(219,2,26)"/><text x="906.00" y="510.50"></text></g><g><title>0x7f9e04f8bd94 (libc-2.29.so) (10 samples, 0.46%)</title><rect x="904" y="452" width="5" height="15" fill="rgb(245,44,54)"/><text x="907.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.60%)</title><rect x="904" y="436" width="7" height="15" fill="rgb(251,40,6)"/><text x="907.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="909" y="452" width="2" height="15" fill="rgb(233,121,22)"/><text x="912.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="909" y="468" width="2" height="15" fill="rgb(236,39,5)"/><text x="912.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="909" y="484" width="2" height="15" fill="rgb(214,54,36)"/><text x="912.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.50%)</title><rect x="981" y="468" width="6" height="15" fill="rgb(249,151,49)"/><text x="984.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.14%)</title><rect x="985" y="484" width="2" height="15" fill="rgb(213,110,5)"/><text x="988.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.14%)</title><rect x="985" y="500" width="2" height="15" fill="rgb(215,108,7)"/><text x="988.00" y="510.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (143 samples, 6.56%)</title><rect x="911" y="436" width="77" height="15" fill="rgb(219,142,46)"/><text x="914.00" y="446.50">onnxrunt..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 6.24%)</title><rect x="915" y="452" width="73" height="15" fill="rgb(232,162,27)"/><text x="918.00" y="462.50">onnxrunt..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="987" y="468" width="1" height="15" fill="rgb(213,193,32)"/><text x="990.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (135 samples, 6.19%)</title><rect x="988" y="468" width="73" height="15" fill="rgb(217,21,1)"/><text x="991.00" y="478.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 2.25%)</title><rect x="1035" y="484" width="26" height="15" fill="rgb(243,189,38)"/><text x="1038.00" y="494.50">o..</text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="1061" y="468" width="1" height="15" fill="rgb(215,83,20)"/><text x="1064.00" y="478.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.09%)</title><rect x="1061" y="484" width="1" height="15" fill="rgb(227,98,33)"/><text x="1064.00" y="494.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (315 samples, 14.44%)</title><rect x="894" y="420" width="170" height="15" fill="rgb(229,72,36)"/><text x="897.00" y="430.50">onnxruntime::Sequentia..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (140 samples, 6.42%)</title><rect x="988" y="436" width="76" height="15" fill="rgb(236,180,20)"/><text x="991.00" y="446.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (140 samples, 6.42%)</title><rect x="988" y="452" width="76" height="15" fill="rgb(247,13,27)"/><text x="991.00" y="462.50">onnxrunt..</text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="1063" y="468" width="1" height="15" fill="rgb(252,143,39)"/><text x="1066.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="1063" y="484" width="1" height="15" fill="rgb(229,182,5)"/><text x="1066.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="1063" y="500" width="1" height="15" fill="rgb(213,120,32)"/><text x="1066.00" y="510.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (326 samples, 14.95%)</title><rect x="888" y="340" width="177" height="15" fill="rgb(216,164,50)"/><text x="891.00" y="350.50">onnxruntime::Scan&lt;9&gt;::C..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (326 samples, 14.95%)</title><rect x="888" y="356" width="177" height="15" fill="rgb(227,208,5)"/><text x="891.00" y="366.50">onnxruntime::ScanImpl::..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (326 samples, 14.95%)</title><rect x="888" y="372" width="177" height="15" fill="rgb(231,191,31)"/><text x="891.00" y="382.50">onnxruntime::scan::deta..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (317 samples, 14.53%)</title><rect x="893" y="388" width="172" height="15" fill="rgb(232,140,27)"/><text x="896.00" y="398.50">onnxruntime::utils::Ex..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (317 samples, 14.53%)</title><rect x="893" y="404" width="172" height="15" fill="rgb(207,80,7)"/><text x="896.00" y="414.50">onnxruntime::utils::Ex..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.32%)</title><rect x="1065" y="340" width="3" height="15" fill="rgb(221,184,33)"/><text x="1068.00" y="350.50"></text></g><g><title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="1137" y="372" width="2" height="15" fill="rgb(229,15,19)"/><text x="1140.00" y="382.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 6.24%)</title><rect x="1068" y="340" width="74" height="15" fill="rgb(211,85,0)"/><text x="1071.00" y="350.50">onnxrunt..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 6.24%)</title><rect x="1068" y="356" width="74" height="15" fill="rgb(245,15,8)"/><text x="1071.00" y="366.50">onnxrunt..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.28%)</title><rect x="1139" y="372" width="3" height="15" fill="rgb(213,61,45)"/><text x="1142.00" y="382.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (50 samples, 2.29%)</title><rect x="1142" y="340" width="27" height="15" fill="rgb(226,24,39)"/><text x="1145.00" y="350.50">o..</text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (50 samples, 2.29%)</title><rect x="1142" y="356" width="27" height="15" fill="rgb(216,145,31)"/><text x="1145.00" y="366.50">o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (544 samples, 24.94%)</title><rect x="881" y="260" width="294" height="15" fill="rgb(233,150,46)"/><text x="884.00" y="270.50">onnxruntime::InferenceSession::Run (onn..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (543 samples, 24.90%)</title><rect x="882" y="276" width="293" height="15" fill="rgb(238,151,16)"/><text x="885.00" y="286.50">onnxruntime::InferenceSession::Run (onn..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (543 samples, 24.90%)</title><rect x="882" y="292" width="293" height="15" fill="rgb(237,140,45)"/><text x="885.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (543 samples, 24.90%)</title><rect x="882" y="308" width="293" height="15" fill="rgb(223,137,35)"/><text x="885.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (o..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (543 samples, 24.90%)</title><rect x="882" y="324" width="293" height="15" fill="rgb(215,86,37)"/><text x="885.00" y="334.50">onnxruntime::SequentialExecutor::Execut..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.55%)</title><rect x="1169" y="340" width="6" height="15" fill="rgb(218,132,6)"/><text x="1172.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (11 samples, 0.50%)</title><rect x="1169" y="356" width="6" height="15" fill="rgb(213,102,54)"/><text x="1172.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (11 samples, 0.50%)</title><rect x="1169" y="372" width="6" height="15" fill="rgb(212,187,43)"/><text x="1172.00" y="382.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.18%)</title><rect x="1184" y="276" width="2" height="15" fill="rgb(218,196,33)"/><text x="1187.00" y="286.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 0.87%)</title><rect x="1176" y="260" width="10" height="15" fill="rgb(238,146,39)"/><text x="1179.00" y="270.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (569 samples, 26.09%)</title><rect x="881" y="244" width="308" height="15" fill="rgb(207,178,17)"/><text x="884.00" y="254.50">onnxruntime::python::addObjectMethods(pyb..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.23%)</title><rect x="1186" y="260" width="3" height="15" fill="rgb(208,72,30)"/><text x="1189.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.23%)</title><rect x="1186" y="276" width="3" height="15" fill="rgb(235,191,5)"/><text x="1189.00" y="286.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="1187" y="292" width="2" height="15" fill="rgb(212,136,26)"/><text x="1190.00" y="302.50"></text></g><g><title>all (2,181 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(211,8,43)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:52) (639 samples, 29.30%)</title><rect x="844" y="52" width="346" height="15" fill="rgb(218,121,39)"/><text x="847.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:51) (639 samples, 29.30%)</title><rect x="844" y="68" width="346" height="15" fill="rgb(217,220,50)"/><text x="847.00" y="78.50">profile_ort (bench_KNeighborsClassifier_defaul..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:29) (639 samples, 29.30%)</title><rect x="844" y="84" width="346" height="15" fill="rgb(227,215,44)"/><text x="847.00" y="94.50">setup_profile (bench_KNeighborsClassifier_defa..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_4_12_float_.py:23) (577 samples, 26.46%)</title><rect x="877" y="100" width="313" height="15" fill="rgb(243,208,38)"/><text x="880.00" y="110.50">profile (bench_KNeighborsClassifier_defaul..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (570 samples, 26.13%)</title><rect x="881" y="116" width="309" height="15" fill="rgb(220,84,1)"/><text x="884.00" y="126.50">time_predict (mlprodict/asv_benchmark/com..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (570 samples, 26.13%)</title><rect x="881" y="132" width="309" height="15" fill="rgb(245,180,23)"/><text x="884.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (570 samples, 26.13%)</title><rect x="881" y="148" width="309" height="15" fill="rgb(206,207,8)"/><text x="884.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:4..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (570 samples, 26.13%)</title><rect x="881" y="164" width="309" height="15" fill="rgb(218,31,14)"/><text x="884.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (570 samples, 26.13%)</title><rect x="881" y="180" width="309" height="15" fill="rgb(219,151,43)"/><text x="884.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.p..</text></g><g><title>run (onnxruntime/capi/session.py:136) (570 samples, 26.13%)</title><rect x="881" y="196" width="309" height="15" fill="rgb(248,82,54)"/><text x="884.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (570 samples, 26.13%)</title><rect x="881" y="212" width="309" height="15" fill="rgb(251,127,11)"/><text x="884.00" y="222.50">pybind11::cpp_function::dispatcher (onnxr..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (570 samples, 26.13%)</title><rect x="881" y="228" width="309" height="15" fill="rgb(241,21,0)"/><text x="884.00" y="238.50">void pybind11::cpp_function::initialize&lt;o..</text></g></g></svg>