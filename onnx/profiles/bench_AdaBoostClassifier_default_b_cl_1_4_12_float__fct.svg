<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1046" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1029.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1029.00"> </text><g id="frames"><g><title>&lt;module&gt; (onnx/__init__.py) (6 samples, 0.14%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(241,95,39)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="308" width="1" height="15" fill="rgb(208,2,16)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="324" width="1" height="15" fill="rgb(244,80,0)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="340" width="1" height="15" fill="rgb(207,159,52)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.14%)</title><rect x="10" y="356" width="1" height="15" fill="rgb(244,30,51)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="372" width="1" height="15" fill="rgb(251,179,20)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (6 samples, 0.14%)</title><rect x="10" y="388" width="1" height="15" fill="rgb(229,72,13)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="404" width="1" height="15" fill="rgb(248,86,48)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="420" width="1" height="15" fill="rgb(241,176,48)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="436" width="1" height="15" fill="rgb(241,121,40)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.14%)</title><rect x="10" y="452" width="1" height="15" fill="rgb(210,19,3)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="468" width="1" height="15" fill="rgb(207,151,51)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (6 samples, 0.14%)</title><rect x="10" y="484" width="1" height="15" fill="rgb(242,170,29)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="500" width="1" height="15" fill="rgb(220,217,33)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="516" width="1" height="15" fill="rgb(251,153,8)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="532" width="1" height="15" fill="rgb(212,86,28)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.14%)</title><rect x="10" y="548" width="1" height="15" fill="rgb(231,17,8)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="564" width="1" height="15" fill="rgb(226,131,33)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (6 samples, 0.14%)</title><rect x="10" y="580" width="1" height="15" fill="rgb(229,54,10)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="596" width="1" height="15" fill="rgb(235,127,31)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="612" width="1" height="15" fill="rgb(208,68,32)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="628" width="1" height="15" fill="rgb(228,121,52)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="644" width="1" height="15" fill="rgb(210,103,50)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="660" width="1" height="15" fill="rgb(244,124,1)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="676" width="1" height="15" fill="rgb(229,101,53)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.14%)</title><rect x="10" y="692" width="1" height="15" fill="rgb(244,58,29)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="708" width="1" height="15" fill="rgb(218,72,50)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (6 samples, 0.14%)</title><rect x="10" y="724" width="1" height="15" fill="rgb(232,35,47)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="740" width="1" height="15" fill="rgb(220,71,40)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="756" width="1" height="15" fill="rgb(231,73,13)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="772" width="1" height="15" fill="rgb(205,218,4)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.14%)</title><rect x="10" y="788" width="1" height="15" fill="rgb(253,141,40)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.14%)</title><rect x="10" y="804" width="1" height="15" fill="rgb(248,89,26)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (6 samples, 0.14%)</title><rect x="10" y="820" width="1" height="15" fill="rgb(238,183,7)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (6 samples, 0.14%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(221,194,11)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (6 samples, 0.14%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(250,24,28)"/><text x="13.00" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(232,216,1)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(217,154,7)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(241,199,1)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(212,214,34)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.19%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(233,50,36)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(236,100,12)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (7 samples, 0.16%)</title><rect x="12" y="436" width="2" height="15" fill="rgb(244,75,27)"/><text x="15.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.16%)</title><rect x="12" y="452" width="2" height="15" fill="rgb(247,208,2)"/><text x="15.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.16%)</title><rect x="12" y="468" width="2" height="15" fill="rgb(206,9,11)"/><text x="15.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="484" width="2" height="15" fill="rgb(237,21,6)"/><text x="15.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="12" y="500" width="2" height="15" fill="rgb(219,144,26)"/><text x="15.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="516" width="2" height="15" fill="rgb(206,176,32)"/><text x="15.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (5 samples, 0.12%)</title><rect x="12" y="532" width="2" height="15" fill="rgb(241,194,25)"/><text x="15.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="548" width="2" height="15" fill="rgb(242,71,3)"/><text x="15.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="564" width="2" height="15" fill="rgb(239,79,21)"/><text x="15.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="580" width="2" height="15" fill="rgb(237,126,37)"/><text x="15.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="12" y="596" width="2" height="15" fill="rgb(217,12,33)"/><text x="15.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="612" width="2" height="15" fill="rgb(229,142,5)"/><text x="15.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (5 samples, 0.12%)</title><rect x="12" y="628" width="2" height="15" fill="rgb(231,99,51)"/><text x="15.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="644" width="2" height="15" fill="rgb(253,154,32)"/><text x="15.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="660" width="2" height="15" fill="rgb(212,168,54)"/><text x="15.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="676" width="2" height="15" fill="rgb(234,5,45)"/><text x="15.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="12" y="692" width="2" height="15" fill="rgb(239,77,16)"/><text x="15.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="12" y="708" width="2" height="15" fill="rgb(206,208,38)"/><text x="15.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (4 samples, 0.09%)</title><rect x="13" y="724" width="1" height="15" fill="rgb(211,2,28)"/><text x="16.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="740" width="1" height="15" fill="rgb(234,138,24)"/><text x="16.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="756" width="1" height="15" fill="rgb(226,218,10)"/><text x="16.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="772" width="1" height="15" fill="rgb(226,45,2)"/><text x="16.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.09%)</title><rect x="13" y="788" width="1" height="15" fill="rgb(225,38,14)"/><text x="16.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="804" width="1" height="15" fill="rgb(252,77,10)"/><text x="16.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (4 samples, 0.09%)</title><rect x="13" y="820" width="1" height="15" fill="rgb(248,6,23)"/><text x="16.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="836" width="1" height="15" fill="rgb(250,160,45)"/><text x="16.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="852" width="1" height="15" fill="rgb(237,162,13)"/><text x="16.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="868" width="1" height="15" fill="rgb(253,22,14)"/><text x="16.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.09%)</title><rect x="13" y="884" width="1" height="15" fill="rgb(206,119,5)"/><text x="16.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="900" width="1" height="15" fill="rgb(234,224,54)"/><text x="16.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (4 samples, 0.09%)</title><rect x="13" y="916" width="1" height="15" fill="rgb(239,113,18)"/><text x="16.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="932" width="1" height="15" fill="rgb(221,16,21)"/><text x="16.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="948" width="1" height="15" fill="rgb(234,131,6)"/><text x="16.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="964" width="1" height="15" fill="rgb(244,33,7)"/><text x="16.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.09%)</title><rect x="13" y="980" width="1" height="15" fill="rgb(250,6,27)"/><text x="16.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="13" y="996" width="1" height="15" fill="rgb(214,53,32)"/><text x="16.00" y="1006.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 0.19%)</title><rect x="12" y="340" width="2" height="15" fill="rgb(224,62,8)"/><text x="15.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="12" y="356" width="2" height="15" fill="rgb(231,207,25)"/><text x="15.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="12" y="372" width="2" height="15" fill="rgb(214,200,47)"/><text x="15.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="12" y="388" width="2" height="15" fill="rgb(212,113,44)"/><text x="15.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.19%)</title><rect x="12" y="404" width="2" height="15" fill="rgb(224,188,29)"/><text x="15.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="12" y="420" width="2" height="15" fill="rgb(231,57,30)"/><text x="15.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (9 samples, 0.21%)</title><rect x="12" y="244" width="2" height="15" fill="rgb(250,76,42)"/><text x="15.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.21%)</title><rect x="12" y="260" width="2" height="15" fill="rgb(226,20,51)"/><text x="15.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.21%)</title><rect x="12" y="276" width="2" height="15" fill="rgb(245,61,32)"/><text x="15.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.21%)</title><rect x="12" y="292" width="2" height="15" fill="rgb(231,123,23)"/><text x="15.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 0.21%)</title><rect x="12" y="308" width="2" height="15" fill="rgb(221,175,37)"/><text x="15.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.21%)</title><rect x="12" y="324" width="2" height="15" fill="rgb(209,52,27)"/><text x="15.00" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 0.44%)</title><rect x="10" y="68" width="5" height="15" fill="rgb(208,142,21)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 0.44%)</title><rect x="10" y="84" width="5" height="15" fill="rgb(207,85,31)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 0.44%)</title><rect x="10" y="100" width="5" height="15" fill="rgb(207,69,21)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (19 samples, 0.44%)</title><rect x="10" y="116" width="5" height="15" fill="rgb(234,193,15)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (19 samples, 0.44%)</title><rect x="10" y="132" width="5" height="15" fill="rgb(245,18,4)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostClassifier/bench_AdaBoostClassifier_default_b_cl.py) (19 samples, 0.44%)</title><rect x="10" y="148" width="5" height="15" fill="rgb(215,99,27)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 0.44%)</title><rect x="10" y="164" width="5" height="15" fill="rgb(254,58,3)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 0.44%)</title><rect x="10" y="180" width="5" height="15" fill="rgb(228,122,53)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.25%)</title><rect x="12" y="196" width="3" height="15" fill="rgb(239,18,11)"/><text x="15.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 0.25%)</title><rect x="12" y="212" width="3" height="15" fill="rgb(212,121,20)"/><text x="15.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.25%)</title><rect x="12" y="228" width="3" height="15" fill="rgb(237,46,31)"/><text x="15.00" y="238.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="16" y="340" width="2" height="15" fill="rgb(253,45,13)"/><text x="19.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="16" y="356" width="2" height="15" fill="rgb(254,65,28)"/><text x="19.00" y="366.50"></text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.09%)</title><rect x="18" y="340" width="1" height="15" fill="rgb(241,29,15)"/><text x="21.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.09%)</title><rect x="18" y="356" width="1" height="15" fill="rgb(238,46,3)"/><text x="21.00" y="366.50"></text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (19 samples, 0.44%)</title><rect x="15" y="100" width="5" height="15" fill="rgb(239,149,1)"/><text x="18.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (19 samples, 0.44%)</title><rect x="15" y="116" width="5" height="15" fill="rgb(232,171,35)"/><text x="18.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (19 samples, 0.44%)</title><rect x="15" y="132" width="5" height="15" fill="rgb(220,47,51)"/><text x="18.00" y="142.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (19 samples, 0.44%)</title><rect x="15" y="148" width="5" height="15" fill="rgb(235,44,35)"/><text x="18.00" y="158.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (19 samples, 0.44%)</title><rect x="15" y="164" width="5" height="15" fill="rgb(224,143,34)"/><text x="18.00" y="174.50"></text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (19 samples, 0.44%)</title><rect x="15" y="180" width="5" height="15" fill="rgb(212,65,28)"/><text x="18.00" y="190.50"></text></g><g><title>run (onnxruntime/capi/session.py) (18 samples, 0.42%)</title><rect x="15" y="196" width="5" height="15" fill="rgb(216,168,6)"/><text x="18.00" y="206.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.39%)</title><rect x="15" y="212" width="5" height="15" fill="rgb(225,63,21)"/><text x="18.00" y="222.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.39%)</title><rect x="15" y="228" width="5" height="15" fill="rgb(232,67,38)"/><text x="18.00" y="238.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.39%)</title><rect x="15" y="244" width="5" height="15" fill="rgb(205,87,3)"/><text x="18.00" y="254.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.39%)</title><rect x="15" y="260" width="5" height="15" fill="rgb(233,205,36)"/><text x="18.00" y="270.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.39%)</title><rect x="15" y="276" width="5" height="15" fill="rgb(252,69,33)"/><text x="18.00" y="286.50"></text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.39%)</title><rect x="15" y="292" width="5" height="15" fill="rgb(208,83,46)"/><text x="18.00" y="302.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.39%)</title><rect x="15" y="308" width="5" height="15" fill="rgb(251,11,12)"/><text x="18.00" y="318.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.39%)</title><rect x="15" y="324" width="5" height="15" fill="rgb(249,121,46)"/><text x="18.00" y="334.50"></text></g><g><title>profile_ort (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (22 samples, 0.51%)</title><rect x="15" y="68" width="6" height="15" fill="rgb(229,146,8)"/><text x="18.00" y="78.50"></text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (22 samples, 0.51%)</title><rect x="15" y="84" width="6" height="15" fill="rgb(232,42,36)"/><text x="18.00" y="94.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py) (5 samples, 0.12%)</title><rect x="44" y="212" width="1" height="15" fill="rgb(223,48,28)"/><text x="47.00" y="222.50"></text></g><g><title>array_reshape (methods.c) (4 samples, 0.09%)</title><rect x="44" y="228" width="1" height="15" fill="rgb(226,109,10)"/><text x="47.00" y="238.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (4 samples, 0.09%)</title><rect x="51" y="324" width="1" height="15" fill="rgb(226,102,7)"/><text x="54.00" y="334.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (10 samples, 0.23%)</title><rect x="50" y="308" width="3" height="15" fill="rgb(246,161,10)"/><text x="53.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (14 samples, 0.32%)</title><rect x="50" y="276" width="4" height="15" fill="rgb(214,227,30)"/><text x="53.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (14 samples, 0.32%)</title><rect x="50" y="292" width="4" height="15" fill="rgb(232,227,45)"/><text x="53.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (19 samples, 0.44%)</title><rect x="49" y="260" width="6" height="15" fill="rgb(248,228,12)"/><text x="52.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (33 samples, 0.76%)</title><rect x="47" y="228" width="9" height="15" fill="rgb(210,189,2)"/><text x="50.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (27 samples, 0.62%)</title><rect x="48" y="244" width="8" height="15" fill="rgb(205,179,6)"/><text x="51.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 0.14%)</title><rect x="57" y="276" width="2" height="15" fill="rgb(220,27,45)"/><text x="60.00" y="286.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (6 samples, 0.14%)</title><rect x="57" y="292" width="2" height="15" fill="rgb(236,134,12)"/><text x="60.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (6 samples, 0.14%)</title><rect x="57" y="308" width="2" height="15" fill="rgb(243,6,14)"/><text x="60.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (4 samples, 0.09%)</title><rect x="58" y="324" width="1" height="15" fill="rgb(225,180,19)"/><text x="61.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_log.py) (11 samples, 0.25%)</title><rect x="56" y="228" width="3" height="15" fill="rgb(235,180,26)"/><text x="59.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (9 samples, 0.21%)</title><rect x="56" y="244" width="3" height="15" fill="rgb(225,92,21)"/><text x="59.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 0.16%)</title><rect x="57" y="260" width="2" height="15" fill="rgb(249,93,8)"/><text x="60.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.09%)</title><rect x="62" y="324" width="2" height="15" fill="rgb(250,10,43)"/><text x="65.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (4 samples, 0.09%)</title><rect x="62" y="340" width="2" height="15" fill="rgb(253,190,15)"/><text x="65.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (7 samples, 0.16%)</title><rect x="64" y="356" width="2" height="15" fill="rgb(240,75,7)"/><text x="67.00" y="366.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (10 samples, 0.23%)</title><rect x="64" y="340" width="3" height="15" fill="rgb(252,62,12)"/><text x="67.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (30 samples, 0.69%)</title><rect x="59" y="228" width="8" height="15" fill="rgb(220,201,53)"/><text x="62.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (28 samples, 0.65%)</title><rect x="59" y="244" width="8" height="15" fill="rgb(233,49,16)"/><text x="62.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (27 samples, 0.62%)</title><rect x="60" y="260" width="7" height="15" fill="rgb(221,66,44)"/><text x="63.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (27 samples, 0.62%)</title><rect x="60" y="276" width="7" height="15" fill="rgb(237,75,17)"/><text x="63.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (25 samples, 0.58%)</title><rect x="60" y="292" width="7" height="15" fill="rgb(244,93,42)"/><text x="63.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (18 samples, 0.42%)</title><rect x="62" y="308" width="5" height="15" fill="rgb(231,140,4)"/><text x="65.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (13 samples, 0.30%)</title><rect x="64" y="324" width="3" height="15" fill="rgb(235,229,1)"/><text x="67.00" y="334.50"></text></g><g><title>0x7fa04d00dea0 (libgomp.so.1.0.0) (94 samples, 2.17%)</title><rect x="70" y="468" width="25" height="15" fill="rgb(231,76,52)"/><text x="73.00" y="478.50">0..</text></g><g><title>0x7fa04d00dea9 (libgomp.so.1.0.0) (498 samples, 11.52%)</title><rect x="95" y="468" width="136" height="15" fill="rgb(250,36,35)"/><text x="98.00" y="478.50">0x7fa04d00dea9 (l..</text></g><g><title>0x7fa04d00deab (libgomp.so.1.0.0) (506 samples, 11.70%)</title><rect x="231" y="468" width="138" height="15" fill="rgb(221,212,10)"/><text x="234.00" y="478.50">0x7fa04d00deab (l..</text></g><g><title>0x7fa04d00dead (libgomp.so.1.0.0) (491 samples, 11.36%)</title><rect x="369" y="468" width="134" height="15" fill="rgb(207,136,23)"/><text x="372.00" y="478.50">0x7fa04d00dead (..</text></g><g><title>0x7fa04d00dee1 (libgomp.so.1.0.0) (236 samples, 5.46%)</title><rect x="503" y="468" width="65" height="15" fill="rgb(242,213,36)"/><text x="506.00" y="478.50">0x7fa04..</text></g><g><title>0x7fa04d00cab9 (libgomp.so.1.0.0) (1,829 samples, 42.30%)</title><rect x="70" y="452" width="499" height="15" fill="rgb(217,76,20)"/><text x="73.00" y="462.50">0x7fa04d00cab9 (libgomp.so.1.0.0)</text></g><g><title>0x7fa04d00df6e (libgomp.so.1.0.0) (4 samples, 0.09%)</title><rect x="568" y="468" width="1" height="15" fill="rgb(222,54,9)"/><text x="571.00" y="478.50"></text></g><g><title>0x7fa04d00dcf0 (libgomp.so.1.0.0) (97 samples, 2.24%)</title><rect x="569" y="484" width="26" height="15" fill="rgb(242,222,34)"/><text x="572.00" y="494.50">0..</text></g><g><title>0x7fa04d00dcf9 (libgomp.so.1.0.0) (533 samples, 12.33%)</title><rect x="595" y="484" width="146" height="15" fill="rgb(205,190,28)"/><text x="598.00" y="494.50">0x7fa04d00dcf9 (li..</text></g><g><title>0x7fa04d00dcfb (libgomp.so.1.0.0) (484 samples, 11.19%)</title><rect x="741" y="484" width="132" height="15" fill="rgb(240,67,22)"/><text x="744.00" y="494.50">0x7fa04d00dcfb (..</text></g><g><title>0x7fa04d00dcfd (libgomp.so.1.0.0) (525 samples, 12.14%)</title><rect x="873" y="484" width="143" height="15" fill="rgb(210,30,39)"/><text x="876.00" y="494.50">0x7fa04d00dcfd (li..</text></g><g><title>0x7fa04d00dd1e (libgomp.so.1.0.0) (316 samples, 7.31%)</title><rect x="1016" y="484" width="86" height="15" fill="rgb(246,128,31)"/><text x="1019.00" y="494.50">0x7fa04d00..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (3,796 samples, 87.79%)</title><rect x="67" y="228" width="1036" height="15" fill="rgb(252,67,10)"/><text x="70.00" y="238.50">_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py)</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (3,790 samples, 87.65%)</title><rect x="69" y="244" width="1034" height="15" fill="rgb(217,161,25)"/><text x="72.00" y="254.50">pybind11::cpp_function::dispatcher (pybind11.h)</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (3,790 samples, 87.65%)</title><rect x="69" y="260" width="1034" height="15" fill="rgb(252,27,1)"/><text x="72.00" y="270.50">void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::arra..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (3,790 samples, 87.65%)</title><rect x="69" y="276" width="1034" height="15" fill="rgb(235,134,21)"/><text x="72.00" y="286.50">void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::arra..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (3,789 samples, 87.63%)</title><rect x="69" y="292" width="1034" height="15" fill="rgb(209,204,27)"/><text x="72.00" y="302.50">pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::det..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (3,789 samples, 87.63%)</title><rect x="69" y="308" width="1034" height="15" fill="rgb(205,44,47)"/><text x="72.00" y="318.50">pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (3,789 samples, 87.63%)</title><rect x="69" y="324" width="1034" height="15" fill="rgb(250,84,39)"/><text x="72.00" y="334.50">pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (3,789 samples, 87.63%)</title><rect x="69" y="340" width="1034" height="15" fill="rgb(234,47,28)"/><text x="72.00" y="350.50">pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h)</text></g><g><title>pybind11::array::~array (numpy.h) (3,789 samples, 87.63%)</title><rect x="69" y="356" width="1034" height="15" fill="rgb(209,125,48)"/><text x="72.00" y="366.50">pybind11::array::~array (numpy.h)</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (3,789 samples, 87.63%)</title><rect x="69" y="372" width="1034" height="15" fill="rgb(220,98,45)"/><text x="72.00" y="382.50">pybind11::buffer::~buffer (pytypes.h)</text></g><g><title>pybind11::object::~object (pytypes.h) (3,789 samples, 87.63%)</title><rect x="69" y="388" width="1034" height="15" fill="rgb(206,202,23)"/><text x="72.00" y="398.50">pybind11::object::~object (pytypes.h)</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (3,789 samples, 87.63%)</title><rect x="69" y="404" width="1034" height="15" fill="rgb(211,175,41)"/><text x="72.00" y="414.50">pybind11::handle::dec_ref &amp; (pytypes.h)</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (3,789 samples, 87.63%)</title><rect x="69" y="420" width="1034" height="15" fill="rgb(227,64,50)"/><text x="72.00" y="430.50">RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp)</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (3,788 samples, 87.60%)</title><rect x="69" y="436" width="1034" height="15" fill="rgb(239,186,19)"/><text x="72.00" y="446.50">pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h)</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (1,958 samples, 45.28%)</title><rect x="569" y="452" width="534" height="15" fill="rgb(238,211,49)"/><text x="572.00" y="462.50">GOMP_parallel (libgomp.so.1.0.0)</text></g><g><title>0x7fa04d00bdaa (libgomp.so.1.0.0) (1,958 samples, 45.28%)</title><rect x="569" y="468" width="534" height="15" fill="rgb(233,40,27)"/><text x="572.00" y="478.50">0x7fa04d00bdaa (libgomp.so.1.0.0)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (3,900 samples, 90.19%)</title><rect x="39" y="196" width="1064" height="15" fill="rgb(210,65,52)"/><text x="42.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (3,874 samples, 89.59%)</title><rect x="46" y="212" width="1057" height="15" fill="rgb(236,68,15)"/><text x="49.00" y="222.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (6 samples, 0.14%)</title><rect x="1108" y="420" width="1" height="15" fill="rgb(225,102,38)"/><text x="1111.00" y="430.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (5 samples, 0.12%)</title><rect x="1109" y="420" width="2" height="15" fill="rgb(218,16,26)"/><text x="1112.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (13 samples, 0.30%)</title><rect x="1108" y="388" width="3" height="15" fill="rgb(214,138,38)"/><text x="1111.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c) (13 samples, 0.30%)</title><rect x="1108" y="404" width="3" height="15" fill="rgb(225,32,36)"/><text x="1111.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (18 samples, 0.42%)</title><rect x="1107" y="372" width="5" height="15" fill="rgb(253,41,5)"/><text x="1110.00" y="382.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (23 samples, 0.53%)</title><rect x="1106" y="340" width="6" height="15" fill="rgb(247,2,11)"/><text x="1109.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (22 samples, 0.51%)</title><rect x="1106" y="356" width="6" height="15" fill="rgb(214,189,51)"/><text x="1109.00" y="366.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="1113" y="356" width="1" height="15" fill="rgb(220,214,20)"/><text x="1116.00" y="366.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (13 samples, 0.30%)</title><rect x="1114" y="356" width="4" height="15" fill="rgb(248,42,47)"/><text x="1117.00" y="366.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (12 samples, 0.28%)</title><rect x="1115" y="372" width="3" height="15" fill="rgb(234,202,17)"/><text x="1118.00" y="382.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py) (12 samples, 0.28%)</title><rect x="1115" y="388" width="3" height="15" fill="rgb(244,110,14)"/><text x="1118.00" y="398.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (5 samples, 0.12%)</title><rect x="1117" y="404" width="1" height="15" fill="rgb(210,72,45)"/><text x="1120.00" y="414.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.09%)</title><rect x="1117" y="420" width="1" height="15" fill="rgb(248,118,50)"/><text x="1120.00" y="430.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.12%)</title><rect x="1118" y="372" width="2" height="15" fill="rgb(224,73,29)"/><text x="1121.00" y="382.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (4,028 samples, 93.15%)</title><rect x="21" y="164" width="1099" height="15" fill="rgb(220,50,26)"/><text x="24.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (4,018 samples, 92.92%)</title><rect x="23" y="180" width="1097" height="15" fill="rgb(232,46,35)"/><text x="26.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/op_clip.py) (61 samples, 1.41%)</title><rect x="1103" y="196" width="17" height="15" fill="rgb(222,29,27)"/><text x="1106.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_clip.py) (60 samples, 1.39%)</title><rect x="1104" y="212" width="16" height="15" fill="rgb(229,98,42)"/><text x="1107.00" y="222.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;) (59 samples, 1.36%)</title><rect x="1104" y="228" width="16" height="15" fill="rgb(221,164,51)"/><text x="1107.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (58 samples, 1.34%)</title><rect x="1104" y="244" width="16" height="15" fill="rgb(233,162,47)"/><text x="1107.00" y="254.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (58 samples, 1.34%)</title><rect x="1104" y="260" width="16" height="15" fill="rgb(252,153,31)"/><text x="1107.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (57 samples, 1.32%)</title><rect x="1104" y="276" width="16" height="15" fill="rgb(254,208,6)"/><text x="1107.00" y="286.50"></text></g><g><title>array_clip (methods.c) (55 samples, 1.27%)</title><rect x="1105" y="292" width="15" height="15" fill="rgb(229,146,28)"/><text x="1108.00" y="302.50"></text></g><g><title>forward_ndarray_method (methods.c) (55 samples, 1.27%)</title><rect x="1105" y="308" width="15" height="15" fill="rgb(223,132,17)"/><text x="1108.00" y="318.50"></text></g><g><title>_clip (numpy/core/_methods.py) (54 samples, 1.25%)</title><rect x="1105" y="324" width="15" height="15" fill="rgb(237,42,33)"/><text x="1108.00" y="334.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (27 samples, 0.62%)</title><rect x="1113" y="340" width="7" height="15" fill="rgb(215,214,49)"/><text x="1116.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 0.16%)</title><rect x="1118" y="356" width="2" height="15" fill="rgb(211,127,44)"/><text x="1121.00" y="366.50"></text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (4,030 samples, 93.20%)</title><rect x="21" y="100" width="1099" height="15" fill="rgb(215,61,11)"/><text x="24.00" y="110.50">profile (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (4,030 samples, 93.20%)</title><rect x="21" y="116" width="1099" height="15" fill="rgb(235,219,49)"/><text x="24.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (4,030 samples, 93.20%)</title><rect x="21" y="132" width="1099" height="15" fill="rgb(233,75,44)"/><text x="24.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (4,030 samples, 93.20%)</title><rect x="21" y="148" width="1099" height="15" fill="rgb(210,20,50)"/><text x="24.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>profile_pyrt (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (4,032 samples, 93.25%)</title><rect x="21" y="68" width="1100" height="15" fill="rgb(213,73,10)"/><text x="24.00" y="78.50">profile_pyrt (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (4,032 samples, 93.25%)</title><rect x="21" y="84" width="1100" height="15" fill="rgb(253,194,1)"/><text x="24.00" y="94.50">setup_profile (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py)</text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (4 samples, 0.09%)</title><rect x="1121" y="164" width="1" height="15" fill="rgb(217,198,24)"/><text x="1124.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (4 samples, 0.09%)</title><rect x="1121" y="180" width="1" height="15" fill="rgb(250,218,6)"/><text x="1124.00" y="190.50"></text></g><g><title>__new__ (numpy/core/getlimits.py) (4 samples, 0.09%)</title><rect x="1127" y="212" width="1" height="15" fill="rgb(226,82,28)"/><text x="1130.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1129" y="244" width="1" height="15" fill="rgb(206,36,48)"/><text x="1132.00" y="254.50"></text></g><g><title>array_multiply (number.c) (7 samples, 0.16%)</title><rect x="1129" y="212" width="2" height="15" fill="rgb(241,111,36)"/><text x="1132.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 0.14%)</title><rect x="1129" y="228" width="2" height="15" fill="rgb(242,21,53)"/><text x="1132.00" y="238.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (4 samples, 0.09%)</title><rect x="1132" y="324" width="2" height="15" fill="rgb(210,134,1)"/><text x="1135.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (7 samples, 0.16%)</title><rect x="1132" y="308" width="2" height="15" fill="rgb(223,96,21)"/><text x="1135.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (8 samples, 0.19%)</title><rect x="1132" y="292" width="3" height="15" fill="rgb(232,12,4)"/><text x="1135.00" y="302.50"></text></g><g><title>_sum (numpy/core/_methods.py) (13 samples, 0.30%)</title><rect x="1131" y="244" width="4" height="15" fill="rgb(224,224,30)"/><text x="1134.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (13 samples, 0.30%)</title><rect x="1131" y="260" width="4" height="15" fill="rgb(251,104,15)"/><text x="1134.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (12 samples, 0.28%)</title><rect x="1132" y="276" width="3" height="15" fill="rgb(245,26,38)"/><text x="1135.00" y="286.50"></text></g><g><title>array_sum (methods.c) (16 samples, 0.37%)</title><rect x="1131" y="212" width="4" height="15" fill="rgb(242,117,19)"/><text x="1134.00" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c) (16 samples, 0.37%)</title><rect x="1131" y="228" width="4" height="15" fill="rgb(220,94,35)"/><text x="1134.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.12%)</title><rect x="1139" y="356" width="2" height="15" fill="rgb(244,20,25)"/><text x="1142.00" y="366.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (9 samples, 0.21%)</title><rect x="1138" y="324" width="3" height="15" fill="rgb(206,49,50)"/><text x="1141.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 0.16%)</title><rect x="1139" y="340" width="2" height="15" fill="rgb(221,137,45)"/><text x="1142.00" y="350.50"></text></g><g><title>_clip_dep_is_byte_swapped (numpy/core/_methods.py) (4 samples, 0.09%)</title><rect x="1141" y="324" width="1" height="15" fill="rgb(216,7,21)"/><text x="1144.00" y="334.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.09%)</title><rect x="1145" y="340" width="1" height="15" fill="rgb(233,133,17)"/><text x="1148.00" y="350.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (11 samples, 0.25%)</title><rect x="1146" y="340" width="3" height="15" fill="rgb(236,145,33)"/><text x="1149.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.21%)</title><rect x="1146" y="356" width="3" height="15" fill="rgb(242,85,44)"/><text x="1149.00" y="366.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py) (6 samples, 0.14%)</title><rect x="1147" y="372" width="2" height="15" fill="rgb(228,14,39)"/><text x="1150.00" y="382.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1150" y="372" width="1" height="15" fill="rgb(216,115,39)"/><text x="1153.00" y="382.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (8 samples, 0.19%)</title><rect x="1151" y="372" width="2" height="15" fill="rgb(217,93,14)"/><text x="1154.00" y="382.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (6 samples, 0.14%)</title><rect x="1152" y="388" width="1" height="15" fill="rgb(229,120,53)"/><text x="1155.00" y="398.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (65 samples, 1.50%)</title><rect x="1136" y="244" width="18" height="15" fill="rgb(248,129,48)"/><text x="1139.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (63 samples, 1.46%)</title><rect x="1137" y="260" width="17" height="15" fill="rgb(213,18,45)"/><text x="1140.00" y="270.50"></text></g><g><title>array_clip (methods.c) (62 samples, 1.43%)</title><rect x="1137" y="276" width="17" height="15" fill="rgb(224,79,46)"/><text x="1140.00" y="286.50"></text></g><g><title>forward_ndarray_method (methods.c) (62 samples, 1.43%)</title><rect x="1137" y="292" width="17" height="15" fill="rgb(228,114,22)"/><text x="1140.00" y="302.50"></text></g><g><title>_clip (numpy/core/_methods.py) (62 samples, 1.43%)</title><rect x="1137" y="308" width="17" height="15" fill="rgb(254,116,49)"/><text x="1140.00" y="318.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (43 samples, 0.99%)</title><rect x="1142" y="324" width="12" height="15" fill="rgb(226,88,27)"/><text x="1145.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (18 samples, 0.42%)</title><rect x="1149" y="340" width="5" height="15" fill="rgb(249,39,1)"/><text x="1152.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (17 samples, 0.39%)</title><rect x="1149" y="356" width="5" height="15" fill="rgb(242,79,18)"/><text x="1152.00" y="366.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;) (70 samples, 1.62%)</title><rect x="1135" y="212" width="19" height="15" fill="rgb(231,25,29)"/><text x="1138.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (69 samples, 1.60%)</title><rect x="1135" y="228" width="19" height="15" fill="rgb(250,7,29)"/><text x="1138.00" y="238.50"></text></g><g><title>0x7fa05ca89fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.30%)</title><rect x="1156" y="244" width="4" height="15" fill="rgb(216,223,24)"/><text x="1159.00" y="254.50"></text></g><g><title>0x7fa05ca99405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.30%)</title><rect x="1156" y="260" width="4" height="15" fill="rgb(238,93,10)"/><text x="1159.00" y="270.50"></text></g><g><title>0x7fa05ca98c27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.09%)</title><rect x="1159" y="276" width="1" height="15" fill="rgb(249,117,46)"/><text x="1162.00" y="286.50"></text></g><g><title>0x7fa05ca70529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.09%)</title><rect x="1159" y="292" width="1" height="15" fill="rgb(212,186,14)"/><text x="1162.00" y="302.50"></text></g><g><title>array_getbuffer (buffer.c) (4 samples, 0.09%)</title><rect x="1159" y="308" width="1" height="15" fill="rgb(219,87,54)"/><text x="1162.00" y="318.50"></text></g><g><title>_buffer_get_info (buffer.c) (4 samples, 0.09%)</title><rect x="1159" y="324" width="1" height="15" fill="rgb(225,24,21)"/><text x="1162.00" y="334.50"></text></g><g><title>0x7fa05ca8ad2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (25 samples, 0.58%)</title><rect x="1155" y="228" width="7" height="15" fill="rgb(238,56,52)"/><text x="1158.00" y="238.50"></text></g><g><title>__enter__ (warnings.py) (4 samples, 0.09%)</title><rect x="1166" y="260" width="1" height="15" fill="rgb(220,86,16)"/><text x="1169.00" y="270.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (6 samples, 0.14%)</title><rect x="1168" y="260" width="1" height="15" fill="rgb(241,79,16)"/><text x="1171.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (9 samples, 0.21%)</title><rect x="1170" y="260" width="2" height="15" fill="rgb(231,60,22)"/><text x="1173.00" y="270.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (47 samples, 1.09%)</title><rect x="1162" y="228" width="13" height="15" fill="rgb(238,113,23)"/><text x="1165.00" y="238.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (46 samples, 1.06%)</title><rect x="1163" y="244" width="12" height="15" fill="rgb(206,229,21)"/><text x="1166.00" y="254.50"></text></g><g><title>simplefilter (warnings.py) (8 samples, 0.19%)</title><rect x="1173" y="260" width="2" height="15" fill="rgb(213,48,16)"/><text x="1176.00" y="270.50"></text></g><g><title>_add_filter (warnings.py) (5 samples, 0.12%)</title><rect x="1174" y="276" width="1" height="15" fill="rgb(227,192,13)"/><text x="1177.00" y="286.50"></text></g><g><title>array_richcompare (arrayobject.c) (5 samples, 0.12%)</title><rect x="1176" y="228" width="1" height="15" fill="rgb(249,96,49)"/><text x="1179.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.12%)</title><rect x="1176" y="244" width="1" height="15" fill="rgb(225,219,10)"/><text x="1179.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.12%)</title><rect x="1176" y="260" width="1" height="15" fill="rgb(228,161,2)"/><text x="1179.00" y="270.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (5 samples, 0.12%)</title><rect x="1179" y="324" width="1" height="15" fill="rgb(209,24,22)"/><text x="1182.00" y="334.50"></text></g><g><title>array_sum (methods.c) (12 samples, 0.28%)</title><rect x="1178" y="228" width="3" height="15" fill="rgb(244,73,4)"/><text x="1181.00" y="238.50"></text></g><g><title>forward_ndarray_method (methods.c) (12 samples, 0.28%)</title><rect x="1178" y="244" width="3" height="15" fill="rgb(244,223,50)"/><text x="1181.00" y="254.50"></text></g><g><title>_sum (numpy/core/_methods.py) (11 samples, 0.25%)</title><rect x="1178" y="260" width="3" height="15" fill="rgb(250,13,3)"/><text x="1181.00" y="270.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (11 samples, 0.25%)</title><rect x="1178" y="276" width="3" height="15" fill="rgb(238,224,47)"/><text x="1181.00" y="286.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (8 samples, 0.19%)</title><rect x="1179" y="292" width="2" height="15" fill="rgb(248,97,44)"/><text x="1182.00" y="302.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (7 samples, 0.16%)</title><rect x="1179" y="308" width="2" height="15" fill="rgb(241,89,49)"/><text x="1182.00" y="318.50"></text></g><g><title>unicode_endswith (python3.7) (5 samples, 0.12%)</title><rect x="1184" y="260" width="1" height="15" fill="rgb(227,170,31)"/><text x="1187.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (17 samples, 0.39%)</title><rect x="1182" y="244" width="4" height="15" fill="rgb(245,0,36)"/><text x="1185.00" y="254.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (22 samples, 0.51%)</title><rect x="1181" y="228" width="6" height="15" fill="rgb(246,85,0)"/><text x="1184.00" y="238.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (123 samples, 2.84%)</title><rect x="1154" y="212" width="34" height="15" fill="rgb(221,179,29)"/><text x="1157.00" y="222.50">pr..</text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_weight_boosting.py) (239 samples, 5.53%)</title><rect x="1123" y="180" width="65" height="15" fill="rgb(251,175,24)"/><text x="1126.00" y="190.50">&lt;genexp..</text></g><g><title>_samme_proba (sklearn/ensemble/_weight_boosting.py) (237 samples, 5.48%)</title><rect x="1123" y="196" width="65" height="15" fill="rgb(234,127,42)"/><text x="1126.00" y="206.50">_samme_..</text></g><g><title>profile_skl (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (247 samples, 5.71%)</title><rect x="1121" y="68" width="67" height="15" fill="rgb(239,119,54)"/><text x="1124.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (247 samples, 5.71%)</title><rect x="1121" y="84" width="67" height="15" fill="rgb(210,170,39)"/><text x="1124.00" y="94.50">setup_p..</text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (247 samples, 5.71%)</title><rect x="1121" y="100" width="67" height="15" fill="rgb(225,65,39)"/><text x="1124.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (247 samples, 5.71%)</title><rect x="1121" y="116" width="67" height="15" fill="rgb(227,45,39)"/><text x="1124.00" y="126.50">time_pr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (247 samples, 5.71%)</title><rect x="1121" y="132" width="67" height="15" fill="rgb(232,74,17)"/><text x="1124.00" y="142.50">&lt;lambda..</text></g><g><title>predict_proba (sklearn/ensemble/_weight_boosting.py) (247 samples, 5.71%)</title><rect x="1121" y="148" width="67" height="15" fill="rgb(231,26,6)"/><text x="1124.00" y="158.50">predict..</text></g><g><title>decision_function (sklearn/ensemble/_weight_boosting.py) (241 samples, 5.57%)</title><rect x="1123" y="164" width="65" height="15" fill="rgb(236,32,9)"/><text x="1126.00" y="174.50">decisio..</text></g><g><title>&lt;module&gt; (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py) (4,323 samples, 99.98%)</title><rect x="10" y="52" width="1179" height="15" fill="rgb(243,171,41)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_AdaBoostClassifier_default_b_cl_1_4_12_float_.py)</text></g><g><title>all (4,324 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(215,215,22)"/><text x="13.00" y="46.50"></text></g></g></svg>