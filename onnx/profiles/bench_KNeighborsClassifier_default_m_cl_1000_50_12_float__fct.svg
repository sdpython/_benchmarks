<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1158" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1141.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1141.00"> </text><g id="frames"><g><title>&lt;module&gt; (onnx/__init__.py) (2 samples, 0.11%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(207,21,33)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="308" width="1" height="15" fill="rgb(235,138,38)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="324" width="1" height="15" fill="rgb(225,217,32)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="340" width="1" height="15" fill="rgb(228,161,18)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="10" y="356" width="1" height="15" fill="rgb(227,124,27)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="372" width="1" height="15" fill="rgb(224,198,23)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (2 samples, 0.11%)</title><rect x="10" y="388" width="1" height="15" fill="rgb(241,170,33)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="404" width="1" height="15" fill="rgb(249,143,49)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="420" width="1" height="15" fill="rgb(205,133,48)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="436" width="1" height="15" fill="rgb(227,78,5)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="10" y="452" width="1" height="15" fill="rgb(228,205,22)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="468" width="1" height="15" fill="rgb(252,177,52)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (2 samples, 0.11%)</title><rect x="10" y="484" width="1" height="15" fill="rgb(237,28,46)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="500" width="1" height="15" fill="rgb(239,19,8)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="516" width="1" height="15" fill="rgb(238,208,43)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="532" width="1" height="15" fill="rgb(221,50,16)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="10" y="548" width="1" height="15" fill="rgb(251,148,38)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="564" width="1" height="15" fill="rgb(254,208,48)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (2 samples, 0.11%)</title><rect x="10" y="580" width="1" height="15" fill="rgb(246,81,20)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="596" width="1" height="15" fill="rgb(230,132,34)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="612" width="1" height="15" fill="rgb(227,29,7)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="628" width="1" height="15" fill="rgb(215,100,23)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="644" width="1" height="15" fill="rgb(254,133,3)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="660" width="1" height="15" fill="rgb(241,29,29)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="676" width="1" height="15" fill="rgb(209,151,16)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="10" y="692" width="1" height="15" fill="rgb(212,156,35)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="708" width="1" height="15" fill="rgb(209,222,53)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (2 samples, 0.11%)</title><rect x="10" y="724" width="1" height="15" fill="rgb(236,29,24)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="740" width="1" height="15" fill="rgb(221,115,11)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="756" width="1" height="15" fill="rgb(252,60,41)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="772" width="1" height="15" fill="rgb(236,196,53)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="10" y="788" width="1" height="15" fill="rgb(224,80,48)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="10" y="804" width="1" height="15" fill="rgb(233,111,45)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (2 samples, 0.11%)</title><rect x="10" y="820" width="1" height="15" fill="rgb(233,214,47)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.11%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(229,198,53)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.11%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(217,109,30)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.11%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(245,145,32)"/><text x="13.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.11%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(247,167,38)"/><text x="13.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (2 samples, 0.11%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(226,51,32)"/><text x="13.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="916" width="1" height="15" fill="rgb(235,52,51)"/><text x="15.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="932" width="1" height="15" fill="rgb(251,161,39)"/><text x="15.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="948" width="1" height="15" fill="rgb(210,1,36)"/><text x="15.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="12" y="964" width="1" height="15" fill="rgb(232,214,16)"/><text x="15.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="980" width="1" height="15" fill="rgb(246,93,0)"/><text x="15.00" y="990.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_distn_infrastructure.py) (2 samples, 0.11%)</title><rect x="12" y="996" width="1" height="15" fill="rgb(248,221,24)"/><text x="15.00" y="1006.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="1012" width="1" height="15" fill="rgb(227,207,13)"/><text x="15.00" y="1022.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="1028" width="1" height="15" fill="rgb(249,68,49)"/><text x="15.00" y="1038.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="1044" width="1" height="15" fill="rgb(208,166,52)"/><text x="15.00" y="1054.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="1060" width="1" height="15" fill="rgb(249,124,39)"/><text x="15.00" y="1070.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="1076" width="1" height="15" fill="rgb(229,33,28)"/><text x="15.00" y="1086.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="12" y="1092" width="1" height="15" fill="rgb(246,147,36)"/><text x="15.00" y="1102.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="12" y="1108" width="1" height="15" fill="rgb(226,185,25)"/><text x="15.00" y="1118.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.37%)</title><rect x="10" y="196" width="4" height="15" fill="rgb(238,194,0)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.37%)</title><rect x="10" y="212" width="4" height="15" fill="rgb(233,219,2)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.37%)</title><rect x="10" y="228" width="4" height="15" fill="rgb(209,64,6)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.37%)</title><rect x="10" y="244" width="4" height="15" fill="rgb(227,68,8)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.37%)</title><rect x="10" y="260" width="4" height="15" fill="rgb(250,95,25)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.37%)</title><rect x="10" y="276" width="4" height="15" fill="rgb(222,16,22)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (5 samples, 0.26%)</title><rect x="11" y="292" width="3" height="15" fill="rgb(252,75,54)"/><text x="14.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="308" width="3" height="15" fill="rgb(254,195,9)"/><text x="14.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="324" width="3" height="15" fill="rgb(216,90,44)"/><text x="14.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="340" width="3" height="15" fill="rgb(213,191,13)"/><text x="14.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.26%)</title><rect x="11" y="356" width="3" height="15" fill="rgb(226,59,17)"/><text x="14.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="372" width="3" height="15" fill="rgb(249,99,32)"/><text x="14.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (5 samples, 0.26%)</title><rect x="11" y="388" width="3" height="15" fill="rgb(254,110,1)"/><text x="14.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="404" width="3" height="15" fill="rgb(236,110,20)"/><text x="14.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="420" width="3" height="15" fill="rgb(208,156,53)"/><text x="14.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="436" width="3" height="15" fill="rgb(238,6,49)"/><text x="14.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.26%)</title><rect x="11" y="452" width="3" height="15" fill="rgb(221,42,51)"/><text x="14.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="468" width="3" height="15" fill="rgb(225,184,46)"/><text x="14.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (5 samples, 0.26%)</title><rect x="11" y="484" width="3" height="15" fill="rgb(230,155,46)"/><text x="14.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="500" width="3" height="15" fill="rgb(228,11,26)"/><text x="14.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="516" width="3" height="15" fill="rgb(238,226,16)"/><text x="14.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="532" width="3" height="15" fill="rgb(230,100,45)"/><text x="14.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.26%)</title><rect x="11" y="548" width="3" height="15" fill="rgb(243,45,29)"/><text x="14.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="11" y="564" width="3" height="15" fill="rgb(216,104,8)"/><text x="14.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (4 samples, 0.21%)</title><rect x="11" y="580" width="3" height="15" fill="rgb(209,143,23)"/><text x="14.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="11" y="596" width="3" height="15" fill="rgb(211,105,51)"/><text x="14.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="11" y="612" width="3" height="15" fill="rgb(209,72,46)"/><text x="14.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="11" y="628" width="3" height="15" fill="rgb(209,101,38)"/><text x="14.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.21%)</title><rect x="11" y="644" width="3" height="15" fill="rgb(210,39,39)"/><text x="14.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="11" y="660" width="3" height="15" fill="rgb(237,37,26)"/><text x="14.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (4 samples, 0.21%)</title><rect x="11" y="676" width="3" height="15" fill="rgb(236,41,37)"/><text x="14.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="11" y="692" width="3" height="15" fill="rgb(228,26,37)"/><text x="14.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="11" y="708" width="3" height="15" fill="rgb(237,119,25)"/><text x="14.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="11" y="724" width="3" height="15" fill="rgb(213,167,25)"/><text x="14.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.21%)</title><rect x="11" y="740" width="3" height="15" fill="rgb(232,19,35)"/><text x="14.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="11" y="756" width="3" height="15" fill="rgb(226,76,43)"/><text x="14.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (4 samples, 0.21%)</title><rect x="11" y="772" width="3" height="15" fill="rgb(243,162,42)"/><text x="14.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="12" y="788" width="2" height="15" fill="rgb(217,142,4)"/><text x="15.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="12" y="804" width="2" height="15" fill="rgb(215,35,41)"/><text x="15.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="12" y="820" width="2" height="15" fill="rgb(251,137,52)"/><text x="15.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="12" y="836" width="2" height="15" fill="rgb(236,147,34)"/><text x="15.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="12" y="852" width="2" height="15" fill="rgb(208,7,31)"/><text x="15.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.16%)</title><rect x="12" y="868" width="2" height="15" fill="rgb(228,60,31)"/><text x="15.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="12" y="884" width="2" height="15" fill="rgb(229,183,53)"/><text x="15.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (3 samples, 0.16%)</title><rect x="12" y="900" width="2" height="15" fill="rgb(205,214,4)"/><text x="15.00" y="910.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.16%)</title><rect x="14" y="340" width="2" height="15" fill="rgb(253,161,7)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="14" y="356" width="2" height="15" fill="rgb(228,224,47)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="14" y="372" width="2" height="15" fill="rgb(236,90,47)"/><text x="17.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="14" y="388" width="2" height="15" fill="rgb(205,102,13)"/><text x="17.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.16%)</title><rect x="14" y="404" width="2" height="15" fill="rgb(231,41,38)"/><text x="17.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="14" y="420" width="2" height="15" fill="rgb(231,65,49)"/><text x="17.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (3 samples, 0.16%)</title><rect x="14" y="436" width="2" height="15" fill="rgb(245,25,8)"/><text x="17.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="14" y="452" width="2" height="15" fill="rgb(208,177,31)"/><text x="17.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.16%)</title><rect x="14" y="468" width="2" height="15" fill="rgb(231,133,38)"/><text x="17.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="14" y="484" width="2" height="15" fill="rgb(235,32,24)"/><text x="17.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="14" y="500" width="2" height="15" fill="rgb(211,77,15)"/><text x="17.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="14" y="516" width="2" height="15" fill="rgb(206,224,38)"/><text x="17.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.11%)</title><rect x="14" y="532" width="2" height="15" fill="rgb(230,169,27)"/><text x="17.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="14" y="548" width="2" height="15" fill="rgb(219,1,25)"/><text x="17.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="14" y="564" width="2" height="15" fill="rgb(240,187,38)"/><text x="17.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="14" y="580" width="2" height="15" fill="rgb(207,104,42)"/><text x="17.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="14" y="596" width="2" height="15" fill="rgb(250,155,8)"/><text x="17.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="14" y="612" width="2" height="15" fill="rgb(242,209,21)"/><text x="17.00" y="622.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (4 samples, 0.21%)</title><rect x="14" y="244" width="2" height="15" fill="rgb(238,126,22)"/><text x="17.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="14" y="260" width="2" height="15" fill="rgb(205,194,12)"/><text x="17.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="14" y="276" width="2" height="15" fill="rgb(212,76,40)"/><text x="17.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="14" y="292" width="2" height="15" fill="rgb(245,29,15)"/><text x="17.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.21%)</title><rect x="14" y="308" width="2" height="15" fill="rgb(230,62,38)"/><text x="17.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.21%)</title><rect x="14" y="324" width="2" height="15" fill="rgb(247,229,33)"/><text x="17.00" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.63%)</title><rect x="10" y="68" width="7" height="15" fill="rgb(249,129,19)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.63%)</title><rect x="10" y="84" width="7" height="15" fill="rgb(218,160,50)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.63%)</title><rect x="10" y="100" width="7" height="15" fill="rgb(230,218,53)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 0.63%)</title><rect x="10" y="116" width="7" height="15" fill="rgb(206,59,13)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.63%)</title><rect x="10" y="132" width="7" height="15" fill="rgb(228,104,29)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py) (12 samples, 0.63%)</title><rect x="10" y="148" width="7" height="15" fill="rgb(217,151,39)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.63%)</title><rect x="10" y="164" width="7" height="15" fill="rgb(209,166,40)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.63%)</title><rect x="10" y="180" width="7" height="15" fill="rgb(217,102,13)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="14" y="196" width="3" height="15" fill="rgb(207,211,22)"/><text x="17.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.26%)</title><rect x="14" y="212" width="3" height="15" fill="rgb(213,101,51)"/><text x="17.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.26%)</title><rect x="14" y="228" width="3" height="15" fill="rgb(242,218,19)"/><text x="17.00" y="238.50"></text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="18" y="340" width="1" height="15" fill="rgb(212,119,53)"/><text x="21.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="18" y="356" width="1" height="15" fill="rgb(230,102,51)"/><text x="21.00" y="366.50"></text></g><g><title>onnxruntime::ReduceSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="22" y="340" width="1" height="15" fill="rgb(218,142,30)"/><text x="25.00" y="350.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="25" y="452" width="1" height="15" fill="rgb(238,45,4)"/><text x="28.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.26%)</title><rect x="24" y="436" width="4" height="15" fill="rgb(214,207,51)"/><text x="27.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="26" y="452" width="2" height="15" fill="rgb(234,18,39)"/><text x="29.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="26" y="468" width="2" height="15" fill="rgb(229,100,1)"/><text x="29.00" y="478.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="26" y="484" width="2" height="15" fill="rgb(248,49,44)"/><text x="29.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="28" y="436" width="2" height="15" fill="rgb(216,78,53)"/><text x="31.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="28" y="452" width="2" height="15" fill="rgb(250,139,1)"/><text x="31.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="28" y="468" width="2" height="15" fill="rgb(251,169,51)"/><text x="31.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.16%)</title><rect x="28" y="484" width="2" height="15" fill="rgb(223,81,37)"/><text x="31.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.16%)</title><rect x="28" y="500" width="2" height="15" fill="rgb(227,119,27)"/><text x="31.00" y="510.50"></text></g><g><title>0x7fa1b1a72d94 (libc-2.29.so) (47 samples, 2.49%)</title><rect x="32" y="452" width="29" height="15" fill="rgb(205,124,53)"/><text x="35.00" y="462.50">0x..</text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (48 samples, 2.54%)</title><rect x="32" y="436" width="30" height="15" fill="rgb(220,145,11)"/><text x="35.00" y="446.50">on..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (40 samples, 2.12%)</title><rect x="452" y="468" width="25" height="15" fill="rgb(239,150,21)"/><text x="455.00" y="478.50">s..</text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.11%)</title><rect x="476" y="484" width="1" height="15" fill="rgb(222,119,41)"/><text x="479.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="476" y="500" width="1" height="15" fill="rgb(230,17,6)"/><text x="479.00" y="510.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (666 samples, 35.22%)</title><rect x="63" y="436" width="415" height="15" fill="rgb(251,20,50)"/><text x="66.00" y="446.50">onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntim..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (645 samples, 34.11%)</title><rect x="76" y="452" width="402" height="15" fill="rgb(238,150,38)"/><text x="79.00" y="462.50">onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="477" y="468" width="1" height="15" fill="rgb(232,69,15)"/><text x="480.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (105 samples, 5.55%)</title><rect x="479" y="468" width="65" height="15" fill="rgb(206,10,3)"/><text x="482.00" y="478.50">onnxrun..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 0.95%)</title><rect x="533" y="484" width="11" height="15" fill="rgb(237,28,14)"/><text x="536.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="546" y="564" width="1" height="15" fill="rgb(253,150,34)"/><text x="549.00" y="574.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="546" y="580" width="1" height="15" fill="rgb(225,66,3)"/><text x="549.00" y="590.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="546" y="596" width="1" height="15" fill="rgb(253,5,6)"/><text x="549.00" y="606.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="545" y="468" width="2" height="15" fill="rgb(254,189,34)"/><text x="548.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="545" y="484" width="2" height="15" fill="rgb(209,104,49)"/><text x="548.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="545" y="500" width="2" height="15" fill="rgb(225,229,28)"/><text x="548.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="545" y="516" width="2" height="15" fill="rgb(244,69,1)"/><text x="548.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.16%)</title><rect x="546" y="532" width="1" height="15" fill="rgb(216,64,18)"/><text x="549.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.16%)</title><rect x="546" y="548" width="1" height="15" fill="rgb(234,170,16)"/><text x="549.00" y="558.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (841 samples, 44.47%)</title><rect x="23" y="340" width="525" height="15" fill="rgb(238,120,46)"/><text x="26.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_sta..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (841 samples, 44.47%)</title><rect x="23" y="356" width="525" height="15" fill="rgb(208,174,47)"/><text x="26.00" y="366.50">onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_st..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (841 samples, 44.47%)</title><rect x="23" y="372" width="525" height="15" fill="rgb(213,169,21)"/><text x="26.00" y="382.50">onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (840 samples, 44.42%)</title><rect x="24" y="388" width="524" height="15" fill="rgb(214,168,6)"/><text x="27.00" y="398.50">onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (840 samples, 44.42%)</title><rect x="24" y="404" width="524" height="15" fill="rgb(205,152,45)"/><text x="27.00" y="414.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybin..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (840 samples, 44.42%)</title><rect x="24" y="420" width="524" height="15" fill="rgb(227,124,40)"/><text x="27.00" y="430.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (112 samples, 5.92%)</title><rect x="478" y="436" width="70" height="15" fill="rgb(248,45,50)"/><text x="481.00" y="446.50">onnxrun..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (112 samples, 5.92%)</title><rect x="478" y="452" width="70" height="15" fill="rgb(245,102,11)"/><text x="481.00" y="462.50">onnxrun..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="548" y="340" width="3" height="15" fill="rgb(219,11,34)"/><text x="551.00" y="350.50"></text></g><g><title>0x7fa1b1a52f71 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="583" y="372" width="1" height="15" fill="rgb(235,96,24)"/><text x="586.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.11%)</title><rect x="585" y="372" width="1" height="15" fill="rgb(205,63,52)"/><text x="588.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="585" y="388" width="1" height="15" fill="rgb(223,9,22)"/><text x="588.00" y="398.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 3.12%)</title><rect x="551" y="340" width="36" height="15" fill="rgb(248,17,40)"/><text x="554.00" y="350.50">onn..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 3.12%)</title><rect x="551" y="356" width="36" height="15" fill="rgb(213,124,53)"/><text x="554.00" y="366.50">onn..</text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 1.00%)</title><rect x="587" y="340" width="12" height="15" fill="rgb(213,223,23)"/><text x="590.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 1.00%)</title><rect x="587" y="356" width="12" height="15" fill="rgb(207,60,15)"/><text x="590.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.11%)</title><rect x="600" y="356" width="1" height="15" fill="rgb(240,2,12)"/><text x="603.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="600" y="372" width="1" height="15" fill="rgb(217,101,47)"/><text x="603.00" y="382.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (935 samples, 49.44%)</title><rect x="18" y="308" width="584" height="15" fill="rgb(213,117,38)"/><text x="21.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_stat..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (935 samples, 49.44%)</title><rect x="18" y="324" width="584" height="15" fill="rgb(241,34,0)"/><text x="21.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="599" y="340" width="3" height="15" fill="rgb(241,74,51)"/><text x="602.00" y="350.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (936 samples, 49.50%)</title><rect x="18" y="260" width="584" height="15" fill="rgb(223,182,6)"/><text x="21.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state...</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (936 samples, 49.50%)</title><rect x="18" y="276" width="584" height="15" fill="rgb(207,129,40)"/><text x="21.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state...</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (936 samples, 49.50%)</title><rect x="18" y="292" width="584" height="15" fill="rgb(215,207,37)"/><text x="21.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.32%)</title><rect x="604" y="260" width="3" height="15" fill="rgb(254,197,54)"/><text x="607.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.16%)</title><rect x="605" y="276" width="2" height="15" fill="rgb(205,208,33)"/><text x="608.00" y="286.50"></text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (948 samples, 50.13%)</title><rect x="17" y="68" width="592" height="15" fill="rgb(222,19,53)"/><text x="20.00" y="78.50">profile_ort (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (948 samples, 50.13%)</title><rect x="17" y="84" width="592" height="15" fill="rgb(207,63,42)"/><text x="20.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (948 samples, 50.13%)</title><rect x="17" y="100" width="592" height="15" fill="rgb(211,16,40)"/><text x="20.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (947 samples, 50.08%)</title><rect x="18" y="116" width="591" height="15" fill="rgb(213,79,11)"/><text x="21.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (947 samples, 50.08%)</title><rect x="18" y="132" width="591" height="15" fill="rgb(224,201,31)"/><text x="21.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (947 samples, 50.08%)</title><rect x="18" y="148" width="591" height="15" fill="rgb(212,123,38)"/><text x="21.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (947 samples, 50.08%)</title><rect x="18" y="164" width="591" height="15" fill="rgb(235,121,23)"/><text x="21.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (947 samples, 50.08%)</title><rect x="18" y="180" width="591" height="15" fill="rgb(246,78,21)"/><text x="21.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (947 samples, 50.08%)</title><rect x="18" y="196" width="591" height="15" fill="rgb(233,31,14)"/><text x="21.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (946 samples, 50.03%)</title><rect x="18" y="212" width="591" height="15" fill="rgb(254,163,11)"/><text x="21.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.s..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (946 samples, 50.03%)</title><rect x="18" y="228" width="591" height="15" fill="rgb(211,175,35)"/><text x="21.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pyb..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (946 samples, 50.03%)</title><rect x="18" y="244" width="591" height="15" fill="rgb(229,182,6)"/><text x="21.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::In..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="607" y="260" width="2" height="15" fill="rgb(221,205,31)"/><text x="610.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="607" y="276" width="2" height="15" fill="rgb(230,142,9)"/><text x="610.00" y="286.50"></text></g><g><title>PyArray_ToList (convert.c) (2 samples, 0.11%)</title><rect x="610" y="228" width="1" height="15" fill="rgb(223,112,34)"/><text x="613.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (2 samples, 0.11%)</title><rect x="610" y="244" width="1" height="15" fill="rgb(238,142,6)"/><text x="613.00" y="254.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (6 samples, 0.32%)</title><rect x="612" y="276" width="3" height="15" fill="rgb(251,14,37)"/><text x="615.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (6 samples, 0.32%)</title><rect x="612" y="292" width="3" height="15" fill="rgb(222,227,42)"/><text x="615.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (5 samples, 0.26%)</title><rect x="612" y="308" width="3" height="15" fill="rgb(209,34,46)"/><text x="615.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (5 samples, 0.26%)</title><rect x="612" y="324" width="3" height="15" fill="rgb(208,105,18)"/><text x="615.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (2 samples, 0.11%)</title><rect x="614" y="340" width="1" height="15" fill="rgb(207,7,48)"/><text x="617.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (5 samples, 0.26%)</title><rect x="615" y="292" width="4" height="15" fill="rgb(209,85,41)"/><text x="618.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (5 samples, 0.26%)</title><rect x="615" y="308" width="4" height="15" fill="rgb(247,191,26)"/><text x="618.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (4 samples, 0.21%)</title><rect x="616" y="324" width="3" height="15" fill="rgb(253,57,52)"/><text x="619.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (16 samples, 0.85%)</title><rect x="610" y="212" width="10" height="15" fill="rgb(218,88,45)"/><text x="613.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (14 samples, 0.74%)</title><rect x="611" y="228" width="9" height="15" fill="rgb(223,184,40)"/><text x="614.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (13 samples, 0.69%)</title><rect x="612" y="244" width="8" height="15" fill="rgb(237,12,33)"/><text x="615.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c) (13 samples, 0.69%)</title><rect x="612" y="260" width="8" height="15" fill="rgb(220,96,54)"/><text x="615.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (7 samples, 0.37%)</title><rect x="615" y="276" width="5" height="15" fill="rgb(223,97,11)"/><text x="618.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c) (2 samples, 0.11%)</title><rect x="619" y="292" width="1" height="15" fill="rgb(208,208,16)"/><text x="622.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (2 samples, 0.11%)</title><rect x="620" y="212" width="1" height="15" fill="rgb(248,52,8)"/><text x="623.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (2 samples, 0.11%)</title><rect x="620" y="228" width="1" height="15" fill="rgb(251,35,19)"/><text x="623.00" y="238.50"></text></g><g><title>array_astype (methods.c) (2 samples, 0.11%)</title><rect x="620" y="244" width="1" height="15" fill="rgb(229,161,16)"/><text x="623.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.11%)</title><rect x="620" y="260" width="1" height="15" fill="rgb(225,6,49)"/><text x="623.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.11%)</title><rect x="620" y="276" width="1" height="15" fill="rgb(215,59,26)"/><text x="623.00" y="286.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src) (2 samples, 0.11%)</title><rect x="620" y="292" width="1" height="15" fill="rgb(246,97,24)"/><text x="623.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.16%)</title><rect x="630" y="228" width="2" height="15" fill="rgb(237,138,36)"/><text x="633.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c) (2 samples, 0.11%)</title><rect x="631" y="244" width="1" height="15" fill="rgb(210,219,40)"/><text x="634.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c) (2 samples, 0.11%)</title><rect x="631" y="260" width="1" height="15" fill="rgb(223,47,28)"/><text x="634.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (2 samples, 0.11%)</title><rect x="631" y="276" width="1" height="15" fill="rgb(207,184,34)"/><text x="634.00" y="286.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.16%)</title><rect x="632" y="228" width="2" height="15" fill="rgb(220,119,23)"/><text x="635.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c) (3 samples, 0.16%)</title><rect x="632" y="244" width="2" height="15" fill="rgb(236,19,13)"/><text x="635.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (2 samples, 0.11%)</title><rect x="633" y="260" width="1" height="15" fill="rgb(231,115,17)"/><text x="636.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.11%)</title><rect x="633" y="276" width="1" height="15" fill="rgb(214,125,37)"/><text x="636.00" y="286.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (2 samples, 0.11%)</title><rect x="641" y="308" width="1" height="15" fill="rgb(232,225,23)"/><text x="644.00" y="318.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (3 samples, 0.16%)</title><rect x="641" y="292" width="2" height="15" fill="rgb(250,43,11)"/><text x="644.00" y="302.50"></text></g><g><title>array_reshape (methods.c) (6 samples, 0.32%)</title><rect x="640" y="276" width="4" height="15" fill="rgb(241,55,33)"/><text x="643.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (2 samples, 0.11%)</title><rect x="643" y="292" width="1" height="15" fill="rgb(245,63,48)"/><text x="646.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (2 samples, 0.11%)</title><rect x="643" y="308" width="1" height="15" fill="rgb(232,23,31)"/><text x="646.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.11%)</title><rect x="643" y="324" width="1" height="15" fill="rgb(218,93,32)"/><text x="646.00" y="334.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (14 samples, 0.74%)</title><rect x="636" y="260" width="9" height="15" fill="rgb(235,202,48)"/><text x="639.00" y="270.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (18 samples, 0.95%)</title><rect x="634" y="228" width="11" height="15" fill="rgb(233,201,20)"/><text x="637.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (15 samples, 0.79%)</title><rect x="636" y="244" width="9" height="15" fill="rgb(211,21,52)"/><text x="639.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (6 samples, 0.32%)</title><rect x="661" y="260" width="4" height="15" fill="rgb(251,47,7)"/><text x="664.00" y="270.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (2 samples, 0.11%)</title><rect x="712" y="356" width="1" height="15" fill="rgb(242,217,16)"/><text x="715.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.11%)</title><rect x="712" y="372" width="1" height="15" fill="rgb(226,153,31)"/><text x="715.00" y="382.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.11%)</title><rect x="712" y="388" width="1" height="15" fill="rgb(221,78,53)"/><text x="715.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (34 samples, 1.80%)</title><rect x="719" y="436" width="21" height="15" fill="rgb(244,64,39)"/><text x="722.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (60 samples, 3.17%)</title><rect x="717" y="388" width="37" height="15" fill="rgb(207,4,36)"/><text x="720.00" y="398.50">FLO..</text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (60 samples, 3.17%)</title><rect x="717" y="404" width="37" height="15" fill="rgb(213,168,36)"/><text x="720.00" y="414.50">run..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (59 samples, 3.12%)</title><rect x="717" y="420" width="37" height="15" fill="rgb(252,93,2)"/><text x="720.00" y="430.50">sse..</text></g><g><title>_mm_sub_ps (xmmintrin.h) (22 samples, 1.16%)</title><rect x="740" y="436" width="14" height="15" fill="rgb(244,199,23)"/><text x="743.00" y="446.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (3 samples, 0.16%)</title><rect x="755" y="420" width="2" height="15" fill="rgb(226,49,18)"/><text x="758.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.11%)</title><rect x="756" y="436" width="1" height="15" fill="rgb(227,71,39)"/><text x="759.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.11%)</title><rect x="756" y="452" width="1" height="15" fill="rgb(243,134,10)"/><text x="759.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c) (2 samples, 0.11%)</title><rect x="756" y="468" width="1" height="15" fill="rgb(246,180,1)"/><text x="759.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.11%)</title><rect x="756" y="484" width="1" height="15" fill="rgb(241,26,38)"/><text x="759.00" y="494.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (2 samples, 0.11%)</title><rect x="756" y="500" width="1" height="15" fill="rgb(232,79,38)"/><text x="759.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="756" y="516" width="1" height="15" fill="rgb(209,32,3)"/><text x="759.00" y="526.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (4 samples, 0.21%)</title><rect x="755" y="404" width="3" height="15" fill="rgb(253,109,33)"/><text x="758.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (2 samples, 0.11%)</title><rect x="758" y="404" width="2" height="15" fill="rgb(236,9,20)"/><text x="761.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (12 samples, 0.63%)</title><rect x="754" y="388" width="7" height="15" fill="rgb(247,150,1)"/><text x="757.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (3 samples, 0.16%)</title><rect x="760" y="404" width="1" height="15" fill="rgb(249,202,22)"/><text x="763.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (7 samples, 0.37%)</title><rect x="761" y="388" width="5" height="15" fill="rgb(217,56,31)"/><text x="764.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (6 samples, 0.32%)</title><rect x="762" y="404" width="4" height="15" fill="rgb(253,63,42)"/><text x="765.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (6 samples, 0.32%)</title><rect x="762" y="420" width="4" height="15" fill="rgb(210,25,23)"/><text x="765.00" y="430.50"></text></g><g><title>0x7fa1b1a72d50 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="770" y="436" width="1" height="15" fill="rgb(208,185,11)"/><text x="773.00" y="446.50"></text></g><g><title>0x7fa1b1a72ef4 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="771" y="436" width="2" height="15" fill="rgb(228,98,28)"/><text x="774.00" y="446.50"></text></g><g><title>0x7fa1b1a72f36 (libc-2.29.so) (3 samples, 0.16%)</title><rect x="776" y="436" width="2" height="15" fill="rgb(241,203,31)"/><text x="779.00" y="446.50"></text></g><g><title>0x7fa1b1a72f46 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="779" y="436" width="1" height="15" fill="rgb(244,33,5)"/><text x="782.00" y="446.50"></text></g><g><title>0x7fa1b1a72f53 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="780" y="436" width="1" height="15" fill="rgb(230,78,44)"/><text x="783.00" y="446.50"></text></g><g><title>0x7fa1b1a72f58 (libc-2.29.so) (3 samples, 0.16%)</title><rect x="781" y="436" width="2" height="15" fill="rgb(215,160,17)"/><text x="784.00" y="446.50"></text></g><g><title>0x7fa1b1a72f6a (libc-2.29.so) (2 samples, 0.11%)</title><rect x="784" y="436" width="1" height="15" fill="rgb(227,46,29)"/><text x="787.00" y="446.50"></text></g><g><title>0x7fa1b1a72f6e (libc-2.29.so) (2 samples, 0.11%)</title><rect x="785" y="436" width="1" height="15" fill="rgb(220,159,3)"/><text x="788.00" y="446.50"></text></g><g><title>0x7fa1b1a72f7a (libc-2.29.so) (2 samples, 0.11%)</title><rect x="786" y="436" width="2" height="15" fill="rgb(221,57,30)"/><text x="789.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (36 samples, 1.90%)</title><rect x="766" y="404" width="23" height="15" fill="rgb(232,71,37)"/><text x="769.00" y="414.50">n..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (36 samples, 1.90%)</title><rect x="766" y="420" width="23" height="15" fill="rgb(212,213,19)"/><text x="769.00" y="430.50">P..</text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src) (2 samples, 0.11%)</title><rect x="788" y="436" width="1" height="15" fill="rgb(238,79,34)"/><text x="791.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (120 samples, 6.35%)</title><rect x="715" y="356" width="75" height="15" fill="rgb(238,50,15)"/><text x="718.00" y="366.50">execute_..</text></g><g><title>iterator_loop (ufunc_object.c) (120 samples, 6.35%)</title><rect x="715" y="372" width="75" height="15" fill="rgb(243,73,37)"/><text x="718.00" y="382.50">iterator..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (38 samples, 2.01%)</title><rect x="766" y="388" width="24" height="15" fill="rgb(251,48,40)"/><text x="769.00" y="398.50">n..</text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (2 samples, 0.11%)</title><rect x="789" y="404" width="1" height="15" fill="rgb(245,141,12)"/><text x="792.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (133 samples, 7.03%)</title><rect x="708" y="308" width="83" height="15" fill="rgb(243,21,27)"/><text x="711.00" y="318.50">_run (mlp..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (131 samples, 6.93%)</title><rect x="710" y="324" width="81" height="15" fill="rgb(218,54,30)"/><text x="713.00" y="334.50">ufunc_gen..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (129 samples, 6.82%)</title><rect x="711" y="340" width="80" height="15" fill="rgb(227,153,32)"/><text x="714.00" y="350.50">PyUFunc_G..</text></g><g><title>0x7fa1b1a72d94 (libc-2.29.so) (41 samples, 2.17%)</title><rect x="797" y="388" width="26" height="15" fill="rgb(240,128,11)"/><text x="800.00" y="398.50">0..</text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (2 samples, 0.11%)</title><rect x="823" y="388" width="1" height="15" fill="rgb(209,25,34)"/><text x="826.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (45 samples, 2.38%)</title><rect x="796" y="356" width="28" height="15" fill="rgb(207,158,28)"/><text x="799.00" y="366.50">P..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (45 samples, 2.38%)</title><rect x="796" y="372" width="28" height="15" fill="rgb(213,4,46)"/><text x="799.00" y="382.50">r..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (54 samples, 2.86%)</title><rect x="791" y="308" width="34" height="15" fill="rgb(246,120,45)"/><text x="794.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c) (49 samples, 2.59%)</title><rect x="795" y="324" width="30" height="15" fill="rgb(207,199,7)"/><text x="798.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c) (46 samples, 2.43%)</title><rect x="796" y="340" width="29" height="15" fill="rgb(207,147,26)"/><text x="799.00" y="350.50">Py..</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.11%)</title><rect x="831" y="324" width="2" height="15" fill="rgb(211,90,43)"/><text x="834.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.11%)</title><rect x="831" y="340" width="2" height="15" fill="rgb(254,35,51)"/><text x="834.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.11%)</title><rect x="831" y="356" width="2" height="15" fill="rgb(232,194,49)"/><text x="834.00" y="366.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.11%)</title><rect x="849" y="468" width="1" height="15" fill="rgb(238,32,14)"/><text x="852.00" y="478.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (2 samples, 0.11%)</title><rect x="850" y="468" width="1" height="15" fill="rgb(250,108,24)"/><text x="853.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (9 samples, 0.48%)</title><rect x="848" y="452" width="6" height="15" fill="rgb(251,185,10)"/><text x="851.00" y="462.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (2 samples, 0.11%)</title><rect x="854" y="452" width="1" height="15" fill="rgb(249,189,37)"/><text x="857.00" y="462.50"></text></g><g><title>array_alloc (arrayobject.c) (2 samples, 0.11%)</title><rect x="855" y="516" width="1" height="15" fill="rgb(246,214,54)"/><text x="858.00" y="526.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.16%)</title><rect x="856" y="516" width="2" height="15" fill="rgb(237,145,15)"/><text x="859.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.16%)</title><rect x="856" y="532" width="2" height="15" fill="rgb(245,30,54)"/><text x="859.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (3 samples, 0.16%)</title><rect x="856" y="548" width="2" height="15" fill="rgb(240,17,4)"/><text x="859.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.16%)</title><rect x="856" y="564" width="2" height="15" fill="rgb(230,139,35)"/><text x="859.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (8 samples, 0.42%)</title><rect x="855" y="484" width="5" height="15" fill="rgb(229,162,35)"/><text x="858.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (8 samples, 0.42%)</title><rect x="855" y="500" width="5" height="15" fill="rgb(239,171,8)"/><text x="858.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (3 samples, 0.16%)</title><rect x="858" y="516" width="2" height="15" fill="rgb(218,100,10)"/><text x="861.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.16%)</title><rect x="858" y="532" width="2" height="15" fill="rgb(218,44,10)"/><text x="861.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="859" y="548" width="1" height="15" fill="rgb(206,132,9)"/><text x="862.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (12 samples, 0.63%)</title><rect x="855" y="452" width="8" height="15" fill="rgb(242,44,9)"/><text x="858.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (12 samples, 0.63%)</title><rect x="855" y="468" width="8" height="15" fill="rgb(251,224,51)"/><text x="858.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.16%)</title><rect x="861" y="484" width="2" height="15" fill="rgb(230,24,3)"/><text x="864.00" y="494.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c) (2 samples, 0.11%)</title><rect x="864" y="484" width="1" height="15" fill="rgb(220,152,13)"/><text x="867.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (5 samples, 0.26%)</title><rect x="863" y="468" width="3" height="15" fill="rgb(233,6,34)"/><text x="866.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (2 samples, 0.11%)</title><rect x="865" y="484" width="1" height="15" fill="rgb(242,212,15)"/><text x="868.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (7 samples, 0.37%)</title><rect x="863" y="452" width="4" height="15" fill="rgb(220,140,38)"/><text x="866.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src) (81 samples, 4.28%)</title><rect x="873" y="468" width="51" height="15" fill="rgb(235,7,22)"/><text x="876.00" y="478.50">FLOAT..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (66 samples, 3.49%)</title><rect x="882" y="484" width="42" height="15" fill="rgb(250,66,25)"/><text x="885.00" y="494.50">pai..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.21%)</title><rect x="932" y="484" width="2" height="15" fill="rgb(241,89,28)"/><text x="935.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (140 samples, 7.40%)</title><rect x="848" y="436" width="87" height="15" fill="rgb(239,94,19)"/><text x="851.00" y="446.50">PyUFunc_Re..</text></g><g><title>reduce_loop (ufunc_object.c) (109 samples, 5.76%)</title><rect x="867" y="452" width="68" height="15" fill="rgb(224,61,8)"/><text x="870.00" y="462.50">reduce_..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (17 samples, 0.90%)</title><rect x="924" y="468" width="11" height="15" fill="rgb(215,13,3)"/><text x="927.00" y="478.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (166 samples, 8.78%)</title><rect x="833" y="324" width="103" height="15" fill="rgb(217,176,52)"/><text x="836.00" y="334.50">sum (&lt;__arra..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (161 samples, 8.51%)</title><rect x="836" y="340" width="100" height="15" fill="rgb(241,99,43)"/><text x="839.00" y="350.50">array_implem..</text></g><g><title>sum (numpy/core/fromnumeric.py) (159 samples, 8.41%)</title><rect x="837" y="356" width="99" height="15" fill="rgb(211,137,12)"/><text x="840.00" y="366.50">sum (numpy/..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (152 samples, 8.04%)</title><rect x="841" y="372" width="95" height="15" fill="rgb(205,173,49)"/><text x="844.00" y="382.50">_wrapreduct..</text></g><g><title>ufunc_reduce (ufunc_object.c) (146 samples, 7.72%)</title><rect x="845" y="388" width="91" height="15" fill="rgb(205,131,5)"/><text x="848.00" y="398.50">ufunc_redu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (145 samples, 7.67%)</title><rect x="846" y="404" width="90" height="15" fill="rgb(211,126,4)"/><text x="849.00" y="414.50">PyUFunc_Ge..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (142 samples, 7.51%)</title><rect x="848" y="420" width="88" height="15" fill="rgb(251,47,3)"/><text x="851.00" y="430.50">PyUFunc_Re..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (2 samples, 0.11%)</title><rect x="935" y="436" width="1" height="15" fill="rgb(224,135,22)"/><text x="938.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.11%)</title><rect x="935" y="452" width="1" height="15" fill="rgb(206,129,22)"/><text x="938.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.11%)</title><rect x="937" y="372" width="2" height="15" fill="rgb(232,134,23)"/><text x="940.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.11%)</title><rect x="937" y="388" width="2" height="15" fill="rgb(220,122,1)"/><text x="940.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h) (20 samples, 1.06%)</title><rect x="944" y="404" width="12" height="15" fill="rgb(235,51,50)"/><text x="947.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (57 samples, 3.01%)</title><rect x="937" y="356" width="36" height="15" fill="rgb(224,154,44)"/><text x="940.00" y="366.50">exe..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (55 samples, 2.91%)</title><rect x="939" y="372" width="34" height="15" fill="rgb(235,193,13)"/><text x="942.00" y="382.50">tr..</text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (53 samples, 2.80%)</title><rect x="940" y="388" width="33" height="15" fill="rgb(228,117,27)"/><text x="943.00" y="398.50">ss..</text></g><g><title>_mm_store_ps (xmmintrin.h) (27 samples, 1.43%)</title><rect x="956" y="404" width="17" height="15" fill="rgb(243,101,27)"/><text x="959.00" y="414.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (525 samples, 27.76%)</title><rect x="647" y="244" width="327" height="15" fill="rgb(235,11,37)"/><text x="650.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (496 samples, 26.23%)</title><rect x="665" y="260" width="309" height="15" fill="rgb(238,58,15)"/><text x="668.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (444 samples, 23.48%)</title><rect x="697" y="276" width="277" height="15" fill="rgb(248,43,29)"/><text x="700.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (435 samples, 23.00%)</title><rect x="703" y="292" width="271" height="15" fill="rgb(241,7,49)"/><text x="706.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (239 samples, 12.64%)</title><rect x="825" y="308" width="149" height="15" fill="rgb(237,75,4)"/><text x="828.00" y="318.50">_run (mlprodict/onn..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (61 samples, 3.23%)</title><rect x="936" y="324" width="38" height="15" fill="rgb(244,173,23)"/><text x="939.00" y="334.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (61 samples, 3.23%)</title><rect x="936" y="340" width="38" height="15" fill="rgb(207,65,34)"/><text x="939.00" y="350.50">PyU..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.11%)</title><rect x="973" y="356" width="1" height="15" fill="rgb(252,44,54)"/><text x="976.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (528 samples, 27.92%)</title><rect x="645" y="228" width="330" height="15" fill="rgb(211,174,11)"/><text x="648.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (3 samples, 0.16%)</title><rect x="975" y="276" width="2" height="15" fill="rgb(212,69,35)"/><text x="978.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.16%)</title><rect x="975" y="292" width="2" height="15" fill="rgb(229,7,22)"/><text x="978.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (3 samples, 0.16%)</title><rect x="975" y="308" width="2" height="15" fill="rgb(218,113,7)"/><text x="978.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (2 samples, 0.11%)</title><rect x="975" y="324" width="2" height="15" fill="rgb(237,66,48)"/><text x="978.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (572 samples, 30.25%)</title><rect x="621" y="212" width="357" height="15" fill="rgb(222,3,3)"/><text x="624.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (5 samples, 0.26%)</title><rect x="975" y="228" width="3" height="15" fill="rgb(245,127,15)"/><text x="978.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.26%)</title><rect x="975" y="244" width="3" height="15" fill="rgb(230,129,5)"/><text x="978.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (5 samples, 0.26%)</title><rect x="975" y="260" width="3" height="15" fill="rgb(231,108,47)"/><text x="978.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (2 samples, 0.11%)</title><rect x="977" y="276" width="1" height="15" fill="rgb(239,150,11)"/><text x="980.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.11%)</title><rect x="977" y="292" width="1" height="15" fill="rgb(251,55,41)"/><text x="980.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (2 samples, 0.11%)</title><rect x="977" y="308" width="1" height="15" fill="rgb(254,146,37)"/><text x="980.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (2 samples, 0.11%)</title><rect x="977" y="324" width="1" height="15" fill="rgb(236,61,10)"/><text x="980.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (2 samples, 0.11%)</title><rect x="977" y="340" width="1" height="15" fill="rgb(228,78,34)"/><text x="980.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.11%)</title><rect x="977" y="356" width="1" height="15" fill="rgb(242,221,40)"/><text x="980.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.11%)</title><rect x="977" y="372" width="1" height="15" fill="rgb(237,104,28)"/><text x="980.00" y="382.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src) (10 samples, 0.53%)</title><rect x="979" y="372" width="6" height="15" fill="rgb(249,175,45)"/><text x="982.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (10 samples, 0.53%)</title><rect x="979" y="388" width="6" height="15" fill="rgb(229,196,13)"/><text x="982.00" y="398.50"></text></g><g><title>amedian3_swap_float (selection.c.src) (3 samples, 0.16%)</title><rect x="989" y="388" width="2" height="15" fill="rgb(243,209,48)"/><text x="992.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c) (47 samples, 2.49%)</title><rect x="978" y="356" width="29" height="15" fill="rgb(206,139,31)"/><text x="981.00" y="366.50">_n..</text></g><g><title>aintroselect_float (selection.c.src) (35 samples, 1.85%)</title><rect x="985" y="372" width="22" height="15" fill="rgb(209,128,8)"/><text x="988.00" y="382.50">a..</text></g><g><title>aunguarded_partition_float (selection.c.src) (26 samples, 1.37%)</title><rect x="991" y="388" width="16" height="15" fill="rgb(235,145,9)"/><text x="994.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (16 samples, 0.85%)</title><rect x="997" y="404" width="10" height="15" fill="rgb(234,139,48)"/><text x="1000.00" y="414.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (48 samples, 2.54%)</title><rect x="978" y="260" width="30" height="15" fill="rgb(225,211,16)"/><text x="981.00" y="270.50">ar..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (48 samples, 2.54%)</title><rect x="978" y="276" width="30" height="15" fill="rgb(227,17,50)"/><text x="981.00" y="286.50">ar..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (48 samples, 2.54%)</title><rect x="978" y="292" width="30" height="15" fill="rgb(217,51,47)"/><text x="981.00" y="302.50">ar..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (48 samples, 2.54%)</title><rect x="978" y="308" width="30" height="15" fill="rgb(211,78,48)"/><text x="981.00" y="318.50">_w..</text></g><g><title>array_argpartition (methods.c) (48 samples, 2.54%)</title><rect x="978" y="324" width="30" height="15" fill="rgb(240,1,17)"/><text x="981.00" y="334.50">ar..</text></g><g><title>PyArray_ArgPartition (item_selection.c) (48 samples, 2.54%)</title><rect x="978" y="340" width="30" height="15" fill="rgb(207,161,15)"/><text x="981.00" y="350.50">Py..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (51 samples, 2.70%)</title><rect x="978" y="212" width="32" height="15" fill="rgb(230,82,0)"/><text x="981.00" y="222.50">_r..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (51 samples, 2.70%)</title><rect x="978" y="228" width="32" height="15" fill="rgb(249,150,45)"/><text x="981.00" y="238.50">_c..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (51 samples, 2.70%)</title><rect x="978" y="244" width="32" height="15" fill="rgb(219,168,50)"/><text x="981.00" y="254.50">to..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (3 samples, 0.16%)</title><rect x="1012" y="228" width="2" height="15" fill="rgb(225,189,54)"/><text x="1015.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (3 samples, 0.16%)</title><rect x="1012" y="244" width="2" height="15" fill="rgb(248,176,39)"/><text x="1015.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.16%)</title><rect x="1012" y="260" width="2" height="15" fill="rgb(246,143,2)"/><text x="1015.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (3 samples, 0.16%)</title><rect x="1012" y="276" width="2" height="15" fill="rgb(233,35,50)"/><text x="1015.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (3 samples, 0.16%)</title><rect x="1012" y="292" width="2" height="15" fill="rgb(227,162,3)"/><text x="1015.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.16%)</title><rect x="1012" y="308" width="2" height="15" fill="rgb(238,222,13)"/><text x="1015.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.16%)</title><rect x="1012" y="324" width="2" height="15" fill="rgb(244,127,22)"/><text x="1015.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (3 samples, 0.16%)</title><rect x="1012" y="340" width="2" height="15" fill="rgb(233,176,4)"/><text x="1015.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (3 samples, 0.16%)</title><rect x="1012" y="356" width="2" height="15" fill="rgb(249,183,50)"/><text x="1015.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c) (2 samples, 0.11%)</title><rect x="1012" y="372" width="2" height="15" fill="rgb(210,198,44)"/><text x="1015.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (4 samples, 0.21%)</title><rect x="1014" y="228" width="2" height="15" fill="rgb(216,228,2)"/><text x="1017.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.21%)</title><rect x="1014" y="244" width="2" height="15" fill="rgb(244,74,27)"/><text x="1017.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.21%)</title><rect x="1014" y="260" width="2" height="15" fill="rgb(254,17,8)"/><text x="1017.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.21%)</title><rect x="1014" y="276" width="2" height="15" fill="rgb(212,56,50)"/><text x="1017.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (4 samples, 0.21%)</title><rect x="1014" y="292" width="2" height="15" fill="rgb(240,188,50)"/><text x="1017.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src) (4 samples, 0.21%)</title><rect x="1014" y="308" width="2" height="15" fill="rgb(244,125,5)"/><text x="1017.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src) (4 samples, 0.21%)</title><rect x="1014" y="324" width="2" height="15" fill="rgb(216,146,37)"/><text x="1017.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src) (4 samples, 0.21%)</title><rect x="1014" y="340" width="2" height="15" fill="rgb(249,122,46)"/><text x="1017.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (4 samples, 0.21%)</title><rect x="1014" y="356" width="2" height="15" fill="rgb(210,229,50)"/><text x="1017.00" y="366.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (654 samples, 34.58%)</title><rect x="609" y="100" width="408" height="15" fill="rgb(237,25,25)"/><text x="612.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1000_5..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (654 samples, 34.58%)</title><rect x="609" y="116" width="408" height="15" fill="rgb(250,15,24)"/><text x="612.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (654 samples, 34.58%)</title><rect x="609" y="132" width="408" height="15" fill="rgb(207,44,5)"/><text x="612.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (654 samples, 34.58%)</title><rect x="609" y="148" width="408" height="15" fill="rgb(248,215,6)"/><text x="612.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (653 samples, 34.53%)</title><rect x="609" y="164" width="408" height="15" fill="rgb(216,188,22)"/><text x="612.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference...</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (653 samples, 34.53%)</title><rect x="609" y="180" width="408" height="15" fill="rgb(234,167,9)"/><text x="612.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (652 samples, 34.48%)</title><rect x="610" y="196" width="407" height="15" fill="rgb(241,215,35)"/><text x="613.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (10 samples, 0.53%)</title><rect x="1010" y="212" width="7" height="15" fill="rgb(230,30,27)"/><text x="1013.00" y="222.50"></text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (656 samples, 34.69%)</title><rect x="609" y="68" width="409" height="15" fill="rgb(211,176,21)"/><text x="612.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (656 samples, 34.69%)</title><rect x="609" y="84" width="409" height="15" fill="rgb(243,70,35)"/><text x="612.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.11%)</title><rect x="1017" y="100" width="1" height="15" fill="rgb(212,87,14)"/><text x="1020.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.11%)</title><rect x="1017" y="116" width="1" height="15" fill="rgb(233,206,39)"/><text x="1020.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.11%)</title><rect x="1017" y="132" width="1" height="15" fill="rgb(244,140,7)"/><text x="1020.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.11%)</title><rect x="1017" y="148" width="1" height="15" fill="rgb(208,64,23)"/><text x="1020.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.11%)</title><rect x="1017" y="164" width="1" height="15" fill="rgb(216,193,49)"/><text x="1020.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (2 samples, 0.11%)</title><rect x="1017" y="180" width="1" height="15" fill="rgb(218,176,2)"/><text x="1020.00" y="190.50"></text></g><g><title>preprocess_parameters (mlprodict/onnxrt/onnx_inference_node.py) (2 samples, 0.11%)</title><rect x="1017" y="196" width="1" height="15" fill="rgb(217,163,50)"/><text x="1020.00" y="206.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.11%)</title><rect x="1017" y="212" width="1" height="15" fill="rgb(213,178,13)"/><text x="1020.00" y="222.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.11%)</title><rect x="1017" y="228" width="1" height="15" fill="rgb(245,170,13)"/><text x="1020.00" y="238.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (2 samples, 0.11%)</title><rect x="1017" y="244" width="1" height="15" fill="rgb(219,106,15)"/><text x="1020.00" y="254.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (2 samples, 0.11%)</title><rect x="1017" y="260" width="1" height="15" fill="rgb(225,104,20)"/><text x="1020.00" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="276" width="1" height="15" fill="rgb(209,129,15)"/><text x="1020.00" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="292" width="1" height="15" fill="rgb(216,149,22)"/><text x="1020.00" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="308" width="1" height="15" fill="rgb(239,72,32)"/><text x="1020.00" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="1017" y="324" width="1" height="15" fill="rgb(251,203,20)"/><text x="1020.00" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="340" width="1" height="15" fill="rgb(246,66,39)"/><text x="1020.00" y="350.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (2 samples, 0.11%)</title><rect x="1017" y="356" width="1" height="15" fill="rgb(220,181,7)"/><text x="1020.00" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="372" width="1" height="15" fill="rgb(210,192,21)"/><text x="1020.00" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="388" width="1" height="15" fill="rgb(205,103,13)"/><text x="1020.00" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="404" width="1" height="15" fill="rgb(225,40,39)"/><text x="1020.00" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="1017" y="420" width="1" height="15" fill="rgb(239,12,1)"/><text x="1020.00" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="436" width="1" height="15" fill="rgb(245,66,17)"/><text x="1020.00" y="446.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (2 samples, 0.11%)</title><rect x="1017" y="452" width="1" height="15" fill="rgb(245,44,19)"/><text x="1020.00" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="468" width="1" height="15" fill="rgb(225,69,13)"/><text x="1020.00" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="484" width="1" height="15" fill="rgb(248,21,16)"/><text x="1020.00" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="500" width="1" height="15" fill="rgb(224,201,17)"/><text x="1020.00" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.11%)</title><rect x="1017" y="516" width="1" height="15" fill="rgb(216,79,10)"/><text x="1020.00" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.11%)</title><rect x="1017" y="532" width="1" height="15" fill="rgb(225,40,31)"/><text x="1020.00" y="542.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/doc/doc_helper.py) (2 samples, 0.11%)</title><rect x="1017" y="548" width="1" height="15" fill="rgb(216,185,17)"/><text x="1020.00" y="558.50"></text></g><g><title>_get_doc_template (mlprodict/onnxrt/doc/doc_helper.py) (2 samples, 0.11%)</title><rect x="1017" y="564" width="1" height="15" fill="rgb(241,118,49)"/><text x="1020.00" y="574.50"></text></g><g><title>__new__ (jinja2/environment.py) (2 samples, 0.11%)</title><rect x="1017" y="580" width="1" height="15" fill="rgb(215,53,44)"/><text x="1020.00" y="590.50"></text></g><g><title>from_string (jinja2/environment.py) (2 samples, 0.11%)</title><rect x="1017" y="596" width="1" height="15" fill="rgb(251,214,9)"/><text x="1020.00" y="606.50"></text></g><g><title>compile (jinja2/environment.py) (2 samples, 0.11%)</title><rect x="1017" y="612" width="1" height="15" fill="rgb(253,110,34)"/><text x="1020.00" y="622.50"></text></g><g><title>array_assign_subscript (mapping.c) (2 samples, 0.11%)</title><rect x="1018" y="164" width="1" height="15" fill="rgb(225,11,53)"/><text x="1021.00" y="174.50"></text></g><g><title>mapiter_set (lowlevel_strided_loops.c.src) (2 samples, 0.11%)</title><rect x="1018" y="180" width="1" height="15" fill="rgb(207,121,17)"/><text x="1021.00" y="190.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (2 samples, 0.11%)</title><rect x="1019" y="180" width="1" height="15" fill="rgb(215,206,7)"/><text x="1022.00" y="190.50"></text></g><g><title>array_subscript (mapping.c) (4 samples, 0.21%)</title><rect x="1019" y="164" width="3" height="15" fill="rgb(245,73,38)"/><text x="1022.00" y="174.50"></text></g><g><title>0x7fa18be6632c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="1024" y="324" width="1" height="15" fill="rgb(214,78,40)"/><text x="1027.00" y="334.50"></text></g><g><title>0x7fa18be315cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="1024" y="340" width="1" height="15" fill="rgb(231,8,0)"/><text x="1027.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (3 samples, 0.16%)</title><rect x="1024" y="356" width="1" height="15" fill="rgb(230,24,22)"/><text x="1027.00" y="366.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (2 samples, 0.11%)</title><rect x="1024" y="372" width="1" height="15" fill="rgb(250,12,37)"/><text x="1027.00" y="382.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.11%)</title><rect x="1024" y="388" width="1" height="15" fill="rgb(249,200,33)"/><text x="1027.00" y="398.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.11%)</title><rect x="1024" y="404" width="1" height="15" fill="rgb(218,108,48)"/><text x="1027.00" y="414.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.11%)</title><rect x="1024" y="420" width="1" height="15" fill="rgb(251,186,26)"/><text x="1027.00" y="430.50"></text></g><g><title>PyArray_FromArray (ctors.c) (2 samples, 0.11%)</title><rect x="1024" y="436" width="1" height="15" fill="rgb(220,128,3)"/><text x="1027.00" y="446.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.11%)</title><rect x="1024" y="452" width="1" height="15" fill="rgb(223,190,22)"/><text x="1027.00" y="462.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.11%)</title><rect x="1024" y="468" width="1" height="15" fill="rgb(234,86,32)"/><text x="1027.00" y="478.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (2 samples, 0.11%)</title><rect x="1024" y="484" width="1" height="15" fill="rgb(220,64,48)"/><text x="1027.00" y="494.50"></text></g><g><title>0x7fa18be3cfa3 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1026" y="340" width="1" height="15" fill="rgb(230,51,23)"/><text x="1029.00" y="350.50"></text></g><g><title>0x7fa18be3cfb9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1027" y="340" width="2" height="15" fill="rgb(242,175,2)"/><text x="1030.00" y="350.50"></text></g><g><title>0x7fa1b1bbccd6 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1033" y="372" width="1" height="15" fill="rgb(210,88,16)"/><text x="1036.00" y="382.50"></text></g><g><title>0x7fa18be3cfc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.58%)</title><rect x="1029" y="340" width="7" height="15" fill="rgb(224,125,24)"/><text x="1032.00" y="350.50"></text></g><g><title>pow (libm-2.29.so) (10 samples, 0.53%)</title><rect x="1030" y="356" width="6" height="15" fill="rgb(223,209,31)"/><text x="1033.00" y="366.50"></text></g><g><title>0x7fa18be680dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 0.95%)</title><rect x="1025" y="324" width="12" height="15" fill="rgb(205,44,6)"/><text x="1028.00" y="334.50"></text></g><g><title>0x7fa1b1bbcc50 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1048" y="388" width="1" height="15" fill="rgb(207,25,34)"/><text x="1051.00" y="398.50"></text></g><g><title>0x7fa1b1bbcd47 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1051" y="388" width="1" height="15" fill="rgb(230,3,32)"/><text x="1054.00" y="398.50"></text></g><g><title>0x7fa1b1bbcdd4 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1055" y="388" width="1" height="15" fill="rgb(206,12,53)"/><text x="1058.00" y="398.50"></text></g><g><title>0x7fa1b1bbcde4 (libm-2.29.so) (3 samples, 0.16%)</title><rect x="1056" y="388" width="2" height="15" fill="rgb(213,183,50)"/><text x="1059.00" y="398.50"></text></g><g><title>0x7fa18be3cfc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (30 samples, 1.59%)</title><rect x="1041" y="356" width="19" height="15" fill="rgb(236,164,29)"/><text x="1044.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (30 samples, 1.59%)</title><rect x="1041" y="372" width="19" height="15" fill="rgb(250,158,1)"/><text x="1044.00" y="382.50"></text></g><g><title>0x7fa1b1bbd143 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1058" y="388" width="2" height="15" fill="rgb(243,182,4)"/><text x="1061.00" y="398.50"></text></g><g><title>0x7fa18be3f426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (38 samples, 2.01%)</title><rect x="1037" y="340" width="23" height="15" fill="rgb(235,183,34)"/><text x="1040.00" y="350.50">0..</text></g><g><title>0x7fa1b1bbcb20 (libm-2.29.so) (3 samples, 0.16%)</title><rect x="1066" y="388" width="2" height="15" fill="rgb(241,72,41)"/><text x="1069.00" y="398.50"></text></g><g><title>0x7fa1b1bbcc25 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1071" y="388" width="1" height="15" fill="rgb(213,162,38)"/><text x="1074.00" y="398.50"></text></g><g><title>0x7fa1b1bbcc9e (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1073" y="388" width="2" height="15" fill="rgb(249,68,25)"/><text x="1076.00" y="398.50"></text></g><g><title>0x7fa1b1bbcd19 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1076" y="388" width="1" height="15" fill="rgb(232,152,7)"/><text x="1079.00" y="398.50"></text></g><g><title>0x7fa1b1bbcdbc (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1083" y="388" width="1" height="15" fill="rgb(237,104,0)"/><text x="1086.00" y="398.50"></text></g><g><title>0x7fa1b1bbcdf0 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="1085" y="388" width="2" height="15" fill="rgb(238,64,16)"/><text x="1088.00" y="398.50"></text></g><g><title>0x7fa18be3cfc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (42 samples, 2.22%)</title><rect x="1061" y="356" width="26" height="15" fill="rgb(247,89,44)"/><text x="1064.00" y="366.50">0..</text></g><g><title>pow (libm-2.29.so) (42 samples, 2.22%)</title><rect x="1061" y="372" width="26" height="15" fill="rgb(212,81,25)"/><text x="1064.00" y="382.50">p..</text></g><g><title>0x7fa18be3f454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (44 samples, 2.33%)</title><rect x="1060" y="340" width="28" height="15" fill="rgb(248,225,6)"/><text x="1063.00" y="350.50">0..</text></g><g><title>0x7fa18be3f2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 0.74%)</title><rect x="1088" y="356" width="9" height="15" fill="rgb(238,196,19)"/><text x="1091.00" y="366.50"></text></g><g><title>0x7fa18be3f2b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="1097" y="356" width="1" height="15" fill="rgb(211,68,49)"/><text x="1100.00" y="366.50"></text></g><g><title>0x7fa18be3f2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (28 samples, 1.48%)</title><rect x="1098" y="356" width="18" height="15" fill="rgb(209,138,33)"/><text x="1101.00" y="366.50"></text></g><g><title>0x7fa18be3f2d9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="1116" y="356" width="2" height="15" fill="rgb(219,147,32)"/><text x="1119.00" y="366.50"></text></g><g><title>0x7fa18be3f323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.26%)</title><rect x="1118" y="356" width="3" height="15" fill="rgb(246,108,46)"/><text x="1121.00" y="366.50"></text></g><g><title>0x7fa18be3f494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (55 samples, 2.91%)</title><rect x="1088" y="340" width="34" height="15" fill="rgb(219,202,4)"/><text x="1091.00" y="350.50">0x..</text></g><g><title>0x7fa18be3f2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.53%)</title><rect x="1122" y="356" width="6" height="15" fill="rgb(230,173,27)"/><text x="1125.00" y="366.50"></text></g><g><title>0x7fa18be3f2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.42%)</title><rect x="1128" y="356" width="5" height="15" fill="rgb(218,116,21)"/><text x="1131.00" y="366.50"></text></g><g><title>0x7fa18be3f4bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (19 samples, 1.00%)</title><rect x="1122" y="340" width="12" height="15" fill="rgb(229,6,33)"/><text x="1125.00" y="350.50"></text></g><g><title>0x7fa18be3f2ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (26 samples, 1.37%)</title><rect x="1135" y="356" width="16" height="15" fill="rgb(248,96,48)"/><text x="1138.00" y="366.50"></text></g><g><title>0x7fa18be3f2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (29 samples, 1.53%)</title><rect x="1152" y="356" width="18" height="15" fill="rgb(236,7,27)"/><text x="1155.00" y="366.50"></text></g><g><title>0x7fa18be3f50f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (67 samples, 3.54%)</title><rect x="1134" y="340" width="42" height="15" fill="rgb(247,195,13)"/><text x="1137.00" y="350.50">0x7..</text></g><g><title>0x7fa18be3f323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.26%)</title><rect x="1173" y="356" width="3" height="15" fill="rgb(238,201,52)"/><text x="1176.00" y="366.50"></text></g><g><title>0x7fa18be3f2bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 0.74%)</title><rect x="1176" y="356" width="9" height="15" fill="rgb(219,202,31)"/><text x="1179.00" y="366.50"></text></g><g><title>0x7fa18be68100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (239 samples, 12.64%)</title><rect x="1037" y="324" width="149" height="15" fill="rgb(238,164,44)"/><text x="1040.00" y="334.50">0x7fa18be68100 (skl..</text></g><g><title>0x7fa18be3f538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (16 samples, 0.85%)</title><rect x="1176" y="340" width="10" height="15" fill="rgb(206,72,16)"/><text x="1179.00" y="350.50"></text></g><g><title>_dispatch (joblib/parallel.py) (263 samples, 13.91%)</title><rect x="1022" y="212" width="164" height="15" fill="rgb(239,202,28)"/><text x="1025.00" y="222.50">_dispatch (joblib/par..</text></g><g><title>apply_async (joblib/_parallel_backends.py) (263 samples, 13.91%)</title><rect x="1022" y="228" width="164" height="15" fill="rgb(213,53,22)"/><text x="1025.00" y="238.50">apply_async (joblib/_..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (263 samples, 13.91%)</title><rect x="1022" y="244" width="164" height="15" fill="rgb(225,3,6)"/><text x="1025.00" y="254.50">__init__ (joblib/_par..</text></g><g><title>__call__ (joblib/parallel.py) (263 samples, 13.91%)</title><rect x="1022" y="260" width="164" height="15" fill="rgb(224,155,5)"/><text x="1025.00" y="270.50">__call__ (joblib/para..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (262 samples, 13.86%)</title><rect x="1023" y="276" width="163" height="15" fill="rgb(233,207,54)"/><text x="1026.00" y="286.50">&lt;listcomp&gt; (joblib/pa..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py) (262 samples, 13.86%)</title><rect x="1023" y="292" width="163" height="15" fill="rgb(251,219,34)"/><text x="1026.00" y="302.50">_tree_query_parallel_..</text></g><g><title>0x7fa18be6ae14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (261 samples, 13.80%)</title><rect x="1024" y="308" width="162" height="15" fill="rgb(233,99,44)"/><text x="1027.00" y="318.50">0x7fa18be6ae14 (skle..</text></g><g><title>__call__ (joblib/parallel.py) (265 samples, 14.01%)</title><rect x="1022" y="180" width="165" height="15" fill="rgb(214,59,27)"/><text x="1025.00" y="190.50">__call__ (joblib/para..</text></g><g><title>dispatch_one_batch (joblib/parallel.py) (265 samples, 14.01%)</title><rect x="1022" y="196" width="165" height="15" fill="rgb(207,189,29)"/><text x="1025.00" y="206.50">dispatch_one_batch (j..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (267 samples, 14.12%)</title><rect x="1022" y="164" width="166" height="15" fill="rgb(235,60,8)"/><text x="1025.00" y="174.50">kneighbors (sklearn/n..</text></g><g><title>all (1,891 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(249,26,50)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (1,891 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(249,70,19)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (275 samples, 14.54%)</title><rect x="1018" y="68" width="172" height="15" fill="rgb(215,14,21)"/><text x="1021.00" y="78.50">profile_skl (bench_KNe..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (275 samples, 14.54%)</title><rect x="1018" y="84" width="172" height="15" fill="rgb(254,181,32)"/><text x="1021.00" y="94.50">setup_profile (bench_K..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1000_50_12_float_.py) (275 samples, 14.54%)</title><rect x="1018" y="100" width="172" height="15" fill="rgb(250,100,16)"/><text x="1021.00" y="110.50">profile (bench_KNeighb..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (275 samples, 14.54%)</title><rect x="1018" y="116" width="172" height="15" fill="rgb(218,148,20)"/><text x="1021.00" y="126.50">time_predict (mlprodic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (275 samples, 14.54%)</title><rect x="1018" y="132" width="172" height="15" fill="rgb(206,74,13)"/><text x="1021.00" y="142.50">&lt;lambda&gt; (mlprodict/as..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py) (275 samples, 14.54%)</title><rect x="1018" y="148" width="172" height="15" fill="rgb(222,43,10)"/><text x="1021.00" y="158.50">predict_proba (sklearn..</text></g></g></svg>