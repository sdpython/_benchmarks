<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="902" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="885.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="885.00"> </text><g id="frames"><g><title>_call_aside (pkg_resources/__init__.py) (3 samples, 0.09%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(242,224,35)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (3 samples, 0.09%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(219,83,33)"/><text x="13.00" y="862.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (5 samples, 0.14%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(239,64,43)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="308" width="1" height="15" fill="rgb(234,152,0)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="324" width="1" height="15" fill="rgb(217,193,3)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="340" width="1" height="15" fill="rgb(239,44,9)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.14%)</title><rect x="10" y="356" width="1" height="15" fill="rgb(250,57,51)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="372" width="1" height="15" fill="rgb(205,180,49)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (5 samples, 0.14%)</title><rect x="10" y="388" width="1" height="15" fill="rgb(230,135,41)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="404" width="1" height="15" fill="rgb(230,23,31)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="420" width="1" height="15" fill="rgb(207,4,8)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="436" width="1" height="15" fill="rgb(206,149,21)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.14%)</title><rect x="10" y="452" width="1" height="15" fill="rgb(208,207,54)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="468" width="1" height="15" fill="rgb(221,38,34)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (5 samples, 0.14%)</title><rect x="10" y="484" width="1" height="15" fill="rgb(247,225,12)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="500" width="1" height="15" fill="rgb(211,47,44)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="516" width="1" height="15" fill="rgb(245,125,40)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="532" width="1" height="15" fill="rgb(208,189,36)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.14%)</title><rect x="10" y="548" width="1" height="15" fill="rgb(216,46,7)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="564" width="1" height="15" fill="rgb(205,164,0)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (5 samples, 0.14%)</title><rect x="10" y="580" width="1" height="15" fill="rgb(254,199,19)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="596" width="1" height="15" fill="rgb(239,17,41)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="612" width="1" height="15" fill="rgb(211,133,30)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="628" width="1" height="15" fill="rgb(207,216,26)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="644" width="1" height="15" fill="rgb(232,120,22)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="660" width="1" height="15" fill="rgb(238,31,10)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="676" width="1" height="15" fill="rgb(252,165,17)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.14%)</title><rect x="10" y="692" width="1" height="15" fill="rgb(236,151,13)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="708" width="1" height="15" fill="rgb(211,209,52)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (5 samples, 0.14%)</title><rect x="10" y="724" width="1" height="15" fill="rgb(239,6,29)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="740" width="1" height="15" fill="rgb(214,23,26)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="756" width="1" height="15" fill="rgb(235,74,16)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="772" width="1" height="15" fill="rgb(217,63,10)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.14%)</title><rect x="10" y="788" width="1" height="15" fill="rgb(235,111,11)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="10" y="804" width="1" height="15" fill="rgb(237,215,49)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (5 samples, 0.14%)</title><rect x="10" y="820" width="1" height="15" fill="rgb(219,158,36)"/><text x="13.00" y="830.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.17%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(207,142,38)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.17%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(250,94,48)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.17%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(214,218,19)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.17%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(232,207,9)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.17%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(243,197,7)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.17%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(222,62,26)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 0.14%)</title><rect x="12" y="340" width="1" height="15" fill="rgb(248,15,28)"/><text x="15.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="12" y="356" width="1" height="15" fill="rgb(234,52,33)"/><text x="15.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="12" y="372" width="1" height="15" fill="rgb(237,43,46)"/><text x="15.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="12" y="388" width="1" height="15" fill="rgb(254,229,45)"/><text x="15.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.14%)</title><rect x="12" y="404" width="1" height="15" fill="rgb(206,213,34)"/><text x="15.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="12" y="420" width="1" height="15" fill="rgb(211,148,33)"/><text x="15.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (5 samples, 0.14%)</title><rect x="12" y="436" width="1" height="15" fill="rgb(225,84,46)"/><text x="15.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="12" y="452" width="1" height="15" fill="rgb(212,10,1)"/><text x="15.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.14%)</title><rect x="12" y="468" width="1" height="15" fill="rgb(229,202,19)"/><text x="15.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="484" width="1" height="15" fill="rgb(210,82,22)"/><text x="15.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="12" y="500" width="1" height="15" fill="rgb(235,168,28)"/><text x="15.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="516" width="1" height="15" fill="rgb(240,180,10)"/><text x="15.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.09%)</title><rect x="12" y="532" width="1" height="15" fill="rgb(236,82,49)"/><text x="15.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="548" width="1" height="15" fill="rgb(236,50,47)"/><text x="15.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="564" width="1" height="15" fill="rgb(212,225,36)"/><text x="15.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="580" width="1" height="15" fill="rgb(232,215,45)"/><text x="15.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="12" y="596" width="1" height="15" fill="rgb(223,221,42)"/><text x="15.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="612" width="1" height="15" fill="rgb(252,129,35)"/><text x="15.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.09%)</title><rect x="12" y="628" width="1" height="15" fill="rgb(230,67,8)"/><text x="15.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="644" width="1" height="15" fill="rgb(230,180,52)"/><text x="15.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="660" width="1" height="15" fill="rgb(230,103,17)"/><text x="15.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="676" width="1" height="15" fill="rgb(246,17,51)"/><text x="15.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="12" y="692" width="1" height="15" fill="rgb(213,170,10)"/><text x="15.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="12" y="708" width="1" height="15" fill="rgb(211,148,15)"/><text x="15.00" y="718.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.37%)</title><rect x="10" y="68" width="4" height="15" fill="rgb(237,84,49)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.37%)</title><rect x="10" y="84" width="4" height="15" fill="rgb(247,95,38)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.37%)</title><rect x="10" y="100" width="4" height="15" fill="rgb(210,92,4)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 0.37%)</title><rect x="10" y="116" width="4" height="15" fill="rgb(234,6,19)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.37%)</title><rect x="10" y="132" width="4" height="15" fill="rgb(214,180,18)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py) (13 samples, 0.37%)</title><rect x="10" y="148" width="4" height="15" fill="rgb(243,184,27)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.37%)</title><rect x="10" y="164" width="4" height="15" fill="rgb(224,182,50)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 0.37%)</title><rect x="10" y="180" width="4" height="15" fill="rgb(253,79,5)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.20%)</title><rect x="12" y="196" width="2" height="15" fill="rgb(223,41,35)"/><text x="15.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.20%)</title><rect x="12" y="212" width="2" height="15" fill="rgb(219,96,31)"/><text x="15.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.20%)</title><rect x="12" y="228" width="2" height="15" fill="rgb(217,17,15)"/><text x="15.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (7 samples, 0.20%)</title><rect x="12" y="244" width="2" height="15" fill="rgb(230,67,11)"/><text x="15.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.20%)</title><rect x="12" y="260" width="2" height="15" fill="rgb(226,200,47)"/><text x="15.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.20%)</title><rect x="12" y="276" width="2" height="15" fill="rgb(214,200,0)"/><text x="15.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.20%)</title><rect x="12" y="292" width="2" height="15" fill="rgb(249,65,28)"/><text x="15.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.20%)</title><rect x="12" y="308" width="2" height="15" fill="rgb(241,147,46)"/><text x="15.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.20%)</title><rect x="12" y="324" width="2" height="15" fill="rgb(251,78,35)"/><text x="15.00" y="334.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="21" y="388" width="1" height="15" fill="rgb(250,105,2)"/><text x="24.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.23%)</title><rect x="22" y="388" width="3" height="15" fill="rgb(219,70,11)"/><text x="25.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="23" y="404" width="2" height="15" fill="rgb(216,166,35)"/><text x="26.00" y="414.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="24" y="420" width="1" height="15" fill="rgb(227,22,24)"/><text x="27.00" y="430.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="24" y="436" width="1" height="15" fill="rgb(220,25,45)"/><text x="27.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="31" y="452" width="2" height="15" fill="rgb(245,92,12)"/><text x="34.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="31" y="468" width="2" height="15" fill="rgb(249,181,20)"/><text x="34.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.20%)</title><rect x="33" y="452" width="2" height="15" fill="rgb(224,27,27)"/><text x="36.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.14%)</title><rect x="34" y="468" width="1" height="15" fill="rgb(244,50,17)"/><text x="37.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 0.65%)</title><rect x="28" y="436" width="8" height="15" fill="rgb(206,108,47)"/><text x="31.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="37" y="484" width="1" height="15" fill="rgb(215,105,41)"/><text x="40.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="37" y="500" width="1" height="15" fill="rgb(225,138,44)"/><text x="40.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="36" y="436" width="2" height="15" fill="rgb(221,169,8)"/><text x="39.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="36" y="452" width="2" height="15" fill="rgb(252,41,31)"/><text x="39.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.14%)</title><rect x="36" y="468" width="2" height="15" fill="rgb(254,185,53)"/><text x="39.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.14%)</title><rect x="38" y="436" width="2" height="15" fill="rgb(219,166,38)"/><text x="41.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.14%)</title><rect x="38" y="452" width="2" height="15" fill="rgb(254,49,46)"/><text x="41.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="39" y="468" width="1" height="15" fill="rgb(205,13,42)"/><text x="42.00" y="478.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="39" y="484" width="1" height="15" fill="rgb(219,30,19)"/><text x="42.00" y="494.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="39" y="500" width="1" height="15" fill="rgb(213,87,54)"/><text x="42.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="40" y="436" width="1" height="15" fill="rgb(207,46,23)"/><text x="43.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="41" y="436" width="1" height="15" fill="rgb(237,201,33)"/><text x="44.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="57" y="468" width="2" height="15" fill="rgb(237,187,47)"/><text x="60.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="57" y="484" width="2" height="15" fill="rgb(232,48,54)"/><text x="60.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="57" y="500" width="2" height="15" fill="rgb(207,88,36)"/><text x="60.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="57" y="516" width="2" height="15" fill="rgb(219,6,31)"/><text x="60.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="58" y="532" width="1" height="15" fill="rgb(216,145,8)"/><text x="61.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="58" y="548" width="1" height="15" fill="rgb(218,108,45)"/><text x="61.00" y="558.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="60" y="468" width="1" height="15" fill="rgb(232,97,13)"/><text x="63.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="61" y="468" width="2" height="15" fill="rgb(210,178,45)"/><text x="64.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (62 samples, 1.76%)</title><rect x="43" y="436" width="21" height="15" fill="rgb(243,194,33)"/><text x="46.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 1.73%)</title><rect x="43" y="452" width="21" height="15" fill="rgb(224,28,40)"/><text x="46.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="63" y="468" width="1" height="15" fill="rgb(249,76,33)"/><text x="66.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.14%)</title><rect x="65" y="468" width="2" height="15" fill="rgb(250,68,0)"/><text x="68.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="67" y="468" width="1" height="15" fill="rgb(231,46,35)"/><text x="70.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="69" y="516" width="2" height="15" fill="rgb(247,208,29)"/><text x="72.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="69" y="532" width="2" height="15" fill="rgb(243,189,17)"/><text x="72.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="69" y="548" width="2" height="15" fill="rgb(208,4,53)"/><text x="72.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.23%)</title><rect x="68" y="468" width="3" height="15" fill="rgb(247,135,16)"/><text x="71.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.20%)</title><rect x="69" y="484" width="2" height="15" fill="rgb(209,191,37)"/><text x="72.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.20%)</title><rect x="69" y="500" width="2" height="15" fill="rgb(207,13,12)"/><text x="72.00" y="510.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.17%)</title><rect x="72" y="500" width="2" height="15" fill="rgb(224,5,50)"/><text x="75.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.11%)</title><rect x="73" y="516" width="1" height="15" fill="rgb(220,164,46)"/><text x="76.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.11%)</title><rect x="73" y="532" width="1" height="15" fill="rgb(233,68,16)"/><text x="76.00" y="542.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.31%)</title><rect x="71" y="468" width="4" height="15" fill="rgb(220,53,48)"/><text x="74.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.31%)</title><rect x="71" y="484" width="4" height="15" fill="rgb(221,84,1)"/><text x="74.00" y="494.50"></text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (150 samples, 4.25%)</title><rect x="25" y="388" width="50" height="15" fill="rgb(230,211,15)"/><text x="28.00" y="398.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (150 samples, 4.25%)</title><rect x="25" y="404" width="50" height="15" fill="rgb(209,5,14)"/><text x="28.00" y="414.50">onnxr..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (147 samples, 4.17%)</title><rect x="26" y="420" width="49" height="15" fill="rgb(229,187,44)"/><text x="29.00" y="430.50">onnx..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (34 samples, 0.96%)</title><rect x="64" y="436" width="11" height="15" fill="rgb(222,163,48)"/><text x="67.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (33 samples, 0.94%)</title><rect x="64" y="452" width="11" height="15" fill="rgb(246,213,5)"/><text x="67.00" y="462.50"></text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (170 samples, 4.82%)</title><rect x="19" y="372" width="56" height="15" fill="rgb(228,224,42)"/><text x="22.00" y="382.50">onnxr..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (171 samples, 4.85%)</title><rect x="19" y="356" width="57" height="15" fill="rgb(243,84,6)"/><text x="22.00" y="366.50">onnxru..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (174 samples, 4.93%)</title><rect x="18" y="340" width="58" height="15" fill="rgb(218,63,18)"/><text x="21.00" y="350.50">onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 5.16%)</title><rect x="17" y="260" width="60" height="15" fill="rgb(227,103,8)"/><text x="20.00" y="270.50">onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 5.16%)</title><rect x="17" y="276" width="60" height="15" fill="rgb(215,66,28)"/><text x="20.00" y="286.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 5.10%)</title><rect x="17" y="292" width="60" height="15" fill="rgb(245,62,14)"/><text x="20.00" y="302.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 5.10%)</title><rect x="17" y="308" width="60" height="15" fill="rgb(234,31,42)"/><text x="20.00" y="318.50">onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 5.10%)</title><rect x="17" y="324" width="60" height="15" fill="rgb(213,62,45)"/><text x="20.00" y="334.50">onnxru..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (184 samples, 5.22%)</title><rect x="17" y="244" width="61" height="15" fill="rgb(243,10,49)"/><text x="20.00" y="254.50">onnxru..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (193 samples, 5.47%)</title><rect x="14" y="68" width="64" height="15" fill="rgb(247,167,12)"/><text x="17.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (193 samples, 5.47%)</title><rect x="14" y="84" width="64" height="15" fill="rgb(241,65,8)"/><text x="17.00" y="94.50">setup_p..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (193 samples, 5.47%)</title><rect x="14" y="100" width="64" height="15" fill="rgb(205,74,5)"/><text x="17.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (193 samples, 5.47%)</title><rect x="14" y="116" width="64" height="15" fill="rgb(213,187,36)"/><text x="17.00" y="126.50">time_pr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (193 samples, 5.47%)</title><rect x="14" y="132" width="64" height="15" fill="rgb(254,227,12)"/><text x="17.00" y="142.50">&lt;lambda..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (192 samples, 5.45%)</title><rect x="14" y="148" width="64" height="15" fill="rgb(205,178,26)"/><text x="17.00" y="158.50">run (ml..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (191 samples, 5.42%)</title><rect x="15" y="164" width="63" height="15" fill="rgb(249,133,43)"/><text x="18.00" y="174.50">_run_w..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (187 samples, 5.30%)</title><rect x="16" y="180" width="62" height="15" fill="rgb(214,42,46)"/><text x="19.00" y="190.50">run (m..</text></g><g><title>run (onnxruntime/capi/session.py) (187 samples, 5.30%)</title><rect x="16" y="196" width="62" height="15" fill="rgb(223,153,14)"/><text x="19.00" y="206.50">run (o..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 5.25%)</title><rect x="17" y="212" width="61" height="15" fill="rgb(249,171,41)"/><text x="20.00" y="222.50">pybind..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 5.25%)</title><rect x="17" y="228" width="61" height="15" fill="rgb(205,50,49)"/><text x="20.00" y="238.50">void p..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (4 samples, 0.11%)</title><rect x="94" y="196" width="2" height="15" fill="rgb(218,198,34)"/><text x="97.00" y="206.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (6 samples, 0.17%)</title><rect x="98" y="244" width="2" height="15" fill="rgb(241,142,47)"/><text x="101.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (9 samples, 0.26%)</title><rect x="98" y="212" width="3" height="15" fill="rgb(223,16,6)"/><text x="101.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (9 samples, 0.26%)</title><rect x="98" y="228" width="3" height="15" fill="rgb(238,219,15)"/><text x="101.00" y="238.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (5 samples, 0.14%)</title><rect x="101" y="260" width="2" height="15" fill="rgb(205,81,28)"/><text x="104.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (5 samples, 0.14%)</title><rect x="101" y="276" width="2" height="15" fill="rgb(208,209,4)"/><text x="104.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (7 samples, 0.20%)</title><rect x="101" y="212" width="2" height="15" fill="rgb(218,75,10)"/><text x="104.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (7 samples, 0.20%)</title><rect x="101" y="228" width="2" height="15" fill="rgb(208,143,30)"/><text x="104.00" y="238.50"></text></g><g><title>array_astype (methods.c) (7 samples, 0.20%)</title><rect x="101" y="244" width="2" height="15" fill="rgb(214,204,43)"/><text x="104.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.11%)</title><rect x="105" y="260" width="1" height="15" fill="rgb(217,101,37)"/><text x="108.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.11%)</title><rect x="105" y="276" width="1" height="15" fill="rgb(229,75,4)"/><text x="108.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py) (8 samples, 0.23%)</title><rect x="104" y="212" width="3" height="15" fill="rgb(246,99,25)"/><text x="107.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 0.23%)</title><rect x="104" y="228" width="3" height="15" fill="rgb(230,166,11)"/><text x="107.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 0.20%)</title><rect x="104" y="244" width="3" height="15" fill="rgb(246,135,39)"/><text x="107.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (8 samples, 0.23%)</title><rect x="107" y="212" width="2" height="15" fill="rgb(214,214,15)"/><text x="110.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (6 samples, 0.17%)</title><rect x="107" y="228" width="2" height="15" fill="rgb(248,156,23)"/><text x="110.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.17%)</title><rect x="107" y="244" width="2" height="15" fill="rgb(231,191,23)"/><text x="110.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (6 samples, 0.17%)</title><rect x="107" y="260" width="2" height="15" fill="rgb(208,155,3)"/><text x="110.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (6 samples, 0.17%)</title><rect x="107" y="276" width="2" height="15" fill="rgb(237,127,25)"/><text x="110.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.09%)</title><rect x="108" y="292" width="1" height="15" fill="rgb(249,3,49)"/><text x="111.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.09%)</title><rect x="108" y="308" width="1" height="15" fill="rgb(236,80,3)"/><text x="111.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (12 samples, 0.34%)</title><rect x="176" y="228" width="4" height="15" fill="rgb(240,7,17)"/><text x="179.00" y="238.50"></text></g><g><title>_common_run_shape (mlprodict/onnxrt/ops_cpu/op_scan.py) (3 samples, 0.09%)</title><rect x="180" y="228" width="1" height="15" fill="rgb(212,99,28)"/><text x="183.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (4 samples, 0.11%)</title><rect x="183" y="244" width="2" height="15" fill="rgb(229,13,27)"/><text x="186.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (11 samples, 0.31%)</title><rect x="181" y="228" width="4" height="15" fill="rgb(243,168,52)"/><text x="184.00" y="238.50"></text></g><g><title>PyArray_SetBaseObject (arrayobject.c) (3 samples, 0.09%)</title><rect x="188" y="292" width="1" height="15" fill="rgb(244,131,13)"/><text x="191.00" y="302.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (3 samples, 0.09%)</title><rect x="189" y="292" width="1" height="15" fill="rgb(207,147,12)"/><text x="192.00" y="302.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (9 samples, 0.26%)</title><rect x="188" y="260" width="3" height="15" fill="rgb(229,125,40)"/><text x="191.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (9 samples, 0.26%)</title><rect x="188" y="276" width="3" height="15" fill="rgb(230,166,22)"/><text x="191.00" y="286.50"></text></g><g><title>get_view_from_index (mapping.c) (16 samples, 0.45%)</title><rect x="186" y="244" width="5" height="15" fill="rgb(221,106,19)"/><text x="189.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (28 samples, 0.79%)</title><rect x="185" y="228" width="9" height="15" fill="rgb(243,136,12)"/><text x="188.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (10 samples, 0.28%)</title><rect x="191" y="244" width="3" height="15" fill="rgb(213,137,26)"/><text x="194.00" y="254.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py) (3 samples, 0.09%)</title><rect x="203" y="244" width="1" height="15" fill="rgb(215,131,26)"/><text x="206.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (6 samples, 0.17%)</title><rect x="235" y="276" width="2" height="15" fill="rgb(246,226,4)"/><text x="238.00" y="286.50"></text></g><g><title>0x7f6710d02734 (libc-2.29.so) (3 samples, 0.09%)</title><rect x="243" y="308" width="1" height="15" fill="rgb(249,160,17)"/><text x="246.00" y="318.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (8 samples, 0.23%)</title><rect x="242" y="292" width="3" height="15" fill="rgb(219,120,49)"/><text x="245.00" y="302.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (18 samples, 0.51%)</title><rect x="245" y="292" width="6" height="15" fill="rgb(207,25,15)"/><text x="248.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (14 samples, 0.40%)</title><rect x="246" y="308" width="5" height="15" fill="rgb(254,28,27)"/><text x="249.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (9 samples, 0.26%)</title><rect x="248" y="324" width="3" height="15" fill="rgb(220,134,23)"/><text x="251.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (9 samples, 0.26%)</title><rect x="248" y="340" width="3" height="15" fill="rgb(247,45,11)"/><text x="251.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (10 samples, 0.28%)</title><rect x="252" y="324" width="3" height="15" fill="rgb(221,60,39)"/><text x="255.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (54 samples, 1.53%)</title><rect x="238" y="276" width="18" height="15" fill="rgb(245,183,32)"/><text x="241.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (15 samples, 0.43%)</title><rect x="251" y="292" width="5" height="15" fill="rgb(245,7,26)"/><text x="254.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (15 samples, 0.43%)</title><rect x="251" y="308" width="5" height="15" fill="rgb(207,116,54)"/><text x="254.00" y="318.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (160 samples, 4.54%)</title><rect x="210" y="260" width="54" height="15" fill="rgb(236,49,25)"/><text x="213.00" y="270.50">expan..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (21 samples, 0.60%)</title><rect x="256" y="276" width="8" height="15" fill="rgb(208,137,16)"/><text x="259.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (6 samples, 0.17%)</title><rect x="261" y="292" width="3" height="15" fill="rgb(244,176,35)"/><text x="264.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (209 samples, 5.93%)</title><rect x="194" y="228" width="70" height="15" fill="rgb(235,138,22)"/><text x="197.00" y="238.50">expand_..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (179 samples, 5.08%)</title><rect x="204" y="244" width="60" height="15" fill="rgb(245,151,34)"/><text x="207.00" y="254.50">array_..</text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (29 samples, 0.82%)</title><rect x="357" y="260" width="10" height="15" fill="rgb(205,59,20)"/><text x="360.00" y="270.50"></text></g><g><title>__munmap (libc-2.29.so) (24 samples, 0.68%)</title><rect x="367" y="260" width="8" height="15" fill="rgb(238,164,47)"/><text x="370.00" y="270.50"></text></g><g><title>mmap64 (libc-2.29.so) (15 samples, 0.43%)</title><rect x="375" y="260" width="5" height="15" fill="rgb(249,38,42)"/><text x="378.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (37 samples, 1.05%)</title><rect x="593" y="276" width="13" height="15" fill="rgb(230,217,40)"/><text x="596.00" y="286.50"></text></g><g><title>__munmap (libc-2.29.so) (83 samples, 2.35%)</title><rect x="606" y="276" width="28" height="15" fill="rgb(223,177,4)"/><text x="609.00" y="286.50">_..</text></g><g><title>mmap64 (libc-2.29.so) (69 samples, 1.96%)</title><rect x="634" y="276" width="23" height="15" fill="rgb(228,100,22)"/><text x="637.00" y="286.50">m..</text></g><g><title>arraydescr_richcompare (descriptor.c) (13 samples, 0.37%)</title><rect x="690" y="292" width="4" height="15" fill="rgb(208,70,24)"/><text x="693.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.11%)</title><rect x="730" y="340" width="2" height="15" fill="rgb(206,2,50)"/><text x="733.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.09%)</title><rect x="731" y="356" width="1" height="15" fill="rgb(214,45,35)"/><text x="734.00" y="366.50"></text></g><g><title>promote_types (convert_datatype.c) (4 samples, 0.11%)</title><rect x="741" y="404" width="1" height="15" fill="rgb(212,24,18)"/><text x="744.00" y="414.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (3 samples, 0.09%)</title><rect x="741" y="420" width="1" height="15" fill="rgb(221,130,31)"/><text x="744.00" y="430.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (10 samples, 0.28%)</title><rect x="739" y="388" width="3" height="15" fill="rgb(207,214,28)"/><text x="742.00" y="398.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (19 samples, 0.54%)</title><rect x="737" y="356" width="6" height="15" fill="rgb(253,85,54)"/><text x="740.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (17 samples, 0.48%)</title><rect x="738" y="372" width="5" height="15" fill="rgb(205,139,34)"/><text x="741.00" y="382.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (3 samples, 0.09%)</title><rect x="742" y="388" width="1" height="15" fill="rgb(221,180,23)"/><text x="745.00" y="398.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (5 samples, 0.14%)</title><rect x="744" y="356" width="1" height="15" fill="rgb(249,216,7)"/><text x="747.00" y="366.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (4 samples, 0.11%)</title><rect x="747" y="372" width="1" height="15" fill="rgb(212,141,8)"/><text x="750.00" y="382.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (7 samples, 0.20%)</title><rect x="750" y="388" width="2" height="15" fill="rgb(212,82,40)"/><text x="753.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (4 samples, 0.11%)</title><rect x="751" y="404" width="1" height="15" fill="rgb(215,222,3)"/><text x="754.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (3 samples, 0.09%)</title><rect x="751" y="420" width="1" height="15" fill="rgb(213,172,38)"/><text x="754.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.17%)</title><rect x="754" y="404" width="2" height="15" fill="rgb(213,129,35)"/><text x="757.00" y="414.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.09%)</title><rect x="762" y="468" width="1" height="15" fill="rgb(220,114,5)"/><text x="765.00" y="478.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (15 samples, 0.43%)</title><rect x="759" y="420" width="5" height="15" fill="rgb(216,187,8)"/><text x="762.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (11 samples, 0.31%)</title><rect x="760" y="436" width="4" height="15" fill="rgb(205,34,46)"/><text x="763.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (11 samples, 0.31%)</title><rect x="760" y="452" width="4" height="15" fill="rgb(213,152,40)"/><text x="763.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (24 samples, 0.68%)</title><rect x="756" y="404" width="8" height="15" fill="rgb(248,6,21)"/><text x="759.00" y="414.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (7 samples, 0.20%)</title><rect x="766" y="404" width="3" height="15" fill="rgb(214,91,33)"/><text x="769.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (7 samples, 0.20%)</title><rect x="769" y="404" width="2" height="15" fill="rgb(210,60,13)"/><text x="772.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (67 samples, 1.90%)</title><rect x="752" y="388" width="23" height="15" fill="rgb(244,211,0)"/><text x="755.00" y="398.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (10 samples, 0.28%)</title><rect x="772" y="404" width="3" height="15" fill="rgb(247,51,15)"/><text x="775.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (4 samples, 0.11%)</title><rect x="774" y="420" width="1" height="15" fill="rgb(229,42,42)"/><text x="777.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (12 samples, 0.34%)</title><rect x="775" y="388" width="4" height="15" fill="rgb(223,170,36)"/><text x="778.00" y="398.50"></text></g><g><title>free (libc-2.29.so) (4 samples, 0.11%)</title><rect x="778" y="404" width="1" height="15" fill="rgb(217,99,16)"/><text x="781.00" y="414.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (9 samples, 0.26%)</title><rect x="781" y="404" width="3" height="15" fill="rgb(229,95,8)"/><text x="784.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (13 samples, 0.37%)</title><rect x="780" y="388" width="4" height="15" fill="rgb(238,21,14)"/><text x="783.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (120 samples, 3.40%)</title><rect x="746" y="356" width="41" height="15" fill="rgb(252,93,31)"/><text x="749.00" y="366.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c) (115 samples, 3.26%)</title><rect x="748" y="372" width="39" height="15" fill="rgb(252,109,2)"/><text x="751.00" y="382.50">ite..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (8 samples, 0.23%)</title><rect x="784" y="388" width="3" height="15" fill="rgb(214,226,32)"/><text x="787.00" y="398.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (6 samples, 0.17%)</title><rect x="785" y="404" width="2" height="15" fill="rgb(235,1,24)"/><text x="788.00" y="414.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (6 samples, 0.17%)</title><rect x="787" y="356" width="2" height="15" fill="rgb(240,209,37)"/><text x="790.00" y="366.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (8 samples, 0.23%)</title><rect x="789" y="356" width="2" height="15" fill="rgb(219,0,41)"/><text x="792.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (180 samples, 5.10%)</title><rect x="732" y="340" width="60" height="15" fill="rgb(225,226,31)"/><text x="735.00" y="350.50">PyUFun..</text></g><g><title>_find_array_wrap (ufunc_object.c) (3 samples, 0.09%)</title><rect x="792" y="340" width="1" height="15" fill="rgb(225,122,5)"/><text x="795.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (226 samples, 6.41%)</title><rect x="718" y="308" width="76" height="15" fill="rgb(206,218,47)"/><text x="721.00" y="318.50">_run (ml..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (192 samples, 5.45%)</title><rect x="729" y="324" width="65" height="15" fill="rgb(236,88,18)"/><text x="732.00" y="334.50">ufunc_g..</text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c) (4 samples, 0.11%)</title><rect x="813" y="372" width="1" height="15" fill="rgb(205,139,5)"/><text x="816.00" y="382.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (5 samples, 0.14%)</title><rect x="818" y="388" width="2" height="15" fill="rgb(246,153,17)"/><text x="821.00" y="398.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (3 samples, 0.09%)</title><rect x="819" y="404" width="1" height="15" fill="rgb(225,178,54)"/><text x="822.00" y="414.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src) (3 samples, 0.09%)</title><rect x="819" y="420" width="1" height="15" fill="rgb(226,99,20)"/><text x="822.00" y="430.50"></text></g><g><title>0x7f6710ca49e8 (libc-2.29.so) (3 samples, 0.09%)</title><rect x="823" y="420" width="1" height="15" fill="rgb(226,85,15)"/><text x="826.00" y="430.50"></text></g><g><title>0x7f6710d0cd50 (libc-2.29.so) (3 samples, 0.09%)</title><rect x="824" y="420" width="1" height="15" fill="rgb(245,162,27)"/><text x="827.00" y="430.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (18 samples, 0.51%)</title><rect x="820" y="388" width="6" height="15" fill="rgb(242,96,44)"/><text x="823.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (11 samples, 0.31%)</title><rect x="822" y="404" width="4" height="15" fill="rgb(208,90,14)"/><text x="825.00" y="414.50"></text></g><g><title>__GI___pthread_mutex_unlock (libpthread-2.29.so) (3 samples, 0.09%)</title><rect x="827" y="388" width="1" height="15" fill="rgb(207,135,31)"/><text x="830.00" y="398.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (5 samples, 0.14%)</title><rect x="828" y="388" width="1" height="15" fill="rgb(206,109,8)"/><text x="831.00" y="398.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (5 samples, 0.14%)</title><rect x="829" y="388" width="2" height="15" fill="rgb(224,157,19)"/><text x="832.00" y="398.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (4 samples, 0.11%)</title><rect x="831" y="388" width="1" height="15" fill="rgb(242,153,23)"/><text x="834.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (64 samples, 1.82%)</title><rect x="812" y="356" width="22" height="15" fill="rgb(213,121,11)"/><text x="815.00" y="366.50">P..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (56 samples, 1.59%)</title><rect x="815" y="372" width="19" height="15" fill="rgb(241,148,36)"/><text x="818.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (3 samples, 0.09%)</title><rect x="833" y="388" width="1" height="15" fill="rgb(253,97,30)"/><text x="836.00" y="398.50"></text></g><g><title>npy_uint_alignment (common.h) (3 samples, 0.09%)</title><rect x="833" y="404" width="1" height="15" fill="rgb(208,134,28)"/><text x="836.00" y="414.50"></text></g><g><title>array_alloc (arrayobject.c) (4 samples, 0.11%)</title><rect x="837" y="420" width="1" height="15" fill="rgb(216,119,9)"/><text x="840.00" y="430.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (16 samples, 0.45%)</title><rect x="834" y="356" width="5" height="15" fill="rgb(225,80,45)"/><text x="837.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (13 samples, 0.37%)</title><rect x="835" y="372" width="4" height="15" fill="rgb(217,146,23)"/><text x="838.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (13 samples, 0.37%)</title><rect x="835" y="388" width="4" height="15" fill="rgb(244,187,54)"/><text x="838.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (13 samples, 0.37%)</title><rect x="835" y="404" width="4" height="15" fill="rgb(220,115,54)"/><text x="838.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (137 samples, 3.89%)</title><rect x="794" y="308" width="45" height="15" fill="rgb(209,142,41)"/><text x="797.00" y="318.50">_run..</text></g><g><title>array_copy (methods.c) (89 samples, 2.52%)</title><rect x="810" y="324" width="29" height="15" fill="rgb(223,127,53)"/><text x="813.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c) (82 samples, 2.33%)</title><rect x="812" y="340" width="27" height="15" fill="rgb(210,42,27)"/><text x="815.00" y="350.50">P..</text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (7 samples, 0.20%)</title><rect x="859" y="340" width="2" height="15" fill="rgb(240,204,41)"/><text x="862.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (4 samples, 0.11%)</title><rect x="860" y="356" width="1" height="15" fill="rgb(252,165,2)"/><text x="863.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (11 samples, 0.31%)</title><rect x="858" y="324" width="4" height="15" fill="rgb(243,96,29)"/><text x="861.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (3 samples, 0.09%)</title><rect x="876" y="340" width="1" height="15" fill="rgb(222,94,38)"/><text x="879.00" y="350.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (3 samples, 0.09%)</title><rect x="882" y="356" width="1" height="15" fill="rgb(213,137,32)"/><text x="885.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (18 samples, 0.51%)</title><rect x="927" y="388" width="6" height="15" fill="rgb(234,123,42)"/><text x="930.00" y="398.50"></text></g><g><title>__munmap (libc-2.29.so) (30 samples, 0.85%)</title><rect x="933" y="388" width="11" height="15" fill="rgb(213,12,2)"/><text x="936.00" y="398.50"></text></g><g><title>mmap64 (libc-2.29.so) (20 samples, 0.57%)</title><rect x="944" y="388" width="6" height="15" fill="rgb(219,62,40)"/><text x="947.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (20 samples, 0.57%)</title><rect x="951" y="404" width="7" height="15" fill="rgb(251,30,22)"/><text x="954.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (20 samples, 0.57%)</title><rect x="951" y="420" width="7" height="15" fill="rgb(205,204,38)"/><text x="954.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (18 samples, 0.51%)</title><rect x="952" y="436" width="6" height="15" fill="rgb(212,73,24)"/><text x="955.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (6 samples, 0.17%)</title><rect x="956" y="452" width="2" height="15" fill="rgb(243,4,9)"/><text x="959.00" y="462.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (8 samples, 0.23%)</title><rect x="974" y="420" width="3" height="15" fill="rgb(212,86,12)"/><text x="977.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (8 samples, 0.23%)</title><rect x="974" y="436" width="3" height="15" fill="rgb(240,194,26)"/><text x="977.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (8 samples, 0.23%)</title><rect x="974" y="452" width="3" height="15" fill="rgb(234,203,45)"/><text x="977.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (7 samples, 0.20%)</title><rect x="982" y="468" width="2" height="15" fill="rgb(214,168,40)"/><text x="985.00" y="478.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (4 samples, 0.11%)</title><rect x="984" y="468" width="2" height="15" fill="rgb(218,63,39)"/><text x="987.00" y="478.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (3 samples, 0.09%)</title><rect x="986" y="468" width="1" height="15" fill="rgb(252,35,13)"/><text x="989.00" y="478.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (4 samples, 0.11%)</title><rect x="987" y="468" width="1" height="15" fill="rgb(251,6,32)"/><text x="990.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.11%)</title><rect x="988" y="468" width="2" height="15" fill="rgb(207,54,42)"/><text x="991.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (10 samples, 0.28%)</title><rect x="990" y="468" width="3" height="15" fill="rgb(224,38,7)"/><text x="993.00" y="478.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (3 samples, 0.09%)</title><rect x="993" y="468" width="1" height="15" fill="rgb(225,172,10)"/><text x="996.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (49 samples, 1.39%)</title><rect x="979" y="452" width="17" height="15" fill="rgb(225,179,24)"/><text x="982.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (5 samples, 0.14%)</title><rect x="994" y="468" width="2" height="15" fill="rgb(254,178,26)"/><text x="997.00" y="478.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (4 samples, 0.11%)</title><rect x="994" y="484" width="2" height="15" fill="rgb(231,176,5)"/><text x="997.00" y="494.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (12 samples, 0.34%)</title><rect x="996" y="452" width="4" height="15" fill="rgb(215,108,21)"/><text x="999.00" y="462.50"></text></g><g><title>free (libc-2.29.so) (4 samples, 0.11%)</title><rect x="998" y="468" width="2" height="15" fill="rgb(233,48,20)"/><text x="1001.00" y="478.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (3 samples, 0.09%)</title><rect x="1003" y="516" width="1" height="15" fill="rgb(219,180,54)"/><text x="1006.00" y="526.50"></text></g><g><title>array_alloc (arrayobject.c) (4 samples, 0.11%)</title><rect x="1004" y="516" width="1" height="15" fill="rgb(237,180,16)"/><text x="1007.00" y="526.50"></text></g><g><title>npy_alloc_cache (alloc.c) (11 samples, 0.31%)</title><rect x="1005" y="516" width="4" height="15" fill="rgb(251,98,30)"/><text x="1008.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (11 samples, 0.31%)</title><rect x="1005" y="532" width="4" height="15" fill="rgb(221,166,22)"/><text x="1008.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (4 samples, 0.11%)</title><rect x="1008" y="548" width="1" height="15" fill="rgb(250,138,44)"/><text x="1011.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.11%)</title><rect x="1008" y="564" width="1" height="15" fill="rgb(230,109,8)"/><text x="1011.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (26 samples, 0.74%)</title><rect x="1003" y="484" width="8" height="15" fill="rgb(210,5,44)"/><text x="1006.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (26 samples, 0.74%)</title><rect x="1003" y="500" width="8" height="15" fill="rgb(218,119,37)"/><text x="1006.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (7 samples, 0.20%)</title><rect x="1009" y="516" width="2" height="15" fill="rgb(218,196,52)"/><text x="1012.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (5 samples, 0.14%)</title><rect x="1010" y="532" width="1" height="15" fill="rgb(220,147,5)"/><text x="1013.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.11%)</title><rect x="1010" y="548" width="1" height="15" fill="rgb(234,135,37)"/><text x="1013.00" y="558.50"></text></g><g><title>qsort (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1011" y="484" width="1" height="15" fill="rgb(232,17,52)"/><text x="1014.00" y="494.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (46 samples, 1.30%)</title><rect x="1001" y="452" width="15" height="15" fill="rgb(252,199,24)"/><text x="1004.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (45 samples, 1.28%)</title><rect x="1001" y="468" width="15" height="15" fill="rgb(211,195,24)"/><text x="1004.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (12 samples, 0.34%)</title><rect x="1012" y="484" width="4" height="15" fill="rgb(239,87,51)"/><text x="1015.00" y="494.50"></text></g><g><title>free (libc-2.29.so) (4 samples, 0.11%)</title><rect x="1015" y="500" width="1" height="15" fill="rgb(252,34,47)"/><text x="1018.00" y="510.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (5 samples, 0.14%)</title><rect x="1022" y="500" width="2" height="15" fill="rgb(212,20,47)"/><text x="1025.00" y="510.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (4 samples, 0.11%)</title><rect x="1022" y="516" width="2" height="15" fill="rgb(241,80,12)"/><text x="1025.00" y="526.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (4 samples, 0.11%)</title><rect x="1024" y="500" width="1" height="15" fill="rgb(225,148,2)"/><text x="1027.00" y="510.50"></text></g><g><title>_aligned_cast_longlong_to_float (lowlevel_strided_loops.c.src) (3 samples, 0.09%)</title><rect x="1025" y="500" width="1" height="15" fill="rgb(211,14,6)"/><text x="1028.00" y="510.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (35 samples, 0.99%)</title><rect x="1016" y="452" width="12" height="15" fill="rgb(248,177,33)"/><text x="1019.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (29 samples, 0.82%)</title><rect x="1018" y="468" width="10" height="15" fill="rgb(236,207,18)"/><text x="1021.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (26 samples, 0.74%)</title><rect x="1019" y="484" width="9" height="15" fill="rgb(243,45,33)"/><text x="1022.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (7 samples, 0.20%)</title><rect x="1026" y="500" width="2" height="15" fill="rgb(249,59,48)"/><text x="1029.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (5 samples, 0.14%)</title><rect x="1027" y="516" width="1" height="15" fill="rgb(241,177,35)"/><text x="1030.00" y="526.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (3 samples, 0.09%)</title><rect x="1029" y="452" width="1" height="15" fill="rgb(231,67,2)"/><text x="1032.00" y="462.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (3 samples, 0.09%)</title><rect x="1029" y="468" width="1" height="15" fill="rgb(222,54,8)"/><text x="1032.00" y="478.50"></text></g><g><title>fetestexcept (libm-2.29.so) (3 samples, 0.09%)</title><rect x="1029" y="484" width="1" height="15" fill="rgb(207,117,9)"/><text x="1032.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src) (5 samples, 0.14%)</title><rect x="1030" y="468" width="2" height="15" fill="rgb(233,125,6)"/><text x="1033.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (4 samples, 0.11%)</title><rect x="1030" y="484" width="2" height="15" fill="rgb(232,173,34)"/><text x="1033.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (164 samples, 4.65%)</title><rect x="978" y="436" width="55" height="15" fill="rgb(206,206,1)"/><text x="981.00" y="446.50">PyUFu..</text></g><g><title>reduce_loop (ufunc_object.c) (10 samples, 0.28%)</title><rect x="1030" y="452" width="3" height="15" fill="rgb(223,117,23)"/><text x="1033.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (3 samples, 0.09%)</title><rect x="1032" y="468" width="1" height="15" fill="rgb(221,202,27)"/><text x="1035.00" y="478.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (3 samples, 0.09%)</title><rect x="1032" y="484" width="1" height="15" fill="rgb(216,59,6)"/><text x="1035.00" y="494.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (21 samples, 0.60%)</title><rect x="1034" y="436" width="7" height="15" fill="rgb(217,96,51)"/><text x="1037.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (16 samples, 0.45%)</title><rect x="1036" y="452" width="5" height="15" fill="rgb(217,208,51)"/><text x="1039.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (15 samples, 0.43%)</title><rect x="1036" y="468" width="5" height="15" fill="rgb(217,214,18)"/><text x="1039.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (192 samples, 5.45%)</title><rect x="977" y="420" width="65" height="15" fill="rgb(222,10,48)"/><text x="980.00" y="430.50">PyUFunc..</text></g><g><title>unicode_eq (python3.7) (7 samples, 0.20%)</title><rect x="1042" y="420" width="2" height="15" fill="rgb(222,146,35)"/><text x="1045.00" y="430.50"></text></g><g><title>0x7f6710dca130 (libc-2.29.so) (5 samples, 0.14%)</title><rect x="1043" y="436" width="1" height="15" fill="rgb(220,105,1)"/><text x="1046.00" y="446.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (545 samples, 15.46%)</title><rect x="862" y="324" width="183" height="15" fill="rgb(235,0,6)"/><text x="865.00" y="334.50">sum (&lt;__array_function_..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (501 samples, 14.21%)</title><rect x="877" y="340" width="168" height="15" fill="rgb(207,83,45)"/><text x="880.00" y="350.50">array_implement_array..</text></g><g><title>sum (numpy/core/fromnumeric.py) (482 samples, 13.67%)</title><rect x="883" y="356" width="162" height="15" fill="rgb(239,207,33)"/><text x="886.00" y="366.50">sum (numpy/core/from..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (424 samples, 12.02%)</title><rect x="903" y="372" width="142" height="15" fill="rgb(218,157,13)"/><text x="906.00" y="382.50">_wrapreduction (nu..</text></g><g><title>ufunc_reduce (ufunc_object.c) (282 samples, 8.00%)</title><rect x="950" y="388" width="95" height="15" fill="rgb(209,37,26)"/><text x="953.00" y="398.50">ufunc_reduc..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (259 samples, 7.35%)</title><rect x="958" y="404" width="87" height="15" fill="rgb(228,226,33)"/><text x="961.00" y="414.50">PyUFunc_Ge..</text></g><g><title>PyUFunc_CheckOverride (override.c) (9 samples, 0.26%)</title><rect x="1046" y="340" width="3" height="15" fill="rgb(206,164,46)"/><text x="1049.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (9 samples, 0.26%)</title><rect x="1046" y="356" width="3" height="15" fill="rgb(250,11,46)"/><text x="1049.00" y="366.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1052" y="356" width="1" height="15" fill="rgb(208,168,29)"/><text x="1055.00" y="366.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (3 samples, 0.09%)</title><rect x="1053" y="388" width="1" height="15" fill="rgb(216,82,29)"/><text x="1056.00" y="398.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (4 samples, 0.11%)</title><rect x="1055" y="404" width="1" height="15" fill="rgb(220,32,53)"/><text x="1058.00" y="414.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (4 samples, 0.11%)</title><rect x="1055" y="420" width="1" height="15" fill="rgb(236,175,4)"/><text x="1058.00" y="430.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.09%)</title><rect x="1056" y="404" width="1" height="15" fill="rgb(222,150,20)"/><text x="1059.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (28 samples, 0.79%)</title><rect x="1053" y="372" width="9" height="15" fill="rgb(211,140,19)"/><text x="1056.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (25 samples, 0.71%)</title><rect x="1054" y="388" width="8" height="15" fill="rgb(246,56,22)"/><text x="1057.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (12 samples, 0.34%)</title><rect x="1058" y="404" width="4" height="15" fill="rgb(246,192,15)"/><text x="1061.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (10 samples, 0.28%)</title><rect x="1059" y="420" width="3" height="15" fill="rgb(214,179,14)"/><text x="1062.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (8 samples, 0.23%)</title><rect x="1060" y="436" width="2" height="15" fill="rgb(207,98,16)"/><text x="1063.00" y="446.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (3 samples, 0.09%)</title><rect x="1062" y="372" width="1" height="15" fill="rgb(234,6,34)"/><text x="1065.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (41 samples, 1.16%)</title><rect x="1053" y="356" width="14" height="15" fill="rgb(235,192,22)"/><text x="1056.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (10 samples, 0.28%)</title><rect x="1063" y="372" width="4" height="15" fill="rgb(243,126,1)"/><text x="1066.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (3 samples, 0.09%)</title><rect x="1066" y="388" width="1" height="15" fill="rgb(209,73,38)"/><text x="1069.00" y="398.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (5 samples, 0.14%)</title><rect x="1067" y="356" width="1" height="15" fill="rgb(233,202,1)"/><text x="1070.00" y="366.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (3 samples, 0.09%)</title><rect x="1075" y="420" width="1" height="15" fill="rgb(247,205,27)"/><text x="1078.00" y="430.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (15 samples, 0.43%)</title><rect x="1074" y="388" width="5" height="15" fill="rgb(225,204,29)"/><text x="1077.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (13 samples, 0.37%)</title><rect x="1074" y="404" width="5" height="15" fill="rgb(208,72,0)"/><text x="1077.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (7 samples, 0.20%)</title><rect x="1076" y="420" width="3" height="15" fill="rgb(210,164,12)"/><text x="1079.00" y="430.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (3 samples, 0.09%)</title><rect x="1078" y="436" width="1" height="15" fill="rgb(209,218,36)"/><text x="1081.00" y="446.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (39 samples, 1.11%)</title><rect x="1068" y="356" width="13" height="15" fill="rgb(249,68,2)"/><text x="1071.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (27 samples, 0.77%)</title><rect x="1072" y="372" width="9" height="15" fill="rgb(228,219,10)"/><text x="1075.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (8 samples, 0.23%)</title><rect x="1079" y="388" width="2" height="15" fill="rgb(248,220,19)"/><text x="1082.00" y="398.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1081" y="356" width="1" height="15" fill="rgb(222,92,3)"/><text x="1084.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (103 samples, 2.92%)</title><rect x="1049" y="340" width="34" height="15" fill="rgb(232,159,42)"/><text x="1052.00" y="350.50">Py..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (732 samples, 20.76%)</title><rect x="839" y="308" width="245" height="15" fill="rgb(243,101,48)"/><text x="842.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/o..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (119 samples, 3.37%)</title><rect x="1045" y="324" width="39" height="15" fill="rgb(226,41,15)"/><text x="1048.00" y="334.50">ufu..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (2,108 samples, 59.78%)</title><rect x="380" y="260" width="705" height="15" fill="rgb(217,37,22)"/><text x="383.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,281 samples, 36.33%)</title><rect x="657" y="276" width="428" height="15" fill="rgb(228,163,6)"/><text x="660.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,169 samples, 33.15%)</title><rect x="694" y="292" width="391" height="15" fill="rgb(218,185,8)"/><text x="697.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (2,404 samples, 68.18%)</title><rect x="283" y="244" width="804" height="15" fill="rgb(250,93,0)"/><text x="286.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>unicode_eq (python3.7) (5 samples, 0.14%)</title><rect x="1085" y="260" width="2" height="15" fill="rgb(224,88,17)"/><text x="1088.00" y="270.50"></text></g><g><title>0x7f6710dcafd0 (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1086" y="276" width="1" height="15" fill="rgb(245,21,10)"/><text x="1089.00" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (8 samples, 0.23%)</title><rect x="1087" y="260" width="3" height="15" fill="rgb(220,221,4)"/><text x="1090.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (7 samples, 0.20%)</title><rect x="1088" y="276" width="2" height="15" fill="rgb(254,62,43)"/><text x="1091.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,468 samples, 69.99%)</title><rect x="265" y="228" width="825" height="15" fill="rgb(244,34,32)"/><text x="268.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (10 samples, 0.28%)</title><rect x="1087" y="244" width="3" height="15" fill="rgb(242,188,13)"/><text x="1090.00" y="254.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (14 samples, 0.40%)</title><rect x="1093" y="324" width="5" height="15" fill="rgb(233,157,1)"/><text x="1096.00" y="334.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.11%)</title><rect x="1097" y="340" width="1" height="15" fill="rgb(254,198,24)"/><text x="1100.00" y="350.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (22 samples, 0.62%)</title><rect x="1091" y="276" width="7" height="15" fill="rgb(244,131,38)"/><text x="1094.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (21 samples, 0.60%)</title><rect x="1091" y="292" width="7" height="15" fill="rgb(215,153,32)"/><text x="1094.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (21 samples, 0.60%)</title><rect x="1091" y="308" width="7" height="15" fill="rgb(229,64,23)"/><text x="1094.00" y="318.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (4 samples, 0.11%)</title><rect x="1102" y="388" width="1" height="15" fill="rgb(220,156,27)"/><text x="1105.00" y="398.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (4 samples, 0.11%)</title><rect x="1103" y="388" width="2" height="15" fill="rgb(211,152,33)"/><text x="1106.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (2,976 samples, 84.40%)</title><rect x="110" y="212" width="996" height="15" fill="rgb(219,2,17)"/><text x="113.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (45 samples, 1.28%)</title><rect x="1091" y="228" width="15" height="15" fill="rgb(215,143,52)"/><text x="1094.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (44 samples, 1.25%)</title><rect x="1091" y="244" width="15" height="15" fill="rgb(232,155,40)"/><text x="1094.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (44 samples, 1.25%)</title><rect x="1091" y="260" width="15" height="15" fill="rgb(216,188,42)"/><text x="1094.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (22 samples, 0.62%)</title><rect x="1098" y="276" width="8" height="15" fill="rgb(208,31,2)"/><text x="1101.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (22 samples, 0.62%)</title><rect x="1098" y="292" width="8" height="15" fill="rgb(243,208,52)"/><text x="1101.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (22 samples, 0.62%)</title><rect x="1098" y="308" width="8" height="15" fill="rgb(232,63,42)"/><text x="1101.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (22 samples, 0.62%)</title><rect x="1098" y="324" width="8" height="15" fill="rgb(211,168,34)"/><text x="1101.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (20 samples, 0.57%)</title><rect x="1099" y="340" width="7" height="15" fill="rgb(232,49,35)"/><text x="1102.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (20 samples, 0.57%)</title><rect x="1099" y="356" width="7" height="15" fill="rgb(225,11,42)"/><text x="1102.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (17 samples, 0.48%)</title><rect x="1100" y="372" width="6" height="15" fill="rgb(211,76,39)"/><text x="1103.00" y="382.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (6 samples, 0.17%)</title><rect x="1107" y="292" width="2" height="15" fill="rgb(232,218,52)"/><text x="1110.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (4 samples, 0.11%)</title><rect x="1108" y="308" width="1" height="15" fill="rgb(233,132,2)"/><text x="1111.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (4 samples, 0.11%)</title><rect x="1108" y="324" width="1" height="15" fill="rgb(231,126,26)"/><text x="1111.00" y="334.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (7 samples, 0.20%)</title><rect x="1107" y="260" width="2" height="15" fill="rgb(236,85,4)"/><text x="1110.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.20%)</title><rect x="1107" y="276" width="2" height="15" fill="rgb(208,22,24)"/><text x="1110.00" y="286.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (3 samples, 0.09%)</title><rect x="1110" y="292" width="1" height="15" fill="rgb(206,22,48)"/><text x="1113.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.09%)</title><rect x="1110" y="308" width="1" height="15" fill="rgb(228,116,33)"/><text x="1113.00" y="318.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.11%)</title><rect x="1110" y="276" width="2" height="15" fill="rgb(215,211,35)"/><text x="1113.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (21 samples, 0.60%)</title><rect x="1106" y="212" width="7" height="15" fill="rgb(213,219,26)"/><text x="1109.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (21 samples, 0.60%)</title><rect x="1106" y="228" width="7" height="15" fill="rgb(227,196,53)"/><text x="1109.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (20 samples, 0.57%)</title><rect x="1107" y="244" width="6" height="15" fill="rgb(231,44,45)"/><text x="1110.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (9 samples, 0.26%)</title><rect x="1110" y="260" width="3" height="15" fill="rgb(234,124,11)"/><text x="1113.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (8 samples, 0.23%)</title><rect x="1114" y="212" width="3" height="15" fill="rgb(233,194,40)"/><text x="1117.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (5 samples, 0.14%)</title><rect x="1115" y="228" width="2" height="15" fill="rgb(235,82,41)"/><text x="1118.00" y="238.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (3 samples, 0.09%)</title><rect x="1117" y="212" width="1" height="15" fill="rgb(249,182,34)"/><text x="1120.00" y="222.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (3 samples, 0.09%)</title><rect x="1122" y="324" width="1" height="15" fill="rgb(231,62,29)"/><text x="1125.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.09%)</title><rect x="1122" y="340" width="1" height="15" fill="rgb(229,8,40)"/><text x="1125.00" y="350.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.09%)</title><rect x="1122" y="356" width="1" height="15" fill="rgb(205,139,30)"/><text x="1125.00" y="366.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.09%)</title><rect x="1122" y="372" width="1" height="15" fill="rgb(210,23,17)"/><text x="1125.00" y="382.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (3 samples, 0.09%)</title><rect x="1122" y="388" width="1" height="15" fill="rgb(217,174,1)"/><text x="1125.00" y="398.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (5 samples, 0.14%)</title><rect x="1123" y="356" width="2" height="15" fill="rgb(245,200,38)"/><text x="1126.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (17 samples, 0.48%)</title><rect x="1120" y="228" width="5" height="15" fill="rgb(251,93,2)"/><text x="1123.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (15 samples, 0.43%)</title><rect x="1120" y="244" width="5" height="15" fill="rgb(234,122,53)"/><text x="1123.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (14 samples, 0.40%)</title><rect x="1121" y="260" width="4" height="15" fill="rgb(205,186,42)"/><text x="1124.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (13 samples, 0.37%)</title><rect x="1121" y="276" width="4" height="15" fill="rgb(249,24,34)"/><text x="1124.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (11 samples, 0.31%)</title><rect x="1122" y="292" width="3" height="15" fill="rgb(229,115,12)"/><text x="1125.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (10 samples, 0.28%)</title><rect x="1122" y="308" width="3" height="15" fill="rgb(227,82,50)"/><text x="1125.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (7 samples, 0.20%)</title><rect x="1123" y="324" width="2" height="15" fill="rgb(242,123,43)"/><text x="1126.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (7 samples, 0.20%)</title><rect x="1123" y="340" width="2" height="15" fill="rgb(224,16,25)"/><text x="1126.00" y="350.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (3,132 samples, 88.83%)</title><rect x="79" y="164" width="1048" height="15" fill="rgb(237,141,19)"/><text x="82.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (3,124 samples, 88.60%)</title><rect x="81" y="180" width="1046" height="15" fill="rgb(226,91,18)"/><text x="84.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (3,082 samples, 87.41%)</title><rect x="96" y="196" width="1031" height="15" fill="rgb(217,159,17)"/><text x="99.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (28 samples, 0.79%)</title><rect x="1118" y="212" width="9" height="15" fill="rgb(234,225,23)"/><text x="1121.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_transpose.py) (3 samples, 0.09%)</title><rect x="1126" y="228" width="1" height="15" fill="rgb(245,192,13)"/><text x="1129.00" y="238.50"></text></g><g><title>transpose (&lt;__array_function__ internals&gt;) (3 samples, 0.09%)</title><rect x="1126" y="244" width="1" height="15" fill="rgb(216,125,24)"/><text x="1129.00" y="254.50"></text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (3,135 samples, 88.91%)</title><rect x="78" y="68" width="1050" height="15" fill="rgb(244,131,20)"/><text x="81.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (3,135 samples, 88.91%)</title><rect x="78" y="84" width="1050" height="15" fill="rgb(208,18,8)"/><text x="81.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (3,135 samples, 88.91%)</title><rect x="78" y="100" width="1050" height="15" fill="rgb(227,202,31)"/><text x="81.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (3,135 samples, 88.91%)</title><rect x="78" y="116" width="1050" height="15" fill="rgb(211,226,42)"/><text x="81.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3,135 samples, 88.91%)</title><rect x="78" y="132" width="1050" height="15" fill="rgb(221,152,50)"/><text x="81.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (3,134 samples, 88.88%)</title><rect x="79" y="148" width="1049" height="15" fill="rgb(247,171,43)"/><text x="82.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_assign_subscript (mapping.c) (4 samples, 0.11%)</title><rect x="1131" y="164" width="1" height="15" fill="rgb(253,177,24)"/><text x="1134.00" y="174.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (3 samples, 0.09%)</title><rect x="1134" y="180" width="1" height="15" fill="rgb(242,171,31)"/><text x="1137.00" y="190.50"></text></g><g><title>array_subscript (mapping.c) (5 samples, 0.14%)</title><rect x="1134" y="164" width="2" height="15" fill="rgb(210,145,29)"/><text x="1137.00" y="174.50"></text></g><g><title>array_sum (methods.c) (3 samples, 0.09%)</title><rect x="1136" y="164" width="1" height="15" fill="rgb(234,90,0)"/><text x="1139.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c) (3 samples, 0.09%)</title><rect x="1136" y="180" width="1" height="15" fill="rgb(208,189,40)"/><text x="1139.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py) (3 samples, 0.09%)</title><rect x="1136" y="196" width="1" height="15" fill="rgb(245,14,5)"/><text x="1139.00" y="206.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1136" y="212" width="1" height="15" fill="rgb(221,163,17)"/><text x="1139.00" y="222.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1136" y="228" width="1" height="15" fill="rgb(222,42,40)"/><text x="1139.00" y="238.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (3 samples, 0.09%)</title><rect x="1140" y="180" width="1" height="15" fill="rgb(210,134,37)"/><text x="1143.00" y="190.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py) (3 samples, 0.09%)</title><rect x="1140" y="196" width="1" height="15" fill="rgb(220,144,32)"/><text x="1143.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (15 samples, 0.43%)</title><rect x="1137" y="164" width="5" height="15" fill="rgb(250,209,3)"/><text x="1140.00" y="174.50"></text></g><g><title>_initialize_backend (joblib/parallel.py) (3 samples, 0.09%)</title><rect x="1144" y="196" width="1" height="15" fill="rgb(251,88,3)"/><text x="1147.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/neighbors/_base.py) (3 samples, 0.09%)</title><rect x="1146" y="212" width="1" height="15" fill="rgb(233,179,53)"/><text x="1149.00" y="222.50"></text></g><g><title>gen_even_slices (sklearn/utils/__init__.py) (3 samples, 0.09%)</title><rect x="1146" y="228" width="1" height="15" fill="rgb(240,203,29)"/><text x="1149.00" y="238.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (5 samples, 0.14%)</title><rect x="1152" y="372" width="2" height="15" fill="rgb(242,140,33)"/><text x="1155.00" y="382.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (4 samples, 0.11%)</title><rect x="1154" y="372" width="1" height="15" fill="rgb(210,64,38)"/><text x="1157.00" y="382.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (3 samples, 0.09%)</title><rect x="1154" y="388" width="1" height="15" fill="rgb(254,167,16)"/><text x="1157.00" y="398.50"></text></g><g><title>0x7f66eb10032c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (25 samples, 0.71%)</title><rect x="1149" y="324" width="8" height="15" fill="rgb(225,88,19)"/><text x="1152.00" y="334.50"></text></g><g><title>0x7f66eb0cb5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (25 samples, 0.71%)</title><rect x="1149" y="340" width="8" height="15" fill="rgb(215,61,1)"/><text x="1152.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (23 samples, 0.65%)</title><rect x="1149" y="356" width="8" height="15" fill="rgb(215,169,0)"/><text x="1152.00" y="366.50"></text></g><g><title>simplefilter (warnings.py) (5 samples, 0.14%)</title><rect x="1155" y="372" width="2" height="15" fill="rgb(249,114,18)"/><text x="1158.00" y="382.50"></text></g><g><title>_add_filter (warnings.py) (3 samples, 0.09%)</title><rect x="1156" y="388" width="1" height="15" fill="rgb(233,11,48)"/><text x="1159.00" y="398.50"></text></g><g><title>0x7f66eb100680 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="1157" y="324" width="1" height="15" fill="rgb(215,135,14)"/><text x="1160.00" y="334.50"></text></g><g><title>0x7f66eb0f44e3 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.09%)</title><rect x="1157" y="340" width="1" height="15" fill="rgb(248,65,31)"/><text x="1160.00" y="350.50"></text></g><g><title>0x7f66eb0fb877 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.09%)</title><rect x="1159" y="356" width="1" height="15" fill="rgb(246,152,17)"/><text x="1162.00" y="366.50"></text></g><g><title>0x7f66eb0fbab9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.09%)</title><rect x="1160" y="372" width="1" height="15" fill="rgb(233,75,28)"/><text x="1163.00" y="382.50"></text></g><g><title>full (numpy/core/numeric.py) (3 samples, 0.09%)</title><rect x="1160" y="388" width="1" height="15" fill="rgb(213,83,6)"/><text x="1163.00" y="398.50"></text></g><g><title>copyto (&lt;__array_function__ internals&gt;) (3 samples, 0.09%)</title><rect x="1160" y="404" width="1" height="15" fill="rgb(218,113,13)"/><text x="1163.00" y="414.50"></text></g><g><title>0x7f66eb100708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.26%)</title><rect x="1159" y="324" width="3" height="15" fill="rgb(214,1,17)"/><text x="1162.00" y="334.50"></text></g><g><title>0x7f66eb0cb5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.26%)</title><rect x="1159" y="340" width="3" height="15" fill="rgb(232,74,44)"/><text x="1162.00" y="350.50"></text></g><g><title>0x7f66eb0fc73a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.17%)</title><rect x="1160" y="356" width="2" height="15" fill="rgb(239,175,45)"/><text x="1163.00" y="366.50"></text></g><g><title>0x7f66eb102100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.17%)</title><rect x="1162" y="324" width="2" height="15" fill="rgb(210,99,5)"/><text x="1165.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (54 samples, 1.53%)</title><rect x="1148" y="276" width="18" height="15" fill="rgb(205,35,12)"/><text x="1151.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py) (52 samples, 1.47%)</title><rect x="1148" y="292" width="18" height="15" fill="rgb(249,204,50)"/><text x="1151.00" y="302.50"></text></g><g><title>0x7f66eb104e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (51 samples, 1.45%)</title><rect x="1149" y="308" width="17" height="15" fill="rgb(242,21,18)"/><text x="1152.00" y="318.50"></text></g><g><title>0x7f66eb1038cc (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="1164" y="324" width="2" height="15" fill="rgb(251,180,19)"/><text x="1167.00" y="334.50"></text></g><g><title>0x7f66eb0ccd53 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="1164" y="340" width="2" height="15" fill="rgb(209,39,31)"/><text x="1167.00" y="350.50"></text></g><g><title>0x7f66eb563e62 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.09%)</title><rect x="1165" y="356" width="1" height="15" fill="rgb(250,59,52)"/><text x="1168.00" y="366.50"></text></g><g><title>0x7f66eb545654 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.09%)</title><rect x="1165" y="372" width="1" height="15" fill="rgb(218,168,24)"/><text x="1168.00" y="382.50"></text></g><g><title>_dispatch (joblib/parallel.py) (61 samples, 1.73%)</title><rect x="1147" y="212" width="20" height="15" fill="rgb(228,164,51)"/><text x="1150.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (60 samples, 1.70%)</title><rect x="1147" y="228" width="20" height="15" fill="rgb(237,118,39)"/><text x="1150.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (59 samples, 1.67%)</title><rect x="1148" y="244" width="19" height="15" fill="rgb(243,172,0)"/><text x="1151.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py) (59 samples, 1.67%)</title><rect x="1148" y="260" width="19" height="15" fill="rgb(249,124,12)"/><text x="1151.00" y="270.50"></text></g><g><title>__init__ (joblib/parallel.py) (3 samples, 0.09%)</title><rect x="1166" y="276" width="1" height="15" fill="rgb(208,33,2)"/><text x="1169.00" y="286.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (74 samples, 2.10%)</title><rect x="1145" y="196" width="25" height="15" fill="rgb(241,89,13)"/><text x="1148.00" y="206.50">d..</text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (4 samples, 0.11%)</title><rect x="1168" y="212" width="2" height="15" fill="rgb(220,79,17)"/><text x="1171.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py) (86 samples, 2.44%)</title><rect x="1142" y="180" width="29" height="15" fill="rgb(246,142,3)"/><text x="1145.00" y="190.50">__..</text></g><g><title>__init__ (distutils/version.py) (6 samples, 0.17%)</title><rect x="1171" y="180" width="2" height="15" fill="rgb(205,74,54)"/><text x="1174.00" y="190.50"></text></g><g><title>parse (distutils/version.py) (6 samples, 0.17%)</title><rect x="1171" y="196" width="2" height="15" fill="rgb(221,67,54)"/><text x="1174.00" y="206.50"></text></g><g><title>_sre_SRE_Pattern_split (python3.7) (3 samples, 0.09%)</title><rect x="1172" y="212" width="1" height="15" fill="rgb(251,132,49)"/><text x="1175.00" y="222.50"></text></g><g><title>__init__ (queue.py) (4 samples, 0.11%)</title><rect x="1174" y="196" width="1" height="15" fill="rgb(229,45,31)"/><text x="1177.00" y="206.50"></text></g><g><title>__init__ (threading.py) (4 samples, 0.11%)</title><rect x="1174" y="212" width="1" height="15" fill="rgb(217,177,30)"/><text x="1177.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py) (8 samples, 0.23%)</title><rect x="1173" y="180" width="3" height="15" fill="rgb(207,68,52)"/><text x="1176.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (5 samples, 0.14%)</title><rect x="1176" y="180" width="2" height="15" fill="rgb(247,3,28)"/><text x="1179.00" y="190.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (4 samples, 0.11%)</title><rect x="1178" y="180" width="1" height="15" fill="rgb(250,108,23)"/><text x="1181.00" y="190.50"></text></g><g><title>delayed (joblib/parallel.py) (3 samples, 0.09%)</title><rect x="1179" y="180" width="1" height="15" fill="rgb(219,130,44)"/><text x="1182.00" y="190.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (3 samples, 0.09%)</title><rect x="1180" y="180" width="1" height="15" fill="rgb(230,128,44)"/><text x="1183.00" y="190.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (3 samples, 0.09%)</title><rect x="1180" y="196" width="1" height="15" fill="rgb(220,139,4)"/><text x="1183.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (126 samples, 3.57%)</title><rect x="1142" y="164" width="42" height="15" fill="rgb(252,116,27)"/><text x="1145.00" y="174.50">kne..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (7 samples, 0.20%)</title><rect x="1181" y="180" width="3" height="15" fill="rgb(234,101,14)"/><text x="1184.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.17%)</title><rect x="1182" y="196" width="2" height="15" fill="rgb(223,20,23)"/><text x="1185.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (6 samples, 0.17%)</title><rect x="1182" y="212" width="2" height="15" fill="rgb(216,23,25)"/><text x="1185.00" y="222.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1185" y="196" width="1" height="15" fill="rgb(253,210,54)"/><text x="1188.00" y="206.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c) (3 samples, 0.09%)</title><rect x="1185" y="212" width="1" height="15" fill="rgb(212,205,47)"/><text x="1188.00" y="222.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (3 samples, 0.09%)</title><rect x="1185" y="228" width="1" height="15" fill="rgb(229,84,10)"/><text x="1188.00" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 0.17%)</title><rect x="1186" y="196" width="2" height="15" fill="rgb(221,123,19)"/><text x="1189.00" y="206.50"></text></g><g><title>iterator_loop (ufunc_object.c) (6 samples, 0.17%)</title><rect x="1186" y="212" width="2" height="15" fill="rgb(248,19,2)"/><text x="1189.00" y="222.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (6 samples, 0.17%)</title><rect x="1186" y="228" width="2" height="15" fill="rgb(205,217,39)"/><text x="1189.00" y="238.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (3 samples, 0.09%)</title><rect x="1187" y="244" width="1" height="15" fill="rgb(243,162,42)"/><text x="1190.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (11 samples, 0.31%)</title><rect x="1184" y="180" width="4" height="15" fill="rgb(243,97,36)"/><text x="1187.00" y="190.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (182 samples, 5.16%)</title><rect x="1128" y="132" width="61" height="15" fill="rgb(207,101,40)"/><text x="1131.00" y="142.50">&lt;lambd..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py) (181 samples, 5.13%)</title><rect x="1128" y="148" width="61" height="15" fill="rgb(211,198,30)"/><text x="1131.00" y="158.50">predic..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (13 samples, 0.37%)</title><rect x="1184" y="164" width="5" height="15" fill="rgb(223,157,40)"/><text x="1187.00" y="174.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (184 samples, 5.22%)</title><rect x="1128" y="100" width="61" height="15" fill="rgb(252,206,0)"/><text x="1131.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (184 samples, 5.22%)</title><rect x="1128" y="116" width="61" height="15" fill="rgb(229,76,49)"/><text x="1131.00" y="126.50">time_p..</text></g><g><title>all (3,526 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(254,180,32)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (3,526 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(213,49,32)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (185 samples, 5.25%)</title><rect x="1128" y="68" width="62" height="15" fill="rgb(211,127,35)"/><text x="1131.00" y="78.50">profil..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py) (185 samples, 5.25%)</title><rect x="1128" y="84" width="62" height="15" fill="rgb(226,22,31)"/><text x="1131.00" y="94.50">setup_..</text></g></g></svg>