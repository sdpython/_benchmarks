<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1686" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1669.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1669.00"> </text><g id="frames"><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="10" y="932" width="8" height="15" fill="rgb(238,110,26)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="10" y="948" width="8" height="15" fill="rgb(239,229,22)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="10" y="964" width="8" height="15" fill="rgb(245,101,35)"/><text x="13.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="10" y="980" width="8" height="15" fill="rgb(225,229,19)"/><text x="13.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="14" y="996" width="4" height="15" fill="rgb(252,20,44)"/><text x="17.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="14" y="1012" width="4" height="15" fill="rgb(230,4,11)"/><text x="17.00" y="1022.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.34%)</title><rect x="14" y="1028" width="4" height="15" fill="rgb(215,84,37)"/><text x="17.00" y="1038.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (3 samples, 1.03%)</title><rect x="10" y="868" width="12" height="15" fill="rgb(222,112,48)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (3 samples, 1.03%)</title><rect x="10" y="884" width="12" height="15" fill="rgb(207,223,9)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (3 samples, 1.03%)</title><rect x="10" y="900" width="12" height="15" fill="rgb(218,51,29)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (3 samples, 1.03%)</title><rect x="10" y="916" width="12" height="15" fill="rgb(219,131,28)"/><text x="13.00" y="926.50"></text></g><g><title>simplefilter (warnings.py) (1 samples, 0.34%)</title><rect x="18" y="932" width="4" height="15" fill="rgb(227,31,37)"/><text x="21.00" y="942.50"></text></g><g><title>_add_filter (warnings.py) (1 samples, 0.34%)</title><rect x="18" y="948" width="4" height="15" fill="rgb(211,213,33)"/><text x="21.00" y="958.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="596" width="16" height="15" fill="rgb(208,209,31)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="612" width="16" height="15" fill="rgb(238,10,6)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="628" width="16" height="15" fill="rgb(250,212,38)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="644" width="16" height="15" fill="rgb(221,79,35)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="660" width="16" height="15" fill="rgb(211,7,7)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="676" width="16" height="15" fill="rgb(217,176,0)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.37%)</title><rect x="10" y="692" width="16" height="15" fill="rgb(208,187,2)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="708" width="16" height="15" fill="rgb(243,223,6)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (4 samples, 1.37%)</title><rect x="10" y="724" width="16" height="15" fill="rgb(217,65,35)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="740" width="16" height="15" fill="rgb(208,216,6)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="756" width="16" height="15" fill="rgb(251,114,13)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="772" width="16" height="15" fill="rgb(233,113,3)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.37%)</title><rect x="10" y="788" width="16" height="15" fill="rgb(205,141,28)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="10" y="804" width="16" height="15" fill="rgb(205,96,2)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (4 samples, 1.37%)</title><rect x="10" y="820" width="16" height="15" fill="rgb(211,130,1)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (4 samples, 1.37%)</title><rect x="10" y="836" width="16" height="15" fill="rgb(232,168,5)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (4 samples, 1.37%)</title><rect x="10" y="852" width="16" height="15" fill="rgb(226,123,20)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.34%)</title><rect x="22" y="868" width="4" height="15" fill="rgb(228,94,11)"/><text x="25.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.34%)</title><rect x="22" y="884" width="4" height="15" fill="rgb(237,67,43)"/><text x="25.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.34%)</title><rect x="22" y="900" width="4" height="15" fill="rgb(223,75,15)"/><text x="25.00" y="910.50"></text></g><g><title>isdir (genericpath.py) (1 samples, 0.34%)</title><rect x="22" y="916" width="4" height="15" fill="rgb(249,226,10)"/><text x="25.00" y="926.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.34%)</title><rect x="22" y="932" width="4" height="15" fill="rgb(235,31,40)"/><text x="25.00" y="942.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (5 samples, 1.71%)</title><rect x="10" y="292" width="20" height="15" fill="rgb(238,152,23)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="308" width="20" height="15" fill="rgb(232,76,39)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="324" width="20" height="15" fill="rgb(231,213,33)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="340" width="20" height="15" fill="rgb(229,36,23)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.71%)</title><rect x="10" y="356" width="20" height="15" fill="rgb(250,23,2)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="372" width="20" height="15" fill="rgb(235,4,34)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (5 samples, 1.71%)</title><rect x="10" y="388" width="20" height="15" fill="rgb(215,146,39)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="404" width="20" height="15" fill="rgb(240,24,17)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="420" width="20" height="15" fill="rgb(232,128,47)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="436" width="20" height="15" fill="rgb(246,229,20)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.71%)</title><rect x="10" y="452" width="20" height="15" fill="rgb(230,96,53)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="468" width="20" height="15" fill="rgb(205,66,2)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (5 samples, 1.71%)</title><rect x="10" y="484" width="20" height="15" fill="rgb(215,175,46)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="500" width="20" height="15" fill="rgb(237,3,14)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="516" width="20" height="15" fill="rgb(242,152,18)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="532" width="20" height="15" fill="rgb(225,10,25)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.71%)</title><rect x="10" y="548" width="20" height="15" fill="rgb(247,172,31)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="10" y="564" width="20" height="15" fill="rgb(247,9,5)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (5 samples, 1.71%)</title><rect x="10" y="580" width="20" height="15" fill="rgb(212,101,54)"/><text x="13.00" y="590.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="596" width="4" height="15" fill="rgb(218,92,52)"/><text x="29.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="612" width="4" height="15" fill="rgb(224,84,18)"/><text x="29.00" y="622.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="628" width="4" height="15" fill="rgb(232,24,32)"/><text x="29.00" y="638.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="644" width="4" height="15" fill="rgb(211,59,20)"/><text x="29.00" y="654.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="660" width="4" height="15" fill="rgb(252,2,37)"/><text x="29.00" y="670.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="26" y="676" width="4" height="15" fill="rgb(214,120,48)"/><text x="29.00" y="686.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="692" width="4" height="15" fill="rgb(219,171,48)"/><text x="29.00" y="702.50"></text></g><g><title>&lt;module&gt; (protobuf/reflection.py) (1 samples, 0.34%)</title><rect x="26" y="708" width="4" height="15" fill="rgb(244,21,23)"/><text x="29.00" y="718.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="724" width="4" height="15" fill="rgb(212,188,36)"/><text x="29.00" y="734.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="740" width="4" height="15" fill="rgb(223,132,35)"/><text x="29.00" y="750.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="756" width="4" height="15" fill="rgb(239,78,54)"/><text x="29.00" y="766.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="772" width="4" height="15" fill="rgb(226,193,16)"/><text x="29.00" y="782.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="26" y="788" width="4" height="15" fill="rgb(219,82,13)"/><text x="29.00" y="798.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="26" y="804" width="4" height="15" fill="rgb(247,91,24)"/><text x="29.00" y="814.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="26" y="820" width="4" height="15" fill="rgb(251,221,42)"/><text x="29.00" y="830.50"></text></g><g><title>cache_from_source (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="26" y="836" width="4" height="15" fill="rgb(242,175,48)"/><text x="29.00" y="846.50"></text></g><g><title>_path_join (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="26" y="852" width="4" height="15" fill="rgb(231,30,39)"/><text x="29.00" y="862.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="788" width="4" height="15" fill="rgb(217,36,42)"/><text x="33.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="804" width="4" height="15" fill="rgb(217,88,17)"/><text x="33.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="820" width="4" height="15" fill="rgb(236,132,31)"/><text x="33.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="30" y="836" width="4" height="15" fill="rgb(238,123,54)"/><text x="33.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="852" width="4" height="15" fill="rgb(238,19,30)"/><text x="33.00" y="862.50"></text></g><g><title>&lt;module&gt; (scipy/special/__init__.py) (1 samples, 0.34%)</title><rect x="30" y="868" width="4" height="15" fill="rgb(210,102,45)"/><text x="33.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="884" width="4" height="15" fill="rgb(244,24,5)"/><text x="33.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="900" width="4" height="15" fill="rgb(222,5,7)"/><text x="33.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="916" width="4" height="15" fill="rgb(208,73,49)"/><text x="33.00" y="926.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="932" width="4" height="15" fill="rgb(249,157,44)"/><text x="33.00" y="942.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="30" y="948" width="4" height="15" fill="rgb(209,9,2)"/><text x="33.00" y="958.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="30" y="964" width="4" height="15" fill="rgb(246,143,18)"/><text x="33.00" y="974.50"></text></g><g><title>dlopen (libdl-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="980" width="4" height="15" fill="rgb(233,89,30)"/><text x="33.00" y="990.50"></text></g><g><title>0x7f5813da0995 (libdl-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="996" width="4" height="15" fill="rgb(232,45,24)"/><text x="33.00" y="1006.50"></text></g><g><title>_dl_catch_error (libc-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1012" width="4" height="15" fill="rgb(214,209,1)"/><text x="33.00" y="1022.50"></text></g><g><title>_dl_catch_exception (libc-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1028" width="4" height="15" fill="rgb(227,175,14)"/><text x="33.00" y="1038.50"></text></g><g><title>0x7f5813da0258 (libdl-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1044" width="4" height="15" fill="rgb(224,0,17)"/><text x="33.00" y="1054.50"></text></g><g><title>0x7f5813dedd7a (ld-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1060" width="4" height="15" fill="rgb(240,66,21)"/><text x="33.00" y="1070.50"></text></g><g><title>_dl_catch_exception (libc-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1076" width="4" height="15" fill="rgb(218,185,30)"/><text x="33.00" y="1086.50"></text></g><g><title>0x7f5813dee345 (ld-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1092" width="4" height="15" fill="rgb(246,211,10)"/><text x="33.00" y="1102.50"></text></g><g><title>0x7f5813de6fec (ld-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1108" width="4" height="15" fill="rgb(249,68,42)"/><text x="33.00" y="1118.50"></text></g><g><title>0x7f5813de556b (ld-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1124" width="4" height="15" fill="rgb(207,179,44)"/><text x="33.00" y="1134.50"></text></g><g><title>0x7f5813de49fb (ld-2.29.so) (1 samples, 0.34%)</title><rect x="30" y="1140" width="4" height="15" fill="rgb(247,167,8)"/><text x="33.00" y="1150.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.40%)</title><rect x="10" y="196" width="28" height="15" fill="rgb(207,68,46)"/><text x="13.00" y="206.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.40%)</title><rect x="10" y="212" width="28" height="15" fill="rgb(251,126,47)"/><text x="13.00" y="222.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.40%)</title><rect x="10" y="228" width="28" height="15" fill="rgb(217,72,2)"/><text x="13.00" y="238.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.40%)</title><rect x="10" y="244" width="28" height="15" fill="rgb(226,126,41)"/><text x="13.00" y="254.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 2.40%)</title><rect x="10" y="260" width="28" height="15" fill="rgb(251,127,17)"/><text x="13.00" y="270.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.40%)</title><rect x="10" y="276" width="28" height="15" fill="rgb(247,30,51)"/><text x="13.00" y="286.50">_..</text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (2 samples, 0.68%)</title><rect x="30" y="292" width="8" height="15" fill="rgb(218,108,53)"/><text x="33.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="308" width="8" height="15" fill="rgb(233,142,12)"/><text x="33.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="324" width="8" height="15" fill="rgb(211,12,44)"/><text x="33.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="340" width="8" height="15" fill="rgb(206,117,20)"/><text x="33.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="30" y="356" width="8" height="15" fill="rgb(243,72,18)"/><text x="33.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="372" width="8" height="15" fill="rgb(239,23,26)"/><text x="33.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (2 samples, 0.68%)</title><rect x="30" y="388" width="8" height="15" fill="rgb(222,193,43)"/><text x="33.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="404" width="8" height="15" fill="rgb(215,113,42)"/><text x="33.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="420" width="8" height="15" fill="rgb(248,141,30)"/><text x="33.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="436" width="8" height="15" fill="rgb(222,220,39)"/><text x="33.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="30" y="452" width="8" height="15" fill="rgb(243,167,15)"/><text x="33.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="468" width="8" height="15" fill="rgb(237,62,2)"/><text x="33.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (2 samples, 0.68%)</title><rect x="30" y="484" width="8" height="15" fill="rgb(205,27,33)"/><text x="33.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="500" width="8" height="15" fill="rgb(253,214,28)"/><text x="33.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="516" width="8" height="15" fill="rgb(247,6,24)"/><text x="33.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="532" width="8" height="15" fill="rgb(239,166,11)"/><text x="33.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="30" y="548" width="8" height="15" fill="rgb(235,197,18)"/><text x="33.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="564" width="8" height="15" fill="rgb(244,99,52)"/><text x="33.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (2 samples, 0.68%)</title><rect x="30" y="580" width="8" height="15" fill="rgb(227,196,40)"/><text x="33.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="596" width="8" height="15" fill="rgb(206,181,45)"/><text x="33.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="612" width="8" height="15" fill="rgb(241,99,19)"/><text x="33.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="628" width="8" height="15" fill="rgb(245,67,19)"/><text x="33.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="30" y="644" width="8" height="15" fill="rgb(216,223,13)"/><text x="33.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="660" width="8" height="15" fill="rgb(209,110,21)"/><text x="33.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (2 samples, 0.68%)</title><rect x="30" y="676" width="8" height="15" fill="rgb(243,190,21)"/><text x="33.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="692" width="8" height="15" fill="rgb(242,126,38)"/><text x="33.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="708" width="8" height="15" fill="rgb(243,105,26)"/><text x="33.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="724" width="8" height="15" fill="rgb(240,57,48)"/><text x="33.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="30" y="740" width="8" height="15" fill="rgb(221,5,54)"/><text x="33.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="30" y="756" width="8" height="15" fill="rgb(238,38,6)"/><text x="33.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (2 samples, 0.68%)</title><rect x="30" y="772" width="8" height="15" fill="rgb(249,205,52)"/><text x="33.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="788" width="4" height="15" fill="rgb(205,170,18)"/><text x="37.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="804" width="4" height="15" fill="rgb(239,217,6)"/><text x="37.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="820" width="4" height="15" fill="rgb(225,85,8)"/><text x="37.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="836" width="4" height="15" fill="rgb(233,212,0)"/><text x="37.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="852" width="4" height="15" fill="rgb(211,102,27)"/><text x="37.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="34" y="868" width="4" height="15" fill="rgb(235,21,6)"/><text x="37.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="884" width="4" height="15" fill="rgb(253,210,5)"/><text x="37.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.34%)</title><rect x="34" y="900" width="4" height="15" fill="rgb(219,25,4)"/><text x="37.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="916" width="4" height="15" fill="rgb(215,85,21)"/><text x="37.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="932" width="4" height="15" fill="rgb(208,92,42)"/><text x="37.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="948" width="4" height="15" fill="rgb(241,174,9)"/><text x="37.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="964" width="4" height="15" fill="rgb(233,52,47)"/><text x="37.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="980" width="4" height="15" fill="rgb(227,109,52)"/><text x="37.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="34" y="996" width="4" height="15" fill="rgb(216,126,22)"/><text x="37.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="34" y="1012" width="4" height="15" fill="rgb(243,158,41)"/><text x="37.00" y="1022.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_continuous_distns.py) (1 samples, 0.34%)</title><rect x="34" y="1028" width="4" height="15" fill="rgb(243,24,7)"/><text x="37.00" y="1038.50"></text></g><g><title>__init__ (scipy/stats/_distn_infrastructure.py) (1 samples, 0.34%)</title><rect x="34" y="1044" width="4" height="15" fill="rgb(227,209,9)"/><text x="37.00" y="1054.50"></text></g><g><title>_construct_doc (scipy/stats/_distn_infrastructure.py) (1 samples, 0.34%)</title><rect x="34" y="1060" width="4" height="15" fill="rgb(245,54,35)"/><text x="37.00" y="1070.50"></text></g><g><title>docformat (scipy/_lib/doccer.py) (1 samples, 0.34%)</title><rect x="34" y="1076" width="4" height="15" fill="rgb(239,5,29)"/><text x="37.00" y="1086.50"></text></g><g><title>unicode_splitlines (python3.7) (1 samples, 0.34%)</title><rect x="34" y="1092" width="4" height="15" fill="rgb(219,161,39)"/><text x="37.00" y="1102.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="484" width="4" height="15" fill="rgb(212,173,13)"/><text x="41.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="500" width="4" height="15" fill="rgb(237,221,48)"/><text x="41.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="516" width="4" height="15" fill="rgb(234,58,31)"/><text x="41.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="532" width="4" height="15" fill="rgb(251,25,18)"/><text x="41.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="548" width="4" height="15" fill="rgb(229,185,27)"/><text x="41.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="564" width="4" height="15" fill="rgb(226,150,37)"/><text x="41.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (1 samples, 0.34%)</title><rect x="38" y="580" width="4" height="15" fill="rgb(213,63,52)"/><text x="41.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="596" width="4" height="15" fill="rgb(224,21,26)"/><text x="41.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="612" width="4" height="15" fill="rgb(205,226,31)"/><text x="41.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="628" width="4" height="15" fill="rgb(230,157,29)"/><text x="41.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="644" width="4" height="15" fill="rgb(208,94,33)"/><text x="41.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="660" width="4" height="15" fill="rgb(206,132,38)"/><text x="41.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (1 samples, 0.34%)</title><rect x="38" y="676" width="4" height="15" fill="rgb(242,55,12)"/><text x="41.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="692" width="4" height="15" fill="rgb(250,204,36)"/><text x="41.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="708" width="4" height="15" fill="rgb(217,77,13)"/><text x="41.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="724" width="4" height="15" fill="rgb(206,88,43)"/><text x="41.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="740" width="4" height="15" fill="rgb(207,52,34)"/><text x="41.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="756" width="4" height="15" fill="rgb(215,45,5)"/><text x="41.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (1 samples, 0.34%)</title><rect x="38" y="772" width="4" height="15" fill="rgb(231,125,26)"/><text x="41.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="788" width="4" height="15" fill="rgb(236,123,1)"/><text x="41.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="804" width="4" height="15" fill="rgb(211,69,12)"/><text x="41.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="820" width="4" height="15" fill="rgb(213,6,34)"/><text x="41.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="836" width="4" height="15" fill="rgb(218,4,54)"/><text x="41.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="852" width="4" height="15" fill="rgb(251,52,49)"/><text x="41.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (1 samples, 0.34%)</title><rect x="38" y="868" width="4" height="15" fill="rgb(245,15,41)"/><text x="41.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="884" width="4" height="15" fill="rgb(241,166,3)"/><text x="41.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="900" width="4" height="15" fill="rgb(238,152,46)"/><text x="41.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="916" width="4" height="15" fill="rgb(227,10,7)"/><text x="41.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="932" width="4" height="15" fill="rgb(213,61,34)"/><text x="41.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="948" width="4" height="15" fill="rgb(226,52,36)"/><text x="41.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="964" width="4" height="15" fill="rgb(218,103,28)"/><text x="41.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="980" width="4" height="15" fill="rgb(205,223,45)"/><text x="41.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="996" width="4" height="15" fill="rgb(232,60,43)"/><text x="41.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (1 samples, 0.34%)</title><rect x="38" y="1012" width="4" height="15" fill="rgb(217,29,5)"/><text x="41.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1028" width="4" height="15" fill="rgb(220,157,29)"/><text x="41.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1044" width="4" height="15" fill="rgb(215,38,23)"/><text x="41.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1060" width="4" height="15" fill="rgb(249,61,17)"/><text x="41.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="1076" width="4" height="15" fill="rgb(221,31,9)"/><text x="41.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1092" width="4" height="15" fill="rgb(243,154,5)"/><text x="41.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (1 samples, 0.34%)</title><rect x="38" y="1108" width="4" height="15" fill="rgb(248,43,20)"/><text x="41.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1124" width="4" height="15" fill="rgb(239,187,51)"/><text x="41.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1140" width="4" height="15" fill="rgb(219,27,35)"/><text x="41.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1156" width="4" height="15" fill="rgb(234,134,51)"/><text x="41.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="1172" width="4" height="15" fill="rgb(224,50,21)"/><text x="41.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1188" width="4" height="15" fill="rgb(229,159,49)"/><text x="41.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_parse.py) (1 samples, 0.34%)</title><rect x="38" y="1204" width="4" height="15" fill="rgb(213,182,19)"/><text x="41.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1220" width="4" height="15" fill="rgb(208,89,3)"/><text x="41.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1236" width="4" height="15" fill="rgb(205,76,35)"/><text x="41.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1252" width="4" height="15" fill="rgb(219,42,49)"/><text x="41.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="1268" width="4" height="15" fill="rgb(212,2,33)"/><text x="41.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1284" width="4" height="15" fill="rgb(220,84,39)"/><text x="41.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_supported_operators.py) (1 samples, 0.34%)</title><rect x="38" y="1300" width="4" height="15" fill="rgb(222,108,40)"/><text x="41.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1316" width="4" height="15" fill="rgb(240,168,46)"/><text x="41.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1332" width="4" height="15" fill="rgb(218,95,32)"/><text x="41.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1348" width="4" height="15" fill="rgb(236,101,40)"/><text x="41.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="1364" width="4" height="15" fill="rgb(232,118,13)"/><text x="41.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1380" width="4" height="15" fill="rgb(226,109,20)"/><text x="41.00" y="1390.50"></text></g><g><title>&lt;module&gt; (sklearn/neural_network/__init__.py) (1 samples, 0.34%)</title><rect x="38" y="1396" width="4" height="15" fill="rgb(206,85,18)"/><text x="41.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1412" width="4" height="15" fill="rgb(208,61,11)"/><text x="41.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1428" width="4" height="15" fill="rgb(212,116,12)"/><text x="41.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1444" width="4" height="15" fill="rgb(211,181,27)"/><text x="41.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="1460" width="4" height="15" fill="rgb(210,111,10)"/><text x="41.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1476" width="4" height="15" fill="rgb(247,172,41)"/><text x="41.00" y="1486.50"></text></g><g><title>&lt;module&gt; (sklearn/neural_network/_multilayer_perceptron.py) (1 samples, 0.34%)</title><rect x="38" y="1492" width="4" height="15" fill="rgb(240,173,11)"/><text x="41.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1508" width="4" height="15" fill="rgb(208,145,34)"/><text x="41.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1524" width="4" height="15" fill="rgb(246,153,12)"/><text x="41.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1540" width="4" height="15" fill="rgb(241,3,17)"/><text x="41.00" y="1550.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1556" width="4" height="15" fill="rgb(236,175,36)"/><text x="41.00" y="1566.50"></text></g><g><title>_init_module_attrs (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1572" width="4" height="15" fill="rgb(226,212,48)"/><text x="41.00" y="1582.50"></text></g><g><title>cached (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="38" y="1588" width="4" height="15" fill="rgb(245,176,25)"/><text x="41.00" y="1598.50"></text></g><g><title>_get_cached (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="1604" width="4" height="15" fill="rgb(247,220,12)"/><text x="41.00" y="1614.50"></text></g><g><title>cache_from_source (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="1620" width="4" height="15" fill="rgb(252,138,44)"/><text x="41.00" y="1630.50"></text></g><g><title>_path_split (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="38" y="1636" width="4" height="15" fill="rgb(250,11,5)"/><text x="41.00" y="1646.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (2 samples, 0.68%)</title><rect x="38" y="436" width="8" height="15" fill="rgb(230,51,32)"/><text x="41.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="38" y="452" width="8" height="15" fill="rgb(253,100,30)"/><text x="41.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="38" y="468" width="8" height="15" fill="rgb(254,184,5)"/><text x="41.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="484" width="4" height="15" fill="rgb(243,154,27)"/><text x="45.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="500" width="4" height="15" fill="rgb(253,47,23)"/><text x="45.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="516" width="4" height="15" fill="rgb(227,80,37)"/><text x="45.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.34%)</title><rect x="42" y="532" width="4" height="15" fill="rgb(226,211,7)"/><text x="45.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="548" width="4" height="15" fill="rgb(241,19,27)"/><text x="45.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="564" width="4" height="15" fill="rgb(239,114,44)"/><text x="45.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="580" width="4" height="15" fill="rgb(211,22,31)"/><text x="45.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="596" width="4" height="15" fill="rgb(244,71,27)"/><text x="45.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="612" width="4" height="15" fill="rgb(251,171,8)"/><text x="45.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (1 samples, 0.34%)</title><rect x="42" y="628" width="4" height="15" fill="rgb(220,9,4)"/><text x="45.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="644" width="4" height="15" fill="rgb(230,136,3)"/><text x="45.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="660" width="4" height="15" fill="rgb(231,22,9)"/><text x="45.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="676" width="4" height="15" fill="rgb(215,158,5)"/><text x="45.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="692" width="4" height="15" fill="rgb(220,13,19)"/><text x="45.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="708" width="4" height="15" fill="rgb(232,1,45)"/><text x="45.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (1 samples, 0.34%)</title><rect x="42" y="724" width="4" height="15" fill="rgb(208,65,40)"/><text x="45.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="740" width="4" height="15" fill="rgb(211,217,27)"/><text x="45.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="756" width="4" height="15" fill="rgb(251,28,22)"/><text x="45.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="772" width="4" height="15" fill="rgb(210,57,2)"/><text x="45.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="788" width="4" height="15" fill="rgb(222,22,47)"/><text x="45.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="804" width="4" height="15" fill="rgb(223,162,4)"/><text x="45.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (1 samples, 0.34%)</title><rect x="42" y="820" width="4" height="15" fill="rgb(232,65,22)"/><text x="45.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="836" width="4" height="15" fill="rgb(223,32,43)"/><text x="45.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="852" width="4" height="15" fill="rgb(223,102,44)"/><text x="45.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="868" width="4" height="15" fill="rgb(218,75,31)"/><text x="45.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="884" width="4" height="15" fill="rgb(231,132,48)"/><text x="45.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="900" width="4" height="15" fill="rgb(245,208,7)"/><text x="45.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (1 samples, 0.34%)</title><rect x="42" y="916" width="4" height="15" fill="rgb(245,25,0)"/><text x="45.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="932" width="4" height="15" fill="rgb(217,53,22)"/><text x="45.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="948" width="4" height="15" fill="rgb(248,77,11)"/><text x="45.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="964" width="4" height="15" fill="rgb(248,158,16)"/><text x="45.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="980" width="4" height="15" fill="rgb(236,207,34)"/><text x="45.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="996" width="4" height="15" fill="rgb(254,159,2)"/><text x="45.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (1 samples, 0.34%)</title><rect x="42" y="1012" width="4" height="15" fill="rgb(207,154,12)"/><text x="45.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1028" width="4" height="15" fill="rgb(241,175,19)"/><text x="45.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1044" width="4" height="15" fill="rgb(224,11,3)"/><text x="45.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1060" width="4" height="15" fill="rgb(224,165,52)"/><text x="45.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="1076" width="4" height="15" fill="rgb(211,96,18)"/><text x="45.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1092" width="4" height="15" fill="rgb(207,189,2)"/><text x="45.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/generic.py) (1 samples, 0.34%)</title><rect x="42" y="1108" width="4" height="15" fill="rgb(245,115,7)"/><text x="45.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1124" width="4" height="15" fill="rgb(232,128,3)"/><text x="45.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1140" width="4" height="15" fill="rgb(241,180,45)"/><text x="45.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1156" width="4" height="15" fill="rgb(209,27,16)"/><text x="45.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="1172" width="4" height="15" fill="rgb(216,11,52)"/><text x="45.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1188" width="4" height="15" fill="rgb(212,93,46)"/><text x="45.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/core/index.py) (1 samples, 0.34%)</title><rect x="42" y="1204" width="4" height="15" fill="rgb(244,73,26)"/><text x="45.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1220" width="4" height="15" fill="rgb(231,14,20)"/><text x="45.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1236" width="4" height="15" fill="rgb(221,229,14)"/><text x="45.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1252" width="4" height="15" fill="rgb(248,136,5)"/><text x="45.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="1268" width="4" height="15" fill="rgb(226,14,12)"/><text x="45.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1284" width="4" height="15" fill="rgb(206,90,17)"/><text x="45.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/api.py) (1 samples, 0.34%)</title><rect x="42" y="1300" width="4" height="15" fill="rgb(225,107,9)"/><text x="45.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1316" width="4" height="15" fill="rgb(247,166,17)"/><text x="45.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1332" width="4" height="15" fill="rgb(225,160,37)"/><text x="45.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1348" width="4" height="15" fill="rgb(234,24,20)"/><text x="45.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="1364" width="4" height="15" fill="rgb(250,35,13)"/><text x="45.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1380" width="4" height="15" fill="rgb(239,26,37)"/><text x="45.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/datetimes.py) (1 samples, 0.34%)</title><rect x="42" y="1396" width="4" height="15" fill="rgb(205,46,39)"/><text x="45.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1412" width="4" height="15" fill="rgb(226,103,23)"/><text x="45.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1428" width="4" height="15" fill="rgb(206,221,43)"/><text x="45.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1444" width="4" height="15" fill="rgb(211,208,24)"/><text x="45.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="42" y="1460" width="4" height="15" fill="rgb(238,131,36)"/><text x="45.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1476" width="4" height="15" fill="rgb(228,18,30)"/><text x="45.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/datetimelike.py) (1 samples, 0.34%)</title><rect x="42" y="1492" width="4" height="15" fill="rgb(248,131,30)"/><text x="45.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1508" width="4" height="15" fill="rgb(215,33,16)"/><text x="45.00" y="1518.50"></text></g><g><title>__exit__ (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="42" y="1524" width="4" height="15" fill="rgb(240,136,32)"/><text x="45.00" y="1534.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="46" y="724" width="4" height="15" fill="rgb(226,159,20)"/><text x="49.00" y="734.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (4 samples, 1.37%)</title><rect x="38" y="244" width="16" height="15" fill="rgb(252,33,23)"/><text x="41.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="38" y="260" width="16" height="15" fill="rgb(254,122,30)"/><text x="41.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="38" y="276" width="16" height="15" fill="rgb(211,217,1)"/><text x="41.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="38" y="292" width="16" height="15" fill="rgb(254,187,53)"/><text x="41.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.37%)</title><rect x="38" y="308" width="16" height="15" fill="rgb(212,200,33)"/><text x="41.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="38" y="324" width="16" height="15" fill="rgb(234,149,24)"/><text x="41.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 1.37%)</title><rect x="38" y="340" width="16" height="15" fill="rgb(208,111,17)"/><text x="41.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="38" y="356" width="16" height="15" fill="rgb(242,101,8)"/><text x="41.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="38" y="372" width="16" height="15" fill="rgb(208,129,9)"/><text x="41.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="38" y="388" width="16" height="15" fill="rgb(239,71,6)"/><text x="41.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.37%)</title><rect x="38" y="404" width="16" height="15" fill="rgb(227,21,48)"/><text x="41.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.37%)</title><rect x="38" y="420" width="16" height="15" fill="rgb(247,29,20)"/><text x="41.00" y="430.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/__init__.py) (2 samples, 0.68%)</title><rect x="46" y="436" width="8" height="15" fill="rgb(232,44,9)"/><text x="49.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="452" width="8" height="15" fill="rgb(231,70,20)"/><text x="49.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="468" width="8" height="15" fill="rgb(213,164,34)"/><text x="49.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="484" width="8" height="15" fill="rgb(249,226,36)"/><text x="49.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="46" y="500" width="8" height="15" fill="rgb(227,39,0)"/><text x="49.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="516" width="8" height="15" fill="rgb(253,144,2)"/><text x="49.00" y="526.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/_base.py) (2 samples, 0.68%)</title><rect x="46" y="532" width="8" height="15" fill="rgb(251,120,1)"/><text x="49.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="548" width="8" height="15" fill="rgb(226,109,42)"/><text x="49.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="564" width="8" height="15" fill="rgb(214,43,50)"/><text x="49.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="580" width="8" height="15" fill="rgb(217,151,53)"/><text x="49.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="46" y="596" width="8" height="15" fill="rgb(222,229,4)"/><text x="49.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="612" width="8" height="15" fill="rgb(249,189,53)"/><text x="49.00" y="622.50"></text></g><g><title>&lt;module&gt; (urllib/request.py) (2 samples, 0.68%)</title><rect x="46" y="628" width="8" height="15" fill="rgb(243,109,32)"/><text x="49.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="644" width="8" height="15" fill="rgb(243,9,5)"/><text x="49.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="660" width="8" height="15" fill="rgb(232,93,13)"/><text x="49.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.68%)</title><rect x="46" y="676" width="8" height="15" fill="rgb(213,102,7)"/><text x="49.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="46" y="692" width="8" height="15" fill="rgb(222,164,18)"/><text x="49.00" y="702.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.68%)</title><rect x="46" y="708" width="8" height="15" fill="rgb(207,171,51)"/><text x="49.00" y="718.50"></text></g><g><title>cache_from_source (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="50" y="724" width="4" height="15" fill="rgb(243,20,5)"/><text x="53.00" y="734.50"></text></g><g><title>_path_join (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="50" y="740" width="4" height="15" fill="rgb(252,181,14)"/><text x="53.00" y="750.50"></text></g><g><title>&lt;listcomp&gt; (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="50" y="756" width="4" height="15" fill="rgb(253,224,28)"/><text x="53.00" y="766.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.11%)</title><rect x="10" y="68" width="48" height="15" fill="rgb(251,69,19)"/><text x="13.00" y="78.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.11%)</title><rect x="10" y="84" width="48" height="15" fill="rgb(210,58,6)"/><text x="13.00" y="94.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.11%)</title><rect x="10" y="100" width="48" height="15" fill="rgb(227,9,25)"/><text x="13.00" y="110.50">_loa..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 4.11%)</title><rect x="10" y="116" width="48" height="15" fill="rgb(207,21,19)"/><text x="13.00" y="126.50">exec..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.11%)</title><rect x="10" y="132" width="48" height="15" fill="rgb(227,221,23)"/><text x="13.00" y="142.50">_cal..</text></g><g><title>&lt;module&gt; (profiles/benches/svm/SVC/bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf.py) (12 samples, 4.11%)</title><rect x="10" y="148" width="48" height="15" fill="rgb(228,117,37)"/><text x="13.00" y="158.50">&lt;mod..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.11%)</title><rect x="10" y="164" width="48" height="15" fill="rgb(206,89,51)"/><text x="13.00" y="174.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.11%)</title><rect x="10" y="180" width="48" height="15" fill="rgb(208,214,5)"/><text x="13.00" y="190.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="38" y="196" width="20" height="15" fill="rgb(206,131,41)"/><text x="41.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.71%)</title><rect x="38" y="212" width="20" height="15" fill="rgb(210,63,44)"/><text x="41.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.71%)</title><rect x="38" y="228" width="20" height="15" fill="rgb(252,116,35)"/><text x="41.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (1 samples, 0.34%)</title><rect x="54" y="244" width="4" height="15" fill="rgb(230,197,46)"/><text x="57.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="260" width="4" height="15" fill="rgb(234,42,6)"/><text x="57.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="276" width="4" height="15" fill="rgb(210,76,34)"/><text x="57.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="292" width="4" height="15" fill="rgb(234,50,29)"/><text x="57.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="308" width="4" height="15" fill="rgb(215,100,0)"/><text x="57.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="324" width="4" height="15" fill="rgb(219,75,8)"/><text x="57.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="54" y="340" width="4" height="15" fill="rgb(228,37,6)"/><text x="57.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="356" width="4" height="15" fill="rgb(241,217,6)"/><text x="57.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/core/__init__.py) (1 samples, 0.34%)</title><rect x="54" y="372" width="4" height="15" fill="rgb(236,162,33)"/><text x="57.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="388" width="4" height="15" fill="rgb(247,220,14)"/><text x="57.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="404" width="4" height="15" fill="rgb(209,25,34)"/><text x="57.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="420" width="4" height="15" fill="rgb(209,4,47)"/><text x="57.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="436" width="4" height="15" fill="rgb(214,182,53)"/><text x="57.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="452" width="4" height="15" fill="rgb(250,70,43)"/><text x="57.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="54" y="468" width="4" height="15" fill="rgb(242,2,32)"/><text x="57.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="484" width="4" height="15" fill="rgb(209,182,4)"/><text x="57.00" y="494.50"></text></g><g><title>&lt;module&gt; (numpy/core/numeric.py) (1 samples, 0.34%)</title><rect x="54" y="500" width="4" height="15" fill="rgb(212,2,49)"/><text x="57.00" y="510.50"></text></g><g><title>_lock_unlock_module (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="516" width="4" height="15" fill="rgb(226,132,22)"/><text x="57.00" y="526.50"></text></g><g><title>acquire (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="54" y="532" width="4" height="15" fill="rgb(234,155,34)"/><text x="57.00" y="542.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.34%)</title><rect x="66" y="116" width="4" height="15" fill="rgb(213,109,9)"/><text x="69.00" y="126.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.34%)</title><rect x="66" y="132" width="4" height="15" fill="rgb(226,208,5)"/><text x="69.00" y="142.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.34%)</title><rect x="66" y="148" width="4" height="15" fill="rgb(234,105,28)"/><text x="69.00" y="158.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.34%)</title><rect x="90" y="180" width="4" height="15" fill="rgb(223,107,20)"/><text x="93.00" y="190.50"></text></g><g><title>0x7f57d3b48ff9 (?) (1 samples, 0.34%)</title><rect x="123" y="212" width="4" height="15" fill="rgb(245,98,44)"/><text x="126.00" y="222.50"></text></g><g><title>0x7f57d3b43ef6 (?) (1 samples, 0.34%)</title><rect x="123" y="228" width="4" height="15" fill="rgb(252,154,28)"/><text x="126.00" y="238.50"></text></g><g><title>0x7f57d3b38962 (?) (1 samples, 0.34%)</title><rect x="123" y="244" width="4" height="15" fill="rgb(228,115,52)"/><text x="126.00" y="254.50"></text></g><g><title>0x7f57d3b6c7a7 (?) (1 samples, 0.34%)</title><rect x="123" y="260" width="4" height="15" fill="rgb(242,189,49)"/><text x="126.00" y="270.50"></text></g><g><title>0x7f57d3b6bea2 (?) (1 samples, 0.34%)</title><rect x="123" y="276" width="4" height="15" fill="rgb(222,25,27)"/><text x="126.00" y="286.50"></text></g><g><title>0x7f57d3b6bb1c (?) (1 samples, 0.34%)</title><rect x="123" y="292" width="4" height="15" fill="rgb(250,182,10)"/><text x="126.00" y="302.50"></text></g><g><title>0x7f57d3b4e2f5 (?) (1 samples, 0.34%)</title><rect x="123" y="308" width="4" height="15" fill="rgb(212,127,17)"/><text x="126.00" y="318.50"></text></g><g><title>0x7f5813b39124 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="127" y="212" width="4" height="15" fill="rgb(226,211,46)"/><text x="130.00" y="222.50"></text></g><g><title>0x7f5813b18917 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="135" y="244" width="4" height="15" fill="rgb(234,147,27)"/><text x="138.00" y="254.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.34%)</title><rect x="139" y="244" width="4" height="15" fill="rgb(229,177,1)"/><text x="142.00" y="254.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.34%)</title><rect x="139" y="260" width="4" height="15" fill="rgb(207,218,24)"/><text x="142.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (4 samples, 1.37%)</title><rect x="131" y="212" width="16" height="15" fill="rgb(226,64,45)"/><text x="134.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="135" y="228" width="12" height="15" fill="rgb(215,229,3)"/><text x="138.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnxruntime::NodeArg const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="143" y="244" width="4" height="15" fill="rgb(224,157,12)"/><text x="146.00" y="254.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::cast [clone .isra.698] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="143" y="260" width="4" height="15" fill="rgb(213,27,25)"/><text x="146.00" y="270.50"></text></g><g><title>onnxruntime::DataTypeImpl::GetType&lt;std::map&lt;long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="155" y="260" width="4" height="15" fill="rgb(250,93,32)"/><text x="158.00" y="270.50"></text></g><g><title>onnxruntime::InferenceSession::GetModelInputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="159" y="260" width="4" height="15" fill="rgb(225,170,7)"/><text x="162.00" y="270.50"></text></g><g><title>onnxruntime::OrtMutex::lock (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="159" y="276" width="4" height="15" fill="rgb(209,40,17)"/><text x="162.00" y="286.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.34%)</title><rect x="159" y="292" width="4" height="15" fill="rgb(250,46,4)"/><text x="162.00" y="302.50"></text></g><g><title>onnxruntime::FeedsFetchesManager::FeedsFetchesManager (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="167" y="292" width="4" height="15" fill="rgb(237,30,20)"/><text x="170.00" y="302.50"></text></g><g><title>std::vector&lt;onnxruntime::MLValueCopyInfo, std::allocator&lt;onnxruntime::MLValueCopyInfo&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="167" y="308" width="4" height="15" fill="rgb(235,66,31)"/><text x="170.00" y="318.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="183" y="452" width="4" height="15" fill="rgb(207,109,11)"/><text x="186.00" y="462.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="183" y="468" width="4" height="15" fill="rgb(254,151,33)"/><text x="186.00" y="478.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="183" y="484" width="4" height="15" fill="rgb(248,30,44)"/><text x="186.00" y="494.50"></text></g><g><title>0x7f57d3b106b0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="183" y="500" width="4" height="15" fill="rgb(248,168,53)"/><text x="186.00" y="510.50"></text></g><g><title>onnxruntime::Cast&lt;long&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="179" y="340" width="12" height="15" fill="rgb(233,169,52)"/><text x="182.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="183" y="356" width="8" height="15" fill="rgb(208,112,0)"/><text x="186.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="183" y="372" width="8" height="15" fill="rgb(229,187,6)"/><text x="186.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="183" y="388" width="8" height="15" fill="rgb(210,202,38)"/><text x="186.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="183" y="404" width="8" height="15" fill="rgb(210,169,48)"/><text x="186.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="183" y="420" width="8" height="15" fill="rgb(205,39,50)"/><text x="186.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="183" y="436" width="8" height="15" fill="rgb(206,205,10)"/><text x="186.00" y="446.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="187" y="452" width="4" height="15" fill="rgb(231,165,1)"/><text x="190.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="187" y="468" width="4" height="15" fill="rgb(218,145,21)"/><text x="190.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="187" y="484" width="4" height="15" fill="rgb(231,6,43)"/><text x="190.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::SplitChunk (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="187" y="500" width="4" height="15" fill="rgb(221,220,40)"/><text x="190.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="187" y="516" width="4" height="15" fill="rgb(231,111,13)"/><text x="190.00" y="526.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="191" y="356" width="4" height="15" fill="rgb(212,31,46)"/><text x="194.00" y="366.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="191" y="372" width="4" height="15" fill="rgb(247,48,1)"/><text x="194.00" y="382.50"></text></g><g><title>onnxruntime::BFCArena::SplitChunk (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="191" y="388" width="4" height="15" fill="rgb(242,180,2)"/><text x="194.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="191" y="340" width="8" height="15" fill="rgb(246,98,16)"/><text x="194.00" y="350.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="195" y="356" width="4" height="15" fill="rgb(229,53,11)"/><text x="198.00" y="366.50"></text></g><g><title>onnxruntime::OrtMutex::lock (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="195" y="372" width="4" height="15" fill="rgb(234,167,20)"/><text x="198.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.34%)</title><rect x="195" y="388" width="4" height="15" fill="rgb(230,209,43)"/><text x="198.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="199" y="340" width="9" height="15" fill="rgb(251,155,22)"/><text x="202.00" y="350.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="199" y="356" width="9" height="15" fill="rgb(245,142,17)"/><text x="202.00" y="366.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="199" y="372" width="9" height="15" fill="rgb(232,181,12)"/><text x="202.00" y="382.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="199" y="388" width="9" height="15" fill="rgb(243,52,21)"/><text x="202.00" y="398.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="199" y="404" width="9" height="15" fill="rgb(232,131,11)"/><text x="202.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::ChunkFromHandle (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="203" y="420" width="5" height="15" fill="rgb(228,30,18)"/><text x="206.00" y="430.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOutputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="208" y="340" width="4" height="15" fill="rgb(246,184,8)"/><text x="211.00" y="350.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="208" y="356" width="4" height="15" fill="rgb(225,122,10)"/><text x="211.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.34%)</title><rect x="208" y="372" width="4" height="15" fill="rgb(220,227,31)"/><text x="211.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.34%)</title><rect x="208" y="388" width="4" height="15" fill="rgb(217,154,44)"/><text x="211.00" y="398.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="212" y="340" width="12" height="15" fill="rgb(241,8,41)"/><text x="215.00" y="350.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="212" y="356" width="12" height="15" fill="rgb(223,31,24)"/><text x="215.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="212" y="372" width="12" height="15" fill="rgb(207,35,13)"/><text x="215.00" y="382.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="220" y="388" width="4" height="15" fill="rgb(210,78,28)"/><text x="223.00" y="398.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="220" y="404" width="4" height="15" fill="rgb(243,119,53)"/><text x="223.00" y="414.50"></text></g><g><title>0x7f5813ceaba0 (libm-2.29.so) (1 samples, 0.34%)</title><rect x="244" y="372" width="4" height="15" fill="rgb(212,176,29)"/><text x="247.00" y="382.50"></text></g><g><title>expf32x (libm-2.29.so) (2 samples, 0.68%)</title><rect x="244" y="356" width="8" height="15" fill="rgb(220,157,15)"/><text x="247.00" y="366.50"></text></g><g><title>0x7f5813ceac3a (libm-2.29.so) (1 samples, 0.34%)</title><rect x="248" y="372" width="4" height="15" fill="rgb(238,31,3)"/><text x="251.00" y="382.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="252" y="356" width="4" height="15" fill="rgb(231,62,1)"/><text x="255.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::GetInputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="252" y="372" width="4" height="15" fill="rgb(228,191,3)"/><text x="255.00" y="382.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="256" y="452" width="8" height="15" fill="rgb(243,53,9)"/><text x="259.00" y="462.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="256" y="468" width="8" height="15" fill="rgb(240,61,51)"/><text x="259.00" y="478.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="256" y="484" width="8" height="15" fill="rgb(209,130,15)"/><text x="259.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator= (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="256" y="500" width="8" height="15" fill="rgb(232,190,36)"/><text x="259.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.68%)</title><rect x="256" y="516" width="8" height="15" fill="rgb(243,112,19)"/><text x="259.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.68%)</title><rect x="256" y="532" width="8" height="15" fill="rgb(254,190,38)"/><text x="259.00" y="542.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="256" y="356" width="12" height="15" fill="rgb(230,42,40)"/><text x="259.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="256" y="372" width="12" height="15" fill="rgb(210,186,43)"/><text x="259.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="256" y="388" width="12" height="15" fill="rgb(209,100,41)"/><text x="259.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="256" y="404" width="12" height="15" fill="rgb(245,222,17)"/><text x="259.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="256" y="420" width="12" height="15" fill="rgb(207,107,45)"/><text x="259.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.03%)</title><rect x="256" y="436" width="12" height="15" fill="rgb(241,105,27)"/><text x="259.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="264" y="452" width="4" height="15" fill="rgb(206,6,24)"/><text x="267.00" y="462.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (1 samples, 0.34%)</title><rect x="268" y="356" width="4" height="15" fill="rgb(228,190,26)"/><text x="271.00" y="366.50"></text></g><g><title>onnxruntime::ml::SVMClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 4.45%)</title><rect x="224" y="340" width="52" height="15" fill="rgb(244,223,11)"/><text x="227.00" y="350.50">onnxr..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="272" y="356" width="4" height="15" fill="rgb(230,130,1)"/><text x="275.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 9.93%)</title><rect x="163" y="260" width="117" height="15" fill="rgb(208,167,53)"/><text x="166.00" y="270.50">onnxruntime::I..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 9.93%)</title><rect x="163" y="276" width="117" height="15" fill="rgb(215,137,24)"/><text x="166.00" y="286.50">onnxruntime::I..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 9.25%)</title><rect x="171" y="292" width="109" height="15" fill="rgb(227,40,51)"/><text x="174.00" y="302.50">onnxruntime::..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 8.90%)</title><rect x="175" y="308" width="105" height="15" fill="rgb(242,78,25)"/><text x="178.00" y="318.50">onnxruntime:..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 8.90%)</title><rect x="175" y="324" width="105" height="15" fill="rgb(209,209,20)"/><text x="178.00" y="334.50">onnxruntime:..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="276" y="340" width="4" height="15" fill="rgb(249,176,16)"/><text x="279.00" y="350.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_get_insert_hint_unique_pos [clone .localalias.55] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="276" y="356" width="4" height="15" fill="rgb(226,37,51)"/><text x="279.00" y="366.50"></text></g><g><title>onnxruntime::SequenceType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Type (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="280" y="260" width="4" height="15" fill="rgb(208,142,35)"/><text x="283.00" y="270.50"></text></g><g><title>onnxruntime::TensorTypeBase::IsTensorType (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="284" y="260" width="4" height="15" fill="rgb(205,47,5)"/><text x="287.00" y="270.50"></text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="288" y="260" width="8" height="15" fill="rgb(213,146,1)"/><text x="291.00" y="270.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.34%)</title><rect x="292" y="276" width="4" height="15" fill="rgb(237,30,53)"/><text x="295.00" y="286.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.34%)</title><rect x="300" y="292" width="5" height="15" fill="rgb(240,220,28)"/><text x="303.00" y="302.50"></text></g><g><title>onnxruntime::python::GetPyObjFromTensor [clone .constprop.374] (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.71%)</title><rect x="296" y="260" width="21" height="15" fill="rgb(215,99,54)"/><text x="299.00" y="270.50"></text></g><g><title>PyArray_New (ctors.c) (5 samples, 1.71%)</title><rect x="296" y="276" width="21" height="15" fill="rgb(213,177,22)"/><text x="299.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (3 samples, 1.03%)</title><rect x="305" y="292" width="12" height="15" fill="rgb(230,85,41)"/><text x="308.00" y="302.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (2 samples, 0.68%)</title><rect x="309" y="308" width="8" height="15" fill="rgb(253,32,51)"/><text x="312.00" y="318.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (2 samples, 0.68%)</title><rect x="309" y="324" width="8" height="15" fill="rgb(223,65,32)"/><text x="312.00" y="334.50"></text></g><g><title>PyArray_NDIM (ndarraytypes.h) (1 samples, 0.34%)</title><rect x="313" y="340" width="4" height="15" fill="rgb(220,134,40)"/><text x="316.00" y="350.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="317" y="260" width="8" height="15" fill="rgb(230,164,15)"/><text x="320.00" y="270.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="325" y="260" width="4" height="15" fill="rgb(245,132,51)"/><text x="328.00" y="270.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="325" y="276" width="4" height="15" fill="rgb(237,21,6)"/><text x="328.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="325" y="292" width="4" height="15" fill="rgb(248,65,1)"/><text x="328.00" y="302.50"></text></g><g><title>0x7f5813b1896a (libc-2.29.so) (1 samples, 0.34%)</title><rect x="325" y="308" width="4" height="15" fill="rgb(251,207,44)"/><text x="328.00" y="318.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 15.07%)</title><rect x="155" y="244" width="178" height="15" fill="rgb(244,182,25)"/><text x="158.00" y="254.50">onnxruntime::python::ad..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="329" y="260" width="4" height="15" fill="rgb(238,226,49)"/><text x="332.00" y="270.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="329" y="276" width="4" height="15" fill="rgb(243,217,14)"/><text x="332.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="329" y="292" width="4" height="15" fill="rgb(224,140,52)"/><text x="332.00" y="302.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="329" y="308" width="4" height="15" fill="rgb(234,57,27)"/><text x="332.00" y="318.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="329" y="324" width="4" height="15" fill="rgb(252,84,51)"/><text x="332.00" y="334.50"></text></g><g><title>pybind11::detail::list_caster&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::load (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="333" y="244" width="8" height="15" fill="rgb(207,8,52)"/><text x="336.00" y="254.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::load [clone .constprop.387] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.68%)</title><rect x="333" y="260" width="8" height="15" fill="rgb(220,202,12)"/><text x="336.00" y="270.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; [clone .isra.154] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="337" y="276" width="4" height="15" fill="rgb(206,171,3)"/><text x="340.00" y="286.50"></text></g><g><title>0x7f58035e4840 (libstdc++.so.6.0.28) (1 samples, 0.34%)</title><rect x="337" y="292" width="4" height="15" fill="rgb(251,178,46)"/><text x="340.00" y="302.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::load [clone .constprop.387] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="341" y="244" width="4" height="15" fill="rgb(236,66,13)"/><text x="344.00" y="254.50"></text></g><g><title>profile_ort (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (72 samples, 24.66%)</title><rect x="58" y="68" width="291" height="15" fill="rgb(232,192,39)"/><text x="61.00" y="78.50">profile_ort (bench_SVC_rbf_m_cl_probabi..</text></g><g><title>setup_profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (72 samples, 24.66%)</title><rect x="58" y="84" width="291" height="15" fill="rgb(212,57,18)"/><text x="61.00" y="94.50">setup_profile (bench_SVC_rbf_m_cl_proba..</text></g><g><title>profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (72 samples, 24.66%)</title><rect x="58" y="100" width="291" height="15" fill="rgb(242,166,54)"/><text x="61.00" y="110.50">profile (bench_SVC_rbf_m_cl_probability..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (69 samples, 23.63%)</title><rect x="70" y="116" width="279" height="15" fill="rgb(250,216,47)"/><text x="73.00" y="126.50">time_predict (mlprodict/asv_benchmark..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (69 samples, 23.63%)</title><rect x="70" y="132" width="279" height="15" fill="rgb(230,12,23)"/><text x="73.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/com..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (68 samples, 23.29%)</title><rect x="74" y="148" width="275" height="15" fill="rgb(214,212,5)"/><text x="77.00" y="158.50">run (mlprodict/onnxrt/onnx_inference..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (66 samples, 22.60%)</title><rect x="82" y="164" width="267" height="15" fill="rgb(224,61,25)"/><text x="85.00" y="174.50">_run_whole_runtime (mlprodict/onnxr..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (63 samples, 21.58%)</title><rect x="94" y="180" width="255" height="15" fill="rgb(223,79,41)"/><text x="97.00" y="190.50">run (mlprodict/onnxrt/ops_whole/se..</text></g><g><title>run (onnxruntime/capi/session.py) (60 samples, 20.55%)</title><rect x="106" y="196" width="243" height="15" fill="rgb(225,142,9)"/><text x="109.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (50 samples, 17.12%)</title><rect x="147" y="212" width="202" height="15" fill="rgb(241,64,37)"/><text x="150.00" y="222.50">pybind11::cpp_function::di..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 16.78%)</title><rect x="151" y="228" width="198" height="15" fill="rgb(233,76,4)"/><text x="154.00" y="238.50">void pybind11::cpp_functi..</text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic [clone .constprop.381] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="345" y="244" width="4" height="15" fill="rgb(219,16,15)"/><text x="348.00" y="254.50"></text></g><g><title>pybind11::detail::get_type_info [clone .constprop.384] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="345" y="260" width="4" height="15" fill="rgb(214,194,6)"/><text x="348.00" y="270.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node [clone .isra.1152] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.34%)</title><rect x="345" y="276" width="4" height="15" fill="rgb(252,166,37)"/><text x="348.00" y="286.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.34%)</title><rect x="393" y="180" width="4" height="15" fill="rgb(244,98,45)"/><text x="396.00" y="190.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.34%)</title><rect x="393" y="196" width="4" height="15" fill="rgb(210,109,43)"/><text x="396.00" y="206.50"></text></g><g><title>0x7f5813b391f2 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="450" y="196" width="4" height="15" fill="rgb(246,39,17)"/><text x="453.00" y="206.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.34%)</title><rect x="478" y="260" width="4" height="15" fill="rgb(226,191,13)"/><text x="481.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.34%)</title><rect x="478" y="276" width="4" height="15" fill="rgb(211,103,16)"/><text x="481.00" y="286.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.34%)</title><rect x="482" y="260" width="4" height="15" fill="rgb(216,102,37)"/><text x="485.00" y="270.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.34%)</title><rect x="482" y="276" width="4" height="15" fill="rgb(237,32,40)"/><text x="485.00" y="286.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.34%)</title><rect x="482" y="292" width="4" height="15" fill="rgb(230,16,52)"/><text x="485.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (4 samples, 1.37%)</title><rect x="474" y="212" width="16" height="15" fill="rgb(240,46,22)"/><text x="477.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (4 samples, 1.37%)</title><rect x="474" y="228" width="16" height="15" fill="rgb(244,179,40)"/><text x="477.00" y="238.50"></text></g><g><title>array_astype (methods.c) (4 samples, 1.37%)</title><rect x="474" y="244" width="16" height="15" fill="rgb(208,94,9)"/><text x="477.00" y="254.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (1 samples, 0.34%)</title><rect x="486" y="260" width="4" height="15" fill="rgb(219,39,24)"/><text x="489.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.34%)</title><rect x="486" y="276" width="4" height="15" fill="rgb(221,191,21)"/><text x="489.00" y="286.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.34%)</title><rect x="486" y="292" width="4" height="15" fill="rgb(242,171,10)"/><text x="489.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.34%)</title><rect x="486" y="308" width="4" height="15" fill="rgb(227,220,0)"/><text x="489.00" y="318.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.34%)</title><rect x="486" y="324" width="4" height="15" fill="rgb(239,133,51)"/><text x="489.00" y="334.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.34%)</title><rect x="486" y="340" width="4" height="15" fill="rgb(243,132,39)"/><text x="489.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_zipmap.py) (3 samples, 1.03%)</title><rect x="490" y="212" width="13" height="15" fill="rgb(238,50,15)"/><text x="493.00" y="222.50"></text></g><g><title>__init__ (mlprodict/onnxrt/ops_cpu/op_zipmap.py) (1 samples, 0.34%)</title><rect x="498" y="228" width="5" height="15" fill="rgb(224,70,15)"/><text x="501.00" y="238.50"></text></g><g><title>0x7f57d4c87341 (?) (1 samples, 0.34%)</title><rect x="515" y="244" width="4" height="15" fill="rgb(238,105,17)"/><text x="518.00" y="254.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (1 samples, 0.34%)</title><rect x="519" y="260" width="4" height="15" fill="rgb(242,136,40)"/><text x="522.00" y="270.50"></text></g><g><title>array_reshape (methods.c) (3 samples, 1.03%)</title><rect x="519" y="244" width="12" height="15" fill="rgb(213,65,20)"/><text x="522.00" y="254.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (2 samples, 0.68%)</title><rect x="523" y="260" width="8" height="15" fill="rgb(243,144,41)"/><text x="526.00" y="270.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (2 samples, 0.68%)</title><rect x="523" y="276" width="8" height="15" fill="rgb(244,196,53)"/><text x="526.00" y="286.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (1 samples, 0.34%)</title><rect x="527" y="292" width="4" height="15" fill="rgb(226,66,35)"/><text x="530.00" y="302.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.34%)</title><rect x="527" y="308" width="4" height="15" fill="rgb(238,190,8)"/><text x="530.00" y="318.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.34%)</title><rect x="531" y="436" width="4" height="15" fill="rgb(215,219,45)"/><text x="534.00" y="446.50"></text></g><g><title>0x7f5813b18991 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="535" y="500" width="4" height="15" fill="rgb(241,136,30)"/><text x="538.00" y="510.50"></text></g><g><title>pybind11::array_t&lt;float, 16&gt;::array_t (numpy.h) (2 samples, 0.68%)</title><rect x="535" y="436" width="8" height="15" fill="rgb(221,8,31)"/><text x="538.00" y="446.50"></text></g><g><title>pybind11::detail::any_container&lt;long&gt;::~any_container (common.h) (2 samples, 0.68%)</title><rect x="535" y="452" width="8" height="15" fill="rgb(254,226,9)"/><text x="538.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::~vector (stl_vector.h) (2 samples, 0.68%)</title><rect x="535" y="468" width="8" height="15" fill="rgb(235,40,22)"/><text x="538.00" y="478.50"></text></g><g><title>pybind11::array::array&lt;float&gt; (numpy.h) (2 samples, 0.68%)</title><rect x="535" y="484" width="8" height="15" fill="rgb(230,117,26)"/><text x="538.00" y="494.50"></text></g><g><title>pybind11::detail::any_container&lt;long&gt;::~any_container (common.h) (1 samples, 0.34%)</title><rect x="539" y="500" width="4" height="15" fill="rgb(242,157,22)"/><text x="542.00" y="510.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::~vector (stl_vector.h) (1 samples, 0.34%)</title><rect x="539" y="516" width="4" height="15" fill="rgb(205,142,11)"/><text x="542.00" y="526.50"></text></g><g><title>0x7f5813b18909 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="539" y="532" width="4" height="15" fill="rgb(232,227,7)"/><text x="542.00" y="542.50"></text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (1 samples, 0.34%)</title><rect x="543" y="436" width="4" height="15" fill="rgb(247,35,0)"/><text x="546.00" y="446.50"></text></g><g><title>pybind11::array::~array (numpy.h) (1 samples, 0.34%)</title><rect x="543" y="452" width="4" height="15" fill="rgb(228,159,6)"/><text x="546.00" y="462.50"></text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (1 samples, 0.34%)</title><rect x="543" y="468" width="4" height="15" fill="rgb(207,211,39)"/><text x="546.00" y="478.50"></text></g><g><title>pybind11::object::~object (pytypes.h) (1 samples, 0.34%)</title><rect x="543" y="484" width="4" height="15" fill="rgb(249,46,23)"/><text x="546.00" y="494.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (1 samples, 0.34%)</title><rect x="543" y="500" width="4" height="15" fill="rgb(207,210,41)"/><text x="546.00" y="510.50"></text></g><g><title>pybind11::make_tuple&lt;(pybind11::return_value_policy)1, pybind11::array_t&lt;long, 16&gt;&amp;, pybind11::array_t&lt;float, 16&gt;&amp;&gt; (cast.h) (1 samples, 0.34%)</title><rect x="543" y="516" width="4" height="15" fill="rgb(207,55,45)"/><text x="546.00" y="526.50"></text></g><g><title>pybind11::tuple::tuple (pytypes.h) (1 samples, 0.34%)</title><rect x="543" y="532" width="4" height="15" fill="rgb(206,103,2)"/><text x="546.00" y="542.50"></text></g><g><title>pybind11::array_t&lt;long, 16&gt;::array_t (numpy.h) (1 samples, 0.34%)</title><rect x="547" y="436" width="4" height="15" fill="rgb(228,130,16)"/><text x="550.00" y="446.50"></text></g><g><title>pybind11::detail::any_container&lt;long&gt;::~any_container (common.h) (1 samples, 0.34%)</title><rect x="547" y="452" width="4" height="15" fill="rgb(238,143,33)"/><text x="550.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::~vector (stl_vector.h) (1 samples, 0.34%)</title><rect x="547" y="468" width="4" height="15" fill="rgb(244,172,13)"/><text x="550.00" y="478.50"></text></g><g><title>pybind11::array::array&lt;long&gt; (numpy.h) (1 samples, 0.34%)</title><rect x="547" y="484" width="4" height="15" fill="rgb(213,115,17)"/><text x="550.00" y="494.50"></text></g><g><title>pybind11::dtype::~dtype (numpy.h) (1 samples, 0.34%)</title><rect x="547" y="500" width="4" height="15" fill="rgb(216,107,46)"/><text x="550.00" y="510.50"></text></g><g><title>pybind11::object::~object (pytypes.h) (1 samples, 0.34%)</title><rect x="547" y="516" width="4" height="15" fill="rgb(240,58,22)"/><text x="550.00" y="526.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (1 samples, 0.34%)</title><rect x="547" y="532" width="4" height="15" fill="rgb(223,13,48)"/><text x="550.00" y="542.50"></text></g><g><title>pybind11::array::array (numpy.h) (1 samples, 0.34%)</title><rect x="547" y="548" width="4" height="15" fill="rgb(236,103,0)"/><text x="550.00" y="558.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.34%)</title><rect x="547" y="564" width="4" height="15" fill="rgb(245,184,28)"/><text x="550.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.34%)</title><rect x="547" y="580" width="4" height="15" fill="rgb(218,218,15)"/><text x="550.00" y="590.50"></text></g><g><title>0x7f5813ceabcb (libm-2.29.so) (1 samples, 0.34%)</title><rect x="559" y="500" width="4" height="15" fill="rgb(224,93,10)"/><text x="562.00" y="510.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp) (3 samples, 1.03%)</title><rect x="555" y="468" width="12" height="15" fill="rgb(229,164,19)"/><text x="558.00" y="478.50"></text></g><g><title>expf32x (libm-2.29.so) (2 samples, 0.68%)</title><rect x="559" y="484" width="8" height="15" fill="rgb(220,54,29)"/><text x="562.00" y="494.50"></text></g><g><title>0x7f5813ceac3a (libm-2.29.so) (1 samples, 0.34%)</title><rect x="563" y="500" width="4" height="15" fill="rgb(205,73,10)"/><text x="566.00" y="510.50"></text></g><g><title>sigmoid_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_common_.hpp) (1 samples, 0.34%)</title><rect x="567" y="468" width="4" height="15" fill="rgb(217,36,36)"/><text x="570.00" y="478.50"></text></g><g><title>ComputeLogistic (mlprodict/onnxrt/ops_cpu/op_common_.hpp) (1 samples, 0.34%)</title><rect x="567" y="484" width="4" height="15" fill="rgb(222,129,51)"/><text x="570.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::size (stl_vector.h) (2 samples, 0.68%)</title><rect x="571" y="468" width="8" height="15" fill="rgb(207,111,19)"/><text x="574.00" y="478.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp) (2 samples, 0.68%)</title><rect x="571" y="484" width="8" height="15" fill="rgb(211,225,46)"/><text x="574.00" y="494.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (13 samples, 4.45%)</title><rect x="531" y="292" width="52" height="15" fill="rgb(249,111,39)"/><text x="534.00" y="302.50">pybin..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (13 samples, 4.45%)</title><rect x="531" y="308" width="52" height="15" fill="rgb(214,59,42)"/><text x="534.00" y="318.50">pybin..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (13 samples, 4.45%)</title><rect x="531" y="324" width="52" height="15" fill="rgb(226,86,11)"/><text x="534.00" y="334.50">pybin..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (13 samples, 4.45%)</title><rect x="531" y="340" width="52" height="15" fill="rgb(228,32,41)"/><text x="534.00" y="350.50">pybin..</text></g><g><title>pybind11::array::~array (numpy.h) (13 samples, 4.45%)</title><rect x="531" y="356" width="52" height="15" fill="rgb(250,49,0)"/><text x="534.00" y="366.50">pybin..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (13 samples, 4.45%)</title><rect x="531" y="372" width="52" height="15" fill="rgb(228,2,41)"/><text x="534.00" y="382.50">pybin..</text></g><g><title>pybind11::object::~object (pytypes.h) (13 samples, 4.45%)</title><rect x="531" y="388" width="52" height="15" fill="rgb(207,74,27)"/><text x="534.00" y="398.50">pybin..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (13 samples, 4.45%)</title><rect x="531" y="404" width="52" height="15" fill="rgb(231,112,11)"/><text x="534.00" y="414.50">pybin..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp) (13 samples, 4.45%)</title><rect x="531" y="420" width="52" height="15" fill="rgb(239,132,3)"/><text x="534.00" y="430.50">Runti..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (8 samples, 2.74%)</title><rect x="551" y="436" width="32" height="15" fill="rgb(229,228,49)"/><text x="554.00" y="446.50">py..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp) (8 samples, 2.74%)</title><rect x="551" y="452" width="32" height="15" fill="rgb(250,137,6)"/><text x="554.00" y="462.50">Ru..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::~vector (stl_vector.h) (1 samples, 0.34%)</title><rect x="579" y="468" width="4" height="15" fill="rgb(247,78,22)"/><text x="582.00" y="478.50"></text></g><g><title>0x7f5813b18cf0 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="579" y="484" width="4" height="15" fill="rgb(248,43,20)"/><text x="582.00" y="494.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.34%)</title><rect x="583" y="436" width="4" height="15" fill="rgb(221,202,13)"/><text x="586.00" y="446.50"></text></g><g><title>pybind11::detail::pyobject_caster&lt;pybind11::array_t&lt;float, 16&gt; &gt;::load (numpy.h) (2 samples, 0.68%)</title><rect x="583" y="324" width="8" height="15" fill="rgb(232,182,9)"/><text x="586.00" y="334.50"></text></g><g><title>pybind11::array_t&lt;float, 16&gt;::operator= (numpy.h) (2 samples, 0.68%)</title><rect x="583" y="340" width="8" height="15" fill="rgb(210,8,5)"/><text x="586.00" y="350.50"></text></g><g><title>pybind11::array::operator= (numpy.h) (2 samples, 0.68%)</title><rect x="583" y="356" width="8" height="15" fill="rgb(235,167,33)"/><text x="586.00" y="366.50"></text></g><g><title>pybind11::buffer::operator= (pytypes.h) (2 samples, 0.68%)</title><rect x="583" y="372" width="8" height="15" fill="rgb(205,0,9)"/><text x="586.00" y="382.50"></text></g><g><title>pybind11::object::operator= (pytypes.h) (2 samples, 0.68%)</title><rect x="583" y="388" width="8" height="15" fill="rgb(237,60,25)"/><text x="586.00" y="398.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (2 samples, 0.68%)</title><rect x="583" y="404" width="8" height="15" fill="rgb(208,144,53)"/><text x="586.00" y="414.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.68%)</title><rect x="583" y="420" width="8" height="15" fill="rgb(243,66,30)"/><text x="586.00" y="430.50"></text></g><g><title>npy_free_cache_dim (alloc.c) (1 samples, 0.34%)</title><rect x="587" y="436" width="4" height="15" fill="rgb(228,130,49)"/><text x="590.00" y="446.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.34%)</title><rect x="587" y="452" width="4" height="15" fill="rgb(222,33,16)"/><text x="590.00" y="462.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (58 samples, 19.86%)</title><rect x="361" y="132" width="234" height="15" fill="rgb(219,25,15)"/><text x="364.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchma..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (56 samples, 19.18%)</title><rect x="369" y="148" width="226" height="15" fill="rgb(247,123,46)"/><text x="372.00" y="158.50">run (mlprodict/onnxrt/onnx_in..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (52 samples, 17.81%)</title><rect x="385" y="164" width="210" height="15" fill="rgb(216,155,25)"/><text x="388.00" y="174.50">_run_sequence_runtime (mlpr..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (49 samples, 16.78%)</title><rect x="397" y="180" width="198" height="15" fill="rgb(214,50,43)"/><text x="400.00" y="190.50">run (mlprodict/onnxrt/onn..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (35 samples, 11.99%)</title><rect x="454" y="196" width="141" height="15" fill="rgb(222,130,15)"/><text x="457.00" y="206.50">run (mlprodict/on..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (23 samples, 7.88%)</title><rect x="503" y="212" width="92" height="15" fill="rgb(226,38,51)"/><text x="506.00" y="222.50">run (mlpro..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_svm_classifier.py) (23 samples, 7.88%)</title><rect x="503" y="228" width="92" height="15" fill="rgb(233,5,6)"/><text x="506.00" y="238.50">_run (mlpr..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (16 samples, 5.48%)</title><rect x="531" y="244" width="64" height="15" fill="rgb(236,69,46)"/><text x="534.00" y="254.50">pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (16 samples, 5.48%)</title><rect x="531" y="260" width="64" height="15" fill="rgb(216,92,43)"/><text x="534.00" y="270.50">void py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (16 samples, 5.48%)</title><rect x="531" y="276" width="64" height="15" fill="rgb(209,94,30)"/><text x="534.00" y="286.50">void py..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::load_args (cast.h) (3 samples, 1.03%)</title><rect x="583" y="292" width="12" height="15" fill="rgb(237,82,36)"/><text x="586.00" y="302.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::load_impl_sequence&lt;(unsigned long)0, (unsigned long)1&gt; (cast.h) (3 samples, 1.03%)</title><rect x="583" y="308" width="12" height="15" fill="rgb(253,192,39)"/><text x="586.00" y="318.50"></text></g><g><title>std::_Bit_reference::operator bool (stl_bvector.h) (1 samples, 0.34%)</title><rect x="591" y="324" width="4" height="15" fill="rgb(229,144,38)"/><text x="594.00" y="334.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic (cast.h) (1 samples, 0.34%)</title><rect x="591" y="340" width="4" height="15" fill="rgb(252,215,28)"/><text x="594.00" y="350.50"></text></g><g><title>pybind11::detail::get_type_info (cast.h) (1 samples, 0.34%)</title><rect x="591" y="356" width="4" height="15" fill="rgb(221,106,44)"/><text x="594.00" y="366.50"></text></g><g><title>pybind11::detail::get_local_type_info (cast.h) (1 samples, 0.34%)</title><rect x="591" y="372" width="4" height="15" fill="rgb(244,91,19)"/><text x="594.00" y="382.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (unordered_map.h) (1 samples, 0.34%)</title><rect x="591" y="388" width="4" height="15" fill="rgb(223,217,3)"/><text x="594.00" y="398.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (hashtable.h) (1 samples, 0.34%)</title><rect x="591" y="404" width="4" height="15" fill="rgb(248,192,49)"/><text x="594.00" y="414.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (hashtable_policy.h) (1 samples, 0.34%)</title><rect x="591" y="420" width="4" height="15" fill="rgb(250,67,22)"/><text x="594.00" y="430.50"></text></g><g><title>std::hash&lt;std::type_index&gt;::operator() (typeindex) (1 samples, 0.34%)</title><rect x="591" y="436" width="4" height="15" fill="rgb(244,82,17)"/><text x="594.00" y="446.50"></text></g><g><title>std::type_index::hash_code (typeindex) (1 samples, 0.34%)</title><rect x="591" y="452" width="4" height="15" fill="rgb(240,24,38)"/><text x="594.00" y="462.50"></text></g><g><title>std::type_info::hash_code (typeinfo) (1 samples, 0.34%)</title><rect x="591" y="468" width="4" height="15" fill="rgb(253,53,29)"/><text x="594.00" y="478.50"></text></g><g><title>std::type_info::name (typeinfo) (1 samples, 0.34%)</title><rect x="591" y="484" width="4" height="15" fill="rgb(217,143,0)"/><text x="594.00" y="494.50"></text></g><g><title>profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (62 samples, 21.23%)</title><rect x="349" y="100" width="251" height="15" fill="rgb(238,61,11)"/><text x="352.00" y="110.50">profile (bench_SVC_rbf_m_cl_proba..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (61 samples, 20.89%)</title><rect x="353" y="116" width="247" height="15" fill="rgb(236,132,54)"/><text x="356.00" y="126.50">time_predict (mlprodict/asv_benc..</text></g><g><title>unicode_concatenate (python3.7) (1 samples, 0.34%)</title><rect x="595" y="132" width="5" height="15" fill="rgb(228,52,51)"/><text x="598.00" y="142.50"></text></g><g><title>profile_pyrt (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (63 samples, 21.58%)</title><rect x="349" y="68" width="255" height="15" fill="rgb(206,137,52)"/><text x="352.00" y="78.50">profile_pyrt (bench_SVC_rbf_m_cl_p..</text></g><g><title>setup_profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (63 samples, 21.58%)</title><rect x="349" y="84" width="255" height="15" fill="rgb(231,198,27)"/><text x="352.00" y="94.50">setup_profile (bench_SVC_rbf_m_cl_..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.34%)</title><rect x="600" y="100" width="4" height="15" fill="rgb(253,178,53)"/><text x="603.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.34%)</title><rect x="600" y="116" width="4" height="15" fill="rgb(234,182,33)"/><text x="603.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.34%)</title><rect x="600" y="132" width="4" height="15" fill="rgb(241,170,25)"/><text x="603.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.34%)</title><rect x="600" y="148" width="4" height="15" fill="rgb(212,59,41)"/><text x="603.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.34%)</title><rect x="600" y="164" width="4" height="15" fill="rgb(251,15,23)"/><text x="603.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.34%)</title><rect x="600" y="180" width="4" height="15" fill="rgb(249,41,52)"/><text x="603.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (1 samples, 0.34%)</title><rect x="600" y="196" width="4" height="15" fill="rgb(229,14,53)"/><text x="603.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="212" width="4" height="15" fill="rgb(232,122,46)"/><text x="603.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="228" width="4" height="15" fill="rgb(213,153,33)"/><text x="603.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="244" width="4" height="15" fill="rgb(228,111,13)"/><text x="603.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="600" y="260" width="4" height="15" fill="rgb(242,108,53)"/><text x="603.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="276" width="4" height="15" fill="rgb(221,194,53)"/><text x="603.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (1 samples, 0.34%)</title><rect x="600" y="292" width="4" height="15" fill="rgb(226,135,28)"/><text x="603.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="308" width="4" height="15" fill="rgb(217,116,14)"/><text x="603.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="324" width="4" height="15" fill="rgb(239,174,33)"/><text x="603.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="340" width="4" height="15" fill="rgb(205,197,6)"/><text x="603.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.34%)</title><rect x="600" y="356" width="4" height="15" fill="rgb(245,151,54)"/><text x="603.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="372" width="4" height="15" fill="rgb(249,16,43)"/><text x="603.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (1 samples, 0.34%)</title><rect x="600" y="388" width="4" height="15" fill="rgb(226,184,16)"/><text x="603.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="404" width="4" height="15" fill="rgb(208,158,35)"/><text x="603.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="420" width="4" height="15" fill="rgb(253,10,5)"/><text x="603.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="436" width="4" height="15" fill="rgb(245,77,6)"/><text x="603.00" y="446.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="452" width="4" height="15" fill="rgb(205,60,5)"/><text x="603.00" y="462.50"></text></g><g><title>_init_module_attrs (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="468" width="4" height="15" fill="rgb(213,12,31)"/><text x="603.00" y="478.50"></text></g><g><title>cached (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="600" y="484" width="4" height="15" fill="rgb(214,117,17)"/><text x="603.00" y="494.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.34%)</title><rect x="604" y="116" width="4" height="15" fill="rgb(212,157,46)"/><text x="607.00" y="126.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.34%)</title><rect x="604" y="132" width="4" height="15" fill="rgb(214,140,10)"/><text x="607.00" y="142.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.34%)</title><rect x="604" y="148" width="4" height="15" fill="rgb(239,6,24)"/><text x="607.00" y="158.50"></text></g><g><title>0x7f57ee6093fd (?) (1 samples, 0.34%)</title><rect x="644" y="180" width="4" height="15" fill="rgb(220,137,27)"/><text x="647.00" y="190.50"></text></g><g><title>0x7f57ee607237 (?) (1 samples, 0.34%)</title><rect x="644" y="196" width="4" height="15" fill="rgb(208,198,33)"/><text x="647.00" y="206.50"></text></g><g><title>0x7f57ee5f1ce3 (?) (1 samples, 0.34%)</title><rect x="644" y="212" width="4" height="15" fill="rgb(212,229,22)"/><text x="647.00" y="222.50"></text></g><g><title>0x7f57ee606d0e (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="648" y="196" width="8" height="15" fill="rgb(228,95,29)"/><text x="651.00" y="206.50"></text></g><g><title>0x7f57ee5f0e39 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="648" y="212" width="8" height="15" fill="rgb(229,178,24)"/><text x="651.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (2 samples, 0.68%)</title><rect x="648" y="228" width="8" height="15" fill="rgb(239,12,6)"/><text x="651.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (2 samples, 0.68%)</title><rect x="648" y="244" width="8" height="15" fill="rgb(237,193,23)"/><text x="651.00" y="254.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.34%)</title><rect x="652" y="260" width="4" height="15" fill="rgb(206,100,50)"/><text x="655.00" y="270.50"></text></g><g><title>_buffer_format_string (buffer.c) (1 samples, 0.34%)</title><rect x="652" y="276" width="4" height="15" fill="rgb(245,61,36)"/><text x="655.00" y="286.50"></text></g><g><title>_append_char (buffer.c) (1 samples, 0.34%)</title><rect x="652" y="292" width="4" height="15" fill="rgb(254,178,17)"/><text x="655.00" y="302.50"></text></g><g><title>realloc (libc-2.29.so) (1 samples, 0.34%)</title><rect x="652" y="308" width="4" height="15" fill="rgb(225,199,43)"/><text x="655.00" y="318.50"></text></g><g><title>0x7f57ee5f05ae (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="656" y="212" width="8" height="15" fill="rgb(209,49,27)"/><text x="659.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (2 samples, 0.68%)</title><rect x="656" y="228" width="8" height="15" fill="rgb(249,171,32)"/><text x="659.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (2 samples, 0.68%)</title><rect x="656" y="244" width="8" height="15" fill="rgb(253,74,39)"/><text x="659.00" y="254.50"></text></g><g><title>_buffer_info_free (buffer.c) (1 samples, 0.34%)</title><rect x="660" y="260" width="4" height="15" fill="rgb(249,78,45)"/><text x="663.00" y="270.50"></text></g><g><title>0x7f5813b18902 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="660" y="276" width="4" height="15" fill="rgb(248,103,37)"/><text x="663.00" y="286.50"></text></g><g><title>0x7f57ee606d58 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (3 samples, 1.03%)</title><rect x="656" y="196" width="12" height="15" fill="rgb(235,43,28)"/><text x="659.00" y="206.50"></text></g><g><title>0x7f57ee5f067f (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="664" y="212" width="4" height="15" fill="rgb(251,69,20)"/><text x="667.00" y="222.50"></text></g><g><title>0x7f57ee5f033c (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="664" y="228" width="4" height="15" fill="rgb(247,172,27)"/><text x="667.00" y="238.50"></text></g><g><title>0x7f57ee5ef9a9 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="664" y="244" width="4" height="15" fill="rgb(225,44,40)"/><text x="667.00" y="254.50"></text></g><g><title>0x7f57ee606de1 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="668" y="196" width="4" height="15" fill="rgb(240,77,53)"/><text x="671.00" y="206.50"></text></g><g><title>0x7f57ee5f05ae (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="668" y="212" width="4" height="15" fill="rgb(246,27,26)"/><text x="671.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.34%)</title><rect x="668" y="228" width="4" height="15" fill="rgb(238,140,38)"/><text x="671.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.34%)</title><rect x="668" y="244" width="4" height="15" fill="rgb(215,207,2)"/><text x="671.00" y="254.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.34%)</title><rect x="668" y="260" width="4" height="15" fill="rgb(213,87,50)"/><text x="671.00" y="270.50"></text></g><g><title>0x7f57ee606e20 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="672" y="196" width="8" height="15" fill="rgb(216,20,52)"/><text x="675.00" y="206.50"></text></g><g><title>0x7f57ee5f0e39 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="672" y="212" width="8" height="15" fill="rgb(251,77,9)"/><text x="675.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (2 samples, 0.68%)</title><rect x="672" y="228" width="8" height="15" fill="rgb(254,223,9)"/><text x="675.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (2 samples, 0.68%)</title><rect x="672" y="244" width="8" height="15" fill="rgb(248,91,36)"/><text x="675.00" y="254.50"></text></g><g><title>0x7f57ee606e66 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="680" y="196" width="4" height="15" fill="rgb(233,193,21)"/><text x="683.00" y="206.50"></text></g><g><title>0x7f57ee5f0e39 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="680" y="212" width="4" height="15" fill="rgb(251,158,43)"/><text x="683.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.34%)</title><rect x="680" y="228" width="4" height="15" fill="rgb(243,195,27)"/><text x="683.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.34%)</title><rect x="680" y="244" width="4" height="15" fill="rgb(212,189,53)"/><text x="683.00" y="254.50"></text></g><g><title>_buffer_info_cmp (buffer.c) (1 samples, 0.34%)</title><rect x="680" y="260" width="4" height="15" fill="rgb(237,35,26)"/><text x="683.00" y="270.50"></text></g><g><title>0x7f5813b276c2 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="680" y="276" width="4" height="15" fill="rgb(241,201,34)"/><text x="683.00" y="286.50"></text></g><g><title>0x7f57ee606eb8 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="684" y="196" width="4" height="15" fill="rgb(228,207,41)"/><text x="687.00" y="206.50"></text></g><g><title>0x7f57ee5f0e39 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="684" y="212" width="4" height="15" fill="rgb(244,75,29)"/><text x="687.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.34%)</title><rect x="684" y="228" width="4" height="15" fill="rgb(237,162,3)"/><text x="687.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.34%)</title><rect x="684" y="244" width="4" height="15" fill="rgb(235,179,9)"/><text x="687.00" y="254.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.34%)</title><rect x="684" y="260" width="4" height="15" fill="rgb(245,173,28)"/><text x="687.00" y="270.50"></text></g><g><title>0x7f5812d3a2d0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="684" y="276" width="4" height="15" fill="rgb(209,205,41)"/><text x="687.00" y="286.50"></text></g><g><title>0x7f57ee606f9b (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="688" y="196" width="4" height="15" fill="rgb(238,194,7)"/><text x="691.00" y="206.50"></text></g><g><title>0x7f57ee5f0e39 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="688" y="212" width="4" height="15" fill="rgb(205,19,25)"/><text x="691.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.34%)</title><rect x="688" y="228" width="4" height="15" fill="rgb(236,51,25)"/><text x="691.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.34%)</title><rect x="688" y="244" width="4" height="15" fill="rgb(230,184,48)"/><text x="691.00" y="254.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.34%)</title><rect x="688" y="260" width="4" height="15" fill="rgb(205,210,18)"/><text x="691.00" y="270.50"></text></g><g><title>0x7f57ee606ff0 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (3 samples, 1.03%)</title><rect x="692" y="196" width="13" height="15" fill="rgb(216,39,34)"/><text x="695.00" y="206.50"></text></g><g><title>0x7f57ee607030 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="705" y="196" width="4" height="15" fill="rgb(213,7,38)"/><text x="708.00" y="206.50"></text></g><g><title>0x7f5813b39124 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="705" y="212" width="4" height="15" fill="rgb(220,41,53)"/><text x="708.00" y="222.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.34%)</title><rect x="717" y="244" width="4" height="15" fill="rgb(235,169,53)"/><text x="720.00" y="254.50"></text></g><g><title>0x7f57ee60712f (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.37%)</title><rect x="709" y="196" width="16" height="15" fill="rgb(254,71,4)"/><text x="712.00" y="206.50"></text></g><g><title>array_arange (multiarraymodule.c) (4 samples, 1.37%)</title><rect x="709" y="212" width="16" height="15" fill="rgb(245,7,9)"/><text x="712.00" y="222.50"></text></g><g><title>PyArray_ArangeObj (ctors.c) (2 samples, 0.68%)</title><rect x="717" y="228" width="8" height="15" fill="rgb(210,72,45)"/><text x="720.00" y="238.50"></text></g><g><title>_calc_length (ctors.c) (1 samples, 0.34%)</title><rect x="721" y="244" width="4" height="15" fill="rgb(208,146,34)"/><text x="724.00" y="254.50"></text></g><g><title>0x7f57ee6071e1 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="725" y="196" width="4" height="15" fill="rgb(249,99,12)"/><text x="728.00" y="206.50"></text></g><g><title>0x7f57ee5f17c1 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="729" y="212" width="4" height="15" fill="rgb(212,215,30)"/><text x="732.00" y="222.50"></text></g><g><title>0x7f57ee607237 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="729" y="196" width="8" height="15" fill="rgb(211,104,51)"/><text x="732.00" y="206.50"></text></g><g><title>0x7f57ee5f1a70 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="733" y="212" width="4" height="15" fill="rgb(247,91,53)"/><text x="736.00" y="222.50"></text></g><g><title>0x7f57ee607365 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="737" y="196" width="4" height="15" fill="rgb(249,196,52)"/><text x="740.00" y="206.50"></text></g><g><title>0x7f5813b3914a (libc-2.29.so) (1 samples, 0.34%)</title><rect x="737" y="212" width="4" height="15" fill="rgb(217,133,40)"/><text x="740.00" y="222.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (2 samples, 0.68%)</title><rect x="741" y="228" width="8" height="15" fill="rgb(216,19,10)"/><text x="744.00" y="238.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.34%)</title><rect x="745" y="244" width="4" height="15" fill="rgb(232,81,2)"/><text x="748.00" y="254.50"></text></g><g><title>0x7f57ee60746c (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (3 samples, 1.03%)</title><rect x="741" y="196" width="12" height="15" fill="rgb(232,199,12)"/><text x="744.00" y="206.50"></text></g><g><title>array_empty (multiarraymodule.c) (3 samples, 1.03%)</title><rect x="741" y="212" width="12" height="15" fill="rgb(250,94,2)"/><text x="744.00" y="222.50"></text></g><g><title>npy_free_cache_dim (alloc.c) (1 samples, 0.34%)</title><rect x="749" y="228" width="4" height="15" fill="rgb(250,140,20)"/><text x="752.00" y="238.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.34%)</title><rect x="749" y="244" width="4" height="15" fill="rgb(240,165,53)"/><text x="752.00" y="254.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.34%)</title><rect x="753" y="244" width="4" height="15" fill="rgb(237,69,36)"/><text x="756.00" y="254.50"></text></g><g><title>0x7f57ee607528 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="753" y="196" width="8" height="15" fill="rgb(212,85,24)"/><text x="756.00" y="206.50"></text></g><g><title>0x7f57ee5f0e39 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="753" y="212" width="8" height="15" fill="rgb(238,12,9)"/><text x="756.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (2 samples, 0.68%)</title><rect x="753" y="228" width="8" height="15" fill="rgb(250,52,16)"/><text x="756.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.34%)</title><rect x="757" y="244" width="4" height="15" fill="rgb(218,17,4)"/><text x="760.00" y="254.50"></text></g><g><title>0x7f57ee5e9e50 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="761" y="228" width="4" height="15" fill="rgb(249,90,10)"/><text x="764.00" y="238.50"></text></g><g><title>0x7f5813ceac5a (libm-2.29.so) (1 samples, 0.34%)</title><rect x="765" y="276" width="4" height="15" fill="rgb(208,165,49)"/><text x="768.00" y="286.50"></text></g><g><title>exp (libm-2.29.so) (2 samples, 0.68%)</title><rect x="765" y="260" width="8" height="15" fill="rgb(245,172,15)"/><text x="768.00" y="270.50"></text></g><g><title>0x7f5813ceac7f (libm-2.29.so) (1 samples, 0.34%)</title><rect x="769" y="276" width="4" height="15" fill="rgb(253,4,28)"/><text x="772.00" y="286.50"></text></g><g><title>0x7f57ee607553 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.71%)</title><rect x="761" y="196" width="20" height="15" fill="rgb(231,135,16)"/><text x="764.00" y="206.50"></text></g><g><title>copy_predict_proba (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.71%)</title><rect x="761" y="212" width="20" height="15" fill="rgb(246,132,7)"/><text x="764.00" y="222.50"></text></g><g><title>svm_predict_probability (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.37%)</title><rect x="765" y="228" width="16" height="15" fill="rgb(216,9,32)"/><text x="768.00" y="238.50"></text></g><g><title>svm_predict_values (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.37%)</title><rect x="765" y="244" width="16" height="15" fill="rgb(228,222,39)"/><text x="768.00" y="254.50"></text></g><g><title>svm::Kernel::k_function (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="773" y="260" width="8" height="15" fill="rgb(222,79,10)"/><text x="776.00" y="270.50"></text></g><g><title>0x7f57ee6077b4 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="781" y="196" width="8" height="15" fill="rgb(210,17,21)"/><text x="784.00" y="206.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.68%)</title><rect x="781" y="212" width="8" height="15" fill="rgb(215,6,13)"/><text x="784.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.68%)</title><rect x="781" y="228" width="8" height="15" fill="rgb(220,217,13)"/><text x="784.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.68%)</title><rect x="781" y="244" width="8" height="15" fill="rgb(231,181,39)"/><text x="784.00" y="254.50"></text></g><g><title>0x7f57ee5f05ae (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="789" y="212" width="4" height="15" fill="rgb(241,178,21)"/><text x="792.00" y="222.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.34%)</title><rect x="789" y="228" width="4" height="15" fill="rgb(213,188,24)"/><text x="792.00" y="238.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.34%)</title><rect x="789" y="244" width="4" height="15" fill="rgb(232,117,33)"/><text x="792.00" y="254.50"></text></g><g><title>0x7f5812d3b600 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="789" y="260" width="4" height="15" fill="rgb(223,115,25)"/><text x="792.00" y="270.50"></text></g><g><title>0x7f57ee6093fd (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (37 samples, 12.67%)</title><rect x="648" y="180" width="150" height="15" fill="rgb(210,40,12)"/><text x="651.00" y="190.50">0x7f57ee6093fd (skl..</text></g><g><title>0x7f57ee608d06 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.68%)</title><rect x="789" y="196" width="9" height="15" fill="rgb(217,139,37)"/><text x="792.00" y="206.50"></text></g><g><title>0x7f57ee5f067f (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="793" y="212" width="5" height="15" fill="rgb(207,144,29)"/><text x="796.00" y="222.50"></text></g><g><title>0x7f57ee5f033c (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="793" y="228" width="5" height="15" fill="rgb(236,138,46)"/><text x="796.00" y="238.50"></text></g><g><title>0x7f57ee5efcf3 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.34%)</title><rect x="793" y="244" width="5" height="15" fill="rgb(212,149,38)"/><text x="796.00" y="254.50"></text></g><g><title>_dense_predict_proba (sklearn/svm/_base.py) (45 samples, 15.41%)</title><rect x="620" y="164" width="182" height="15" fill="rgb(228,14,17)"/><text x="623.00" y="174.50">_dense_predict_proba (s..</text></g><g><title>_compute_kernel (sklearn/svm/_base.py) (1 samples, 0.34%)</title><rect x="798" y="180" width="4" height="15" fill="rgb(239,143,0)"/><text x="801.00" y="190.50"></text></g><g><title>__enter__ (warnings.py) (4 samples, 1.37%)</title><rect x="882" y="196" width="17" height="15" fill="rgb(253,47,33)"/><text x="885.00" y="206.50"></text></g><g><title>__exit__ (warnings.py) (2 samples, 0.68%)</title><rect x="899" y="196" width="8" height="15" fill="rgb(237,116,27)"/><text x="902.00" y="206.50"></text></g><g><title>__init__ (warnings.py) (1 samples, 0.34%)</title><rect x="907" y="196" width="4" height="15" fill="rgb(254,207,27)"/><text x="910.00" y="206.50"></text></g><g><title>0x7f5813b2ee7a (libc-2.29.so) (1 samples, 0.34%)</title><rect x="947" y="212" width="4" height="15" fill="rgb(226,162,21)"/><text x="950.00" y="222.50"></text></g><g><title>0x7f5813bf70e6 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="951" y="212" width="4" height="15" fill="rgb(251,24,3)"/><text x="954.00" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.34%)</title><rect x="955" y="212" width="4" height="15" fill="rgb(247,94,50)"/><text x="958.00" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (13 samples, 4.45%)</title><rect x="911" y="196" width="52" height="15" fill="rgb(210,194,13)"/><text x="914.00" y="206.50">_asse..</text></g><g><title>get_config (sklearn/_config.py) (1 samples, 0.34%)</title><rect x="959" y="212" width="4" height="15" fill="rgb(244,171,6)"/><text x="962.00" y="222.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (2 samples, 0.68%)</title><rect x="963" y="196" width="8" height="15" fill="rgb(217,186,26)"/><text x="966.00" y="206.50"></text></g><g><title>0x7f5813bf6134 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="1008" y="212" width="4" height="15" fill="rgb(205,203,14)"/><text x="1011.00" y="222.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.34%)</title><rect x="1012" y="212" width="4" height="15" fill="rgb(229,146,32)"/><text x="1015.00" y="222.50"></text></g><g><title>__instancecheck__ (abc.py) (6 samples, 2.05%)</title><rect x="1016" y="212" width="24" height="15" fill="rgb(225,165,33)"/><text x="1019.00" y="222.50">_..</text></g><g><title>__subclasscheck__ (abc.py) (2 samples, 0.68%)</title><rect x="1032" y="228" width="8" height="15" fill="rgb(246,136,48)"/><text x="1035.00" y="238.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (18 samples, 6.16%)</title><rect x="971" y="196" width="73" height="15" fill="rgb(229,169,15)"/><text x="974.00" y="206.50">_num_sam..</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.34%)</title><rect x="1040" y="212" width="4" height="15" fill="rgb(241,227,54)"/><text x="1043.00" y="222.50"></text></g><g><title>arraydescr_new (descriptor.c) (2 samples, 0.68%)</title><rect x="1044" y="196" width="8" height="15" fill="rgb(237,179,3)"/><text x="1047.00" y="206.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.34%)</title><rect x="1048" y="212" width="4" height="15" fill="rgb(241,90,5)"/><text x="1051.00" y="222.50"></text></g><g><title>PyArray_BoolConverter (conversion_utils.c) (1 samples, 0.34%)</title><rect x="1056" y="228" width="4" height="15" fill="rgb(233,21,17)"/><text x="1059.00" y="238.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c) (1 samples, 0.34%)</title><rect x="1060" y="260" width="4" height="15" fill="rgb(254,206,14)"/><text x="1063.00" y="270.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.34%)</title><rect x="1068" y="308" width="4" height="15" fill="rgb(206,58,30)"/><text x="1071.00" y="318.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (1 samples, 0.34%)</title><rect x="1068" y="324" width="4" height="15" fill="rgb(232,168,43)"/><text x="1071.00" y="334.50"></text></g><g><title>0x7f5813ad0a19 (libc-2.29.so) (1 samples, 0.34%)</title><rect x="1072" y="340" width="4" height="15" fill="rgb(224,126,5)"/><text x="1075.00" y="350.50"></text></g><g><title>_npy_stride_sort_item_comparator (shape.c) (1 samples, 0.34%)</title><rect x="1072" y="356" width="4" height="15" fill="rgb(246,159,19)"/><text x="1075.00" y="366.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (2 samples, 0.68%)</title><rect x="1072" y="308" width="8" height="15" fill="rgb(232,27,35)"/><text x="1075.00" y="318.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.68%)</title><rect x="1072" y="324" width="8" height="15" fill="rgb(231,78,52)"/><text x="1075.00" y="334.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.34%)</title><rect x="1076" y="340" width="4" height="15" fill="rgb(229,8,38)"/><text x="1079.00" y="350.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.34%)</title><rect x="1080" y="308" width="4" height="15" fill="rgb(239,215,28)"/><text x="1083.00" y="318.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (7 samples, 2.40%)</title><rect x="1060" y="228" width="28" height="15" fill="rgb(242,114,20)"/><text x="1063.00" y="238.50">P..</text></g><g><title>PyArray_FromAny (ctors.c) (7 samples, 2.40%)</title><rect x="1060" y="244" width="28" height="15" fill="rgb(241,172,54)"/><text x="1063.00" y="254.50">P..</text></g><g><title>PyArray_FromArray (ctors.c) (6 samples, 2.05%)</title><rect x="1064" y="260" width="24" height="15" fill="rgb(251,187,32)"/><text x="1067.00" y="270.50">P..</text></g><g><title>PyArray_AssignArray (array_assign_array.c) (6 samples, 2.05%)</title><rect x="1064" y="276" width="24" height="15" fill="rgb(251,22,42)"/><text x="1067.00" y="286.50">P..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (5 samples, 1.71%)</title><rect x="1068" y="292" width="20" height="15" fill="rgb(231,108,33)"/><text x="1071.00" y="302.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (1 samples, 0.34%)</title><rect x="1084" y="308" width="4" height="15" fill="rgb(222,105,26)"/><text x="1087.00" y="318.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (1 samples, 0.34%)</title><rect x="1084" y="324" width="4" height="15" fill="rgb(218,154,17)"/><text x="1087.00" y="334.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (10 samples, 3.42%)</title><rect x="1052" y="196" width="41" height="15" fill="rgb(253,226,33)"/><text x="1055.00" y="206.50">asa..</text></g><g><title>_array_fromobject (multiarraymodule.c) (9 samples, 3.08%)</title><rect x="1056" y="212" width="37" height="15" fill="rgb(211,202,20)"/><text x="1059.00" y="222.50">_ar..</text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (1 samples, 0.34%)</title><rect x="1088" y="228" width="5" height="15" fill="rgb(241,120,43)"/><text x="1091.00" y="238.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.34%)</title><rect x="1093" y="196" width="4" height="15" fill="rgb(253,193,12)"/><text x="1096.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (74 samples, 25.34%)</title><rect x="830" y="180" width="299" height="15" fill="rgb(239,34,0)"/><text x="833.00" y="190.50">check_array (sklearn/utils/validation.py)</text></g><g><title>simplefilter (warnings.py) (8 samples, 2.74%)</title><rect x="1097" y="196" width="32" height="15" fill="rgb(211,53,22)"/><text x="1100.00" y="206.50">si..</text></g><g><title>_add_filter (warnings.py) (6 samples, 2.05%)</title><rect x="1105" y="212" width="24" height="15" fill="rgb(213,24,54)"/><text x="1108.00" y="222.50">_..</text></g><g><title>0x7f5813b3912f (libc-2.29.so) (1 samples, 0.34%)</title><rect x="1145" y="212" width="4" height="15" fill="rgb(236,65,22)"/><text x="1148.00" y="222.50"></text></g><g><title>unicode_endswith (python3.7) (1 samples, 0.34%)</title><rect x="1149" y="212" width="4" height="15" fill="rgb(245,90,43)"/><text x="1152.00" y="222.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (10 samples, 3.42%)</title><rect x="1129" y="180" width="40" height="15" fill="rgb(254,120,20)"/><text x="1132.00" y="190.50">che..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (9 samples, 3.08%)</title><rect x="1133" y="196" width="36" height="15" fill="rgb(246,18,25)"/><text x="1136.00" y="206.50">&lt;li..</text></g><g><title>unicode_startswith (python3.7) (4 samples, 1.37%)</title><rect x="1153" y="212" width="16" height="15" fill="rgb(218,176,48)"/><text x="1156.00" y="222.50"></text></g><g><title>_validate_for_predict (sklearn/svm/_base.py) (92 samples, 31.51%)</title><rect x="802" y="164" width="371" height="15" fill="rgb(250,67,47)"/><text x="805.00" y="174.50">_validate_for_predict (sklearn/svm/_base.py)</text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.34%)</title><rect x="1169" y="180" width="4" height="15" fill="rgb(230,206,30)"/><text x="1172.00" y="190.50"></text></g><g><title>_predict_proba (sklearn/svm/_base.py) (139 samples, 47.60%)</title><rect x="616" y="148" width="561" height="15" fill="rgb(213,138,37)"/><text x="619.00" y="158.50">_predict_proba (sklearn/svm/_base.py)</text></g><g><title>array_size_get (getset.c) (1 samples, 0.34%)</title><rect x="1173" y="164" width="4" height="15" fill="rgb(227,180,14)"/><text x="1176.00" y="174.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (142 samples, 48.63%)</title><rect x="612" y="132" width="573" height="15" fill="rgb(235,222,27)"/><text x="615.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/svm/_base.py) (2 samples, 0.68%)</title><rect x="1177" y="148" width="8" height="15" fill="rgb(235,7,29)"/><text x="1180.00" y="158.50"></text></g><g><title>_check_proba (sklearn/svm/_base.py) (1 samples, 0.34%)</title><rect x="1181" y="164" width="4" height="15" fill="rgb(206,190,24)"/><text x="1184.00" y="174.50"></text></g><g><title>all (292 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(235,64,4)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (292 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(230,25,12)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py)</text></g><g><title>profile_skl (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (145 samples, 49.66%)</title><rect x="604" y="68" width="586" height="15" fill="rgb(234,145,30)"/><text x="607.00" y="78.50">profile_skl (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (145 samples, 49.66%)</title><rect x="604" y="84" width="586" height="15" fill="rgb(248,167,49)"/><text x="607.00" y="94.50">setup_profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py)</text></g><g><title>profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py) (145 samples, 49.66%)</title><rect x="604" y="100" width="586" height="15" fill="rgb(221,136,54)"/><text x="607.00" y="110.50">profile (bench_SVC_rbf_m_cl_probabilityTrue_kernelrbf_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (144 samples, 49.32%)</title><rect x="608" y="116" width="582" height="15" fill="rgb(234,96,40)"/><text x="611.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.34%)</title><rect x="1185" y="132" width="5" height="15" fill="rgb(247,125,23)"/><text x="1188.00" y="142.50"></text></g></g></svg>