<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1125.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_b_cl_solverliblinear.py:4) (3 samples, 1.05%)</title><rect x="0.6993%" y="148" width="1.0490%" height="15" fill="rgb(227,0,7)"/><text x="0.9493%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="0.6993%" y="164" width="1.0490%" height="15" fill="rgb(217,0,24)"/><text x="0.9493%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 1.05%)</title><rect x="0.6993%" y="180" width="1.0490%" height="15" fill="rgb(221,193,54)"/><text x="0.9493%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="0.6993%" y="196" width="1.0490%" height="15" fill="rgb(248,212,6)"/><text x="0.9493%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="0.6993%" y="212" width="1.0490%" height="15" fill="rgb(208,68,35)"/><text x="0.9493%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="0.6993%" y="228" width="1.0490%" height="15" fill="rgb(232,128,0)"/><text x="0.9493%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="0.6993%" y="244" width="1.0490%" height="15" fill="rgb(207,160,47)"/><text x="0.9493%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="0.6993%" y="260" width="1.0490%" height="15" fill="rgb(228,23,34)"/><text x="0.9493%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="0.6993%" y="276" width="1.0490%" height="15" fill="rgb(218,30,26)"/><text x="0.9493%" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:82) (3 samples, 1.05%)</title><rect x="0.6993%" y="292" width="1.0490%" height="15" fill="rgb(220,122,19)"/><text x="0.9493%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="0.6993%" y="308" width="1.0490%" height="15" fill="rgb(250,228,42)"/><text x="0.9493%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="0.6993%" y="324" width="1.0490%" height="15" fill="rgb(240,193,28)"/><text x="0.9493%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="0.6993%" y="340" width="1.0490%" height="15" fill="rgb(216,20,37)"/><text x="0.9493%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="0.6993%" y="356" width="1.0490%" height="15" fill="rgb(206,188,39)"/><text x="0.9493%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="0.6993%" y="372" width="1.0490%" height="15" fill="rgb(217,207,13)"/><text x="0.9493%" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (3 samples, 1.05%)</title><rect x="0.6993%" y="388" width="1.0490%" height="15" fill="rgb(231,73,38)"/><text x="0.9493%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="0.6993%" y="404" width="1.0490%" height="15" fill="rgb(225,20,46)"/><text x="0.9493%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="0.6993%" y="420" width="1.0490%" height="15" fill="rgb(210,31,41)"/><text x="0.9493%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="0.6993%" y="436" width="1.0490%" height="15" fill="rgb(221,200,47)"/><text x="0.9493%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="0.6993%" y="452" width="1.0490%" height="15" fill="rgb(226,26,5)"/><text x="0.9493%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="0.6993%" y="468" width="1.0490%" height="15" fill="rgb(249,33,26)"/><text x="0.9493%" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:27) (3 samples, 1.05%)</title><rect x="0.6993%" y="484" width="1.0490%" height="15" fill="rgb(235,183,28)"/><text x="0.9493%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="0.6993%" y="500" width="1.0490%" height="15" fill="rgb(221,5,38)"/><text x="0.9493%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="0.6993%" y="516" width="1.0490%" height="15" fill="rgb(247,18,42)"/><text x="0.9493%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="0.6993%" y="532" width="1.0490%" height="15" fill="rgb(241,131,45)"/><text x="0.9493%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="0.6993%" y="548" width="1.0490%" height="15" fill="rgb(249,31,29)"/><text x="0.9493%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="0.6993%" y="564" width="1.0490%" height="15" fill="rgb(225,111,53)"/><text x="0.9493%" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (3 samples, 1.05%)</title><rect x="0.6993%" y="580" width="1.0490%" height="15" fill="rgb(238,160,17)"/><text x="0.9493%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="0.6993%" y="596" width="1.0490%" height="15" fill="rgb(214,148,48)"/><text x="0.9493%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="0.6993%" y="612" width="1.0490%" height="15" fill="rgb(232,36,49)"/><text x="0.9493%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="0.6993%" y="628" width="1.0490%" height="15" fill="rgb(209,103,24)"/><text x="0.9493%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="0.6993%" y="644" width="1.0490%" height="15" fill="rgb(229,88,8)"/><text x="0.9493%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="0.6993%" y="660" width="1.0490%" height="15" fill="rgb(213,181,19)"/><text x="0.9493%" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:384) (3 samples, 1.05%)</title><rect x="0.6993%" y="676" width="1.0490%" height="15" fill="rgb(254,191,54)"/><text x="0.9493%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="0.6993%" y="692" width="1.0490%" height="15" fill="rgb(241,83,37)"/><text x="0.9493%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="0.6993%" y="708" width="1.0490%" height="15" fill="rgb(233,36,39)"/><text x="0.9493%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="0.6993%" y="724" width="1.0490%" height="15" fill="rgb(226,3,54)"/><text x="0.9493%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="0.6993%" y="740" width="1.0490%" height="15" fill="rgb(245,192,40)"/><text x="0.9493%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="0.6993%" y="756" width="1.0490%" height="15" fill="rgb(238,167,29)"/><text x="0.9493%" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (4 samples, 1.40%)</title><rect x="1.7483%" y="436" width="1.3986%" height="15" fill="rgb(232,182,51)"/><text x="1.9983%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.40%)</title><rect x="1.7483%" y="452" width="1.3986%" height="15" fill="rgb(231,60,39)"/><text x="1.9983%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.40%)</title><rect x="1.7483%" y="468" width="1.3986%" height="15" fill="rgb(208,69,12)"/><text x="1.9983%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.40%)</title><rect x="1.7483%" y="484" width="1.3986%" height="15" fill="rgb(235,93,37)"/><text x="1.9983%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.40%)</title><rect x="1.7483%" y="500" width="1.3986%" height="15" fill="rgb(213,116,39)"/><text x="1.9983%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.40%)</title><rect x="1.7483%" y="516" width="1.3986%" height="15" fill="rgb(222,207,29)"/><text x="1.9983%" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:13) (4 samples, 1.40%)</title><rect x="1.7483%" y="532" width="1.3986%" height="15" fill="rgb(206,96,30)"/><text x="1.9983%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.40%)</title><rect x="1.7483%" y="548" width="1.3986%" height="15" fill="rgb(218,138,4)"/><text x="1.9983%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.40%)</title><rect x="1.7483%" y="564" width="1.3986%" height="15" fill="rgb(250,191,14)"/><text x="1.9983%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.40%)</title><rect x="1.7483%" y="580" width="1.3986%" height="15" fill="rgb(239,60,40)"/><text x="1.9983%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.40%)</title><rect x="1.7483%" y="596" width="1.3986%" height="15" fill="rgb(206,27,48)"/><text x="1.9983%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.40%)</title><rect x="1.7483%" y="612" width="1.3986%" height="15" fill="rgb(225,35,8)"/><text x="1.9983%" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (3 samples, 1.05%)</title><rect x="2.0979%" y="628" width="1.0490%" height="15" fill="rgb(250,213,24)"/><text x="2.3479%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="2.0979%" y="644" width="1.0490%" height="15" fill="rgb(247,123,22)"/><text x="2.3479%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="2.0979%" y="660" width="1.0490%" height="15" fill="rgb(231,138,38)"/><text x="2.3479%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="2.0979%" y="676" width="1.0490%" height="15" fill="rgb(231,145,46)"/><text x="2.3479%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="2.0979%" y="692" width="1.0490%" height="15" fill="rgb(251,118,11)"/><text x="2.3479%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="2.0979%" y="708" width="1.0490%" height="15" fill="rgb(217,147,25)"/><text x="2.3479%" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (3 samples, 1.05%)</title><rect x="2.0979%" y="724" width="1.0490%" height="15" fill="rgb(247,81,37)"/><text x="2.3479%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="2.0979%" y="740" width="1.0490%" height="15" fill="rgb(209,12,38)"/><text x="2.3479%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="2.0979%" y="756" width="1.0490%" height="15" fill="rgb(227,1,9)"/><text x="2.3479%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="2.0979%" y="772" width="1.0490%" height="15" fill="rgb(248,47,43)"/><text x="2.3479%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="2.0979%" y="788" width="1.0490%" height="15" fill="rgb(221,10,30)"/><text x="2.3479%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="2.0979%" y="804" width="1.0490%" height="15" fill="rgb(210,229,1)"/><text x="2.3479%" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (3 samples, 1.05%)</title><rect x="2.0979%" y="820" width="1.0490%" height="15" fill="rgb(222,148,37)"/><text x="2.3479%" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="2.0979%" y="836" width="1.0490%" height="15" fill="rgb(234,67,33)"/><text x="2.3479%" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="2.0979%" y="852" width="1.0490%" height="15" fill="rgb(247,98,35)"/><text x="2.3479%" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="2.0979%" y="868" width="1.0490%" height="15" fill="rgb(247,138,52)"/><text x="2.3479%" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="2.0979%" y="884" width="1.0490%" height="15" fill="rgb(213,79,30)"/><text x="2.3479%" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="2.0979%" y="900" width="1.0490%" height="15" fill="rgb(246,177,23)"/><text x="2.3479%" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (3 samples, 1.05%)</title><rect x="2.0979%" y="916" width="1.0490%" height="15" fill="rgb(230,62,27)"/><text x="2.3479%" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="2.0979%" y="932" width="1.0490%" height="15" fill="rgb(216,154,8)"/><text x="2.3479%" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="2.0979%" y="948" width="1.0490%" height="15" fill="rgb(244,35,45)"/><text x="2.3479%" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="2.0979%" y="964" width="1.0490%" height="15" fill="rgb(251,115,12)"/><text x="2.3479%" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="2.0979%" y="980" width="1.0490%" height="15" fill="rgb(240,54,50)"/><text x="2.3479%" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="2.0979%" y="996" width="1.0490%" height="15" fill="rgb(233,84,52)"/><text x="2.3479%" y="1006.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:4) (12 samples, 4.20%)</title><rect x="0.0000%" y="52" width="4.1958%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="62.50">&lt;modu..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 4.20%)</title><rect x="0.0000%" y="68" width="4.1958%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="78.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 4.20%)</title><rect x="0.0000%" y="84" width="4.1958%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="94.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (12 samples, 4.20%)</title><rect x="0.0000%" y="100" width="4.1958%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="110.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (12 samples, 4.20%)</title><rect x="0.0000%" y="116" width="4.1958%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="126.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 4.20%)</title><rect x="0.0000%" y="132" width="4.1958%" height="15" fill="rgb(211,96,35)"/><text x="0.2500%" y="142.50">_call..</text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_b_cl_solverliblinear.py:7) (7 samples, 2.45%)</title><rect x="1.7483%" y="148" width="2.4476%" height="15" fill="rgb(253,215,40)"/><text x="1.9983%" y="158.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.45%)</title><rect x="1.7483%" y="164" width="2.4476%" height="15" fill="rgb(211,81,21)"/><text x="1.9983%" y="174.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.45%)</title><rect x="1.7483%" y="180" width="2.4476%" height="15" fill="rgb(208,190,38)"/><text x="1.9983%" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 2.45%)</title><rect x="1.7483%" y="196" width="2.4476%" height="15" fill="rgb(235,213,38)"/><text x="1.9983%" y="206.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 2.45%)</title><rect x="1.7483%" y="212" width="2.4476%" height="15" fill="rgb(237,122,38)"/><text x="1.9983%" y="222.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 2.45%)</title><rect x="1.7483%" y="228" width="2.4476%" height="15" fill="rgb(244,218,35)"/><text x="1.9983%" y="238.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (7 samples, 2.45%)</title><rect x="1.7483%" y="244" width="2.4476%" height="15" fill="rgb(240,68,47)"/><text x="1.9983%" y="254.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.45%)</title><rect x="1.7483%" y="260" width="2.4476%" height="15" fill="rgb(210,16,53)"/><text x="1.9983%" y="270.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.45%)</title><rect x="1.7483%" y="276" width="2.4476%" height="15" fill="rgb(235,124,12)"/><text x="1.9983%" y="286.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 2.45%)</title><rect x="1.7483%" y="292" width="2.4476%" height="15" fill="rgb(224,169,11)"/><text x="1.9983%" y="302.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 2.45%)</title><rect x="1.7483%" y="308" width="2.4476%" height="15" fill="rgb(250,166,2)"/><text x="1.9983%" y="318.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 2.45%)</title><rect x="1.7483%" y="324" width="2.4476%" height="15" fill="rgb(242,216,29)"/><text x="1.9983%" y="334.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:27) (7 samples, 2.45%)</title><rect x="1.7483%" y="340" width="2.4476%" height="15" fill="rgb(230,116,27)"/><text x="1.9983%" y="350.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.45%)</title><rect x="1.7483%" y="356" width="2.4476%" height="15" fill="rgb(228,99,48)"/><text x="1.9983%" y="366.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.45%)</title><rect x="1.7483%" y="372" width="2.4476%" height="15" fill="rgb(253,11,6)"/><text x="1.9983%" y="382.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 2.45%)</title><rect x="1.7483%" y="388" width="2.4476%" height="15" fill="rgb(247,143,39)"/><text x="1.9983%" y="398.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 2.45%)</title><rect x="1.7483%" y="404" width="2.4476%" height="15" fill="rgb(236,97,10)"/><text x="1.9983%" y="414.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 2.45%)</title><rect x="1.7483%" y="420" width="2.4476%" height="15" fill="rgb(233,208,19)"/><text x="1.9983%" y="430.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 1.05%)</title><rect x="3.1469%" y="436" width="1.0490%" height="15" fill="rgb(216,164,2)"/><text x="3.3969%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.1469%" y="452" width="1.0490%" height="15" fill="rgb(220,129,5)"/><text x="3.3969%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 1.05%)</title><rect x="3.1469%" y="468" width="1.0490%" height="15" fill="rgb(242,17,10)"/><text x="3.3969%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.1469%" y="484" width="1.0490%" height="15" fill="rgb(242,107,0)"/><text x="3.3969%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.1469%" y="500" width="1.0490%" height="15" fill="rgb(251,28,31)"/><text x="3.3969%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="3.1469%" y="516" width="1.0490%" height="15" fill="rgb(233,223,10)"/><text x="3.3969%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="3.1469%" y="532" width="1.0490%" height="15" fill="rgb(215,21,27)"/><text x="3.3969%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="3.1469%" y="548" width="1.0490%" height="15" fill="rgb(232,23,21)"/><text x="3.3969%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.1469%" y="564" width="1.0490%" height="15" fill="rgb(244,5,23)"/><text x="3.3969%" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 1.05%)</title><rect x="3.1469%" y="580" width="1.0490%" height="15" fill="rgb(226,81,46)"/><text x="3.3969%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.1469%" y="596" width="1.0490%" height="15" fill="rgb(247,70,30)"/><text x="3.3969%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="3.1469%" y="612" width="1.0490%" height="15" fill="rgb(212,68,19)"/><text x="3.3969%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="3.1469%" y="628" width="1.0490%" height="15" fill="rgb(240,187,13)"/><text x="3.3969%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="3.1469%" y="644" width="1.0490%" height="15" fill="rgb(223,113,26)"/><text x="3.3969%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.1469%" y="660" width="1.0490%" height="15" fill="rgb(206,192,2)"/><text x="3.3969%" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 1.05%)</title><rect x="3.1469%" y="676" width="1.0490%" height="15" fill="rgb(241,108,4)"/><text x="3.3969%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.1469%" y="692" width="1.0490%" height="15" fill="rgb(247,173,49)"/><text x="3.3969%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="3.1469%" y="708" width="1.0490%" height="15" fill="rgb(224,114,35)"/><text x="3.3969%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="3.1469%" y="724" width="1.0490%" height="15" fill="rgb(245,159,27)"/><text x="3.3969%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="3.1469%" y="740" width="1.0490%" height="15" fill="rgb(245,172,44)"/><text x="3.3969%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.1469%" y="756" width="1.0490%" height="15" fill="rgb(236,23,11)"/><text x="3.3969%" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 1.05%)</title><rect x="3.1469%" y="772" width="1.0490%" height="15" fill="rgb(205,117,38)"/><text x="3.3969%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.1469%" y="788" width="1.0490%" height="15" fill="rgb(237,72,25)"/><text x="3.3969%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="3.1469%" y="804" width="1.0490%" height="15" fill="rgb(244,70,9)"/><text x="3.3969%" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="3.1469%" y="820" width="1.0490%" height="15" fill="rgb(217,125,39)"/><text x="3.3969%" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="3.1469%" y="836" width="1.0490%" height="15" fill="rgb(235,36,10)"/><text x="3.3969%" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.1469%" y="852" width="1.0490%" height="15" fill="rgb(251,123,47)"/><text x="3.3969%" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 1.05%)</title><rect x="3.1469%" y="868" width="1.0490%" height="15" fill="rgb(221,13,13)"/><text x="3.3969%" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.1469%" y="884" width="1.0490%" height="15" fill="rgb(238,131,9)"/><text x="3.3969%" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 1.05%)</title><rect x="3.1469%" y="900" width="1.0490%" height="15" fill="rgb(211,50,8)"/><text x="3.3969%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.1469%" y="916" width="1.0490%" height="15" fill="rgb(245,182,24)"/><text x="3.3969%" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.1469%" y="932" width="1.0490%" height="15" fill="rgb(242,14,37)"/><text x="3.3969%" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="3.1469%" y="948" width="1.0490%" height="15" fill="rgb(246,228,12)"/><text x="3.3969%" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="3.1469%" y="964" width="1.0490%" height="15" fill="rgb(213,55,15)"/><text x="3.3969%" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="3.1469%" y="980" width="1.0490%" height="15" fill="rgb(209,9,3)"/><text x="3.3969%" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.1469%" y="996" width="1.0490%" height="15" fill="rgb(230,59,30)"/><text x="3.3969%" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 1.05%)</title><rect x="3.1469%" y="1012" width="1.0490%" height="15" fill="rgb(209,121,21)"/><text x="3.3969%" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.1469%" y="1028" width="1.0490%" height="15" fill="rgb(220,109,13)"/><text x="3.3969%" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="3.1469%" y="1044" width="1.0490%" height="15" fill="rgb(232,18,1)"/><text x="3.3969%" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="3.1469%" y="1060" width="1.0490%" height="15" fill="rgb(215,41,42)"/><text x="3.3969%" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="3.1469%" y="1076" width="1.0490%" height="15" fill="rgb(224,123,36)"/><text x="3.3969%" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.1469%" y="1092" width="1.0490%" height="15" fill="rgb(240,125,3)"/><text x="3.3969%" y="1102.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:266) (3 samples, 1.05%)</title><rect x="6.2937%" y="180" width="1.0490%" height="15" fill="rgb(205,98,50)"/><text x="6.5437%" y="190.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (3 samples, 1.05%)</title><rect x="6.2937%" y="196" width="1.0490%" height="15" fill="rgb(205,185,37)"/><text x="6.5437%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:964) (3 samples, 1.05%)</title><rect x="6.2937%" y="212" width="1.0490%" height="15" fill="rgb(238,207,15)"/><text x="6.5437%" y="222.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:268) (7 samples, 2.45%)</title><rect x="7.3427%" y="180" width="2.4476%" height="15" fill="rgb(213,199,42)"/><text x="7.5927%" y="190.50">de..</text></g><g><title>array_add (number.c:330) (3 samples, 1.05%)</title><rect x="9.7902%" y="196" width="1.0490%" height="15" fill="rgb(235,201,11)"/><text x="10.0402%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 1.05%)</title><rect x="9.7902%" y="212" width="1.0490%" height="15" fill="rgb(207,46,11)"/><text x="10.0402%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 1.05%)</title><rect x="9.7902%" y="228" width="1.0490%" height="15" fill="rgb(241,35,35)"/><text x="10.0402%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 1.05%)</title><rect x="9.7902%" y="244" width="1.0490%" height="15" fill="rgb(243,32,47)"/><text x="10.0402%" y="254.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 3.50%)</title><rect x="11.5385%" y="212" width="3.4965%" height="15" fill="rgb(247,202,23)"/><text x="11.7885%" y="222.50">dge..</text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (14 samples, 4.90%)</title><rect x="15.3846%" y="308" width="4.8951%" height="15" fill="rgb(219,102,11)"/><text x="15.6346%" y="318.50">raw_ar..</text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src:855) (14 samples, 4.90%)</title><rect x="15.3846%" y="324" width="4.8951%" height="15" fill="rgb(243,110,44)"/><text x="15.6346%" y="334.50">_align..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (16 samples, 5.59%)</title><rect x="15.0350%" y="244" width="5.5944%" height="15" fill="rgb(222,74,54)"/><text x="15.2850%" y="254.50">PyUFunc..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (16 samples, 5.59%)</title><rect x="15.0350%" y="260" width="5.5944%" height="15" fill="rgb(216,99,12)"/><text x="15.2850%" y="270.50">NpyIter..</text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2942) (15 samples, 5.24%)</title><rect x="15.3846%" y="276" width="5.2448%" height="15" fill="rgb(226,22,26)"/><text x="15.6346%" y="286.50">npyite..</text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (15 samples, 5.24%)</title><rect x="15.3846%" y="292" width="5.2448%" height="15" fill="rgb(217,163,10)"/><text x="15.6346%" y="302.50">PyArra..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (10 samples, 3.50%)</title><rect x="20.6294%" y="244" width="3.4965%" height="15" fill="rgb(213,25,53)"/><text x="20.8794%" y="254.50">PyU..</text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (10 samples, 3.50%)</title><rect x="20.6294%" y="260" width="3.4965%" height="15" fill="rgb(252,105,26)"/><text x="20.8794%" y="270.50">DOU..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 3.50%)</title><rect x="20.6294%" y="276" width="3.4965%" height="15" fill="rgb(220,39,43)"/><text x="20.8794%" y="286.50">cbl..</text></g><g><title>dgemm_nn (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 3.50%)</title><rect x="20.6294%" y="292" width="3.4965%" height="15" fill="rgb(229,68,48)"/><text x="20.8794%" y="302.50">dge..</text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 3.50%)</title><rect x="20.6294%" y="308" width="3.4965%" height="15" fill="rgb(252,8,32)"/><text x="20.8794%" y="318.50">dge..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:307) (53 samples, 18.53%)</title><rect x="6.2937%" y="164" width="18.5315%" height="15" fill="rgb(223,20,43)"/><text x="6.5437%" y="174.50">_predict_proba_lr (sklearn/li..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:276) (43 samples, 15.03%)</title><rect x="9.7902%" y="180" width="15.0350%" height="15" fill="rgb(229,81,49)"/><text x="10.0402%" y="190.50">decision_function (skle..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (40 samples, 13.99%)</title><rect x="10.8392%" y="196" width="13.9860%" height="15" fill="rgb(236,28,36)"/><text x="11.0892%" y="206.50">safe_sparse_dot (skle..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (28 samples, 9.79%)</title><rect x="15.0350%" y="212" width="9.7902%" height="15" fill="rgb(249,185,26)"/><text x="15.2850%" y="222.50">ufunc_generic_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (28 samples, 9.79%)</title><rect x="15.0350%" y="228" width="9.7902%" height="15" fill="rgb(249,174,33)"/><text x="15.2850%" y="238.50">PyUFunc_Generi..</text></g><g><title>0x7ff4d72d3225 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.45%)</title><rect x="25.1748%" y="260" width="2.4476%" height="15" fill="rgb(233,201,37)"/><text x="25.4248%" y="270.50">0x..</text></g><g><title>exp (libm-2.29.so) (7 samples, 2.45%)</title><rect x="25.1748%" y="276" width="2.4476%" height="15" fill="rgb(221,78,26)"/><text x="25.4248%" y="286.50">ex..</text></g><g><title>0x7ff4d72b263d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (8 samples, 2.80%)</title><rect x="25.1748%" y="244" width="2.7972%" height="15" fill="rgb(250,127,30)"/><text x="25.4248%" y="254.50">0x..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:308) (10 samples, 3.50%)</title><rect x="24.8252%" y="164" width="3.4965%" height="15" fill="rgb(230,49,44)"/><text x="25.0752%" y="174.50">_pr..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 3.50%)</title><rect x="24.8252%" y="180" width="3.4965%" height="15" fill="rgb(229,67,23)"/><text x="25.0752%" y="190.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 3.15%)</title><rect x="25.1748%" y="196" width="3.1469%" height="15" fill="rgb(249,83,47)"/><text x="25.4248%" y="206.50">PyU..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (9 samples, 3.15%)</title><rect x="25.1748%" y="212" width="3.1469%" height="15" fill="rgb(215,43,3)"/><text x="25.4248%" y="222.50">exe..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (9 samples, 3.15%)</title><rect x="25.1748%" y="228" width="3.1469%" height="15" fill="rgb(238,154,13)"/><text x="25.4248%" y="238.50">tri..</text></g><g><title>array_sum (methods.c:2215) (7 samples, 2.45%)</title><rect x="29.0210%" y="180" width="2.4476%" height="15" fill="rgb(219,56,2)"/><text x="29.2710%" y="190.50">ar..</text></g><g><title>forward_ndarray_method (methods.c:108) (7 samples, 2.45%)</title><rect x="29.0210%" y="196" width="2.4476%" height="15" fill="rgb(233,0,4)"/><text x="29.2710%" y="206.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py:38) (7 samples, 2.45%)</title><rect x="29.0210%" y="212" width="2.4476%" height="15" fill="rgb(235,30,7)"/><text x="29.2710%" y="222.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (7 samples, 2.45%)</title><rect x="29.0210%" y="228" width="2.4476%" height="15" fill="rgb(250,79,13)"/><text x="29.2710%" y="238.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (6 samples, 2.10%)</title><rect x="29.3706%" y="244" width="2.0979%" height="15" fill="rgb(211,146,34)"/><text x="29.6206%" y="254.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (6 samples, 2.10%)</title><rect x="29.3706%" y="260" width="2.0979%" height="15" fill="rgb(228,22,38)"/><text x="29.6206%" y="270.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (4 samples, 1.40%)</title><rect x="30.0699%" y="276" width="1.3986%" height="15" fill="rgb(235,168,5)"/><text x="30.3199%" y="286.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (3 samples, 1.05%)</title><rect x="30.4196%" y="292" width="1.0490%" height="15" fill="rgb(221,155,16)"/><text x="30.6696%" y="302.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (3 samples, 1.05%)</title><rect x="31.4685%" y="228" width="1.0490%" height="15" fill="rgb(215,215,53)"/><text x="31.7185%" y="238.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (3 samples, 1.05%)</title><rect x="31.4685%" y="244" width="1.0490%" height="15" fill="rgb(223,4,10)"/><text x="31.7185%" y="254.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 1.05%)</title><rect x="31.4685%" y="260" width="1.0490%" height="15" fill="rgb(234,103,6)"/><text x="31.7185%" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 2.45%)</title><rect x="31.4685%" y="180" width="2.4476%" height="15" fill="rgb(227,97,0)"/><text x="31.7185%" y="190.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (7 samples, 2.45%)</title><rect x="31.4685%" y="196" width="2.4476%" height="15" fill="rgb(234,150,53)"/><text x="31.7185%" y="206.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (7 samples, 2.45%)</title><rect x="31.4685%" y="212" width="2.4476%" height="15" fill="rgb(228,201,54)"/><text x="31.7185%" y="222.50">ex..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:313) (16 samples, 5.59%)</title><rect x="28.6713%" y="164" width="5.5944%" height="15" fill="rgb(222,22,37)"/><text x="28.9213%" y="174.50">_predic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (83 samples, 29.02%)</title><rect x="5.5944%" y="132" width="29.0210%" height="15" fill="rgb(237,53,32)"/><text x="5.8444%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1651) (81 samples, 28.32%)</title><rect x="6.2937%" y="148" width="28.3217%" height="15" fill="rgb(233,25,53)"/><text x="6.5437%" y="158.50">predict_proba (sklearn/linear_model/_logistic...</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:54) (86 samples, 30.07%)</title><rect x="4.8951%" y="52" width="30.0699%" height="15" fill="rgb(210,40,34)"/><text x="5.1451%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_b_c..</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:53) (86 samples, 30.07%)</title><rect x="4.8951%" y="68" width="30.0699%" height="15" fill="rgb(241,220,44)"/><text x="5.1451%" y="78.50">profile_skl (bench_LogisticRegression_liblinear_..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:37) (86 samples, 30.07%)</title><rect x="4.8951%" y="84" width="30.0699%" height="15" fill="rgb(235,28,35)"/><text x="5.1451%" y="94.50">setup_profile (bench_LogisticRegression_liblinea..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:31) (86 samples, 30.07%)</title><rect x="4.8951%" y="100" width="30.0699%" height="15" fill="rgb(210,56,17)"/><text x="5.1451%" y="110.50">profile (bench_LogisticRegression_liblinear_b_cl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (84 samples, 29.37%)</title><rect x="5.5944%" y="116" width="29.3706%" height="15" fill="rgb(224,130,29)"/><text x="5.8444%" y="126.50">time_predict (mlprodict/asv_benchmark/common_as..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 2.80%)</title><rect x="36.0140%" y="244" width="2.7972%" height="15" fill="rgb(235,212,8)"/><text x="36.2640%" y="254.50">ar..</text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (7 samples, 2.45%)</title><rect x="36.3636%" y="260" width="2.4476%" height="15" fill="rgb(223,33,50)"/><text x="36.6136%" y="270.50">ar..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (7 samples, 2.45%)</title><rect x="36.3636%" y="276" width="2.4476%" height="15" fill="rgb(219,149,13)"/><text x="36.6136%" y="286.50">Py..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (7 samples, 2.45%)</title><rect x="36.3636%" y="292" width="2.4476%" height="15" fill="rgb(250,156,29)"/><text x="36.6136%" y="302.50">cb..</text></g><g><title>gemm (cblasfuncs.c:40) (7 samples, 2.45%)</title><rect x="36.3636%" y="308" width="2.4476%" height="15" fill="rgb(216,193,19)"/><text x="36.6136%" y="318.50">ge..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 2.45%)</title><rect x="36.3636%" y="324" width="2.4476%" height="15" fill="rgb(216,135,14)"/><text x="36.6136%" y="334.50">cb..</text></g><g><title>sgemm_tn (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 2.45%)</title><rect x="36.3636%" y="340" width="2.4476%" height="15" fill="rgb(241,47,5)"/><text x="36.6136%" y="350.50">sg..</text></g><g><title>sgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 2.45%)</title><rect x="36.3636%" y="356" width="2.4476%" height="15" fill="rgb(233,42,35)"/><text x="36.6136%" y="366.50">sg..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:39) (34 samples, 11.89%)</title><rect x="35.3147%" y="196" width="11.8881%" height="15" fill="rgb(231,13,6)"/><text x="35.5647%" y="206.50">_run (mlprodict/on..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (33 samples, 11.54%)</title><rect x="35.6643%" y="212" width="11.5385%" height="15" fill="rgb(207,181,40)"/><text x="35.9143%" y="222.50">numpy_dot_inplace..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (33 samples, 11.54%)</title><rect x="35.6643%" y="228" width="11.5385%" height="15" fill="rgb(254,173,49)"/><text x="35.9143%" y="238.50">dot (&lt;__array_fun..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (24 samples, 8.39%)</title><rect x="38.8112%" y="244" width="8.3916%" height="15" fill="rgb(221,1,38)"/><text x="39.0612%" y="254.50">sgemm_kernel..</text></g><g><title>iterator_loop (ufunc_object.c:1561) (4 samples, 1.40%)</title><rect x="47.5524%" y="260" width="1.3986%" height="15" fill="rgb(206,124,46)"/><text x="47.8024%" y="270.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (4 samples, 1.40%)</title><rect x="47.5524%" y="276" width="1.3986%" height="15" fill="rgb(249,21,11)"/><text x="47.8024%" y="286.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (4 samples, 1.40%)</title><rect x="47.5524%" y="292" width="1.3986%" height="15" fill="rgb(222,201,40)"/><text x="47.8024%" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 2.10%)</title><rect x="47.2028%" y="212" width="2.0979%" height="15" fill="rgb(235,61,29)"/><text x="47.4528%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 2.10%)</title><rect x="47.2028%" y="228" width="2.0979%" height="15" fill="rgb(219,207,3)"/><text x="47.4528%" y="238.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (6 samples, 2.10%)</title><rect x="47.2028%" y="244" width="2.0979%" height="15" fill="rgb(222,56,46)"/><text x="47.4528%" y="254.50">e..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:41) (7 samples, 2.45%)</title><rect x="47.2028%" y="196" width="2.4476%" height="15" fill="rgb(239,76,54)"/><text x="47.4528%" y="206.50">_r..</text></g><g><title>0x7ff4d72d31d4 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.45%)</title><rect x="52.0979%" y="292" width="2.4476%" height="15" fill="rgb(231,124,27)"/><text x="52.3479%" y="302.50">0x..</text></g><g><title>expf (libm-2.29.so) (7 samples, 2.45%)</title><rect x="52.0979%" y="308" width="2.4476%" height="15" fill="rgb(249,195,6)"/><text x="52.3479%" y="318.50">ex..</text></g><g><title>0x7ff4d72b0f9d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (9 samples, 3.15%)</title><rect x="52.0979%" y="276" width="3.1469%" height="15" fill="rgb(237,174,47)"/><text x="52.3479%" y="286.50">0x7..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:46) (17 samples, 5.94%)</title><rect x="49.6503%" y="196" width="5.9441%" height="15" fill="rgb(206,201,31)"/><text x="49.9003%" y="206.50">_run (ml..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (15 samples, 5.24%)</title><rect x="50.3497%" y="212" width="5.2448%" height="15" fill="rgb(231,57,52)"/><text x="50.5997%" y="222.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (14 samples, 4.90%)</title><rect x="50.6993%" y="228" width="4.8951%" height="15" fill="rgb(248,177,22)"/><text x="50.9493%" y="238.50">PyUFun..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (12 samples, 4.20%)</title><rect x="51.3986%" y="244" width="4.1958%" height="15" fill="rgb(215,211,37)"/><text x="51.6486%" y="254.50">execu..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (12 samples, 4.20%)</title><rect x="51.3986%" y="260" width="4.1958%" height="15" fill="rgb(241,128,51)"/><text x="51.6486%" y="270.50">trivi..</text></g><g><title>compiled_run (&lt;string&gt;:4) (61 samples, 21.33%)</title><rect x="35.3147%" y="180" width="21.3287%" height="15" fill="rgb(227,165,31)"/><text x="35.5647%" y="190.50">compiled_run (&lt;string&gt;:4)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:60) (3 samples, 1.05%)</title><rect x="55.5944%" y="196" width="1.0490%" height="15" fill="rgb(228,167,24)"/><text x="55.8444%" y="206.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (3 samples, 1.05%)</title><rect x="55.5944%" y="212" width="1.0490%" height="15" fill="rgb(228,143,12)"/><text x="55.8444%" y="222.50"></text></g><g><title>array_sum (methods.c:2215) (9 samples, 3.15%)</title><rect x="58.3916%" y="228" width="3.1469%" height="15" fill="rgb(249,149,8)"/><text x="58.6416%" y="238.50">arr..</text></g><g><title>forward_ndarray_method (methods.c:108) (9 samples, 3.15%)</title><rect x="58.3916%" y="244" width="3.1469%" height="15" fill="rgb(243,35,44)"/><text x="58.6416%" y="254.50">for..</text></g><g><title>_sum (numpy/core/_methods.py:38) (9 samples, 3.15%)</title><rect x="58.3916%" y="260" width="3.1469%" height="15" fill="rgb(246,89,9)"/><text x="58.6416%" y="270.50">_su..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (8 samples, 2.80%)</title><rect x="58.7413%" y="276" width="2.7972%" height="15" fill="rgb(233,213,13)"/><text x="58.9913%" y="286.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (8 samples, 2.80%)</title><rect x="58.7413%" y="292" width="2.7972%" height="15" fill="rgb(233,141,41)"/><text x="58.9913%" y="302.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (8 samples, 2.80%)</title><rect x="58.7413%" y="308" width="2.7972%" height="15" fill="rgb(239,167,4)"/><text x="58.9913%" y="318.50">Py..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (5 samples, 1.75%)</title><rect x="59.7902%" y="324" width="1.7483%" height="15" fill="rgb(209,217,16)"/><text x="60.0402%" y="334.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (5 samples, 1.75%)</title><rect x="59.7902%" y="340" width="1.7483%" height="15" fill="rgb(219,88,35)"/><text x="60.0402%" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 1.05%)</title><rect x="61.5385%" y="260" width="1.0490%" height="15" fill="rgb(220,193,23)"/><text x="61.7885%" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 1.05%)</title><rect x="61.5385%" y="276" width="1.0490%" height="15" fill="rgb(230,90,52)"/><text x="61.7885%" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (3 samples, 1.05%)</title><rect x="61.5385%" y="292" width="1.0490%" height="15" fill="rgb(252,106,19)"/><text x="61.7885%" y="302.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (3 samples, 1.05%)</title><rect x="61.5385%" y="308" width="1.0490%" height="15" fill="rgb(206,74,20)"/><text x="61.7885%" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 1.05%)</title><rect x="61.5385%" y="324" width="1.0490%" height="15" fill="rgb(230,138,44)"/><text x="61.7885%" y="334.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:61) (80 samples, 27.97%)</title><rect x="34.9650%" y="52" width="27.9720%" height="15" fill="rgb(235,182,43)"/><text x="35.2150%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:60) (80 samples, 27.97%)</title><rect x="34.9650%" y="68" width="27.9720%" height="15" fill="rgb(242,16,51)"/><text x="35.2150%" y="78.50">profile_pyrtc (bench_LogisticRegression_libli..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:37) (80 samples, 27.97%)</title><rect x="34.9650%" y="84" width="27.9720%" height="15" fill="rgb(248,9,4)"/><text x="35.2150%" y="94.50">setup_profile (bench_LogisticRegression_libli..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:31) (80 samples, 27.97%)</title><rect x="34.9650%" y="100" width="27.9720%" height="15" fill="rgb(210,31,22)"/><text x="35.2150%" y="110.50">profile (bench_LogisticRegression_liblinear_b..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (80 samples, 27.97%)</title><rect x="34.9650%" y="116" width="27.9720%" height="15" fill="rgb(239,54,39)"/><text x="35.2150%" y="126.50">time_predict (mlprodict/asv_benchmark/common_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (79 samples, 27.62%)</title><rect x="35.3147%" y="132" width="27.6224%" height="15" fill="rgb(230,99,41)"/><text x="35.5647%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (79 samples, 27.62%)</title><rect x="35.3147%" y="148" width="27.6224%" height="15" fill="rgb(253,106,12)"/><text x="35.5647%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (79 samples, 27.62%)</title><rect x="35.3147%" y="164" width="27.6224%" height="15" fill="rgb(213,46,41)"/><text x="35.5647%" y="174.50">_run_sequence_runtime_compiled (mlprodict/on..</text></g><g><title>compiled_run (&lt;string&gt;:5) (18 samples, 6.29%)</title><rect x="56.6434%" y="180" width="6.2937%" height="15" fill="rgb(215,133,35)"/><text x="56.8934%" y="190.50">compiled..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py:67) (18 samples, 6.29%)</title><rect x="56.6434%" y="196" width="6.2937%" height="15" fill="rgb(213,28,5)"/><text x="56.8934%" y="206.50">_run (ml..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py:47) (16 samples, 5.59%)</title><rect x="57.3427%" y="212" width="5.5944%" height="15" fill="rgb(215,77,49)"/><text x="57.5927%" y="222.50">norm_l1..</text></g><g><title>array_true_divide (number.c:826) (4 samples, 1.40%)</title><rect x="61.5385%" y="228" width="1.3986%" height="15" fill="rgb(248,100,22)"/><text x="61.7885%" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.40%)</title><rect x="61.5385%" y="244" width="1.3986%" height="15" fill="rgb(208,67,9)"/><text x="61.7885%" y="254.50"></text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:36) (3 samples, 1.05%)</title><rect x="62.9371%" y="84" width="1.0490%" height="15" fill="rgb(219,133,21)"/><text x="63.1871%" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (3 samples, 1.05%)</title><rect x="62.9371%" y="100" width="1.0490%" height="15" fill="rgb(246,46,29)"/><text x="63.1871%" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:231) (3 samples, 1.05%)</title><rect x="62.9371%" y="116" width="1.0490%" height="15" fill="rgb(246,185,52)"/><text x="63.1871%" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:113) (3 samples, 1.05%)</title><rect x="62.9371%" y="132" width="1.0490%" height="15" fill="rgb(252,136,11)"/><text x="63.1871%" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:77) (3 samples, 1.05%)</title><rect x="62.9371%" y="148" width="1.0490%" height="15" fill="rgb(219,138,53)"/><text x="63.1871%" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:113) (3 samples, 1.05%)</title><rect x="62.9371%" y="164" width="1.0490%" height="15" fill="rgb(211,51,23)"/><text x="63.1871%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="62.9371%" y="180" width="1.0490%" height="15" fill="rgb(247,221,28)"/><text x="63.1871%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="62.9371%" y="196" width="1.0490%" height="15" fill="rgb(251,222,45)"/><text x="63.1871%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="62.9371%" y="212" width="1.0490%" height="15" fill="rgb(217,162,53)"/><text x="63.1871%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="62.9371%" y="228" width="1.0490%" height="15" fill="rgb(229,93,14)"/><text x="63.1871%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="62.9371%" y="244" width="1.0490%" height="15" fill="rgb(209,67,49)"/><text x="63.1871%" y="254.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_whole/session.py:6) (3 samples, 1.05%)</title><rect x="62.9371%" y="260" width="1.0490%" height="15" fill="rgb(213,87,29)"/><text x="63.1871%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="62.9371%" y="276" width="1.0490%" height="15" fill="rgb(205,151,52)"/><text x="63.1871%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="62.9371%" y="292" width="1.0490%" height="15" fill="rgb(253,215,39)"/><text x="63.1871%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="62.9371%" y="308" width="1.0490%" height="15" fill="rgb(221,220,41)"/><text x="63.1871%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="62.9371%" y="324" width="1.0490%" height="15" fill="rgb(218,133,21)"/><text x="63.1871%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="62.9371%" y="340" width="1.0490%" height="15" fill="rgb(221,193,43)"/><text x="63.1871%" y="350.50"></text></g><g><title>&lt;module&gt; (onnxruntime/__init__.py:12) (3 samples, 1.05%)</title><rect x="62.9371%" y="356" width="1.0490%" height="15" fill="rgb(240,128,52)"/><text x="63.1871%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="62.9371%" y="372" width="1.0490%" height="15" fill="rgb(253,114,12)"/><text x="63.1871%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="62.9371%" y="388" width="1.0490%" height="15" fill="rgb(215,223,47)"/><text x="63.1871%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="62.9371%" y="404" width="1.0490%" height="15" fill="rgb(248,225,23)"/><text x="63.1871%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="62.9371%" y="420" width="1.0490%" height="15" fill="rgb(250,108,0)"/><text x="63.1871%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="62.9371%" y="436" width="1.0490%" height="15" fill="rgb(228,208,7)"/><text x="63.1871%" y="446.50"></text></g><g><title>&lt;module&gt; (onnxruntime/capi/_pybind_state.py:11) (3 samples, 1.05%)</title><rect x="62.9371%" y="452" width="1.0490%" height="15" fill="rgb(244,45,10)"/><text x="63.1871%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="62.9371%" y="468" width="1.0490%" height="15" fill="rgb(207,125,25)"/><text x="63.1871%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="62.9371%" y="484" width="1.0490%" height="15" fill="rgb(210,195,18)"/><text x="63.1871%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (3 samples, 1.05%)</title><rect x="62.9371%" y="500" width="1.0490%" height="15" fill="rgb(249,80,12)"/><text x="63.1871%" y="510.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (3 samples, 1.05%)</title><rect x="62.9371%" y="516" width="1.0490%" height="15" fill="rgb(221,65,9)"/><text x="63.1871%" y="526.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (3 samples, 1.05%)</title><rect x="62.9371%" y="532" width="1.0490%" height="15" fill="rgb(235,49,36)"/><text x="63.1871%" y="542.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="62.9371%" y="548" width="1.0490%" height="15" fill="rgb(225,32,20)"/><text x="63.1871%" y="558.50"></text></g><g><title>dlopen (libdl-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="564" width="1.0490%" height="15" fill="rgb(215,141,46)"/><text x="63.1871%" y="574.50"></text></g><g><title>0x7ff4eeda4995 (libdl-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="580" width="1.0490%" height="15" fill="rgb(250,160,47)"/><text x="63.1871%" y="590.50"></text></g><g><title>_dl_catch_error (libc-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="596" width="1.0490%" height="15" fill="rgb(216,222,40)"/><text x="63.1871%" y="606.50"></text></g><g><title>_dl_catch_exception (libc-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="612" width="1.0490%" height="15" fill="rgb(234,217,39)"/><text x="63.1871%" y="622.50"></text></g><g><title>0x7ff4eeda4258 (libdl-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="628" width="1.0490%" height="15" fill="rgb(207,178,40)"/><text x="63.1871%" y="638.50"></text></g><g><title>0x7ff4eedf1d7a (ld-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="644" width="1.0490%" height="15" fill="rgb(221,136,13)"/><text x="63.1871%" y="654.50"></text></g><g><title>_dl_catch_exception (libc-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="660" width="1.0490%" height="15" fill="rgb(249,199,10)"/><text x="63.1871%" y="670.50"></text></g><g><title>0x7ff4eedf2345 (ld-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="676" width="1.0490%" height="15" fill="rgb(249,222,13)"/><text x="63.1871%" y="686.50"></text></g><g><title>0x7ff4eedeafec (ld-2.29.so) (3 samples, 1.05%)</title><rect x="62.9371%" y="692" width="1.0490%" height="15" fill="rgb(244,185,38)"/><text x="63.1871%" y="702.50"></text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (77 samples, 26.92%)</title><rect x="66.4336%" y="324" width="26.9231%" height="15" fill="rgb(236,202,9)"/><text x="66.6836%" y="334.50">onnxruntime::ml::LinearClassifier&lt;float&gt;::C..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 5.59%)</title><rect x="87.7622%" y="340" width="5.5944%" height="15" fill="rgb(250,229,37)"/><text x="88.0122%" y="350.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (90 samples, 31.47%)</title><rect x="66.0839%" y="308" width="31.4685%" height="15" fill="rgb(206,174,23)"/><text x="66.3339%" y="318.50">onnxruntime::SequentialExecutor::Execute (onnxrunti..</text></g><g><title>onnxruntime::ml::Normalizer::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 4.20%)</title><rect x="93.3566%" y="324" width="4.1958%" height="15" fill="rgb(211,33,43)"/><text x="93.6066%" y="334.50">onnxr..</text></g><g><title>onnxruntime::ml::Normalizer::Normalize&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 4.20%)</title><rect x="93.3566%" y="340" width="4.1958%" height="15" fill="rgb(245,58,50)"/><text x="93.6066%" y="350.50">onnxr..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (91 samples, 31.82%)</title><rect x="66.0839%" y="244" width="31.8182%" height="15" fill="rgb(244,68,36)"/><text x="66.3339%" y="254.50">onnxruntime::InferenceSession::Run (onnxruntime/cap..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (91 samples, 31.82%)</title><rect x="66.0839%" y="260" width="31.8182%" height="15" fill="rgb(232,229,15)"/><text x="66.3339%" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/cap..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (91 samples, 31.82%)</title><rect x="66.0839%" y="276" width="31.8182%" height="15" fill="rgb(254,30,23)"/><text x="66.3339%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (91 samples, 31.82%)</title><rect x="66.0839%" y="292" width="31.8182%" height="15" fill="rgb(235,160,14)"/><text x="66.3339%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/c..</text></g><g><title>run (onnxruntime/capi/session.py:142) (95 samples, 33.22%)</title><rect x="65.7343%" y="196" width="33.2168%" height="15" fill="rgb(212,155,44)"/><text x="65.9843%" y="206.50">run (onnxruntime/capi/session.py:142)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (94 samples, 32.87%)</title><rect x="66.0839%" y="212" width="32.8671%" height="15" fill="rgb(226,2,50)"/><text x="66.3339%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (94 samples, 32.87%)</title><rect x="66.0839%" y="228" width="32.8671%" height="15" fill="rgb(234,177,6)"/><text x="66.3339%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (97 samples, 33.92%)</title><rect x="65.3846%" y="164" width="33.9161%" height="15" fill="rgb(217,24,9)"/><text x="65.6346%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (97 samples, 33.92%)</title><rect x="65.3846%" y="180" width="33.9161%" height="15" fill="rgb(220,13,46)"/><text x="65.6346%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>all (286 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(239,221,27)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:68) (106 samples, 37.06%)</title><rect x="62.9371%" y="52" width="37.0629%" height="15" fill="rgb(222,198,25)"/><text x="63.1871%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverlibl..</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:67) (106 samples, 37.06%)</title><rect x="62.9371%" y="68" width="37.0629%" height="15" fill="rgb(211,99,13)"/><text x="63.1871%" y="78.50">profile_ort (bench_LogisticRegression_liblinear_b_cl_solverl..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:37) (103 samples, 36.01%)</title><rect x="63.9860%" y="84" width="36.0140%" height="15" fill="rgb(232,111,31)"/><text x="64.2360%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_b_cl_solv..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_50_12_float_nozipmap.py:31) (103 samples, 36.01%)</title><rect x="63.9860%" y="100" width="36.0140%" height="15" fill="rgb(245,82,37)"/><text x="64.2360%" y="110.50">profile (bench_LogisticRegression_liblinear_b_cl_solverlibl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (101 samples, 35.31%)</title><rect x="64.6853%" y="116" width="35.3147%" height="15" fill="rgb(227,149,46)"/><text x="64.9353%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:1..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (100 samples, 34.97%)</title><rect x="65.0350%" y="132" width="34.9650%" height="15" fill="rgb(218,36,50)"/><text x="65.2850%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (99 samples, 34.62%)</title><rect x="65.3846%" y="148" width="34.6154%" height="15" fill="rgb(226,80,48)"/><text x="65.6346%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g></svg></svg>