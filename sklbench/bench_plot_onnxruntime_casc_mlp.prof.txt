
#########################################

ProfilerCall
------------------------------------------------------
profile 0
N=1
dim=10
fixed_dim=10
lib=skl
method=skl_proba
model_onnx=ir_version: 7\nproducer_name: "skl2onnx"\nproducer_version: "1.7.1"\ndomain: "ai.onnx"\nmodel_version: 0\ndoc_string: ""\ngraph {\n  node {\n    input: "X"\n    output: "cast_input"\n    name: "Cast"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "cast_input"\n    input: "coefficient"\n    output: "mul_result"\n    name: "MatMul"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result"\n    input: "intercepts"\n    output: "add_result"\n    name: "Add"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result"\n    output: "next_activations"\n    name: "Sigmoid"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "next_activations"\n    input: "coefficient1"\n    output: "mul_result1"\n    name: "MatMul1"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result1"\n    input: "intercepts1"\n    output: "add_result1"\n    name: "Add1"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result1"\n    output: "next_activations1"\n    name: "Sigmoid1"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "next_activations1"\n    input: "coefficient2"\n    output: "mul_result2"\n    name: "MatMul2"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result2"\n    input: "intercepts2"\n    output: "add_result2"\n    name: "Add2"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result2"\n    output: "out_activations_result"\n    name: "Sigmoid2"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "unity"\n    input: "out_activations_result"\n    output: "negative_class_proba"\n    name: "Sub"\n    op_type: "Sub"\n    domain: ""\n  }\n  node {\n    input: "negative_class_proba"\n    input: "out_activations_result"\n    output: "probabilities"\n    name: "Concat"\n    op_type: "Concat"\n    attribute {\n      name: "axis"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "probabilities"\n    output: "argmax_output"\n    name: "ArgMax"\n    op_type: "ArgMax"\n    attribute {\n      name: "axis"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "classes"\n    input: "argmax_output"\n    output: "array_feature_extractor_result"\n    name: "ArrayFeatureExtractor"\n    op_type: "ArrayFeatureExtractor"\n    domain: "ai.onnx.ml"\n  }\n  node {\n    input: "array_feature_extractor_result"\n    input: "shape_tensor"\n    output: "reshaped_result"\n    name: "Reshape"\n    op_type: "Reshape"\n    domain: ""\n  }\n  node {\n    input: "reshaped_result"\n    output: "label"\n    name: "Cast1"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 7\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "label"\n    output: "output_label"\n    name: "Cast2"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 7\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "probabilities"\n    output: "output_probability"\n    name: "ZipMap"\n    op_type: "ZipMap"\n    attribute {\n      name: "classlabels_int64s"\n      ints: 0\n      ints: 1\n      type: INTS\n    }\n    domain: "ai.onnx.ml"\n  }\n  name: "ONNX(MLPClassifier)"\n  initializer {\n    dims: 10\n    dims: 10\n    data_type: 1\n    float_data: 0.0050448645\n    float_data: -0.20266785\n    float_data: 0.3791916\n    float_data: 0.021469815\n    float_data: -0.20451954\n    float_data: 0.47379392\n    float_data: 0.2202321\n    float_data: 0.094155505\n    float_data: 0.3110937\n    float_data: 0.42441657\n    float_data: 0.47040892\n    float_data: 0.0855387\n    float_data: -0.14376776\n    float_data: 0.046244312\n    float_data: -0.10157208\n    float_data: 0.42913768\n    float_data: 0.24023758\n    float_data: 0.24170654\n    float_data: 0.23105688\n    float_data: 0.12456752\n    float_data: 0.07507421\n    float_data: -0.31676236\n    float_data: -0.115800835\n    float_data: 0.046048682\n    float_data: -0.15822549\n    float_data: 0.294222\n    float_data: -0.11428474\n    float_data: 0.4580662\n    float_data: 0.032032672\n    float_data: 0.021616021\n    float_data: 0.11595514\n    float_data: -0.3101471\n    float_data: -0.03628572\n    float_data: -0.120770834\n    float_data: 0.16185479\n    float_data: 0.30715907\n    float_data: 0.08402307\n    float_data: 0.30599448\n    float_data: 0.19327429\n    float_data: 0.15520005\n    float_data: 0.31915098\n    float_data: 0.076733984\n    float_data: 0.34663153\n    float_data: -0.041051097\n    float_data: -0.2970498\n    float_data: 0.4075781\n    float_data: 0.37759295\n    float_data: 0.15284939\n    float_data: 0.060108792\n    float_data: 0.12398417\n    float_data: -0.010302911\n    float_data: 0.080308095\n    float_data: 0.07040839\n    float_data: -0.35660926\n    float_data: -0.14256348\n    float_data: 0.4524183\n    float_data: -0.08153816\n    float_data: -0.0030769997\n    float_data: 0.41755742\n    float_data: 0.14818186\n    float_data: 0.47351974\n    float_data: -0.3797369\n    float_data: 0.2958835\n    float_data: -0.3334991\n    float_data: -0.1889789\n    float_data: 0.35311186\n    float_data: 0.46589944\n    float_data: 0.5840175\n    float_data: 0.5386941\n    float_data: 0.19201799\n    float_data: -0.04444818\n    float_data: -0.3758783\n    float_data: 0.11399624\n    float_data: -0.09135107\n    float_data: -0.20460504\n    float_data: 0.27175596\n    float_data: 0.01990368\n    float_data: 0.41475305\n    float_data: 0.29736793\n    float_data: 0.13813354\n    float_data: 0.3534196\n    float_data: 0.111768775\n    float_data: -0.21571107\n    float_data: -0.09816208\n    float_data: -0.2369372\n    float_data: 0.30731398\n    float_data: -0.16087174\n    float_data: -0.06848626\n    float_data: 0.44063398\n    float_data: 0.20221525\n    float_data: 0.08593596\n    float_data: -0.19539423\n    float_data: 0.06729345\n    float_data: 0.10137361\n    float_data: 0.016279435\n    float_data: 0.06939993\n    float_data: 0.42279735\n    float_data: 0.45779297\n    float_data: -0.007118651\n    float_data: 0.32412478\n    name: "coefficient"\n  }\n  initializer {\n    dims: 1\n    dims: 10\n    data_type: 1\n    float_data: -0.06107752\n    float_data: -0.28641406\n    float_data: 0.2305162\n    float_data: -0.1355622\n    float_data: 0.09960766\n    float_data: 0.080031306\n    float_data: 0.102849305\n    float_data: 0.06432468\n    float_data: 0.31506884\n    float_data: 0.30412462\n    name: "intercepts"\n  }\n  initializer {\n    dims: 10\n    dims: 2\n    data_type: 1\n    float_data: -0.4899598\n    float_data: 0.37070277\n    float_data: 0.04164816\n    float_data: -0.032301035\n    float_data: -0.17993663\n    float_data: 0.053611264\n    float_data: 0.22202337\n    float_data: 0.028976453\n    float_data: 0.12411075\n    float_data: 0.21836138\n    float_data: -0.25711527\n    float_data: 0.42222103\n    float_data: -0.5472569\n    float_data: 0.4414536\n    float_data: -0.058340732\n    float_data: 0.4249136\n    float_data: 0.07452525\n    float_data: 0.52580774\n    float_data: -0.28979316\n    float_data: 0.367372\n    name: "coefficient1"\n  }\n  initializer {\n    dims: 1\n    dims: 2\n    data_type: 1\n    float_data: -0.284283\n    float_data: 0.17802\n    name: "intercepts1"\n  }\n  initializer {\n    dims: 2\n    dims: 1\n    data_type: 1\n    float_data: 0.39459\n    float_data: -0.6402052\n    name: "coefficient2"\n  }\n  initializer {\n    dims: 1\n    dims: 1\n    data_type: 1\n    float_data: 0.49542958\n    name: "intercepts2"\n  }\n  initializer {\n    data_type: 1\n    float_data: 1.0\n    name: "unity"\n  }\n  initializer {\n    dims: 2\n    data_type: 6\n    int32_data: 0\n    int32_data: 1\n    name: "classes"\n  }\n  initializer {\n    dims: 1\n    data_type: 7\n    int64_data: -1\n    name: "shape_tensor"\n  }\n  input {\n    name: "X"\n    type {\n      tensor_type {\n        elem_type: 1\n        shape {\n          dim {\n          }\n          dim {\n            dim_value: 10\n          }\n        }\n      }\n    }\n  }\n  output {\n    name: "output_label"\n    type {\n      tensor_type {\n        elem_type: 7\n        shape {\n          dim {\n          }\n        }\n      }\n    }\n  }\n  output {\n    name: "output_probability"\n    type {\n      sequence_type {\n        elem_type {\n          map_type {\n            key_type: 7\n            value_type {\n              tensor_type {\n                elem_type: 1\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nopset_import {\n  domain: ""\n  version: 13\n}\nopset_import {\n  domain: "ai.onnx.ml"\n  version: 1\n}\n
number=20
repeat=25
skl_model=MLPClassifier(activation='logistic', hidden_layer_sizes=(10, 2))
--
         165001 function calls in 0.150 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1000    0.001    0.000    0.150    0.000 C:\xadupre\venv\bench\lib\site-packages\pymlbenchmark\benchmark\benchmark_perf.py:235(<lambda>)
     1000    0.003    0.000    0.149    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:1020(predict)
     6000    0.008    0.000    0.099    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\utils\validation.py:59(inner_f)
     1000    0.015    0.000    0.087    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:118(_forward_pass_fast)
     1000    0.003    0.000    0.046    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\base.py:369(_validate_data)
     1000    0.011    0.000    0.040    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\utils\validation.py:404(check_array)
     2000    0.004    0.000    0.037    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\utils\validation.py:977(check_is_fitted)
     2000    0.015    0.000    0.029    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\utils\validation.py:1037(<listcomp>)
     1000    0.003    0.000    0.029    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\preprocessing\_label.py:355(inverse_transform)
     1000    0.010    0.000    0.015    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\preprocessing\_label.py:616(_inverse_binarize_thresholding)
     3000    0.012    0.000    0.014    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\utils\extmath.py:118(safe_sparse_dot)
    46000    0.011    0.000    0.011    0.000 {method 'endswith' of 'str' objects}
     1000    0.004    0.000    0.009    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\utils\validation.py:187(_num_samples)
     3000    0.008    0.000    0.008    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\neural_network\_base.py:25(inplace_logistic)
     1000    0.004    0.000    0.007    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\utils\validation.py:83(_assert_all_finite)
    14000    0.004    0.000    0.006    0.000 {built-in method builtins.isinstance}
     1000    0.001    0.000    0.005    0.000 c:\Python387_x64\lib\warnings.py:165(simplefilter)
     7000    0.003    0.000    0.004    0.000 C:\xadupre\venv\bench\lib\site-packages\scipy\sparse\base.py:1205(isspmatrix)
     1000    0.002    0.000    0.004    0.000 c:\Python387_x64\lib\warnings.py:181(_add_filter)
    15000    0.003    0.000    0.003    0.000 {method 'startswith' of 'str' objects}
     3000    0.003    0.000    0.003    0.000 {built-in method numpy.array}
    11000    0.003    0.000    0.003    0.000 {built-in method builtins.hasattr}
     1000    0.000    0.000    0.003    0.000 c:\Python387_x64\lib\abc.py:96(__instancecheck__)
     1000    0.001    0.000    0.002    0.000 {built-in method _abc._abc_instancecheck}
    14000    0.002    0.000    0.002    0.000 {built-in method builtins.len}
     1000    0.002    0.000    0.002    0.000 c:\Python387_x64\lib\warnings.py:458(__enter__)
     2000    0.001    0.000    0.002    0.000 C:\xadupre\venv\bench\lib\site-packages\numpy\core\_asarray.py:14(asarray)
     2000    0.001    0.000    0.002    0.000 c:\Python387_x64\lib\inspect.py:72(isclass)
     1000    0.001    0.000    0.001    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\utils\validation.py:397(_ensure_no_complex_data)
     1000    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:389(parent)
     1000    0.001    0.000    0.001    0.000 c:\Python387_x64\lib\warnings.py:477(__exit__)
     1000    0.000    0.000    0.001    0.000 c:\Python387_x64\lib\abc.py:100(__subclasscheck__)
     1000    0.001    0.000    0.001    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\_config.py:14(get_config)
     1000    0.001    0.000    0.001    0.000 c:\Python387_x64\lib\warnings.py:437(__init__)
     1000    0.001    0.000    0.001    0.000 {method 'remove' of 'list' objects}
     1000    0.001    0.000    0.001    0.000 C:\xadupre\venv\bench\lib\site-packages\sklearn\base.py:335(_check_n_features)
     2000    0.001    0.000    0.001    0.000 {method 'ravel' of 'numpy.ndarray' objects}
     1000    0.001    0.000    0.001    0.000 {built-in method _abc._abc_subclasscheck}
     2000    0.001    0.000    0.001    0.000 {built-in method builtins.vars}
     3000    0.001    0.000    0.001    0.000 {built-in method _warnings._filters_mutated}
     1000    0.001    0.000    0.001    0.000 {method 'rpartition' of 'str' objects}
     1000    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
     1000    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
     1000    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
     1000    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}




#########################################

ProfilerCall
------------------------------------------------------
profile 0
N=1
dim=10
fixed_dim=10
lib=ort
method=onnx_proba
model_onnx=ir_version: 7\nproducer_name: "skl2onnx"\nproducer_version: "1.7.1"\ndomain: "ai.onnx"\nmodel_version: 0\ndoc_string: ""\ngraph {\n  node {\n    input: "X"\n    output: "cast_input"\n    name: "Cast"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "cast_input"\n    input: "coefficient"\n    output: "mul_result"\n    name: "MatMul"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result"\n    input: "intercepts"\n    output: "add_result"\n    name: "Add"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result"\n    output: "next_activations"\n    name: "Sigmoid"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "next_activations"\n    input: "coefficient1"\n    output: "mul_result1"\n    name: "MatMul1"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result1"\n    input: "intercepts1"\n    output: "add_result1"\n    name: "Add1"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result1"\n    output: "next_activations1"\n    name: "Sigmoid1"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "next_activations1"\n    input: "coefficient2"\n    output: "mul_result2"\n    name: "MatMul2"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result2"\n    input: "intercepts2"\n    output: "add_result2"\n    name: "Add2"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result2"\n    output: "out_activations_result"\n    name: "Sigmoid2"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "unity"\n    input: "out_activations_result"\n    output: "negative_class_proba"\n    name: "Sub"\n    op_type: "Sub"\n    domain: ""\n  }\n  node {\n    input: "negative_class_proba"\n    input: "out_activations_result"\n    output: "probabilities"\n    name: "Concat"\n    op_type: "Concat"\n    attribute {\n      name: "axis"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "probabilities"\n    output: "argmax_output"\n    name: "ArgMax"\n    op_type: "ArgMax"\n    attribute {\n      name: "axis"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "classes"\n    input: "argmax_output"\n    output: "array_feature_extractor_result"\n    name: "ArrayFeatureExtractor"\n    op_type: "ArrayFeatureExtractor"\n    domain: "ai.onnx.ml"\n  }\n  node {\n    input: "array_feature_extractor_result"\n    input: "shape_tensor"\n    output: "reshaped_result"\n    name: "Reshape"\n    op_type: "Reshape"\n    domain: ""\n  }\n  node {\n    input: "reshaped_result"\n    output: "label"\n    name: "Cast1"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 7\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "label"\n    output: "output_label"\n    name: "Cast2"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 7\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "probabilities"\n    output: "output_probability"\n    name: "ZipMap"\n    op_type: "ZipMap"\n    attribute {\n      name: "classlabels_int64s"\n      ints: 0\n      ints: 1\n      type: INTS\n    }\n    domain: "ai.onnx.ml"\n  }\n  name: "ONNX(MLPClassifier)"\n  initializer {\n    dims: 10\n    dims: 10\n    data_type: 1\n    float_data: 0.0050448645\n    float_data: -0.20266785\n    float_data: 0.3791916\n    float_data: 0.021469815\n    float_data: -0.20451954\n    float_data: 0.47379392\n    float_data: 0.2202321\n    float_data: 0.094155505\n    float_data: 0.3110937\n    float_data: 0.42441657\n    float_data: 0.47040892\n    float_data: 0.0855387\n    float_data: -0.14376776\n    float_data: 0.046244312\n    float_data: -0.10157208\n    float_data: 0.42913768\n    float_data: 0.24023758\n    float_data: 0.24170654\n    float_data: 0.23105688\n    float_data: 0.12456752\n    float_data: 0.07507421\n    float_data: -0.31676236\n    float_data: -0.115800835\n    float_data: 0.046048682\n    float_data: -0.15822549\n    float_data: 0.294222\n    float_data: -0.11428474\n    float_data: 0.4580662\n    float_data: 0.032032672\n    float_data: 0.021616021\n    float_data: 0.11595514\n    float_data: -0.3101471\n    float_data: -0.03628572\n    float_data: -0.120770834\n    float_data: 0.16185479\n    float_data: 0.30715907\n    float_data: 0.08402307\n    float_data: 0.30599448\n    float_data: 0.19327429\n    float_data: 0.15520005\n    float_data: 0.31915098\n    float_data: 0.076733984\n    float_data: 0.34663153\n    float_data: -0.041051097\n    float_data: -0.2970498\n    float_data: 0.4075781\n    float_data: 0.37759295\n    float_data: 0.15284939\n    float_data: 0.060108792\n    float_data: 0.12398417\n    float_data: -0.010302911\n    float_data: 0.080308095\n    float_data: 0.07040839\n    float_data: -0.35660926\n    float_data: -0.14256348\n    float_data: 0.4524183\n    float_data: -0.08153816\n    float_data: -0.0030769997\n    float_data: 0.41755742\n    float_data: 0.14818186\n    float_data: 0.47351974\n    float_data: -0.3797369\n    float_data: 0.2958835\n    float_data: -0.3334991\n    float_data: -0.1889789\n    float_data: 0.35311186\n    float_data: 0.46589944\n    float_data: 0.5840175\n    float_data: 0.5386941\n    float_data: 0.19201799\n    float_data: -0.04444818\n    float_data: -0.3758783\n    float_data: 0.11399624\n    float_data: -0.09135107\n    float_data: -0.20460504\n    float_data: 0.27175596\n    float_data: 0.01990368\n    float_data: 0.41475305\n    float_data: 0.29736793\n    float_data: 0.13813354\n    float_data: 0.3534196\n    float_data: 0.111768775\n    float_data: -0.21571107\n    float_data: -0.09816208\n    float_data: -0.2369372\n    float_data: 0.30731398\n    float_data: -0.16087174\n    float_data: -0.06848626\n    float_data: 0.44063398\n    float_data: 0.20221525\n    float_data: 0.08593596\n    float_data: -0.19539423\n    float_data: 0.06729345\n    float_data: 0.10137361\n    float_data: 0.016279435\n    float_data: 0.06939993\n    float_data: 0.42279735\n    float_data: 0.45779297\n    float_data: -0.007118651\n    float_data: 0.32412478\n    name: "coefficient"\n  }\n  initializer {\n    dims: 1\n    dims: 10\n    data_type: 1\n    float_data: -0.06107752\n    float_data: -0.28641406\n    float_data: 0.2305162\n    float_data: -0.1355622\n    float_data: 0.09960766\n    float_data: 0.080031306\n    float_data: 0.102849305\n    float_data: 0.06432468\n    float_data: 0.31506884\n    float_data: 0.30412462\n    name: "intercepts"\n  }\n  initializer {\n    dims: 10\n    dims: 2\n    data_type: 1\n    float_data: -0.4899598\n    float_data: 0.37070277\n    float_data: 0.04164816\n    float_data: -0.032301035\n    float_data: -0.17993663\n    float_data: 0.053611264\n    float_data: 0.22202337\n    float_data: 0.028976453\n    float_data: 0.12411075\n    float_data: 0.21836138\n    float_data: -0.25711527\n    float_data: 0.42222103\n    float_data: -0.5472569\n    float_data: 0.4414536\n    float_data: -0.058340732\n    float_data: 0.4249136\n    float_data: 0.07452525\n    float_data: 0.52580774\n    float_data: -0.28979316\n    float_data: 0.367372\n    name: "coefficient1"\n  }\n  initializer {\n    dims: 1\n    dims: 2\n    data_type: 1\n    float_data: -0.284283\n    float_data: 0.17802\n    name: "intercepts1"\n  }\n  initializer {\n    dims: 2\n    dims: 1\n    data_type: 1\n    float_data: 0.39459\n    float_data: -0.6402052\n    name: "coefficient2"\n  }\n  initializer {\n    dims: 1\n    dims: 1\n    data_type: 1\n    float_data: 0.49542958\n    name: "intercepts2"\n  }\n  initializer {\n    data_type: 1\n    float_data: 1.0\n    name: "unity"\n  }\n  initializer {\n    dims: 2\n    data_type: 6\n    int32_data: 0\n    int32_data: 1\n    name: "classes"\n  }\n  initializer {\n    dims: 1\n    data_type: 7\n    int64_data: -1\n    name: "shape_tensor"\n  }\n  input {\n    name: "X"\n    type {\n      tensor_type {\n        elem_type: 1\n        shape {\n          dim {\n          }\n          dim {\n            dim_value: 10\n          }\n        }\n      }\n    }\n  }\n  output {\n    name: "output_label"\n    type {\n      tensor_type {\n        elem_type: 7\n        shape {\n          dim {\n          }\n        }\n      }\n    }\n  }\n  output {\n    name: "output_probability"\n    type {\n      sequence_type {\n        elem_type {\n          map_type {\n            key_type: 7\n            value_type {\n              tensor_type {\n                elem_type: 1\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nopset_import {\n  domain: ""\n  version: 13\n}\nopset_import {\n  domain: "ai.onnx.ml"\n  version: 1\n}\n
number=20
repeat=25
skl_model=MLPClassifier(activation='logistic', hidden_layer_sizes=(10, 2))
--
         7001 function calls in 0.033 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1000    0.000    0.000    0.033    0.000 C:\xadupre\venv\bench\lib\site-packages\pymlbenchmark\benchmark\benchmark_perf.py:235(<lambda>)
     1000    0.001    0.000    0.033    0.000 C:\xadupre\github\_benchmarks\sklbench\\../onnx/bench_plot_onnxruntime_casc_mlp.py:111(<lambda>)
     1000    0.028    0.000    0.030    0.000 C:\xadupre\venv\bench\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py:104(run)
     1000    0.002    0.000    0.002    0.000 C:\xadupre\venv\bench\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py:122(<listcomp>)
     1000    0.001    0.000    0.001    0.000 {method 'astype' of 'numpy.ndarray' objects}
     2000    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}




#########################################

ProfilerCall
------------------------------------------------------
profile 0
N=10
dim=10
fixed_dim=10
lib=skl
method=skl_proba
model_onnx=ir_version: 7\nproducer_name: "skl2onnx"\nproducer_version: "1.7.1"\ndomain: "ai.onnx"\nmodel_version: 0\ndoc_string: ""\ngraph {\n  node {\n    input: "X"\n    output: "cast_input"\n    name: "Cast"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "cast_input"\n    input: "coefficient"\n    output: "mul_result"\n    name: "MatMul"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result"\n    input: "intercepts"\n    output: "add_result"\n    name: "Add"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result"\n    output: "next_activations"\n    name: "Sigmoid"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "next_activations"\n    input: "coefficient1"\n    output: "mul_result1"\n    name: "MatMul1"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result1"\n    input: "intercepts1"\n    output: "add_result1"\n    name: "Add1"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result1"\n    output: "next_activations1"\n    name: "Sigmoid1"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "next_activations1"\n    input: "coefficient2"\n    output: "mul_result2"\n    name: "MatMul2"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result2"\n    input: "intercepts2"\n    output: "add_result2"\n    name: "Add2"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result2"\n    output: "out_activations_result"\n    name: "Sigmoid2"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "unity"\n    input: "out_activations_result"\n    output: "negative_class_proba"\n    name: "Sub"\n    op_type: "Sub"\n    domain: ""\n  }\n  node {\n    input: "negative_class_proba"\n    input: "out_activations_result"\n    output: "probabilities"\n    name: "Concat"\n    op_type: "Concat"\n    attribute {\n      name: "axis"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "probabilities"\n    output: "argmax_output"\n    name: "ArgMax"\n    op_type: "ArgMax"\n    attribute {\n      name: "axis"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "classes"\n    input: "argmax_output"\n    output: "array_feature_extractor_result"\n    name: "ArrayFeatureExtractor"\n    op_type: "ArrayFeatureExtractor"\n    domain: "ai.onnx.ml"\n  }\n  node {\n    input: "array_feature_extractor_result"\n    input: "shape_tensor"\n    output: "reshaped_result"\n    name: "Reshape"\n    op_type: "Reshape"\n    domain: ""\n  }\n  node {\n    input: "reshaped_result"\n    output: "label"\n    name: "Cast1"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 7\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "label"\n    output: "output_label"\n    name: "Cast2"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 7\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "probabilities"\n    output: "output_probability"\n    name: "ZipMap"\n    op_type: "ZipMap"\n    attribute {\n      name: "classlabels_int64s"\n      ints: 0\n      ints: 1\n      type: INTS\n    }\n    domain: "ai.onnx.ml"\n  }\n  name: "ONNX(MLPClassifier)"\n  initializer {\n    dims: 10\n    dims: 10\n    data_type: 1\n    float_data: 0.0050448645\n    float_data: -0.20266785\n    float_data: 0.3791916\n    float_data: 0.021469815\n    float_data: -0.20451954\n    float_data: 0.47379392\n    float_data: 0.2202321\n    float_data: 0.094155505\n    float_data: 0.3110937\n    float_data: 0.42441657\n    float_data: 0.47040892\n    float_data: 0.0855387\n    float_data: -0.14376776\n    float_data: 0.046244312\n    float_data: -0.10157208\n    float_data: 0.42913768\n    float_data: 0.24023758\n    float_data: 0.24170654\n    float_data: 0.23105688\n    float_data: 0.12456752\n    float_data: 0.07507421\n    float_data: -0.31676236\n    float_data: -0.115800835\n    float_data: 0.046048682\n    float_data: -0.15822549\n    float_data: 0.294222\n    float_data: -0.11428474\n    float_data: 0.4580662\n    float_data: 0.032032672\n    float_data: 0.021616021\n    float_data: 0.11595514\n    float_data: -0.3101471\n    float_data: -0.03628572\n    float_data: -0.120770834\n    float_data: 0.16185479\n    float_data: 0.30715907\n    float_data: 0.08402307\n    float_data: 0.30599448\n    float_data: 0.19327429\n    float_data: 0.15520005\n    float_data: 0.31915098\n    float_data: 0.076733984\n    float_data: 0.34663153\n    float_data: -0.041051097\n    float_data: -0.2970498\n    float_data: 0.4075781\n    float_data: 0.37759295\n    float_data: 0.15284939\n    float_data: 0.060108792\n    float_data: 0.12398417\n    float_data: -0.010302911\n    float_data: 0.080308095\n    float_data: 0.07040839\n    float_data: -0.35660926\n    float_data: -0.14256348\n    float_data: 0.4524183\n    float_data: -0.08153816\n    float_data: -0.0030769997\n    float_data: 0.41755742\n    float_data: 0.14818186\n    float_data: 0.47351974\n    float_data: -0.3797369\n    float_data: 0.2958835\n    float_data: -0.3334991\n    float_data: -0.1889789\n    float_data: 0.35311186\n    float_data: 0.46589944\n    float_data: 0.5840175\n    float_data: 0.5386941\n    float_data: 0.19201799\n    float_data: -0.04444818\n    float_data: -0.3758783\n    float_data: 0.11399624\n    float_data: -0.09135107\n    float_data: -0.20460504\n    float_data: 0.27175596\n    float_data: 0.01990368\n    float_data: 0.41475305\n    float_data: 0.29736793\n    float_data: 0.13813354\n    float_data: 0.3534196\n    float_data: 0.111768775\n    float_data: -0.21571107\n    float_data: -0.09816208\n    float_data: -0.2369372\n    float_data: 0.30731398\n    float_data: -0.16087174\n    float_data: -0.06848626\n    float_data: 0.44063398\n    float_data: 0.20221525\n    float_data: 0.08593596\n    float_data: -0.19539423\n    float_data: 0.06729345\n    float_data: 0.10137361\n    float_data: 0.016279435\n    float_data: 0.06939993\n    float_data: 0.42279735\n    float_data: 0.45779297\n    float_data: -0.007118651\n    float_data: 0.32412478\n    name: "coefficient"\n  }\n  initializer {\n    dims: 1\n    dims: 10\n    data_type: 1\n    float_data: -0.06107752\n    float_data: -0.28641406\n    float_data: 0.2305162\n    float_data: -0.1355622\n    float_data: 0.09960766\n    float_data: 0.080031306\n    float_data: 0.102849305\n    float_data: 0.06432468\n    float_data: 0.31506884\n    float_data: 0.30412462\n    name: "intercepts"\n  }\n  initializer {\n    dims: 10\n    dims: 2\n    data_type: 1\n    float_data: -0.4899598\n    float_data: 0.37070277\n    float_data: 0.04164816\n    float_data: -0.032301035\n    float_data: -0.17993663\n    float_data: 0.053611264\n    float_data: 0.22202337\n    float_data: 0.028976453\n    float_data: 0.12411075\n    float_data: 0.21836138\n    float_data: -0.25711527\n    float_data: 0.42222103\n    float_data: -0.5472569\n    float_data: 0.4414536\n    float_data: -0.058340732\n    float_data: 0.4249136\n    float_data: 0.07452525\n    float_data: 0.52580774\n    float_data: -0.28979316\n    float_data: 0.367372\n    name: "coefficient1"\n  }\n  initializer {\n    dims: 1\n    dims: 2\n    data_type: 1\n    float_data: -0.284283\n    float_data: 0.17802\n    name: "intercepts1"\n  }\n  initializer {\n    dims: 2\n    dims: 1\n    data_type: 1\n    float_data: 0.39459\n    float_data: -0.6402052\n    name: "coefficient2"\n  }\n  initializer {\n    dims: 1\n    dims: 1\n    data_type: 1\n    float_data: 0.49542958\n    name: "intercepts2"\n  }\n  initializer {\n    data_type: 1\n    float_data: 1.0\n    name: "unity"\n  }\n  initializer {\n    dims: 2\n    data_type: 6\n    int32_data: 0\n    int32_data: 1\n    name: "classes"\n  }\n  initializer {\n    dims: 1\n    data_type: 7\n    int64_data: -1\n    name: "shape_tensor"\n  }\n  input {\n    name: "X"\n    type {\n      tensor_type {\n        elem_type: 1\n        shape {\n          dim {\n          }\n          dim {\n            dim_value: 10\n          }\n        }\n      }\n    }\n  }\n  output {\n    name: "output_label"\n    type {\n      tensor_type {\n        elem_type: 7\n        shape {\n          dim {\n          }\n        }\n      }\n    }\n  }\n  output {\n    name: "output_probability"\n    type {\n      sequence_type {\n        elem_type {\n          map_type {\n            key_type: 7\n            value_type {\n              tensor_type {\n                elem_type: 1\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nopset_import {\n  domain: ""\n  version: 13\n}\nopset_import {\n  domain: "ai.onnx.ml"\n  version: 1\n}\n
number=20
repeat=25
skl_model=MLPClassifier(activation='logistic', hidden_layer_sizes=(10, 2))
--

  _     ._   __/__   _ _  _  _ _/_   Recorded: 17:37:05  Samples:  822
 /_//_/// /_\ / //_// / //_'/ //     Duration: 0.083     CPU time: 0.094
/   _/                      v3.3.0

Program: C:\xadupre\github\_benchmarks\sklbench\\../onnx/bench_plot_onnxruntime_casc_mlp.py --quiet

0.083 profile  pymlbenchmark\benchmark\profiler_class.py:65
`- 0.083 <lambda>  pymlbenchmark\benchmark\benchmark_perf.py:235
      [132 frames hidden]  pymlbenchmark, sklearn, warnings, ..,...



#########################################

ProfilerCall
------------------------------------------------------
profile 0
N=10
dim=10
fixed_dim=10
lib=ort
method=onnx_proba
model_onnx=ir_version: 7\nproducer_name: "skl2onnx"\nproducer_version: "1.7.1"\ndomain: "ai.onnx"\nmodel_version: 0\ndoc_string: ""\ngraph {\n  node {\n    input: "X"\n    output: "cast_input"\n    name: "Cast"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "cast_input"\n    input: "coefficient"\n    output: "mul_result"\n    name: "MatMul"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result"\n    input: "intercepts"\n    output: "add_result"\n    name: "Add"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result"\n    output: "next_activations"\n    name: "Sigmoid"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "next_activations"\n    input: "coefficient1"\n    output: "mul_result1"\n    name: "MatMul1"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result1"\n    input: "intercepts1"\n    output: "add_result1"\n    name: "Add1"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result1"\n    output: "next_activations1"\n    name: "Sigmoid1"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "next_activations1"\n    input: "coefficient2"\n    output: "mul_result2"\n    name: "MatMul2"\n    op_type: "MatMul"\n    domain: ""\n  }\n  node {\n    input: "mul_result2"\n    input: "intercepts2"\n    output: "add_result2"\n    name: "Add2"\n    op_type: "Add"\n    domain: ""\n  }\n  node {\n    input: "add_result2"\n    output: "out_activations_result"\n    name: "Sigmoid2"\n    op_type: "Sigmoid"\n    domain: ""\n  }\n  node {\n    input: "unity"\n    input: "out_activations_result"\n    output: "negative_class_proba"\n    name: "Sub"\n    op_type: "Sub"\n    domain: ""\n  }\n  node {\n    input: "negative_class_proba"\n    input: "out_activations_result"\n    output: "probabilities"\n    name: "Concat"\n    op_type: "Concat"\n    attribute {\n      name: "axis"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "probabilities"\n    output: "argmax_output"\n    name: "ArgMax"\n    op_type: "ArgMax"\n    attribute {\n      name: "axis"\n      i: 1\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "classes"\n    input: "argmax_output"\n    output: "array_feature_extractor_result"\n    name: "ArrayFeatureExtractor"\n    op_type: "ArrayFeatureExtractor"\n    domain: "ai.onnx.ml"\n  }\n  node {\n    input: "array_feature_extractor_result"\n    input: "shape_tensor"\n    output: "reshaped_result"\n    name: "Reshape"\n    op_type: "Reshape"\n    domain: ""\n  }\n  node {\n    input: "reshaped_result"\n    output: "label"\n    name: "Cast1"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 7\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "label"\n    output: "output_label"\n    name: "Cast2"\n    op_type: "Cast"\n    attribute {\n      name: "to"\n      i: 7\n      type: INT\n    }\n    domain: ""\n  }\n  node {\n    input: "probabilities"\n    output: "output_probability"\n    name: "ZipMap"\n    op_type: "ZipMap"\n    attribute {\n      name: "classlabels_int64s"\n      ints: 0\n      ints: 1\n      type: INTS\n    }\n    domain: "ai.onnx.ml"\n  }\n  name: "ONNX(MLPClassifier)"\n  initializer {\n    dims: 10\n    dims: 10\n    data_type: 1\n    float_data: 0.0050448645\n    float_data: -0.20266785\n    float_data: 0.3791916\n    float_data: 0.021469815\n    float_data: -0.20451954\n    float_data: 0.47379392\n    float_data: 0.2202321\n    float_data: 0.094155505\n    float_data: 0.3110937\n    float_data: 0.42441657\n    float_data: 0.47040892\n    float_data: 0.0855387\n    float_data: -0.14376776\n    float_data: 0.046244312\n    float_data: -0.10157208\n    float_data: 0.42913768\n    float_data: 0.24023758\n    float_data: 0.24170654\n    float_data: 0.23105688\n    float_data: 0.12456752\n    float_data: 0.07507421\n    float_data: -0.31676236\n    float_data: -0.115800835\n    float_data: 0.046048682\n    float_data: -0.15822549\n    float_data: 0.294222\n    float_data: -0.11428474\n    float_data: 0.4580662\n    float_data: 0.032032672\n    float_data: 0.021616021\n    float_data: 0.11595514\n    float_data: -0.3101471\n    float_data: -0.03628572\n    float_data: -0.120770834\n    float_data: 0.16185479\n    float_data: 0.30715907\n    float_data: 0.08402307\n    float_data: 0.30599448\n    float_data: 0.19327429\n    float_data: 0.15520005\n    float_data: 0.31915098\n    float_data: 0.076733984\n    float_data: 0.34663153\n    float_data: -0.041051097\n    float_data: -0.2970498\n    float_data: 0.4075781\n    float_data: 0.37759295\n    float_data: 0.15284939\n    float_data: 0.060108792\n    float_data: 0.12398417\n    float_data: -0.010302911\n    float_data: 0.080308095\n    float_data: 0.07040839\n    float_data: -0.35660926\n    float_data: -0.14256348\n    float_data: 0.4524183\n    float_data: -0.08153816\n    float_data: -0.0030769997\n    float_data: 0.41755742\n    float_data: 0.14818186\n    float_data: 0.47351974\n    float_data: -0.3797369\n    float_data: 0.2958835\n    float_data: -0.3334991\n    float_data: -0.1889789\n    float_data: 0.35311186\n    float_data: 0.46589944\n    float_data: 0.5840175\n    float_data: 0.5386941\n    float_data: 0.19201799\n    float_data: -0.04444818\n    float_data: -0.3758783\n    float_data: 0.11399624\n    float_data: -0.09135107\n    float_data: -0.20460504\n    float_data: 0.27175596\n    float_data: 0.01990368\n    float_data: 0.41475305\n    float_data: 0.29736793\n    float_data: 0.13813354\n    float_data: 0.3534196\n    float_data: 0.111768775\n    float_data: -0.21571107\n    float_data: -0.09816208\n    float_data: -0.2369372\n    float_data: 0.30731398\n    float_data: -0.16087174\n    float_data: -0.06848626\n    float_data: 0.44063398\n    float_data: 0.20221525\n    float_data: 0.08593596\n    float_data: -0.19539423\n    float_data: 0.06729345\n    float_data: 0.10137361\n    float_data: 0.016279435\n    float_data: 0.06939993\n    float_data: 0.42279735\n    float_data: 0.45779297\n    float_data: -0.007118651\n    float_data: 0.32412478\n    name: "coefficient"\n  }\n  initializer {\n    dims: 1\n    dims: 10\n    data_type: 1\n    float_data: -0.06107752\n    float_data: -0.28641406\n    float_data: 0.2305162\n    float_data: -0.1355622\n    float_data: 0.09960766\n    float_data: 0.080031306\n    float_data: 0.102849305\n    float_data: 0.06432468\n    float_data: 0.31506884\n    float_data: 0.30412462\n    name: "intercepts"\n  }\n  initializer {\n    dims: 10\n    dims: 2\n    data_type: 1\n    float_data: -0.4899598\n    float_data: 0.37070277\n    float_data: 0.04164816\n    float_data: -0.032301035\n    float_data: -0.17993663\n    float_data: 0.053611264\n    float_data: 0.22202337\n    float_data: 0.028976453\n    float_data: 0.12411075\n    float_data: 0.21836138\n    float_data: -0.25711527\n    float_data: 0.42222103\n    float_data: -0.5472569\n    float_data: 0.4414536\n    float_data: -0.058340732\n    float_data: 0.4249136\n    float_data: 0.07452525\n    float_data: 0.52580774\n    float_data: -0.28979316\n    float_data: 0.367372\n    name: "coefficient1"\n  }\n  initializer {\n    dims: 1\n    dims: 2\n    data_type: 1\n    float_data: -0.284283\n    float_data: 0.17802\n    name: "intercepts1"\n  }\n  initializer {\n    dims: 2\n    dims: 1\n    data_type: 1\n    float_data: 0.39459\n    float_data: -0.6402052\n    name: "coefficient2"\n  }\n  initializer {\n    dims: 1\n    dims: 1\n    data_type: 1\n    float_data: 0.49542958\n    name: "intercepts2"\n  }\n  initializer {\n    data_type: 1\n    float_data: 1.0\n    name: "unity"\n  }\n  initializer {\n    dims: 2\n    data_type: 6\n    int32_data: 0\n    int32_data: 1\n    name: "classes"\n  }\n  initializer {\n    dims: 1\n    data_type: 7\n    int64_data: -1\n    name: "shape_tensor"\n  }\n  input {\n    name: "X"\n    type {\n      tensor_type {\n        elem_type: 1\n        shape {\n          dim {\n          }\n          dim {\n            dim_value: 10\n          }\n        }\n      }\n    }\n  }\n  output {\n    name: "output_label"\n    type {\n      tensor_type {\n        elem_type: 7\n        shape {\n          dim {\n          }\n        }\n      }\n    }\n  }\n  output {\n    name: "output_probability"\n    type {\n      sequence_type {\n        elem_type {\n          map_type {\n            key_type: 7\n            value_type {\n              tensor_type {\n                elem_type: 1\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nopset_import {\n  domain: ""\n  version: 13\n}\nopset_import {\n  domain: "ai.onnx.ml"\n  version: 1\n}\n
number=20
repeat=25
skl_model=MLPClassifier(activation='logistic', hidden_layer_sizes=(10, 2))
--

  _     ._   __/__   _ _  _  _ _/_   Recorded: 17:37:05  Samples:  342
 /_//_/// /_\ / //_// / //_'/ //     Duration: 0.042     CPU time: 0.031
/   _/                      v3.3.0

Program: C:\xadupre\github\_benchmarks\sklbench\\../onnx/bench_plot_onnxruntime_casc_mlp.py --quiet

0.042 profile  pymlbenchmark\benchmark\profiler_class.py:65
`- 0.042 <lambda>  pymlbenchmark\benchmark\benchmark_perf.py:235
   `- 0.042 <lambda>  bench_plot_onnxruntime_casc_mlp.py:111
      `- 0.041 run  onnxruntime\capi\onnxruntime_inference_collection.py:104
            [4 frames hidden]  onnxruntime
               0.041 [self]  


